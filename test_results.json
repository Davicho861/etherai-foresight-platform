
> praevisio-server@0.0.1 test
> jest --json

[mock-server] Mock server listening on http://localhost:45111
[mock-server] GDELT mock listening on port 4020
[mock-server] Mock server listening on http://localhost:45222
{"numFailedTestSuites":55,"numFailedTests":131,"numPassedTestSuites":44,"numPassedTests":358,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":3,"numTodoTests":0,"numTotalTestSuites":99,"numTotalTests":489,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1760403017659,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":5,"failureDetails":[{}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nMatcher error: received value must not be null nor undefined\n\nReceived has value: undefined\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:38:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration getSocialEvents should return mock data when FORCE_MOCKS is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return mock data when FORCE_MOCKS is true"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should fetch real data and process articles","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should fetch real data and process articles"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should calculate intensity correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate intensity correctly"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":26,"failureDetails":[{"matcherResult":{"actual":2,"expected":0,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: 2","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: 2\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:125:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration getSocialEvents should handle API errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle API errors gracefully"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":1,"failureDetails":[{"matcherResult":{"actual":2,"expected":0,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: 2","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: 2\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:146:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration getSocialEvents should handle non-JSON responses","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle non-JSON responses"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":1,"failureDetails":[{}],"failureMessages":["Error: expect(received).toMatch(expected)\n\nMatcher error: received value must be a string\n\nReceived has value: undefined\n    at toMatch (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:164:28)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration getSocialEvents should handle rate limiting","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle rate limiting"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":1,"failureDetails":[{"matcherResult":{"actual":2,"expected":0,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: 2","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: 2\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:175:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration getSocialEvents should return fallback mock when FORCE_MOCKS is set at runtime","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return fallback mock when FORCE_MOCKS is set at runtime"}],"endTime":1760403018803,"message":"  ● GdeltIntegration › getSocialEvents › should return mock data when FORCE_MOCKS is true\n\n    expect(received).toHaveProperty(path, value)\n\n    Matcher error: received value must not be null nor undefined\n\n    Received has value: undefined\n\n      36 |       const result = await newIntegration.getSocialEvents('COL', '2024-01-01', '2024-01-31');\n      37 |\n    > 38 |       expect(result).toHaveProperty('country', 'COL');\n         |                      ^\n      39 |       expect(result).toHaveProperty('isMock', true);\n      40 |       expect(result.eventCount).toBe(12);\n      41 |       expect(result.socialIntensity).toBe(18.5);\n\n      at toHaveProperty (__tests__/integrations/gdeltIntegration.test.js:38:22)\n      at Generator.call (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n\n  ● GdeltIntegration › getSocialEvents › should handle API errors gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 0\n    Received: 2\n\n      123 |       const result = await integration.getSocialEvents('COL', '2024-01-01', '2024-01-31');\n      124 |\n    > 125 |       expect(result.eventCount).toBe(0);\n          |                                 ^\n      126 |       expect(result.socialIntensity).toBe(0);\n      127 |       expect(result.error).toBe('API timeout');\n      128 |       expect(result.isMock).toBe(false);\n\n      at toBe (__tests__/integrations/gdeltIntegration.test.js:125:33)\n      at Generator.call (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n\n  ● GdeltIntegration › getSocialEvents › should handle non-JSON responses\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 0\n    Received: 2\n\n      144 |       const result = await integration.getSocialEvents('COL', '2024-01-01', '2024-01-31');\n      145 |\n    > 146 |       expect(result.eventCount).toBe(0);\n          |                                 ^\n      147 |       expect(result.error).toMatch('non-JSON response');\n      148 |     });\n      149 |\n\n      at toBe (__tests__/integrations/gdeltIntegration.test.js:146:33)\n      at Generator.call (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n\n  ● GdeltIntegration › getSocialEvents › should handle rate limiting\n\n    expect(received).toMatch(expected)\n\n    Matcher error: received value must be a string\n\n    Received has value: undefined\n\n      162 |       const result = await integration.getSocialEvents('COL', '2024-01-01', '2024-01-31');\n      163 |\n    > 164 |       expect(result.error).toMatch('rate limit exceeded');\n          |                            ^\n      165 |     });\n      166 |\n      167 |     it('should return fallback mock when FORCE_MOCKS is set at runtime', async () => {\n\n      at toMatch (__tests__/integrations/gdeltIntegration.test.js:164:28)\n      at Generator.call (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n\n  ● GdeltIntegration › getSocialEvents › should return fallback mock when FORCE_MOCKS is set at runtime\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 0\n    Received: 2\n\n      173 |\n      174 |       expect(result.isMock).toBe(true);\n    > 175 |       expect(result.eventCount).toBe(0);\n          |                                 ^\n      176 |       expect(result.note).toMatch('Returned mock due to error');\n      177 |\n      178 |       delete process.env.FORCE_MOCKS;\n\n      at toBe (__tests__/integrations/gdeltIntegration.test.js:175:33)\n      at Generator.call (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js","startTime":1760403017847,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GdeltIntegration"],"duration":78,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:39:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration returns mock when FORCE_MOCKS=true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns mock when FORCE_MOCKS=true"},{"ancestorTitles":["GdeltIntegration"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration parses real response with articles and themes","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"parses real response with articles and themes"},{"ancestorTitles":["GdeltIntegration"],"duration":18,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:77:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration returns fallback mock if API errors and FORCE_MOCKS set at runtime","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns fallback mock if API errors and FORCE_MOCKS set at runtime"}],"endTime":1760403018897,"message":"  ● GdeltIntegration › returns mock when FORCE_MOCKS=true\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      37 |     const res = await g.getSocialEvents('PER', '2025-01-01', '2025-01-02');\n      38 |     expect(res).toBeDefined();\n    > 39 |     expect(res.isMock).toBe(true);\n         |                        ^\n      40 |     expect(res.eventCount).toBe(12);\n      41 |   });\n      42 |\n\n      at toBe (__tests__/integrations/gdeltIntegration.unit.test.js:39:24)\n      at Generator.call (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n\n  ● GdeltIntegration › returns fallback mock if API errors and FORCE_MOCKS set at runtime\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      75 |     const res = await g.getSocialEvents('ARG', '2025-01-01', '2025-01-02');\n      76 |     expect(res).toBeDefined();\n    > 77 |     expect(res.isMock).toBe(true);\n         |                        ^\n      78 |     expect(typeof res.note === 'string' || res.note === undefined).toBeTruthy();\n      79 |   });\n      80 | });\n\n      at toBe (__tests__/integrations/gdeltIntegration.unit.test.js:77:24)\n      at Generator.call (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js","startTime":1760403017840,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["API Integration Tests","SIM Integration - Mock Validation"],"duration":44,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:30:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests SIM Integration - Mock Validation should use fallback mock data when the API call fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock data when the API call fails"},{"ancestorTitles":["API Integration Tests","SIM Integration - Mock Validation"],"duration":14,"failureDetails":[{"matcherResult":{"actual":0,"expected":5.55,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 5.55\nReceived: 0","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 5.55\nReceived: 0\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:48:45)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests SIM Integration - Mock Validation should handle successful API response correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle successful API response correctly"},{"ancestorTitles":["API Integration Tests","MINAGRI Integration - Mock Validation"],"duration":11,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:58:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests MINAGRI Integration - Mock Validation should use fallback mock for agricultural production on failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock for agricultural production on failure"},{"ancestorTitles":["API Integration Tests","MINAGRI Integration - Mock Validation"],"duration":10,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:68:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests MINAGRI Integration - Mock Validation should use fallback mock for supply chain on failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock for supply chain on failure"},{"ancestorTitles":["API Integration Tests","INEI Integration - Mock Validation"],"duration":11,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:80:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests INEI Integration - Mock Validation should use fallback mock for demographic data on failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock for demographic data on failure"},{"ancestorTitles":["API Integration Tests","INEI Integration - Mock Validation"],"duration":9,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:90:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests INEI Integration - Mock Validation should use fallback mock for economic indicators on failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock for economic indicators on failure"},{"ancestorTitles":["API Integration Tests","Cross-API Integration Validation"],"duration":21,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:108:34)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests Cross-API Integration Validation should validate data consistency using fallbacks when all APIs fail","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should validate data consistency using fallbacks when all APIs fail"},{"ancestorTitles":["API Integration Tests","Cross-API Integration Validation"],"duration":36,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:136:34)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests Cross-API Integration Validation should handle mixed success and failure scenarios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle mixed success and failure scenarios"}],"endTime":1760403018926,"message":"  ● API Integration Tests › SIM Integration - Mock Validation › should use fallback mock data when the API call fails\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      28 |\n      29 |       // The integration should gracefully fall back to its internal mock data.\n    > 30 |       expect(result.isMock).toBe(true);\n         |                             ^\n      31 |       expect(result.priceData.currentPrice).toBeDefined();\n      32 |       expect(result.product).toBe('rice');\n      33 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:30:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › SIM Integration - Mock Validation › should handle successful API response correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 5.55\n    Received: 0\n\n      46 |       // The integration should report that it's NOT using internal mock data.\n      47 |       expect(result.isMock).toBe(false);\n    > 48 |       expect(result.priceData.currentPrice).toBe(5.55);\n         |                                             ^\n      49 |     });\n      50 |   });\n      51 |\n\n      at toBe (__tests__/integrations/api-integration.test.js:48:45)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › MINAGRI Integration - Mock Validation › should use fallback mock for agricultural production on failure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      56 |       const result = await minagriIntegration.getAgriculturalProduction('rice', 2024);\n      57 |\n    > 58 |       expect(result.isMock).toBe(true);\n         |                             ^\n      59 |       expect(result.product).toBe('rice');\n      60 |       expect(result.productionData).toBeDefined();\n      61 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:58:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › MINAGRI Integration - Mock Validation › should use fallback mock for supply chain on failure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      66 |       const result = await minagriIntegration.getSupplyChainCapacity('Lima');\n      67 |\n    > 68 |       expect(result.isMock).toBe(true);\n         |                             ^\n      69 |       expect(result.region).toBe('Lima');\n      70 |       expect(result.capacityData[0].capacity).toBeGreaterThan(0);\n      71 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:68:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › INEI Integration - Mock Validation › should use fallback mock for demographic data on failure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      78 |       const result = await ineiIntegration.getDemographicData('Lima', 2024);\n      79 |\n    > 80 |       expect(result.isMock).toBe(true);\n         |                             ^\n      81 |       expect(result.department).toBe('Lima');\n      82 |       expect(result.demographicData.population).toBeGreaterThan(0);\n      83 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:80:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › INEI Integration - Mock Validation › should use fallback mock for economic indicators on failure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      88 |       const result = await ineiIntegration.getEconomicIndicators('Lima', 2024);\n      89 |\n    > 90 |       expect(result.isMock).toBe(true);\n         |                             ^\n      91 |       expect(result.department).toBe('Lima');\n      92 |       expect(result.economicData.gdp).toBeGreaterThan(0);\n      93 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:90:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › Cross-API Integration Validation › should validate data consistency using fallbacks when all APIs fail\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      106 |\n      107 |       // All integrations must report using their fallback mocks.\n    > 108 |       expect(priceResult.isMock).toBe(true);\n          |                                  ^\n      109 |       expect(productionResult.isMock).toBe(true);\n      110 |       expect(demographicResult.isMock).toBe(true);\n      111 |\n\n      at toBe (__tests__/integrations/api-integration.test.js:108:34)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › Cross-API Integration Validation › should handle mixed success and failure scenarios\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      134 |\n      135 |       // Validate the outcome for each integration.\n    > 136 |       expect(priceResult.isMock).toBe(true); // Fell back to mock.\n          |                                  ^\n      137 |       expect(productionResult.isMock).toBe(true); // Fell back to mock.\n      138 |       expect(demographicResult.isMock).toBe(false); // Used the successful response.\n      139 |       expect(demographicResult.demographicData.population).toBe(10500000);\n\n      at toBe (__tests__/integrations/api-integration.test.js:136:34)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js","startTime":1760403017819,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Prediction Engine (with FORCE_MOCKS)"],"duration":110,"failureDetails":[{"matcherResult":{"actual":"object","expected":"string","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"string\"\nReceived: \"object\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"string\"\nReceived: \"object\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:21:38)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Prediction Engine (with FORCE_MOCKS) runs a prophecy cycle and updates indices","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"runs a prophecy cycle and updates indices"}],"endTime":1760403018927,"message":"  ● Prediction Engine (with FORCE_MOCKS) › runs a prophecy cycle and updates indices\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"string\"\n    Received: \"object\"\n\n      19 |     // FORCE_MOCKS should populate these\n      20 |     expect(famineRisk.value).toBe(null);\n    > 21 |     expect(typeof famineRisk.source).toBe('string');\n         |                                      ^\n      22 |\n      23 |     expect(Array.isArray(geophysicalRisk.significantEvents)).toBe(true);\n      24 |     expect(geophysicalRisk.value).toBeGreaterThanOrEqual(0);\n\n      at toBe (__tests__/predictionEngine.test.js:21:38)\n      at Generator.call (__tests__/predictionEngine.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/predictionEngine.test.js:2:1)\n      at asyncGeneratorStep (__tests__/predictionEngine.test.js:2:1)\n      at asyncGeneratorStep (__tests__/predictionEngine.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js","startTime":1760403017816,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":90,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"price_change_percentage_24h\"\nReceived path: []\n\nReceived value: {\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"price_change_percentage_24h\"\nReceived path: []\n\nReceived value: {\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:30:25)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration - Expansion Tests getCryptoData handles multiple cryptocurrencies for volatility analysis","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"getCryptoData handles multiple cryptocurrencies for volatility analysis"},{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":20,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: [{\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}]","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: [{\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}]\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:38:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration - Expansion Tests getCryptoData returns fallback mock when FORCE_MOCKS is enabled","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getCryptoData returns fallback mock when FORCE_MOCKS is enabled"},{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"CryptoIntegration - Expansion Tests getHistoricalData supports different timeframes for trend analysis","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"getHistoricalData supports different timeframes for trend analysis"},{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"CryptoIntegration - Expansion Tests getCryptoData handles empty cryptoIds array gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getCryptoData handles empty cryptoIds array gracefully"},{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":15,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"prices\": [[1609459200000, 50000], [1609545600000, 51000]]}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"prices\": [[1609459200000, 50000], [1609545600000, 51000]]}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:67:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration - Expansion Tests getHistoricalData returns mock data when API fails and FORCE_MOCKS enabled","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getHistoricalData returns mock data when API fails and FORCE_MOCKS enabled"}],"endTime":1760403018943,"message":"  ● CryptoIntegration - Expansion Tests › getCryptoData handles multiple cryptocurrencies for volatility analysis\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"price_change_percentage_24h\"\n    Received path: []\n\n    Received value: {\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}\n\n      28 |     const firstCrypto = res[0];\n      29 |     expect(firstCrypto).toHaveProperty('id');\n    > 30 |     expect(firstCrypto).toHaveProperty('price_change_percentage_24h');\n         |                         ^\n      31 |   });\n      32 |\n      33 |   test('getCryptoData returns fallback mock when FORCE_MOCKS is enabled', async () => {\n\n      at toHaveProperty (__tests__/integrations/cryptoIntegration.expansion.test.js:30:25)\n      at Generator.call (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n\n  ● CryptoIntegration - Expansion Tests › getCryptoData returns fallback mock when FORCE_MOCKS is enabled\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: [{\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}]\n\n      36 |     const inst = new CryptoIntegration();\n      37 |     const res = await inst.getCryptoData(['bitcoin'], 'usd');\n    > 38 |     expect(res).toHaveProperty('isMock', true);\n         |                 ^\n      39 |     expect(res).toHaveProperty('source', 'FORCE_MOCKS:Crypto');\n      40 |     delete process.env.FORCE_MOCKS;\n      41 |   });\n\n      at toHaveProperty (__tests__/integrations/cryptoIntegration.expansion.test.js:38:17)\n      at Generator.call (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n\n  ● CryptoIntegration - Expansion Tests › getHistoricalData returns mock data when API fails and FORCE_MOCKS enabled\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"prices\": [[1609459200000, 50000], [1609545600000, 51000]]}\n\n      65 |     const inst = new CryptoIntegration();\n      66 |     const res = await inst.getHistoricalData('bitcoin', 30, 'usd');\n    > 67 |     expect(res).toHaveProperty('isMock', true);\n         |                 ^\n      68 |     expect(res).toHaveProperty('cryptoId', 'bitcoin');\n      69 |     delete process.env.FORCE_MOCKS;\n      70 |   });\n\n      at toHaveProperty (__tests__/integrations/cryptoIntegration.expansion.test.js:67:17)\n      at Generator.call (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js","startTime":1760403017830,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience"],"duration":78,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:29:37)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience should return community resilience analysis for default countries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return community resilience analysis for default countries"},{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience"],"duration":13,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:45:37)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience should accept custom countries and days parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should accept custom countries and days parameters"},{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience"],"duration":13,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:56:37)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience should handle API failures gracefully with fallback data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle API failures gracefully with fallback data"},{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience/report"],"duration":10,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:72:37)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience/report should return formatted resilience report","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return formatted resilience report"},{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience/report"],"duration":19,"failureDetails":[{}],"failureMessages":["Error: expect(received).toContain(expected) // indexOf\n\nMatcher error: received value must not be null nor undefined\n\nReceived has value: undefined\n    at toContain (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:87:36)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience/report should include recommendations in the report","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should include recommendations in the report"}],"endTime":1760403019116,"message":"  ● Community Resilience Routes › GET /api/community-resilience › should return community resilience analysis for default countries\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      27 |\n      28 |       expect(response.status).toBe(200);\n    > 29 |       expect(response.body.success).toBe(true);\n         |                                     ^\n      30 |       expect(response.body.data).toHaveProperty('resilienceAnalysis');\n      31 |       expect(response.body.data).toHaveProperty('globalResilienceAssessment');\n      32 |       expect(response.body.data).toHaveProperty('timestamp');\n\n      at toBe (__tests__/routes/community-resilience.test.js:29:37)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n\n  ● Community Resilience Routes › GET /api/community-resilience › should accept custom countries and days parameters\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      43 |\n      44 |       expect(response.status).toBe(200);\n    > 45 |       expect(response.body.success).toBe(true);\n         |                                     ^\n      46 |       expect(Object.keys(response.body.data.resilienceAnalysis)).toEqual(['COL', 'PER']);\n      47 |     });\n      48 |\n\n      at toBe (__tests__/routes/community-resilience.test.js:45:37)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n\n  ● Community Resilience Routes › GET /api/community-resilience › should handle API failures gracefully with fallback data\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      54 |\n      55 |       expect(response.status).toBe(200);\n    > 56 |       expect(response.body.success).toBe(true);\n         |                                     ^\n      57 |       expect(response.body.data.resilienceAnalysis.COL).toBeDefined();\n      58 |       expect(typeof response.body.data.resilienceAnalysis.COL.resilienceScore).toBe('number');\n      59 |     });\n\n      at toBe (__tests__/routes/community-resilience.test.js:56:37)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n\n  ● Community Resilience Routes › GET /api/community-resilience/report › should return formatted resilience report\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      70 |\n      71 |       expect(response.status).toBe(200);\n    > 72 |       expect(response.body.success).toBe(true);\n         |                                     ^\n      73 |       expect(response.body.report).toContain('# COMMUNITY_RESILIENCE_REPORT.md');\n      74 |       expect(response.body.report).toContain('Análisis por País');\n      75 |       expect(response.body.data).toHaveProperty('resilienceAnalysis');\n\n      at toBe (__tests__/routes/community-resilience.test.js:72:37)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n\n  ● Community Resilience Routes › GET /api/community-resilience/report › should include recommendations in the report\n\n    expect(received).toContain(expected) // indexOf\n\n    Matcher error: received value must not be null nor undefined\n\n    Received has value: undefined\n\n      85 |\n      86 |       expect(response.status).toBe(200);\n    > 87 |       expect(response.body.report).toContain('Recomendaciones:');\n         |                                    ^\n      88 |     });\n      89 |   });\n      90 | });\n\n      at toContain (__tests__/routes/community-resilience.test.js:87:36)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js","startTime":1760403017834,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["routes module and sacrifice"],"duration":106,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"country\"\nReceived path: []\n\nExpected value: \"Colombia\"\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46845/api/module/colombia/overview\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"country\"\nReceived path: []\n\nExpected value: \"Colombia\"\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46845/api/module/colombia/overview\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:16:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"routes module and sacrifice GET /colombia/overview returns mock data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /colombia/overview returns mock data"},{"ancestorTitles":["routes module and sacrifice"],"duration":70,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"blocked\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:41019/api/sacrifice/run\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"blocked\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:41019/api/sacrifice/run\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:34:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"routes module and sacrifice GET /run returns blocked true when oracle predicts high probability","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /run returns blocked true when oracle predicts high probability"},{"ancestorTitles":["routes module and sacrifice"],"duration":45,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"blocked\"\nReceived path: []\n\nExpected value: false\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:33897/api/sacrifice/run\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"blocked\"\nReceived path: []\n\nExpected value: false\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:33897/api/sacrifice/run\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:52:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"routes module and sacrifice GET /run returns blocked false when oracle predicts low probability","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /run returns blocked false when oracle predicts low probability"}],"endTime":1760403019150,"message":"  ● routes module and sacrifice › GET /colombia/overview returns mock data\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"country\"\n    Received path: []\n\n    Expected value: \"Colombia\"\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46845/api/module/colombia/overview\"}\n\n      14 |     const res = await request(app).get('/api/module/colombia/overview')\n      15 |     expect(res.status).toBe(200)\n    > 16 |     expect(res.body).toHaveProperty('country', 'Colombia')\n         |                      ^\n      17 |     expect(res.body).toHaveProperty('data')\n      18 |   })\n      19 |\n\n      at toHaveProperty (__tests__/routes/module_sacrifice.test.js:16:22)\n      at Generator.call (__tests__/routes/module_sacrifice.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/module_sacrifice.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/module_sacrifice.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/module_sacrifice.test.js:2:1)\n\n  ● routes module and sacrifice › GET /run returns blocked true when oracle predicts high probability\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"blocked\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:41019/api/sacrifice/run\"}\n\n      32 |     const res = await request(app).get('/api/sacrifice/run')\n      33 |     expect(res.status).toBe(200)\n    > 34 |     expect(res.body).toHaveProperty('blocked', true)\n         |                      ^\n      35 |     expect(res.body).toHaveProperty('prediction')\n      36 |   })\n      37 |\n\n      at toHaveProperty (__tests__/routes/module_sacrifice.test.js:34:22)\n      at Generator.call (__tests__/routes/module_sacrifice.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/module_sacrifice.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/module_sacrifice.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/module_sacrifice.test.js:2:1)\n\n  ● routes module and sacrifice › GET /run returns blocked false when oracle predicts low probability\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"blocked\"\n    Received path: []\n\n    Expected value: false\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:33897/api/sacrifice/run\"}\n\n      50 |     const res = await request(app).get('/api/sacrifice/run')\n      51 |     expect(res.status).toBe(200)\n    > 52 |     expect(res.body).toHaveProperty('blocked', false)\n         |                      ^\n      53 |     expect(res.body).toHaveProperty('prediction')\n      54 |   })\n      55 | })\n\n      at toHaveProperty (__tests__/routes/module_sacrifice.test.js:52:22)\n      at Generator.call (__tests__/routes/module_sacrifice.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/module_sacrifice.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/module_sacrifice.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/module_sacrifice.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js","startTime":1760403017830,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SDLC Routes","GET /api/sdlc/planning"],"duration":77,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42879/api/sdlc/planning\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42879/api/sdlc/planning\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:21:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SDLC Routes GET /api/sdlc/planning should return planning metrics","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return planning metrics"},{"ancestorTitles":["SDLC Routes","GET /api/sdlc/design"],"duration":12,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42911/api/sdlc/design\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42911/api/sdlc/design\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:38:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SDLC Routes GET /api/sdlc/design should return design metrics","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return design metrics"},{"ancestorTitles":["SDLC Routes","GET /api/sdlc/implementation"],"duration":12,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44859/api/sdlc/implementation\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44859/api/sdlc/implementation\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:55:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SDLC Routes GET /api/sdlc/implementation should return implementation metrics","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return implementation metrics"},{"ancestorTitles":["SDLC Routes","GET /api/sdlc/testing"],"duration":13,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:43315/api/sdlc/testing\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:43315/api/sdlc/testing\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:74:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SDLC Routes GET /api/sdlc/testing should return testing metrics","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return testing metrics"},{"ancestorTitles":["SDLC Routes","GET /api/sdlc/deployment"],"duration":16,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46867/api/sdlc/deployment\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46867/api/sdlc/deployment\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:94:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SDLC Routes GET /api/sdlc/deployment should return deployment metrics","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return deployment metrics"}],"endTime":1760403019209,"message":"  ● SDLC Routes › GET /api/sdlc/planning › should return planning metrics\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"success\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42879/api/sdlc/planning\"}\n\n      19 |         .expect(200);\n      20 |\n    > 21 |       expect(response.body).toHaveProperty('success', true);\n         |                             ^\n      22 |       expect(response.body).toHaveProperty('data');\n      23 |       expect(response.body.data).toHaveProperty('backlogItems');\n      24 |       expect(response.body.data).toHaveProperty('priorityScore');\n\n      at toHaveProperty (__tests__/routes/sdlc.test.js:21:29)\n      at Generator.call (__tests__/routes/sdlc.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n\n  ● SDLC Routes › GET /api/sdlc/design › should return design metrics\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"success\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42911/api/sdlc/design\"}\n\n      36 |         .expect(200);\n      37 |\n    > 38 |       expect(response.body).toHaveProperty('success', true);\n         |                             ^\n      39 |       expect(response.body).toHaveProperty('data');\n      40 |       expect(response.body.data).toHaveProperty('complexityScore');\n      41 |       expect(response.body.data).toHaveProperty('technicalDebt');\n\n      at toHaveProperty (__tests__/routes/sdlc.test.js:38:29)\n      at Generator.call (__tests__/routes/sdlc.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n\n  ● SDLC Routes › GET /api/sdlc/implementation › should return implementation metrics\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"success\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44859/api/sdlc/implementation\"}\n\n      53 |         .expect(200);\n      54 |\n    > 55 |       expect(response.body).toHaveProperty('success', true);\n         |                             ^\n      56 |       expect(response.body).toHaveProperty('data');\n      57 |       expect(response.body.data).toHaveProperty('commitsLast24h');\n      58 |       expect(response.body.data).toHaveProperty('activeBranches');\n\n      at toHaveProperty (__tests__/routes/sdlc.test.js:55:29)\n      at Generator.call (__tests__/routes/sdlc.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n\n  ● SDLC Routes › GET /api/sdlc/testing › should return testing metrics\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"success\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:43315/api/sdlc/testing\"}\n\n      72 |         .expect(200);\n      73 |\n    > 74 |       expect(response.body).toHaveProperty('success', true);\n         |                             ^\n      75 |       expect(response.body).toHaveProperty('data');\n      76 |       expect(response.body.data).toHaveProperty('testCoverage');\n      77 |       expect(response.body.data).toHaveProperty('totalTests');\n\n      at toHaveProperty (__tests__/routes/sdlc.test.js:74:29)\n      at Generator.call (__tests__/routes/sdlc.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n\n  ● SDLC Routes › GET /api/sdlc/deployment › should return deployment metrics\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"success\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46867/api/sdlc/deployment\"}\n\n      92 |         .expect(200);\n      93 |\n    > 94 |       expect(response.body).toHaveProperty('success', true);\n         |                             ^\n      95 |       expect(response.body).toHaveProperty('data');\n      96 |       expect(response.body.data).toHaveProperty('deploymentFrequency');\n      97 |       expect(response.body.data).toHaveProperty('deploymentTime');\n\n      at toHaveProperty (__tests__/routes/sdlc.test.js:94:29)\n      at Generator.call (__tests__/routes/sdlc.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js","startTime":1760403017807,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Alerts API","GET /api/alerts"],"duration":46,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"alerts\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:35999/api/alerts\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"alerts\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:35999/api/alerts\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:15:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Alerts API GET /api/alerts returns list of alerts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns list of alerts"},{"ancestorTitles":["Alerts API","GET /api/alerts"],"duration":15,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'every')\n    at every (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:23:30)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Alerts API GET /api/alerts filters by region","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"filters by region"},{"ancestorTitles":["Alerts API","GET /api/alerts"],"duration":8,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'every')\n    at every (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:29:30)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Alerts API GET /api/alerts filters by severity","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"filters by severity"},{"ancestorTitles":["Alerts API","GET /api/alerts/:id"],"duration":10,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"id\"\nReceived path: []\n\nExpected value: 1\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:38979/api/alerts/1\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"id\"\nReceived path: []\n\nExpected value: 1\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:38979/api/alerts/1\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:37:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Alerts API GET /api/alerts/:id returns specific alert","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns specific alert"},{"ancestorTitles":["Alerts API","GET /api/alerts/:id"],"duration":17,"failureDetails":[{"matcherResult":{"actual":200,"expected":404,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:43:30)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Alerts API GET /api/alerts/:id returns 404 for non-existent alert","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns 404 for non-existent alert"},{"ancestorTitles":["Alerts API","POST /api/alerts"],"duration":81,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API POST /api/alerts creates new alert with valid data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"creates new alert with valid data"},{"ancestorTitles":["Alerts API","POST /api/alerts"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API POST /api/alerts returns 400 for missing required fields","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 400 for missing required fields"}],"endTime":1760403019277,"message":"  ● Alerts API › GET /api/alerts › returns list of alerts\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"alerts\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:35999/api/alerts\"}\n\n      13 |       const res = await request(app).get('/api/alerts');\n      14 |       expect(res.statusCode).toBe(200);\n    > 15 |       expect(res.body).toHaveProperty('alerts');\n         |                        ^\n      16 |       expect(res.body).toHaveProperty('total');\n      17 |       expect(Array.isArray(res.body.alerts)).toBe(true);\n      18 |     });\n\n      at toHaveProperty (tests/alerts.test.js:15:24)\n      at Generator.call (tests/alerts.test.js:2:1)\n      at Generator._invoke [as next] (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n\n  ● Alerts API › GET /api/alerts › filters by region\n\n    TypeError: Cannot read properties of undefined (reading 'every')\n\n      21 |       const res = await request(app).get('/api/alerts?region=Colombia');\n      22 |       expect(res.statusCode).toBe(200);\n    > 23 |       expect(res.body.alerts.every(alert => alert.region === 'Colombia')).toBe(true);\n         |                              ^\n      24 |     });\n      25 |\n      26 |     test('filters by severity', async () => {\n\n      at every (tests/alerts.test.js:23:30)\n      at Generator.call (tests/alerts.test.js:2:1)\n      at Generator._invoke [as next] (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n\n  ● Alerts API › GET /api/alerts › filters by severity\n\n    TypeError: Cannot read properties of undefined (reading 'every')\n\n      27 |       const res = await request(app).get('/api/alerts?severity=HIGH');\n      28 |       expect(res.statusCode).toBe(200);\n    > 29 |       expect(res.body.alerts.every(alert => alert.severity === 'HIGH')).toBe(true);\n         |                              ^\n      30 |     });\n      31 |   });\n      32 |\n\n      at every (tests/alerts.test.js:29:30)\n      at Generator.call (tests/alerts.test.js:2:1)\n      at Generator._invoke [as next] (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n\n  ● Alerts API › GET /api/alerts/:id › returns specific alert\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"id\"\n    Received path: []\n\n    Expected value: 1\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:38979/api/alerts/1\"}\n\n      35 |       const res = await request(app).get('/api/alerts/1');\n      36 |       expect(res.statusCode).toBe(200);\n    > 37 |       expect(res.body).toHaveProperty('id', 1);\n         |                        ^\n      38 |       expect(res.body).toHaveProperty('title');\n      39 |     });\n      40 |\n\n      at toHaveProperty (tests/alerts.test.js:37:24)\n      at Generator.call (tests/alerts.test.js:2:1)\n      at Generator._invoke [as next] (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n\n  ● Alerts API › GET /api/alerts/:id › returns 404 for non-existent alert\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 200\n\n      41 |     test('returns 404 for non-existent alert', async () => {\n      42 |       const res = await request(app).get('/api/alerts/999');\n    > 43 |       expect(res.statusCode).toBe(404);\n         |                              ^\n      44 |       expect(res.body).toHaveProperty('error', 'Alert not found');\n      45 |     });\n      46 |   });\n\n      at toBe (tests/alerts.test.js:43:30)\n      at Generator.call (tests/alerts.test.js:2:1)\n      at Generator._invoke [as next] (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n      at asyncGeneratorStep (tests/alerts.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js","startTime":1760403017814,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["mock-server integration"],"duration":122,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"type\"\nReceived path: []\n\nExpected value: \"FeatureCollection\"\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45111/usgs/significant_day.geojson\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"type\"\nReceived path: []\n\nExpected value: \"FeatureCollection\"\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45111/usgs/significant_day.geojson\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/mockServer.integration.test.js:58:18)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/mockServer.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/mockServer.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/mockServer.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/mockServer.integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"mock-server integration usgs mock returns FeatureCollection with features array","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"usgs mock returns FeatureCollection with features array"}],"endTime":1760403019293,"message":"  ● mock-server integration › usgs mock returns FeatureCollection with features array\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"type\"\n    Received path: []\n\n    Expected value: \"FeatureCollection\"\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45111/usgs/significant_day.geojson\"}\n\n      56 |   const res = await axios.get(url, { timeout: 3000 });\n      57 |   const json = res.data;\n    > 58 |     expect(json).toHaveProperty('type', 'FeatureCollection');\n         |                  ^\n      59 |     expect(Array.isArray(json.features)).toBe(true);\n      60 |     expect(json.features.length).toBeGreaterThan(0);\n      61 |     expect(json.features[0]).toHaveProperty('properties');\n\n      at toHaveProperty (__tests__/mockServer.integration.test.js:58:18)\n      at Generator.call (__tests__/mockServer.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/mockServer.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/mockServer.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/mockServer.integration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/mockServer.integration.test.js","startTime":1760403017814,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SIMIntegration","getFoodPrices"],"duration":64,"failureDetails":[{"matcherResult":{"actual":{"product":"rice","region":"Lima","priceData":{"product":"rice","region":"Lima","currentPrice":0,"minPrice":0,"maxPrice":0,"averagePrice":0,"unit":"PEN/kg","date":"2025-10-14T00:50:19.115Z","source":"SIM MINAGRI"},"isMock":false},"expected":{"product":"rice","region":"Lima","priceData":{"product":"rice","region":"Lima","currentPrice":4.5,"minPrice":4.2,"maxPrice":4.8,"averagePrice":4.45,"unit":"PEN/kg","date":{"inverse":false},"source":"SIM MINAGRI"},"isMock":false},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 4\n+ Received  + 4\n\n@@ -1,13 +1,13 @@\n  Object {\n    \"isMock\": false,\n    \"priceData\": Object {\n-     \"averagePrice\": 4.45,\n-     \"currentPrice\": 4.5,\n+     \"averagePrice\": 0,\n+     \"currentPrice\": 0,\n      \"date\": Any<String>,\n-     \"maxPrice\": 4.8,\n-     \"minPrice\": 4.2,\n+     \"maxPrice\": 0,\n+     \"minPrice\": 0,\n      \"product\": \"rice\",\n      \"region\": \"Lima\",\n      \"source\": \"SIM MINAGRI\",\n      \"unit\": \"PEN/kg\",\n    },","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 4\n+ Received  + 4\n\n@@ -1,13 +1,13 @@\n  Object {\n    \"isMock\": false,\n    \"priceData\": Object {\n-     \"averagePrice\": 4.45,\n-     \"currentPrice\": 4.5,\n+     \"averagePrice\": 0,\n+     \"currentPrice\": 0,\n      \"date\": Any<String>,\n-     \"maxPrice\": 4.8,\n-     \"minPrice\": 4.2,\n+     \"maxPrice\": 0,\n+     \"minPrice\": 0,\n      \"product\": \"rice\",\n      \"region\": \"Lima\",\n      \"source\": \"SIM MINAGRI\",\n      \"unit\": \"PEN/kg\",\n    },\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:16:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SIMIntegration getFoodPrices should return data from SIM API","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return data from SIM API"},{"ancestorTitles":["SIMIntegration","getFoodPrices"],"duration":6,"failureDetails":[{"matcherResult":{"actual":0,"expected":4.5,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 4.5\nReceived: 0","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 4.5\nReceived: 0\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:46:45)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SIMIntegration getFoodPrices should return fallback data when API call fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return fallback data when API call fails"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return volatility data from SIM API","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return volatility data from SIM API"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return volatility data for different products","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return volatility data for different products"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return low volatility for beans","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return low volatility for beans"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return medium volatility for corn","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return medium volatility for corn"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return default volatility for unknown product","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return default volatility for unknown product"},{"ancestorTitles":["SIMIntegration","getPriceHistory"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getPriceHistory should return historical price data","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return historical price data"}],"endTime":1760403019232,"message":"  ● SIMIntegration › getFoodPrices › should return data from SIM API\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 4\n    + Received  + 4\n\n    @@ -1,13 +1,13 @@\n      Object {\n        \"isMock\": false,\n        \"priceData\": Object {\n    -     \"averagePrice\": 4.45,\n    -     \"currentPrice\": 4.5,\n    +     \"averagePrice\": 0,\n    +     \"currentPrice\": 0,\n          \"date\": Any<String>,\n    -     \"maxPrice\": 4.8,\n    -     \"minPrice\": 4.2,\n    +     \"maxPrice\": 0,\n    +     \"minPrice\": 0,\n          \"product\": \"rice\",\n          \"region\": \"Lima\",\n          \"source\": \"SIM MINAGRI\",\n          \"unit\": \"PEN/kg\",\n        },\n\n      14 |       const result = await simIntegration.getFoodPrices('rice', 'Lima');\n      15 |\n    > 16 |       expect(result).toEqual({\n         |                      ^\n      17 |         product: 'rice',\n      18 |         region: 'Lima',\n      19 |         priceData: {\n\n      at toEqual (__tests__/integrations/SIMIntegration.test.js:16:22)\n      at Generator.call (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/SIMIntegration.test.js:2:1)\n\n  ● SIMIntegration › getFoodPrices › should return fallback data when API call fails\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4.5\n    Received: 0\n\n      44 |\n      45 |       expect(result.isMock).toBe(false); // MSW intercepta y responde\n    > 46 |       expect(result.priceData.currentPrice).toBe(4.50);\n         |                                             ^\n      47 |       expect(result.priceData.source).toBe('SIM MINAGRI');\n      48 |       expect(result.product).toBe('rice');\n      49 |       expect(result.region).toBe('Lima');\n\n      at toBe (__tests__/integrations/SIMIntegration.test.js:46:45)\n      at Generator.call (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/SIMIntegration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js","startTime":1760403018948,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["routes/gdelt.js - router"],"duration":213,"failureDetails":[{"matcherResult":{"actual":200,"expected":400,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 400\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 400\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:23:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"routes/gdelt.js - router GET /api/gdelt/events returns 400 when missing params","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"GET /api/gdelt/events returns 400 when missing params"},{"ancestorTitles":["routes/gdelt.js - router"],"duration":98,"failureDetails":[{"matcherResult":{"message":"expect(received).toMatchObject(expected)\n\n- Expected  - 1\n+ Received  + 2\n\n  Object {\n-   \"country\": \"COL\",\n+   \"error\": \"Mock not implemented\",\n+   \"url\": \"http://127.0.0.1:42235/api/gdelt/events?country=COL&startDate=2025-01-01&endDate=2025-01-02\",\n  }","pass":false}}],"failureMessages":["Error: expect(received).toMatchObject(expected)\n\n- Expected  - 1\n+ Received  + 2\n\n  Object {\n-   \"country\": \"COL\",\n+   \"error\": \"Mock not implemented\",\n+   \"url\": \"http://127.0.0.1:42235/api/gdelt/events?country=COL&startDate=2025-01-01&endDate=2025-01-02\",\n  }\n    at toMatchObject (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:53:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"routes/gdelt.js - router GET /api/gdelt/events returns data from GdeltIntegration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /api/gdelt/events returns data from GdeltIntegration"}],"endTime":1760403019374,"message":"  ● routes/gdelt.js - router › GET /api/gdelt/events returns 400 when missing params\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 400\n    Received: 200\n\n      21 |\n      22 |     const res = await request(app).get('/api/gdelt/events')\n    > 23 |     expect(res.status).toBe(400)\n         |                        ^\n      24 |     expect(res.body).toHaveProperty('error')\n      25 |   })\n      26 |\n\n      at toBe (__tests__/routes/gdelt.unit.test.js:23:24)\n      at Generator.call (__tests__/routes/gdelt.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/gdelt.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/gdelt.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/gdelt.unit.test.js:2:1)\n\n  ● routes/gdelt.js - router › GET /api/gdelt/events returns data from GdeltIntegration\n\n    expect(received).toMatchObject(expected)\n\n    - Expected  - 1\n    + Received  + 2\n\n      Object {\n    -   \"country\": \"COL\",\n    +   \"error\": \"Mock not implemented\",\n    +   \"url\": \"http://127.0.0.1:42235/api/gdelt/events?country=COL&startDate=2025-01-01&endDate=2025-01-02\",\n      }\n\n      51 |\n      52 |     expect(res.status).toBe(200)\n    > 53 |     expect(res.body).toMatchObject({ country: 'COL' })\n         |                      ^\n      54 |     expect(res.body).toHaveProperty('articles')\n      55 |     expect(Array.isArray(res.body.articles)).toBe(true)\n      56 |   })\n\n      at toMatchObject (__tests__/routes/gdelt.unit.test.js:53:22)\n      at Generator.call (__tests__/routes/gdelt.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/gdelt.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/gdelt.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/gdelt.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js","startTime":1760403017834,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["usgsService.getSeismicActivity"],"duration":135,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"events\": [], \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.252Z\", \"maxMagnitude\": 0, \"source\": \"USGS API\", \"totalEvents\": 0}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"events\": [], \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.252Z\", \"maxMagnitude\": 0, \"source\": \"USGS API\", \"totalEvents\": 0}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:14:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"usgsService.getSeismicActivity returns built-in mock when FORCE_MOCKS=true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns built-in mock when FORCE_MOCKS=true"},{"ancestorTitles":["usgsService.getSeismicActivity"],"duration":105,"failureDetails":[],"failureMessages":[],"fullName":"usgsService.getSeismicActivity uses local mock server when NATIVE_DEV_MODE=true and mock responds","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"uses local mock server when NATIVE_DEV_MODE=true and mock responds"},{"ancestorTitles":["usgsService.getSeismicActivity"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"usgsService.getSeismicActivity falls back when live integration throws and FORCE_MOCKS not set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"falls back when live integration throws and FORCE_MOCKS not set"}],"endTime":1760403019404,"message":"  ● usgsService.getSeismicActivity › returns built-in mock when FORCE_MOCKS=true\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"events\": [], \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.252Z\", \"maxMagnitude\": 0, \"source\": \"USGS API\", \"totalEvents\": 0}}\n\n      12 |   const svc = require('../../src/services/usgsService.js')\n      13 |     const out = await svc.getSeismicActivity()\n    > 14 |     expect(out).toHaveProperty('isMock', true)\n         |                 ^\n      15 |     expect(out.events.length).toBeGreaterThan(0)\n      16 |   })\n      17 |\n\n      at toHaveProperty (__tests__/services/usgsService.unit.test.js:14:17)\n      at Generator.call (__tests__/services/usgsService.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/usgsService.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/usgsService.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/usgsService.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js","startTime":1760403019004,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["predictionEngine - runProphecyCycle with FORCE_MOCKS"],"duration":332,"failureDetails":[{"matcherResult":{"message":"expect(received).not.toBeNull()\n\nReceived: null","pass":true}}],"failureMessages":["Error: expect(received).not.toBeNull()\n\nReceived: null\n    at toBeNull (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:24:52)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"predictionEngine - runProphecyCycle with FORCE_MOCKS updates famine, geophysical, supply chain, climate indices and ethical assessment","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"updates famine, geophysical, supply chain, climate indices and ethical assessment"}],"endTime":1760403019468,"message":"  ● predictionEngine - runProphecyCycle with FORCE_MOCKS › updates famine, geophysical, supply chain, climate indices and ethical assessment\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      22 |     const after = getRiskIndices();\n      23 |     expect(after.multiDomainRiskIndex.value).not.toBeNull();\n    > 24 |     expect(after.riskIndices.famineRisk.value).not.toBeNull();\n         |                                                    ^\n      25 |     expect(after.riskIndices.geophysicalRisk.value).not.toBeNull();\n      26 |     expect(after.riskIndices.supplyChainRisk.value).not.toBeNull();\n      27 |     expect(after.riskIndices.climateExtremesRisk.value).not.toBeNull();\n\n      at toBeNull (__tests__/services/predictionEngine.unit.test.js:24:52)\n      at Generator.call (__tests__/services/predictionEngine.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/predictionEngine.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/predictionEngine.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/predictionEngine.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js","startTime":1760403018949,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Food Resilience Routes","GET /api/food-resilience/prices"],"duration":56,"failureDetails":[{"matcherResult":{"expected":"Peru","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Peru\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Peru\"\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:34:37)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Food Resilience Routes GET /api/food-resilience/prices should return food prices for all products","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return food prices for all products"},{"ancestorTitles":["Food Resilience Routes","GET /api/food-resilience/supply-chain"],"duration":35,"failureDetails":[{"matcherResult":{"expected":"Peru","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Peru\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Peru\"\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:45:37)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Food Resilience Routes GET /api/food-resilience/supply-chain should return optimized supply chain routes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return optimized supply chain routes"},{"ancestorTitles":["Food Resilience Routes","POST /api/food-resilience/predict"],"duration":370,"failureDetails":[],"failureMessages":[],"fullName":"Food Resilience Routes POST /api/food-resilience/predict should generate price prediction for valid product","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate price prediction for valid product"},{"ancestorTitles":["Food Resilience Routes","POST /api/food-resilience/predict"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"Food Resilience Routes POST /api/food-resilience/predict should return 400 for invalid product","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid product"}],"endTime":1760403019514,"message":"  ● Food Resilience Routes › GET /api/food-resilience/prices › should return food prices for all products\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"Peru\"\n    Received: undefined\n\n      32 |\n      33 |       expect(response.status).toBe(200);\n    > 34 |       expect(response.body.country).toBe('Peru');\n         |                                     ^\n      35 |       expect(response.body.prices).toHaveLength(4);\n      36 |       expect(response.body.summary.averageVolatility).toBeDefined();\n      37 |     });\n\n      at toBe (__tests__/routes/food-resilience.test.js:34:37)\n      at Generator.call (__tests__/routes/food-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/food-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/food-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/food-resilience.test.js:2:1)\n\n  ● Food Resilience Routes › GET /api/food-resilience/supply-chain › should return optimized supply chain routes\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"Peru\"\n    Received: undefined\n\n      43 |\n      44 |       expect(response.status).toBe(200);\n    > 45 |       expect(response.body.country).toBe('Peru');\n         |                                     ^\n      46 |       expect(response.body.routes).toHaveLength(4);\n      47 |       expect(response.body.optimization.recommendedRoutes).toBeDefined();\n      48 |     });\n\n      at toBe (__tests__/routes/food-resilience.test.js:45:37)\n      at Generator.call (__tests__/routes/food-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/food-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/food-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/food-resilience.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js","startTime":1760403017809,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["PandemicsService","getPandemicsAnalysis"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsAnalysis should return pandemics analysis with valid data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return pandemics analysis with valid data"},{"ancestorTitles":["PandemicsService","getPandemicsAnalysis"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsAnalysis should handle multiple regions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple regions"},{"ancestorTitles":["PandemicsService","getPandemicsAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsAnalysis should assess risk level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess risk level correctly"},{"ancestorTitles":["PandemicsService","getPandemicsAnalysis"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsAnalysis should provide appropriate recommendations","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should provide appropriate recommendations"},{"ancestorTitles":["PandemicsService","getPandemicsRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsRiskIndex should return a valid risk index","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a valid risk index"},{"ancestorTitles":["PandemicsService","getPandemicsRiskIndex"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsRiskIndex should handle different region arrays","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle different region arrays"},{"ancestorTitles":["PandemicsService","Error handling"],"duration":3,"failureDetails":[{"matcherResult":{"actual":"PandemicsService","expected":"PandemicsService - Error Fallback","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"PandemicsService - Error Fallback\"\nReceived: \"PandemicsService\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"PandemicsService - Error Fallback\"\nReceived: \"PandemicsService\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:85:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PandemicsService Error handling should handle agent failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle agent failure gracefully"}],"endTime":1760403019545,"message":"  ● PandemicsService › Error handling › should handle agent failure gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"PandemicsService - Error Fallback\"\n    Received: \"PandemicsService\"\n\n      83 |       // Should still return valid structure even if agent fails\n      84 |       expect(result).toHaveProperty('source');\n    > 85 |       expect(result.source).toBe('PandemicsService - Error Fallback');\n         |                             ^\n      86 |       expect(result).toHaveProperty('error');\n      87 |     });\n      88 |   });\n\n      at toBe (__tests__/services/pandemicsService.test.js:85:29)\n      at Generator.call (__tests__/services/pandemicsService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/pandemicsService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/pandemicsService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/pandemicsService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js","startTime":1760403019301,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GdeltIntegration"],"duration":42,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration parses events and intensity on success","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"parses events and intensity on success"},{"ancestorTitles":["GdeltIntegration"],"duration":61,"failureDetails":[{"matcherResult":{"actual":true,"expected":false,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:38:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)"],"fullName":"GdeltIntegration handles non-JSON response gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"handles non-JSON response gracefully"},{"ancestorTitles":["GdeltIntegration"],"duration":58,"failureDetails":[{"matcherResult":{"actual":true,"expected":false,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:51:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)"],"fullName":"GdeltIntegration handles HTTP 429 rate limit errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"handles HTTP 429 rate limit errors"},{"ancestorTitles":["GdeltIntegration"],"duration":4,"failureDetails":[{}],"failureMessages":["Error: expect(received).toMatch(expected)\n\nMatcher error: received value must be a string\n\nReceived has value: undefined\n    at toMatch (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:71:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)"],"fullName":"GdeltIntegration returns immediate force-mock when FORCE_MOCKS env is set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"returns immediate force-mock when FORCE_MOCKS env is set"}],"endTime":1760403019579,"message":"  ● GdeltIntegration › handles non-JSON response gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      36 |\n      37 |     expect(res).toBeDefined();\n    > 38 |     expect(res.isMock).toBe(false);\n         |                        ^\n      39 |     expect(res.eventCount).toBe(0);\n      40 |     expect(res.error).toMatch(/non-JSON|non-json|content-type/i);\n      41 |   });\n\n      at toBe (__tests__/integrations/gdelt.integration.test.js:38:24)\n      at Generator.call (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n\n  ● GdeltIntegration › handles HTTP 429 rate limit errors\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      49 |\n      50 |     expect(res).toBeDefined();\n    > 51 |     expect(res.isMock).toBe(false);\n         |                        ^\n      52 |     expect(res.error).toMatch(/rate limit|429/);\n      53 |   });\n      54 |\n\n      at toBe (__tests__/integrations/gdelt.integration.test.js:51:24)\n      at Generator.call (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n\n  ● GdeltIntegration › returns immediate force-mock when FORCE_MOCKS env is set\n\n    expect(received).toMatch(expected)\n\n    Matcher error: received value must be a string\n\n    Received has value: undefined\n\n      69 |     expect(res).toBeDefined();\n      70 |     expect(res.isMock).toBe(true);\n    > 71 |     expect(res.source).toMatch(/GDELT/);\n         |                        ^\n      72 |   });\n      73 | });\n      74 |\n\n      at toMatch (__tests__/integrations/gdelt.integration.test.js:71:24)\n      at Generator.call (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js","startTime":1760403019145,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/consciousness route"],"duration":62,"failureDetails":[{"matcherResult":{"expected":"local","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"local\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"local\"\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:27:31)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/consciousness route returns local fallback when chroma client unavailable","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns local fallback when chroma client unavailable"},{"ancestorTitles":["/api/consciousness route"],"duration":42,"failureDetails":[{"matcherResult":{"expected":"chroma","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"chroma\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"chroma\"\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:46:31)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/consciousness route returns chroma source when client provides collection","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns chroma source when client provides collection"}],"endTime":1760403019593,"message":"  ● /api/consciousness route › returns local fallback when chroma client unavailable\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"local\"\n    Received: undefined\n\n      25 |       const res = await request(app).get('/api/consciousness').set('Host', 'localhost');\n      26 |       expect(res.statusCode).toBe(200);\n    > 27 |       expect(res.body.source).toBe('local');\n         |                               ^\n      28 |       expect(Array.isArray(res.body.items)).toBe(true);\n      29 |     });\n      30 |   });\n\n      at toBe (__tests__/routes/consciousness.route.test.js:27:31)\n      at Generator.call (__tests__/routes/consciousness.route.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/consciousness.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/consciousness.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/consciousness.route.test.js:2:1)\n\n  ● /api/consciousness route › returns chroma source when client provides collection\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"chroma\"\n    Received: undefined\n\n      44 |       const res = await request(app).get('/api/consciousness').set('Host', 'localhost');\n      45 |       expect(res.statusCode).toBe(200);\n    > 46 |       expect(res.body.source).toBe('chroma');\n         |                               ^\n      47 |       expect(Array.isArray(res.body.items)).toBe(true);\n      48 |       expect(res.body.items[0].id).toBe('id1');\n      49 |     });\n\n      at toBe (__tests__/routes/consciousness.route.test.js:46:31)\n      at Generator.call (__tests__/routes/consciousness.route.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/consciousness.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/consciousness.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/consciousness.route.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js","startTime":1760403018906,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GET /api/demo/live-state resilience"],"duration":51,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:34955/api/demo/live-state\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:34955/api/demo/live-state\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:19:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /api/demo/live-state resilience returns a full response with data from integrations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns a full response with data from integrations"}],"endTime":1760403019600,"message":"  ● GET /api/demo/live-state resilience › returns a full response with data from integrations\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"kpis\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:34955/api/demo/live-state\"}\n\n      17 |     const res = await request(app).get('/api/demo/live-state');\n      18 |     expect(res.status).toBe(200);\n    > 19 |     expect(res.body).toHaveProperty('kpis');\n         |                      ^\n      20 |     expect(res.body).toHaveProperty('countries');\n      21 |     expect(res.body).toHaveProperty('communityResilience');\n      22 |     expect(res.body).toHaveProperty('foodSecurity');\n\n      at toHaveProperty (__tests__/live-state-resilience.test.js:19:22)\n      at Generator.call (__tests__/live-state-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/live-state-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/live-state-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/live-state-resilience.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js","startTime":1760403017815,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getNDVIData should fetch real NDVI data and convert from temperature","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should fetch real NDVI data and convert from temperature"},{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":11,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:37:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SatelliteIntegration getNDVIData should handle API errors and return mock data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle API errors and return mock data"},{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getNDVIData should generate seasonal NDVI patterns in mock data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate seasonal NDVI patterns in mock data"},{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getNDVIData should calculate NDVI correctly from temperature data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate NDVI correctly from temperature data"},{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getNDVIData should handle extreme temperatures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle extreme temperatures"},{"ancestorTitles":["SatelliteIntegration","getCropHealthPrediction"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getCropHealthPrediction should return crop health prediction","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should return crop health prediction"},{"ancestorTitles":["SatelliteIntegration","getCropHealthPrediction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getCropHealthPrediction should handle different crop types","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle different crop types"}],"endTime":1760403019609,"message":"  ● SatelliteIntegration › getNDVIData › should handle API errors and return mock data\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      35 |       const result = await integration.getNDVIData(4.7110, -74.0721, '2024-01-01', '2024-01-03');\n      36 |\n    > 37 |       expect(result.isMock).toBe(true);\n         |                             ^\n      38 |       expect(result.ndviData).toHaveLength(3); // 3 days\n      39 |       expect(result.ndviData.every(d => d.ndvi >= 0 && d.ndvi <= 1)).toBe(true);\n      40 |     });\n\n      at toBe (__tests__/integrations/satelliteIntegration.test.js:37:29)\n      at Generator.call (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/satelliteIntegration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js","startTime":1760403019218,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Seismic Routes","GET /api/seismic/activity"],"duration":151,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:29:44)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Seismic Routes GET /api/seismic/activity should return processed seismic activity with risk scores","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return processed seismic activity with risk scores"},{"ancestorTitles":["Seismic Routes","GET /api/seismic/risk"],"duration":23,"failureDetails":[{"matcherResult":{"message":"expect(received).toMatchObject(expected)\n\n- Expected  - 4\n+ Received  + 2\n\n  Object {\n-   \"eventCount\": 1,\n-   \"highRiskZones\": Any<Array>,\n-   \"maxMagnitude\": 6,\n-   \"overallRisk\": Any<Number>,\n+   \"error\": \"Mock not implemented\",\n+   \"url\": \"http://127.0.0.1:37289/api/seismic/risk\",\n  }","pass":false}}],"failureMessages":["Error: expect(received).toMatchObject(expected)\n\n- Expected  - 4\n+ Received  + 2\n\n  Object {\n-   \"eventCount\": 1,\n-   \"highRiskZones\": Any<Array>,\n-   \"maxMagnitude\": 6,\n-   \"overallRisk\": Any<Number>,\n+   \"error\": \"Mock not implemented\",\n+   \"url\": \"http://127.0.0.1:37289/api/seismic/risk\",\n  }\n    at toMatchObject (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:45:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Seismic Routes GET /api/seismic/risk should return geophysical risk prediction","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return geophysical risk prediction"},{"ancestorTitles":["Seismic Routes","GET /api/seismic/risk"],"duration":30,"failureDetails":[{"matcherResult":{"expected":0,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:57:41)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Seismic Routes GET /api/seismic/risk should handle no seismic events","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle no seismic events"}],"endTime":1760403019617,"message":"  ● Seismic Routes › GET /api/seismic/activity › should return processed seismic activity with risk scores\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      27 |\n      28 |       expect(response.status).toBe(200);\n    > 29 |       expect(Array.isArray(response.body)).toBe(true);\n         |                                            ^\n      30 |       expect(response.body).toHaveLength(1);\n      31 |       expect(response.body[0]).toMatchObject({\n      32 |         id: 'test1',\n\n      at toBe (__tests__/routes/seismic.test.js:29:44)\n      at Generator.call (__tests__/routes/seismic.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n\n  ● Seismic Routes › GET /api/seismic/risk › should return geophysical risk prediction\n\n    expect(received).toMatchObject(expected)\n\n    - Expected  - 4\n    + Received  + 2\n\n      Object {\n    -   \"eventCount\": 1,\n    -   \"highRiskZones\": Any<Array>,\n    -   \"maxMagnitude\": 6,\n    -   \"overallRisk\": Any<Number>,\n    +   \"error\": \"Mock not implemented\",\n    +   \"url\": \"http://127.0.0.1:37289/api/seismic/risk\",\n      }\n\n      43 |\n      44 |       expect(response.status).toBe(200);\n    > 45 |       expect(response.body).toMatchObject({\n         |                             ^\n      46 |         overallRisk: expect.any(Number),\n      47 |         eventCount: 1,\n      48 |         maxMagnitude: 6.0,\n\n      at toMatchObject (__tests__/routes/seismic.test.js:45:29)\n      at Generator.call (__tests__/routes/seismic.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n\n  ● Seismic Routes › GET /api/seismic/risk › should handle no seismic events\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 0\n    Received: undefined\n\n      55 |\n      56 |       expect(response.status).toBe(200);\n    > 57 |       expect(response.body.overallRisk).toBe(0);\n         |                                         ^\n      58 |       expect(response.body.eventCount).toBe(0);\n      59 |     });\n      60 |   });\n\n      at toBe (__tests__/routes/seismic.test.js:57:41)\n      at Generator.call (__tests__/routes/seismic.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js","startTime":1760403018819,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CryptoIntegration"],"duration":49,"failureDetails":[{"matcherResult":{"actual":[{"id":"bitcoin","symbol":"bit","current_price":50000}],"expected":[{"id":"bitcoin","symbol":"btc","current_price":2500}],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    Object {\n-     \"current_price\": 2500,\n+     \"current_price\": 50000,\n      \"id\": \"bitcoin\",\n-     \"symbol\": \"btc\",\n+     \"symbol\": \"bit\",\n    },\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    Object {\n-     \"current_price\": 2500,\n+     \"current_price\": 50000,\n      \"id\": \"bitcoin\",\n-     \"symbol\": \"btc\",\n+     \"symbol\": \"bit\",\n    },\n  ]\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:24:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration getCryptoData returns parsed JSON on success","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getCryptoData returns parsed JSON on success"},{"ancestorTitles":["CryptoIntegration"],"duration":42,"failureDetails":[{"matcherResult":{"actual":[{"id":"bitcoin","symbol":"bit","current_price":50000}],"expected":[{"id":"bitcoin","symbol":"btc","current_price":2500}],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    Object {\n-     \"current_price\": 2500,\n+     \"current_price\": 50000,\n      \"id\": \"bitcoin\",\n-     \"symbol\": \"btc\",\n+     \"symbol\": \"bit\",\n    },\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    Object {\n-     \"current_price\": 2500,\n+     \"current_price\": 50000,\n      \"id\": \"bitcoin\",\n-     \"symbol\": \"btc\",\n+     \"symbol\": \"bit\",\n    },\n  ]\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:31:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration getCryptoData returns error object on fetch failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getCryptoData returns error object on fetch failure"},{"ancestorTitles":["CryptoIntegration"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"CryptoIntegration getHistoricalData returns parsed JSON on success","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getHistoricalData returns parsed JSON on success"},{"ancestorTitles":["CryptoIntegration"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"CryptoIntegration getHistoricalData returns error object when non-ok response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getHistoricalData returns error object when non-ok response"}],"endTime":1760403019618,"message":"  ● CryptoIntegration › getCryptoData returns parsed JSON on success\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n        Object {\n    -     \"current_price\": 2500,\n    +     \"current_price\": 50000,\n          \"id\": \"bitcoin\",\n    -     \"symbol\": \"btc\",\n    +     \"symbol\": \"bit\",\n        },\n      ]\n\n      22 |     const inst = new CryptoIntegration()\n      23 |     const res = await inst.getCryptoData(['bitcoin'], 'usd')\n    > 24 |     expect(res).toEqual([{ id: 'bitcoin', symbol: 'btc', current_price: 2500 }])\n         |                 ^\n      25 |   })\n      26 |\n      27 |   test('getCryptoData returns error object on fetch failure', async () => {\n\n      at toEqual (__tests__/integrations/cryptoIntegration.unit.test.js:24:17)\n      at Generator.call (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n\n  ● CryptoIntegration › getCryptoData returns error object on fetch failure\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n        Object {\n    -     \"current_price\": 2500,\n    +     \"current_price\": 50000,\n          \"id\": \"bitcoin\",\n    -     \"symbol\": \"btc\",\n    +     \"symbol\": \"bit\",\n        },\n      ]\n\n      29 |     const inst = new CryptoIntegration()\n      30 |     const res = await inst.getCryptoData(['bitcoin'], 'usd')\n    > 31 |     expect(res).toEqual([{ id: 'bitcoin', symbol: 'btc', current_price: 2500 }])\n         |                 ^\n      32 |   })\n      33 |\n      34 |   test('getHistoricalData returns parsed JSON on success', async () => {\n\n      at toEqual (__tests__/integrations/cryptoIntegration.unit.test.js:31:17)\n      at Generator.call (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js","startTime":1760403019214,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CybersecurityService","getCybersecurityAnalysis"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityAnalysis should return cybersecurity analysis with valid data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return cybersecurity analysis with valid data"},{"ancestorTitles":["CybersecurityService","getCybersecurityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityAnalysis should handle multiple sectors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple sectors"},{"ancestorTitles":["CybersecurityService","getCybersecurityAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityAnalysis should assess risk level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess risk level correctly"},{"ancestorTitles":["CybersecurityService","getCybersecurityAnalysis"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityAnalysis should provide appropriate recommendations","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should provide appropriate recommendations"},{"ancestorTitles":["CybersecurityService","getCybersecurityRiskIndex"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityRiskIndex should return a valid risk index","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a valid risk index"},{"ancestorTitles":["CybersecurityService","getCybersecurityRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityRiskIndex should handle different sector arrays","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle different sector arrays"},{"ancestorTitles":["CybersecurityService","Error handling"],"duration":1,"failureDetails":[{"matcherResult":{"actual":"CybersecurityService","expected":"CybersecurityService - Error Fallback","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"CybersecurityService - Error Fallback\"\nReceived: \"CybersecurityService\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"CybersecurityService - Error Fallback\"\nReceived: \"CybersecurityService\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:85:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CybersecurityService Error handling should handle agent failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle agent failure gracefully"}],"endTime":1760403019649,"message":"  ● CybersecurityService › Error handling › should handle agent failure gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"CybersecurityService - Error Fallback\"\n    Received: \"CybersecurityService\"\n\n      83 |       // Should still return valid structure even if agent fails\n      84 |       expect(result).toHaveProperty('source');\n    > 85 |       expect(result.source).toBe('CybersecurityService - Error Fallback');\n         |                             ^\n      86 |       expect(result).toHaveProperty('error');\n      87 |     });\n      88 |   });\n\n      at toBe (__tests__/services/cybersecurityService.test.js:85:29)\n      at Generator.call (__tests__/services/cybersecurityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/cybersecurityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/cybersecurityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/cybersecurityService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js","startTime":1760403019416,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityAnalysis"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityAnalysis should return geopolitical instability analysis with valid data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return geopolitical instability analysis with valid data"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityAnalysis should handle multiple regions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple regions"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityAnalysis should assess risk level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess risk level correctly"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityAnalysis"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityAnalysis should provide appropriate recommendations","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should provide appropriate recommendations"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityRiskIndex"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex is not a function\n    at getGeopoliticalInstabilityRiskIndex (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:55:62)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityRiskIndex should return a valid risk index","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return a valid risk index"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityRiskIndex"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex is not a function\n    at getGeopoliticalInstabilityRiskIndex (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:66:58)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityRiskIndex should handle different region arrays","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle different region arrays"},{"ancestorTitles":["GeopoliticalInstabilityService","Error handling"],"duration":8,"failureDetails":[{"matcherResult":{"actual":"GeopoliticalInstabilityService","expected":"GeopoliticalInstabilityService - Error Fallback","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"GeopoliticalInstabilityService - Error Fallback\"\nReceived: \"GeopoliticalInstabilityService\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"GeopoliticalInstabilityService - Error Fallback\"\nReceived: \"GeopoliticalInstabilityService\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:85:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GeopoliticalInstabilityService Error handling should handle agent failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle agent failure gracefully"}],"endTime":1760403019650,"message":"  ● GeopoliticalInstabilityService › getGeopoliticalInstabilityRiskIndex › should return a valid risk index\n\n    TypeError: geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex is not a function\n\n      53 |     test('should return a valid risk index', async () => {\n      54 |       const regions = ['global'];\n    > 55 |       const riskIndex = await geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex(regions);\n         |                                                              ^\n      56 |\n      57 |       expect(typeof riskIndex).toBe('number');\n      58 |       expect(riskIndex).toBeGreaterThanOrEqual(0);\n\n      at getGeopoliticalInstabilityRiskIndex (__tests__/services/geopoliticalInstabilityService.test.js:55:62)\n      at Generator.call (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at _next (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Object.<anonymous> (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n\n  ● GeopoliticalInstabilityService › getGeopoliticalInstabilityRiskIndex › should handle different region arrays\n\n    TypeError: geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex is not a function\n\n      64 |       const regions2 = ['europe', 'asia', 'africa'];\n      65 |\n    > 66 |       const risk1 = await geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex(regions1);\n         |                                                          ^\n      67 |       const risk2 = await geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex(regions2);\n      68 |\n      69 |       expect(typeof risk1).toBe('number');\n\n      at getGeopoliticalInstabilityRiskIndex (__tests__/services/geopoliticalInstabilityService.test.js:66:58)\n      at Generator.call (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at _next (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Object.<anonymous> (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n\n  ● GeopoliticalInstabilityService › Error handling › should handle agent failure gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"GeopoliticalInstabilityService - Error Fallback\"\n    Received: \"GeopoliticalInstabilityService\"\n\n      83 |       // Should still return valid structure even if agent fails\n      84 |       expect(result).toHaveProperty('source');\n    > 85 |       expect(result.source).toBe('GeopoliticalInstabilityService - Error Fallback');\n         |                             ^\n      86 |       expect(result).toHaveProperty('error');\n      87 |     });\n      88 |   });\n\n      at toBe (__tests__/services/geopoliticalInstabilityService.test.js:85:29)\n      at Generator.call (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js","startTime":1760403019478,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SignalAnalysisAgent"],"duration":4,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:42:35)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SignalAnalysisAgent should analyze signals from data","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"failed","title":"should analyze signals from data"},{"ancestorTitles":["SignalAnalysisAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SignalAnalysisAgent should handle missing or empty debt data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing or empty debt data"},{"ancestorTitles":["SignalAnalysisAgent"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"SignalAnalysisAgent should handle edge cases in signal thresholds","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle edge cases in signal thresholds"}],"endTime":1760403019659,"message":"  ● SignalAnalysisAgent › should analyze signals from data\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      40 |\n      41 |     // Check debt stress\n    > 42 |     expect(result.COL.debtStress).toBe(true); // debt >50\n         |                                   ^\n      43 |     expect(result.PER.debtStress).toBe(false);\n      44 |\n      45 |     // Check social unrest\n\n      at toBe (__tests__/agents/signalAnalysisAgent.test.js:42:35)\n      at Generator.call (__tests__/agents/signalAnalysisAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/signalAnalysisAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/signalAnalysisAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/signalAnalysisAgent.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js","startTime":1760403019320,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["services: climateService and usgsService"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"services: climateService and usgsService getClimateExtremesIndex returns data from ClimateIntegration when available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getClimateExtremesIndex returns data from ClimateIntegration when available"},{"ancestorTitles":["services: climateService and usgsService"],"duration":33,"failureDetails":[{}],"failureMessages":["Error: service down\n    at mockConstructor.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:30:57)\n    at /home/davicho/etherai-foresight-platform-main/node_modules/jest-mock/build/index.js:387:43\n    at mockConstructor.<anonymous> (/home/davicho/etherai-foresight-platform-main/node_modules/jest-mock/build/index.js:404:13)\n    at new mockConstructor (/home/davicho/etherai-foresight-platform-main/node_modules/jest-mock/build/index.js:148:19)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/src/services/climateService.js:3:28)\n    at Runtime._execModule (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runtime/build/index.js:882:12)\n    at Runtime.requireModuleOrMock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runtime/build/index.js:1048:21)\n    at require (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:34:41)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"services: climateService and usgsService getClimateExtremesIndex returns fallback mock on integration failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getClimateExtremesIndex returns fallback mock on integration failure"},{"ancestorTitles":["services: climateService and usgsService"],"duration":111,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"events\": [], \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.684Z\", \"maxMagnitude\": 0, \"source\": \"USGS API\", \"totalEvents\": 0}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"events\": [], \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.684Z\", \"maxMagnitude\": 0, \"source\": \"USGS API\", \"totalEvents\": 0}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:45:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"services: climateService and usgsService getSeismicActivity returns builtin mock when FORCE_MOCKS=true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getSeismicActivity returns builtin mock when FORCE_MOCKS=true"},{"ancestorTitles":["services: climateService and usgsService"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"services: climateService and usgsService getSeismicActivity transforms data from SeismicIntegration.getSeismicData","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"getSeismicActivity transforms data from SeismicIntegration.getSeismicData"},{"ancestorTitles":["services: climateService and usgsService"],"duration":3,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"error\"\nReceived path: []\n\nReceived value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760403019692, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760399419692, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.692Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"error\"\nReceived path: []\n\nReceived value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760403019692, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760399419692, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.692Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:82:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"services: climateService and usgsService getSeismicActivity returns error-shaped object when live fetch fails and no FORCE_MOCKS","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"getSeismicActivity returns error-shaped object when live fetch fails and no FORCE_MOCKS"}],"endTime":1760403019702,"message":"  ● services: climateService and usgsService › getClimateExtremesIndex returns fallback mock on integration failure\n\n    service down\n\n      28 |     jest.doMock('../../src/integrations/ClimateIntegration.js', () => {\n      29 |       return jest.fn().mockImplementation(() => ({\n    > 30 |         getClimateExtremes: jest.fn().mockRejectedValue(new Error('service down'))\n         |                                                         ^\n      31 |       }))\n      32 |     })\n      33 |\n\n      at mockConstructor.<anonymous> (__tests__/services/climate_usgs.test.js:30:57)\n      at Object.<anonymous> (src/services/climateService.js:3:28)\n      at require (__tests__/services/climate_usgs.test.js:34:41)\n      at Generator.call (__tests__/services/climate_usgs.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n      at _next (__tests__/services/climate_usgs.test.js:2:1)\n      at Object.<anonymous> (__tests__/services/climate_usgs.test.js:2:1)\n\n  ● services: climateService and usgsService › getSeismicActivity returns builtin mock when FORCE_MOCKS=true\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"events\": [], \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.684Z\", \"maxMagnitude\": 0, \"source\": \"USGS API\", \"totalEvents\": 0}}\n\n      43 |     const { getSeismicActivity } = require('../../src/services/usgsService.js')\n      44 |     const res = await getSeismicActivity()\n    > 45 |     expect(res).toHaveProperty('isMock', true)\n         |                 ^\n      46 |     expect(res.events).toBeDefined()\n      47 |     expect(Array.isArray(res.events)).toBe(true)\n      48 |     expect(res.summary).toHaveProperty('totalEvents')\n\n      at toHaveProperty (__tests__/services/climate_usgs.test.js:45:17)\n      at Generator.call (__tests__/services/climate_usgs.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n\n  ● services: climateService and usgsService › getSeismicActivity returns error-shaped object when live fetch fails and no FORCE_MOCKS\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"error\"\n    Received path: []\n\n    Received value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760403019692, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760399419692, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.692Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}\n\n      80 |     expect(Array.isArray(res.events)).toBe(true)\n      81 |     expect(res).toHaveProperty('summary')\n    > 82 |     expect(res).toHaveProperty('error')\n         |                 ^\n      83 |   })\n      84 | })\n      85 |\n\n      at toHaveProperty (__tests__/services/climate_usgs.test.js:82:17)\n      at Generator.call (__tests__/services/climate_usgs.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js","startTime":1760403019284,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["USGS Service","getSeismicActivity"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"USGS Service getSeismicActivity should return transformed seismic data successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return transformed seismic data successfully"},{"ancestorTitles":["USGS Service","getSeismicActivity"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"USGS Service getSeismicActivity should handle empty seismic data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty seismic data"},{"ancestorTitles":["USGS Service","getSeismicActivity"],"duration":3,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"error\"\nReceived path: []\n\nReceived value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760403019670, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760399419670, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.670Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"error\"\nReceived path: []\n\nReceived value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760403019670, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760399419670, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.670Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:85:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"USGS Service getSeismicActivity should handle integration errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle integration errors gracefully"},{"ancestorTitles":["USGS Service","getSeismicActivity"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"USGS Service getSeismicActivity should handle invalid data structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid data structure"}],"endTime":1760403019719,"message":"  ● USGS Service › getSeismicActivity › should handle integration errors gracefully\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"error\"\n    Received path: []\n\n    Received value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760403019670, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760399419670, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T00:50:19.670Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}\n\n      83 |       const result = await getSeismicActivity();\n      84 |\n    > 85 |       expect(result).toHaveProperty('error');\n         |                      ^\n      86 |       expect(result.error).toBe('Network error');\n      87 |       expect(result.events).toEqual([]);\n      88 |     });\n\n      at toHaveProperty (__tests__/services/usgsService.test.js:85:22)\n      at Generator.call (__tests__/services/usgsService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/usgsService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/usgsService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/usgsService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js","startTime":1760403019400,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CausalCorrelationAgent"],"duration":14,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}, \"PER\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}, \"PER\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:54:20)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CausalCorrelationAgent should calculate correlations and persist to Neo4j","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should calculate correlations and persist to Neo4j"},{"ancestorTitles":["CausalCorrelationAgent"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:100:20)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CausalCorrelationAgent should handle Neo4j errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle Neo4j errors gracefully"},{"ancestorTitles":["CausalCorrelationAgent"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:122:20)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CausalCorrelationAgent should skip Neo4j operations in native dev mode","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should skip Neo4j operations in native dev mode"}],"endTime":1760403019794,"message":"  ● CausalCorrelationAgent › should calculate correlations and persist to Neo4j\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"COL\"\n    Received path: []\n\n    Received value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}, \"PER\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}\n\n      52 |     const result = await agent.run(input);\n      53 |\n    > 54 |     expect(result).toHaveProperty('COL');\n         |                    ^\n      55 |     expect(result).toHaveProperty('PER');\n      56 |\n      57 |     // Check correlations for COL\n\n      at toHaveProperty (__tests__/agents/causalCorrelationAgent.test.js:54:20)\n      at Generator.call (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n\n  ● CausalCorrelationAgent › should handle Neo4j errors gracefully\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"COL\"\n    Received path: []\n\n    Received value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}\n\n       98 |     const result = await agent.run(input);\n       99 |\n    > 100 |     expect(result).toHaveProperty('COL');\n          |                    ^\n      101 |     expect(mockSession.close).toHaveBeenCalled();\n      102 |   });\n      103 |\n\n      at toHaveProperty (__tests__/agents/causalCorrelationAgent.test.js:100:20)\n      at Generator.call (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n\n  ● CausalCorrelationAgent › should skip Neo4j operations in native dev mode\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"COL\"\n    Received path: []\n\n    Received value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}\n\n      120 |     const result = await agent.run(input);\n      121 |\n    > 122 |     expect(result).toHaveProperty('COL');\n          |                    ^\n      123 |     expect(mockDriver.session).not.toHaveBeenCalled();\n      124 |\n      125 |     // Restore\n\n      at toHaveProperty (__tests__/agents/causalCorrelationAgent.test.js:122:20)\n      at Generator.call (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js","startTime":1760403019618,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["MetatronAgent helpers and CryptoVolatilityAgent"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helpers and CryptoVolatilityAgent calculateVolatility and analyzeTrend basic checks","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"calculateVolatility and analyzeTrend basic checks"},{"ancestorTitles":["MetatronAgent helpers and CryptoVolatilityAgent"],"duration":16,"failureDetails":[{"matcherResult":{"actual":"medium","expected":"high","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"high\"\nReceived: \"medium\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"high\"\nReceived: \"medium\"\n    at Object.toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.helpers.test.js:48:18)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"MetatronAgent helpers and CryptoVolatilityAgent assessRiskLevel thresholds produce expected labels","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"assessRiskLevel thresholds produce expected labels"},{"ancestorTitles":["MetatronAgent helpers and CryptoVolatilityAgent"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helpers and CryptoVolatilityAgent parseAlternativeRealities handles JSON and text","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"parseAlternativeRealities handles JSON and text"},{"ancestorTitles":["MetatronAgent helpers and CryptoVolatilityAgent"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helpers and CryptoVolatilityAgent CryptoVolatilityAgent computes volatilityAnalysis and global assessment","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"CryptoVolatilityAgent computes volatilityAnalysis and global assessment"}],"endTime":1760403019807,"message":"  ● MetatronAgent helpers and CryptoVolatilityAgent › assessRiskLevel thresholds produce expected labels\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"high\"\n    Received: \"medium\"\n\n      46 |     // Make totalScore > 15 => high\n      47 |     const high = agent.assessRiskLevel(0.2, 60) // volScore = min(20,10)=10, changeScore=6 => 16\n    > 48 |     expect(high).toBe('high')\n         |                  ^\n      49 |\n      50 |     // Medium\n      51 |     const med = agent.assessRiskLevel(0.1, 20) // volScore=10, changeScore=2 => 12\n\n      at Object.toBe (__tests__/agents.helpers.test.js:48:18)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.helpers.test.js","startTime":1760403019586,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/demo routes"],"duration":652,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at toBeDefined (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:42:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/demo routes GET /full-state returns aggregated structure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /full-state returns aggregated structure"},{"ancestorTitles":["/api/demo routes"],"duration":97,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:69:51)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/demo routes GET /mission-replays returns items from fallback when no chroma client","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /mission-replays returns items from fallback when no chroma client"}],"endTime":1760403019807,"message":"  ● /api/demo routes › GET /full-state returns aggregated structure\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      40 |       const res = await request(app).get('/api/demo/full-state').set('Host', 'localhost');\n      41 |       expect(res.statusCode).toBe(200);\n    > 42 |       expect(res.body.kpis).toBeDefined();\n         |                             ^\n      43 |       expect(Array.isArray(res.body.countries)).toBe(true);\n      44 |       expect(res.body.countries.length).toBeGreaterThan(0);\n      45 |       expect(Array.isArray(res.body.chartData)).toBe(true);\n\n      at toBeDefined (__tests__/routes/demo.route.test.js:42:29)\n      at Generator.call (__tests__/routes/demo.route.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/demo.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/demo.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/demo.route.test.js:2:1)\n\n  ● /api/demo routes › GET /mission-replays returns items from fallback when no chroma client\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      67 |       const res = await request(app).get('/api/demo/mission-replays').set('Host', 'localhost');\n      68 |       expect(res.statusCode).toBe(200);\n    > 69 |       expect(Array.isArray(res.body.taskReplays)).toBe(true);\n         |                                                   ^\n      70 |       expect(res.body.taskReplays.length).toBeGreaterThanOrEqual(1);\n      71 |     });\n      72 |   });\n\n      at toBe (__tests__/routes/demo.route.test.js:69:51)\n      at Generator.call (__tests__/routes/demo.route.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/demo.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/demo.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/demo.route.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js","startTime":1760403017810,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["MetatronAgent case coverage (unit)"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent case coverage (unit) Oracle case selects optimal protocol","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"Oracle case selects optimal protocol"},{"ancestorTitles":["MetatronAgent case coverage (unit)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent case coverage (unit) ReportGenerationAgent writes report file","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"ReportGenerationAgent writes report file"},{"ancestorTitles":["MetatronAgent case coverage (unit)"],"duration":24,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:65:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"MetatronAgent case coverage (unit) CausalCorrelationAgent persists to Neo4j when driver present","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"CausalCorrelationAgent persists to Neo4j when driver present"},{"ancestorTitles":["MetatronAgent case coverage (unit)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent case coverage (unit) Tyche returns flaky=false when no Chroma client (native dev mode)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Tyche returns flaky=false when no Chroma client (native dev mode)"}],"endTime":1760403019839,"message":"  ● MetatronAgent case coverage (unit) › CausalCorrelationAgent persists to Neo4j when driver present\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"COL\"\n    Received path: []\n\n    Received value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}\n\n      63 |     const signals = { COL: { extremeWeather: true, economicStress: false, debtStress: true, socialUnrest: true } }\n      64 |     const res = await agent.run({ signals })\n    > 65 |     expect(res).toHaveProperty('COL')\n         |                 ^\n      66 |     expect(typeof res.COL.weatherToSocial).toBe('number')\n      67 |     expect(mockSession.run).toHaveBeenCalled()\n      68 |   })\n\n      at toHaveProperty (__tests__/agents.cases.test.js:65:17)\n      at Generator.call (__tests__/agents.cases.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents.cases.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents.cases.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents.cases.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js","startTime":1760403019607,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Reinforcement Learning - Q-Learning"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Reinforcement Learning - Q-Learning debe actualizar Q-table correctamente","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"debe actualizar Q-table correctamente"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Reinforcement Learning - Q-Learning"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Reinforcement Learning - Q-Learning debe elegir acción con epsilon-greedy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"debe elegir acción con epsilon-greedy"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Meta-Learning"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Meta-Learning debe adaptar parámetros meta basado en feedback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"debe adaptar parámetros meta basado en feedback"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Meta-Learning"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Meta-Learning debe reducir learning rate con bajo rendimiento","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"debe reducir learning rate con bajo rendimiento"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Integración con Agentes"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Integración con Agentes debe ejecutar misión geofísica con evolución","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"debe ejecutar misión geofísica con evolución"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Integración con Agentes"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"adjustedRiskScore\"\nReceived path: []\n\nReceived value: {\"depth\": 10, \"id\": \"test1\", \"magnitude\": 6, \"place\": \"Test Place\", \"riskScore\": 80, \"time\": 1760403019795, \"tsunami\": {\"warning\": 1}, \"url\": \"test.url\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"adjustedRiskScore\"\nReceived path: []\n\nReceived value: {\"depth\": 10, \"id\": \"test1\", \"magnitude\": 6, \"place\": \"Test Place\", \"riskScore\": 80, \"time\": 1760403019795, \"tsunami\": {\"warning\": 1}, \"url\": \"test.url\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:109:25)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Integración con Agentes GeophysicalRiskAgent debe integrar auto-evolución","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"GeophysicalRiskAgent debe integrar auto-evolución"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Retroalimentación en Tiempo Real"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Retroalimentación en Tiempo Real debe procesar feedback de misiones","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"debe procesar feedback de misiones"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Retroalimentación en Tiempo Real"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Retroalimentación en Tiempo Real debe registrar feedback interno","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"debe registrar feedback interno"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Cobertura de Funcionalidades"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Cobertura de Funcionalidades debe manejar datos históricos simulados","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"debe manejar datos históricos simulados"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Cobertura de Funcionalidades"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Cobertura de Funcionalidades debe crear agentes correctamente","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"debe crear agentes correctamente"}],"endTime":1760403019850,"message":"  ● Sistema de Auto-Evolución Predictiva (SAP) › Integración con Agentes › GeophysicalRiskAgent debe integrar auto-evolución\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"adjustedRiskScore\"\n    Received path: []\n\n    Received value: {\"depth\": 10, \"id\": \"test1\", \"magnitude\": 6, \"place\": \"Test Place\", \"riskScore\": 80, \"time\": 1760403019795, \"tsunami\": {\"warning\": 1}, \"url\": \"test.url\"}\n\n      107 |       expect(result).toBeDefined();\n      108 |       expect(result.length).toBe(1);\n    > 109 |       expect(result[0]).toHaveProperty('adjustedRiskScore');\n          |                         ^\n      110 |     });\n      111 |   });\n      112 |\n\n      at toHaveProperty (tests/autoEvolution.test.js:109:25)\n      at Generator.call (tests/autoEvolution.test.js:2:1)\n      at Generator._invoke [as next] (tests/autoEvolution.test.js:2:1)\n      at asyncGeneratorStep (tests/autoEvolution.test.js:2:1)\n      at asyncGeneratorStep (tests/autoEvolution.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js","startTime":1760403019624,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["RiskAssessmentAgent"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RiskAssessmentAgent should calculate risk scores from correlations","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should calculate risk scores from correlations"},{"ancestorTitles":["RiskAssessmentAgent"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RiskAssessmentAgent should handle zero correlations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle zero correlations"},{"ancestorTitles":["RiskAssessmentAgent"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RiskAssessmentAgent should handle maximum correlations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle maximum correlations"},{"ancestorTitles":["RiskAssessmentAgent"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeCloseTo(expected)\n\nExpected: 53.33\nReceived: 53\n\nExpected precision:    2\nExpected difference: < 0.005\nReceived difference:   0.3299999999999983","pass":false}}],"failureMessages":["Error: expect(received).toBeCloseTo(expected)\n\nExpected: 53.33\nReceived: 53\n\nExpected precision:    2\nExpected difference: < 0.005\nReceived difference:   0.3299999999999983\n    at toBeCloseTo (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:88:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"RiskAssessmentAgent should handle partial correlations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle partial correlations"}],"endTime":1760403019898,"message":"  ● RiskAssessmentAgent › should handle partial correlations\n\n    expect(received).toBeCloseTo(expected)\n\n    Expected: 53.33\n    Received: 53\n\n    Expected precision:    2\n    Expected difference: < 0.005\n    Received difference:   0.3299999999999983\n\n      86 |     const result = await agent.run(input);\n      87 |\n    > 88 |     expect(result.COL).toBeCloseTo(53.33); // (0.5 + 0.3 + 0.8) / 3 * 100 ≈ 53.33\n         |                        ^\n      89 |   });\n      90 | });\n\n      at toBeCloseTo (__tests__/agents/riskAssessmentAgent.test.js:88:24)\n      at Generator.call (__tests__/agents/riskAssessmentAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/riskAssessmentAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/riskAssessmentAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/riskAssessmentAgent.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js","startTime":1760403019649,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/demo routes","GET /api/demo/live-state"],"duration":55,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42393/api/demo/live-state\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42393/api/demo/live-state\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:70:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/demo routes GET /api/demo/live-state should return aggregated live data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return aggregated live data"},{"ancestorTitles":["/api/demo routes","POST /api/demo/predict-scenario"],"duration":50,"failureDetails":[],"failureMessages":[],"fullName":"/api/demo routes POST /api/demo/predict-scenario should calculate risk index for scenario","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should calculate risk index for scenario"},{"ancestorTitles":["/api/demo routes","POST /api/demo/predict-scenario"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"/api/demo routes POST /api/demo/predict-scenario should return error for invalid country","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return error for invalid country"}],"endTime":1760403019950,"message":"  ● /api/demo routes › GET /api/demo/live-state › should return aggregated live data\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"kpis\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:42393/api/demo/live-state\"}\n\n      68 |\n      69 |       expect(response.status).toBe(200);\n    > 70 |       expect(response.body).toHaveProperty('kpis');\n         |                             ^\n      71 |       expect(response.body).toHaveProperty('countries');\n      72 |       expect(response.body).toHaveProperty('global');\n      73 |       expect(response.body.countries).toBeInstanceOf(Array);\n\n      at toHaveProperty (__tests__/demo.test.js:70:29)\n      at Generator.call (__tests__/demo.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/demo.test.js:2:1)\n      at asyncGeneratorStep (__tests__/demo.test.js:2:1)\n      at asyncGeneratorStep (__tests__/demo.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js","startTime":1760403017801,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex transforms WorldBankIntegration response correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"transforms WorldBankIntegration response correctly"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":105,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex uses serverless endpoint when integration throws and transforms response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses serverless endpoint when integration throws and transforms response"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex falls back to mock when everything fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"falls back to mock when everything fails"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex transforms WorldBankIntegration response correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"transforms WorldBankIntegration response correctly"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex uses serverless endpoint when integration throws and transforms response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses serverless endpoint when integration throws and transforms response"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex falls back to mock when everything fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"falls back to mock when everything fails"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex uses NATIVE_DEV_MODE local mock when set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses NATIVE_DEV_MODE local mock when set"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'countries')\n    at countries (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:178:16)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"worldBankService.getFoodSecurityIndex prefers a pre-instantiated WorldBankIntegration mock instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"prefers a pre-instantiated WorldBankIntegration mock instance"}],"coverage":{},"endTime":1760403026895,"message":"  ● worldBankService.getFoodSecurityIndex › prefers a pre-instantiated WorldBankIntegration mock instance\n\n    TypeError: Cannot read properties of undefined (reading 'countries')\n\n      176 |     const out = await svc.getFoodSecurityIndex()\n      177 |\n    > 178 |     expect(out.countries).toContain('ARG')\n          |                ^\n      179 |     // ensure the pre-instantiated instance's method was used\n      180 |     expect(instance.getFoodSecurityData).toBeDefined()\n      181 |   })\n\n      at countries (__tests__/services/worldBankService.test.js:178:16)\n      at Generator.call (__tests__/services/worldBankService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/worldBankService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/worldBankService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/worldBankService.test.js:2:1)\n\n\n  ● Test suite failed to run\n\n    TypeError: Object.defineProperty called on non-object\n        at Function.defineProperty (<anonymous>)\n\n       7 |\n       8 |   afterAll(() => {\n    >  9 |     server.close();\n         |            ^\n      10 |   });\n      11 |\n      12 |   afterEach(() => {\n\n      at defineProperty (../node_modules/@mswjs/interceptors/src/interceptors/fetch/index.ts:191:14)\n      at _FetchInterceptor.dispose (../node_modules/@mswjs/interceptors/src/Interceptor.ts:220:9)\n      at dispose (../node_modules/@mswjs/interceptors/src/BatchInterceptor.ts:47:49)\n      at BatchInterceptor.dispose (../node_modules/@mswjs/interceptors/src/Interceptor.ts:220:9)\n      at dispose (../node_modules/msw/src/node/SetupServerCommonApi.ts:146:52)\n      at _SetupServerApi.subscription [as dispose] (../node_modules/msw/src/core/utils/internal/Disposable.ts:9:7)\n      at _SetupServerApi.dispose (../node_modules/msw/src/node/SetupServerCommonApi.ts:167:10)\n      at ../node_modules/msw/lib/node/index.js:3:165\n      at _SetupServerApi.close (../node_modules/msw/src/node/SetupServerApi.ts:84:5)\n      at Object.close (__tests__/services/worldBankService.test.js:9:12)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js","startTime":1760403026895,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":621,"failureDetails":[{"matcherResult":{"actual":200,"expected":401,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:37:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"eternalVigilance routes - stream and token GET /stream returns 401 when no token provided or invalid","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"GET /stream returns 401 when no token provided or invalid"},{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":67,"failureDetails":[{"matcherResult":{"message":"expect(received).toMatch(expected)\n\nExpected pattern: /text\\/event-stream/\nReceived string:  \"application/json\"","pass":false}}],"failureMessages":["Error: expect(received).toMatch(expected)\n\nExpected pattern: /text\\/event-stream/\nReceived string:  \"application/json\"\n    at toMatch (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:73:41)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"eternalVigilance routes - stream and token GET /stream allows static token via cookie and writes initial SSE state","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /stream allows static token via cookie and writes initial SSE state"},{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":94,"failureDetails":[{"matcherResult":{"message":"expect(received).toMatch(expected)\n\nExpected pattern: /text\\/event-stream/\nReceived string:  \"application/json\"","pass":false}}],"failureMessages":["Error: expect(received).toMatch(expected)\n\nExpected pattern: /text\\/event-stream/\nReceived string:  \"application/json\"\n    at toMatch (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:103:41)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"eternalVigilance routes - stream and token GET /stream allows temporary tokens validated by sseTokenService","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /stream allows temporary tokens validated by sseTokenService"},{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":209,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilance routes - stream and token POST /token returns token, sets cookie on success","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"POST /token returns token, sets cookie on success"},{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":114,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilance routes - stream and token POST /token returns 500 when generateToken throws","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"POST /token returns 500 when generateToken throws"}],"endTime":1760403020033,"message":"  ● eternalVigilance routes - stream and token › GET /stream returns 401 when no token provided or invalid\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 401\n    Received: 200\n\n      35 |\n      36 |     const res = await request(app).get('/api/eternal-vigilance/stream')\n    > 37 |     expect(res.status).toBe(401)\n         |                        ^\n      38 |     expect(res.body).toHaveProperty('error')\n      39 |   })\n      40 |\n\n      at toBe (__tests__/routes/eternalVigilance.routes.test.js:37:24)\n      at Generator.call (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n\n  ● eternalVigilance routes - stream and token › GET /stream allows static token via cookie and writes initial SSE state\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /text\\/event-stream/\n    Received string:  \"application/json\"\n\n      71 |\n      72 |     expect(res.status).toBe(200)\n    > 73 |     expect(res.headers['content-type']).toMatch(/text\\/event-stream/)\n         |                                         ^\n      74 |     // initial SSE data includes event:init and the JSON state\n      75 |     expect(res.text).toMatch(/\"event\":\"init\"/)\n      76 |     expect(mockSubscribe).toHaveBeenCalled()\n\n      at toMatch (__tests__/routes/eternalVigilance.routes.test.js:73:41)\n      at Generator.call (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n\n  ● eternalVigilance routes - stream and token › GET /stream allows temporary tokens validated by sseTokenService\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /text\\/event-stream/\n    Received string:  \"application/json\"\n\n      101 |\n      102 |     expect(res.status).toBe(200)\n    > 103 |     expect(res.headers['content-type']).toMatch(/text\\/event-stream/)\n          |                                         ^\n      104 |     expect(res.text).toMatch(/\"event\":\"init\"/)\n      105 |     expect(mockSubscribe).toHaveBeenCalled()\n      106 |   })\n\n      at toMatch (__tests__/routes/eternalVigilance.routes.test.js:103:41)\n      at Generator.call (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js","startTime":1760403017815,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoVolatilityIndex - Expansion Scenarios"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoVolatilityIndex - Expansion Scenarios should handle extreme volatility scenarios (>20% change)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle extreme volatility scenarios (>20% change)"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoVolatilityIndex - Expansion Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoVolatilityIndex - Expansion Scenarios should calculate volatility for diverse crypto portfolio","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate volatility for diverse crypto portfolio"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoVolatilityIndex - Expansion Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoVolatilityIndex - Expansion Scenarios should handle mixed positive and negative changes","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle mixed positive and negative changes"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoVolatilityIndex - Expansion Scenarios"],"duration":3,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeLessThan(expected)\n\nExpected: < 50\nReceived:   60","pass":false}}],"failureMessages":["Error: expect(received).toBeLessThan(expected)\n\nExpected: < 50\nReceived:   60\n    at toBeLessThan (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:86:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoService - Expansion Tests getCryptoVolatilityIndex - Expansion Scenarios should handle single cryptocurrency analysis","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle single cryptocurrency analysis"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoMarketAnalysis - Expansion Features"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoMarketAnalysis - Expansion Features should include market cap and trading volume in analysis","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should include market cap and trading volume in analysis"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoMarketAnalysis - Expansion Features"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoMarketAnalysis - Expansion Features should handle large market cap cryptocurrencies","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle large market cap cryptocurrencies"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoMarketAnalysis - Expansion Features"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoMarketAnalysis - Expansion Features should analyze altcoin volatility patterns","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should analyze altcoin volatility patterns"},{"ancestorTitles":["CryptoService - Expansion Tests","Error Handling - Expansion"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests Error Handling - Expansion should handle partial data failures gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle partial data failures gracefully"},{"ancestorTitles":["CryptoService - Expansion Tests","Error Handling - Expansion"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests Error Handling - Expansion should handle network timeouts during market analysis","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle network timeouts during market analysis"},{"ancestorTitles":["CryptoService - Expansion Tests","Error Handling - Expansion"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests Error Handling - Expansion should maintain service availability during API outages","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should maintain service availability during API outages"}],"endTime":1760403020060,"message":"  ● CryptoService - Expansion Tests › getCryptoVolatilityIndex - Expansion Scenarios › should handle single cryptocurrency analysis\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 50\n    Received:   60\n\n      84 |\n      85 |       expect(result).toBeGreaterThan(30); // Moderate volatility\n    > 86 |       expect(result).toBeLessThan(50);\n         |                      ^\n      87 |     });\n      88 |   });\n      89 |\n\n      at toBeLessThan (__tests__/services/cryptoService.expansion.test.js:86:22)\n      at Generator.call (__tests__/services/cryptoService.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/cryptoService.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/cryptoService.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/cryptoService.expansion.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js","startTime":1760403019604,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should execute function successfully in CLOSED state","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should execute function successfully in CLOSED state"},{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":68,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should transition to OPEN state after failure threshold","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should transition to OPEN state after failure threshold"},{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should throw error when OPEN and not recovered","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should throw error when OPEN and not recovered"},{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should transition to HALF_OPEN after recovery timeout","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should transition to HALF_OPEN after recovery timeout"},{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should reset failure count on success","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reset failure count on success"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should return result on first attempt","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return result on first attempt"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":97,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should retry on failure and succeed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retry on failure and succeed"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should throw error after max retries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error after max retries"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should implement exponential backoff with jitter","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should implement exponential backoff with jitter"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should respect max delay","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect max delay"},{"ancestorTitles":["Resilience Utilities","fetchWithTimeout"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities fetchWithTimeout should resolve successful fetch","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should resolve successful fetch"},{"ancestorTitles":["Resilience Utilities","fetchWithTimeout"],"duration":54,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities fetchWithTimeout should timeout after specified time","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should timeout after specified time"},{"ancestorTitles":["Resilience Utilities","fetchWithTimeout"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities fetchWithTimeout should clear timeout on successful response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clear timeout on successful response"},{"ancestorTitles":["Resilience Utilities","fetchWithTimeout"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities fetchWithTimeout should propagate other errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should propagate other errors"},{"ancestorTitles":["Resilience Utilities","isJsonResponse"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities isJsonResponse should return true for JSON content type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for JSON content type"},{"ancestorTitles":["Resilience Utilities","isJsonResponse"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities isJsonResponse should return true for JSON with charset","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for JSON with charset"},{"ancestorTitles":["Resilience Utilities","isJsonResponse"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities isJsonResponse should return false for non-JSON content type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for non-JSON content type"},{"ancestorTitles":["Resilience Utilities","isJsonResponse"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities isJsonResponse should return false when no content-type header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when no content-type header"}],"endTime":1760403020168,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/utils/resilience.test.js","startTime":1760403019710,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel mission branches (genesis-tyche & prophecy)"],"duration":136,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel mission branches (genesis-tyche & prophecy) genesis-tyche branch creates Tyche and writes PR file","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"genesis-tyche branch creates Tyche and writes PR file"},{"ancestorTitles":["LogosKernel mission branches (genesis-tyche & prophecy)"],"duration":175,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel mission branches (genesis-tyche & prophecy) prophecy mission exercises data acquisition and report generation flows","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"prophecy mission exercises data acquisition and report generation flows"}],"endTime":1760403020273,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.missions.test.js","startTime":1760403019847,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CausalWeaver (native mode)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"CausalWeaver (native mode) creates and updates nodes, and notifies dependents","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"creates and updates nodes, and notifies dependents"},{"ancestorTitles":["CausalWeaver (native mode)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CausalWeaver (native mode) creates relationships and can get dependents/subgraph/chain","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"creates relationships and can get dependents/subgraph/chain"},{"ancestorTitles":["CausalWeaver (native mode)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CausalWeaver (native mode) notifies subscribers via subscribeToNode","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"notifies subscribers via subscribeToNode"}],"endTime":1760403020291,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/causalWeaver.native.test.js","startTime":1760403020042,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/food-security"],"duration":60,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:46:35)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/food-security should return a 200 OK status and the food security data for LATAM countries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return a 200 OK status and the food security data for LATAM countries"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/food-security"],"duration":16,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:58:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/food-security should handle errors and return a 500 status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors and return a 500 status"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/climate-extremes"],"duration":31,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:98:35)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/climate-extremes should return a 200 OK status and the climate extremes data for LATAM countries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return a 200 OK status and the climate extremes data for LATAM countries"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/climate-extremes"],"duration":27,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:110:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/climate-extremes should handle errors and return a 500 status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors and return a 500 status"},{"ancestorTitles":["GET /api/global-risk/community-resilience"],"duration":13,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:140:35)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /api/global-risk/community-resilience should return a 200 OK status and the community resilience data for LATAM countries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return a 200 OK status and the community resilience data for LATAM countries"},{"ancestorTitles":["GET /api/global-risk/community-resilience"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/global-risk/community-resilience should accept custom countries and days parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should accept custom countries and days parameters"},{"ancestorTitles":["GET /api/global-risk/community-resilience"],"duration":5,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:175:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /api/global-risk/community-resilience should handle errors and return a 500 status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors and return a 500 status"}],"endTime":1760403020398,"message":"  ● Global Risk Routes › GET /api/global-risk/food-security › should return a 200 OK status and the food security data for LATAM countries\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      44 |\n      45 |     expect(response.status).toBe(200);\n    > 46 |     expect(response.body.success).toBe(true);\n         |                                   ^\n      47 |     expect(response.body.source).toBe('Praevisio-Aion-Simulated-WorldBank');\n      48 |     expect(response.body.data).toEqual(mockData);\n      49 |     expect(getFoodSecurityIndex).toHaveBeenCalledTimes(1);\n\n      at toBe (__tests__/routes/globalRisk.test.js:46:35)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/food-security › should handle errors and return a 500 status\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 200\n\n      56 |     const response = await request(app).get('/api/global-risk/food-security');\n      57 |\n    > 58 |     expect(response.status).toBe(500);\n         |                             ^\n      59 |     expect(response.body.success).toBe(false);\n      60 |     expect(response.body.message).toContain('Could not retrieve food security data.');\n      61 |   });\n\n      at toBe (__tests__/routes/globalRisk.test.js:58:29)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/climate-extremes › should return a 200 OK status and the climate extremes data for LATAM countries\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n       96 |\n       97 |     expect(response.status).toBe(200);\n    >  98 |     expect(response.body.success).toBe(true);\n          |                                   ^\n       99 |     expect(response.body.source).toBe('Praevisio-Aion-NASA-POWER-Integration');\n      100 |     expect(response.body.data).toEqual(mockData);\n      101 |     expect(getClimateExtremesIndex).toHaveBeenCalledTimes(1);\n\n      at toBe (__tests__/routes/globalRisk.test.js:98:35)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/climate-extremes › should handle errors and return a 500 status\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 200\n\n      108 |     const response = await request(app).get('/api/global-risk/climate-extremes');\n      109 |\n    > 110 |     expect(response.status).toBe(500);\n          |                             ^\n      111 |     expect(response.body.success).toBe(false);\n      112 |     expect(response.body.message).toContain('Could not retrieve climate extremes data.');\n      113 |   });\n\n      at toBe (__tests__/routes/globalRisk.test.js:110:29)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● GET /api/global-risk/community-resilience › should return a 200 OK status and the community resilience data for LATAM countries\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      138 |\n      139 |     expect(response.status).toBe(200);\n    > 140 |     expect(response.body.success).toBe(true);\n          |                                   ^\n      141 |     expect(response.body.source).toBe('Praevisio-Aion-CommunityResilienceAgent');\n      142 |     expect(response.body.data).toEqual(mockData);\n      143 |     expect(getCommunityResilienceIndex).toHaveBeenCalledWith(['COL', 'PER', 'ARG'], 30);\n\n      at toBe (__tests__/routes/globalRisk.test.js:140:35)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● GET /api/global-risk/community-resilience › should handle errors and return a 500 status\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 200\n\n      173 |     const response = await request(app).get('/api/global-risk/community-resilience');\n      174 |\n    > 175 |     expect(response.status).toBe(500);\n          |                             ^\n      176 |     expect(response.body.success).toBe(false);\n      177 |     expect(response.body.message).toContain('Could not retrieve community resilience data.');\n      178 |   });\n\n      at toBe (__tests__/routes/globalRisk.test.js:175:29)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js","startTime":1760403017818,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["MetatronAgent helper functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions calculateVolatility returns 0 for short price arrays","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"calculateVolatility returns 0 for short price arrays"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions calculateVolatility computes a positive number for sample prices","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"calculateVolatility computes a positive number for sample prices"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions analyzeTrend returns neutral for flat data and bullish/bearish for change","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"analyzeTrend returns neutral for flat data and bullish/bearish for change"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions extractPendingTasks parses simple kanban text","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"extractPendingTasks parses simple kanban text"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions calculateResilienceScore maps event counts to scores","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"calculateResilienceScore maps event counts to scores"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions generateResilienceRecommendations returns array and includes expected items for low score","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"generateResilienceRecommendations returns array and includes expected items for low score"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) extractPendingTasks extracts tasks from kanban content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"extractPendingTasks extracts tasks from kanban content"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) analyzeSystemCapabilities returns expected keys","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"analyzeSystemCapabilities returns expected keys"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) generateStrategicMissions returns array with IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"generateStrategicMissions returns array with IDs"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) run handles EthicsCouncil agent","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"run handles EthicsCouncil agent"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) run handles ConsensusAgent with empty changes -> consensus true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"run handles ConsensusAgent with empty changes -> consensus true"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) calculateVolatility returns 0 for short arrays and positive for series","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"calculateVolatility returns 0 for short arrays and positive for series"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) analyzeTrend detects bullish, bearish and neutral","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"analyzeTrend detects bullish, bearish and neutral"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) assessRiskLevel returns high/medium/low appropriately","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"assessRiskLevel returns high/medium/low appropriately"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) calculateResilienceScore and recommendations and global assessment","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"calculateResilienceScore and recommendations and global assessment"}],"endTime":1760403020404,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.unit.test.js","startTime":1760403020281,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel core flows"],"duration":95,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows allocateResources throws when token limit exceeded","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"allocateResources throws when token limit exceeded"},{"ancestorTitles":["LogosKernel core flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows scheduleTask orders by priority","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"scheduleTask orders by priority"},{"ancestorTitles":["LogosKernel core flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows executeNextTask runs task and releases resources","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"executeNextTask runs task and releases resources"},{"ancestorTitles":["LogosKernel core flows"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows startMission records failed mission when ethics council rejects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission records failed mission when ethics council rejects"},{"ancestorTitles":["LogosKernel core flows"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows startMission completes when crews and agents succeed (NATIVE_DEV_MODE)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission completes when crews and agents succeed (NATIVE_DEV_MODE)"}],"endTime":1760403020432,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.extra.test.js","startTime":1760403019985,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/crypto-volatility - Advanced Scenarios"],"duration":195,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:54:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/crypto-volatility - Advanced Scenarios should handle large cryptocurrency portfolios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle large cryptocurrency portfolios"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/crypto-volatility - Advanced Scenarios"],"duration":23,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:81:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/crypto-volatility - Advanced Scenarios should handle extreme volatility scenarios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle extreme volatility scenarios"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/crypto-volatility - Advanced Scenarios"],"duration":32,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:107:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/crypto-volatility - Advanced Scenarios should provide stable low-volatility responses","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide stable low-volatility responses"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/crypto-volatility - Advanced Scenarios"],"duration":13,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:130:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/crypto-volatility - Advanced Scenarios should handle single cryptocurrency analysis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle single cryptocurrency analysis"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/community-resilience - Advanced Scenarios"],"duration":18,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:164:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/community-resilience - Advanced Scenarios should handle multi-country LATAM analysis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle multi-country LATAM analysis"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/community-resilience - Advanced Scenarios"],"duration":36,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:193:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/community-resilience - Advanced Scenarios should handle extended analysis periods","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle extended analysis periods"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/community-resilience - Advanced Scenarios"],"duration":35,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:221:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/community-resilience - Advanced Scenarios should handle high resilience scenarios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle high resilience scenarios"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Error Handling and Resilience - Expansion"],"duration":34,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:233:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests Error Handling and Resilience - Expansion should provide fallback data during crypto service outages","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide fallback data during crypto service outages"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Error Handling and Resilience - Expansion"],"duration":12,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:249:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests Error Handling and Resilience - Expansion should maintain service availability during community resilience failures","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should maintain service availability during community resilience failures"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Error Handling and Resilience - Expansion"],"duration":11,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:259:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests Error Handling and Resilience - Expansion should handle malformed query parameters gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle malformed query parameters gracefully"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Error Handling and Resilience - Expansion"],"duration":11,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:283:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests Error Handling and Resilience - Expansion should handle invalid country codes in community resilience","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle invalid country codes in community resilience"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Performance and Scalability - Expansion"],"duration":29,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'value')\n    at value (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:308:35)\n    at Array.forEach (<anonymous>)\n    at forEach (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:306:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests Performance and Scalability - Expansion should handle rapid consecutive requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle rapid consecutive requests"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Performance and Scalability - Expansion"],"duration":31,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"status\"\nReceived path: []\n\nExpected value: \"OK\"\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45273/api/global-risk/crypto-volatility?cryptoIds=bitcoin\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"status\"\nReceived path: []\n\nExpected value: \"OK\"\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45273/api/global-risk/crypto-volatility?cryptoIds=bitcoin\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:333:31)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests Performance and Scalability - Expansion should maintain response format consistency across different scenarios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should maintain response format consistency across different scenarios"}],"endTime":1760403020444,"message":"  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/crypto-volatility - Advanced Scenarios › should handle large cryptocurrency portfolios\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      52 |         .expect(200);\n      53 |\n    > 54 |       expect(response.body.data.value).toBe(65);\n         |                                 ^\n      55 |       expect(response.body.data.unit).toBe('%');\n      56 |       expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(cryptoIds);\n      57 |     });\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:54:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/crypto-volatility - Advanced Scenarios › should handle extreme volatility scenarios\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      79 |         .expect(200);\n      80 |\n    > 81 |       expect(response.body.data.value).toBe(95);\n         |                                 ^\n      82 |       expect(response.body.data.topic).toBe('crypto-volatility');\n      83 |     });\n      84 |\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:81:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/crypto-volatility - Advanced Scenarios › should provide stable low-volatility responses\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      105 |         .expect(200);\n      106 |\n    > 107 |       expect(response.body.data.value).toBe(15);\n          |                                 ^\n      108 |       expect(response.body.data.unit).toBe('%');\n      109 |     });\n      110 |\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:107:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/crypto-volatility - Advanced Scenarios › should handle single cryptocurrency analysis\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      128 |         .expect(200);\n      129 |\n    > 130 |       expect(response.body.data.value).toBe(42);\n          |                                 ^\n      131 |       expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['solana']);\n      132 |     });\n      133 |   });\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:130:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/community-resilience - Advanced Scenarios › should handle multi-country LATAM analysis\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      162 |         .expect(200);\n      163 |\n    > 164 |       expect(response.body.data.value).toBe(32); // 100 - 68.25 = 31.75, rounded to 32\n          |                                 ^\n      165 |       expect(response.body.data.topic).toBe('community-resilience');\n      166 |       expect(mockGetCommunityResilienceIndex).toHaveBeenCalledWith(['COL', 'PER', 'ARG', 'BRA'], 30);\n      167 |     });\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:164:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/community-resilience - Advanced Scenarios › should handle extended analysis periods\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      191 |         .expect(200);\n      192 |\n    > 193 |       expect(response.body.data.value).toBe(37); // 100 - 63 = 37\n          |                                 ^\n      194 |       expect(mockGetCommunityResilienceIndex).toHaveBeenCalledWith(['MEX'], 90);\n      195 |     });\n      196 |\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:193:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/community-resilience - Advanced Scenarios › should handle high resilience scenarios\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      219 |         .expect(200);\n      220 |\n    > 221 |       expect(response.body.data.value).toBe(15); // 100 - 85 = 15 (low risk)\n          |                                 ^\n      222 |     });\n      223 |   });\n      224 |\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:221:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › Error Handling and Resilience - Expansion › should provide fallback data during crypto service outages\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      231 |         .expect(200);\n      232 |\n    > 233 |       expect(response.body.data.value).toBeGreaterThanOrEqual(40);\n          |                                 ^\n      234 |       expect(response.body.data.value).toBeLessThanOrEqual(100);\n      235 |       expect(response.body.data.topic).toBe('crypto-volatility');\n      236 |       expect(response.body.data.unit).toBe('%');\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:233:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › Error Handling and Resilience - Expansion › should maintain service availability during community resilience failures\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      247 |         .expect(200);\n      248 |\n    > 249 |       expect(response.body.data.value).toBeGreaterThanOrEqual(20);\n          |                                 ^\n      250 |       expect(response.body.data.value).toBeLessThanOrEqual(40);\n      251 |       expect(response.body.data.topic).toBe('community-resilience');\n      252 |     });\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:249:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › Error Handling and Resilience - Expansion › should handle malformed query parameters gracefully\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      257 |         .expect(200);\n      258 |\n    > 259 |       expect(response.body.data.value).toBeDefined();\n          |                                 ^\n      260 |       expect(response.body.data.unit).toBe('%');\n      261 |     });\n      262 |\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:259:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › Error Handling and Resilience - Expansion › should handle invalid country codes in community resilience\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      281 |         .expect(200);\n      282 |\n    > 283 |       expect(response.body.data.value).toBe(50); // 100 - 50 = 50\n          |                                 ^\n      284 |     });\n      285 |   });\n      286 |\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:283:33)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › Performance and Scalability - Expansion › should handle rapid consecutive requests\n\n    TypeError: Cannot read properties of undefined (reading 'value')\n\n      306 |       responses.forEach(response => {\n      307 |         expect(response.status).toBe(200);\n    > 308 |         expect(response.body.data.value).toBe(35);\n          |                                   ^\n      309 |       });\n      310 |     });\n      311 |\n\n      at value (__tests__/routes/globalRiskRoutes.expansion.test.js:308:35)\n          at Array.forEach (<anonymous>)\n      at forEach (__tests__/routes/globalRiskRoutes.expansion.test.js:306:17)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › Performance and Scalability - Expansion › should maintain response format consistency across different scenarios\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"status\"\n    Received path: []\n\n    Expected value: \"OK\"\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45273/api/global-risk/crypto-volatility?cryptoIds=bitcoin\"}\n\n      331 |           .expect(200);\n      332 |\n    > 333 |         expect(response.body).toHaveProperty('status', 'OK');\n          |                               ^\n      334 |         expect(response.body).toHaveProperty('data');\n      335 |         expect(response.body.data).toHaveProperty('topic', 'crypto-volatility');\n      336 |         expect(response.body.data).toHaveProperty('timestamp');\n\n      at toHaveProperty (__tests__/routes/globalRiskRoutes.expansion.test.js:333:31)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js","startTime":1760403017830,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityAnalysis"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityAnalysis should return economic instability analysis with valid data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return economic instability analysis with valid data"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityAnalysis should handle multiple regions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple regions"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityAnalysis should assess risk level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess risk level correctly"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityAnalysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityAnalysis should provide appropriate recommendations","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should provide appropriate recommendations"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityRiskIndex"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityRiskIndex should return a valid risk index","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a valid risk index"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityRiskIndex"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityRiskIndex should handle different region arrays","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle different region arrays"},{"ancestorTitles":["EconomicInstabilityService","Error handling"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"EconomicInstabilityService","expected":"EconomicInstabilityService - Error Fallback","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"EconomicInstabilityService - Error Fallback\"\nReceived: \"EconomicInstabilityService\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"EconomicInstabilityService - Error Fallback\"\nReceived: \"EconomicInstabilityService\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:85:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"EconomicInstabilityService Error handling should handle agent failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle agent failure gracefully"}],"endTime":1760403020452,"message":"  ● EconomicInstabilityService › Error handling › should handle agent failure gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"EconomicInstabilityService - Error Fallback\"\n    Received: \"EconomicInstabilityService\"\n\n      83 |       // Should still return valid structure even if agent fails\n      84 |       expect(result).toHaveProperty('source');\n    > 85 |       expect(result.source).toBe('EconomicInstabilityService - Error Fallback');\n         |                             ^\n      86 |       expect(result).toHaveProperty('error');\n      87 |     });\n      88 |   });\n\n      at toBe (__tests__/services/economicInstabilityService.test.js:85:29)\n      at Generator.call (__tests__/services/economicInstabilityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/economicInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/economicInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/economicInstabilityService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js","startTime":1760403019521,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/crypto-volatility"],"duration":76,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45561/api/global-risk/crypto-volatility\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45561/api/global-risk/crypto-volatility\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:56:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/crypto-volatility should return crypto volatility data successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return crypto volatility data successfully"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/crypto-volatility"],"duration":32,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: [\"solana\", \"cardano\"]\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: [\"solana\", \"cardano\"]\n\nNumber of calls: 0\n    at toHaveBeenCalledWith (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:82:57)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/crypto-volatility should handle custom crypto IDs parameter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle custom crypto IDs parameter"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/crypto-volatility"],"duration":23,"failureDetails":[{}],"failureMessages":["Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at expect (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:90:10)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)\n----\n    at Test._assertStatus (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:252:14)\n    at /home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:308:13\n    at Test._assertFunction (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:285:13)\n    at Test.assert (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:164:23)\n    at Server.localAssert (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:120:14)\n    at Object.onceWrapper (node:events:638:28)\n    at Server.emit (node:events:524:28)\n    at emitCloseNT (node:net:2344:8)\n    at processTicksAndRejections (node:internal/process/task_queues:81:21)"],"fullName":"Global Risk Routes GET /api/global-risk/crypto-volatility should handle service errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle service errors gracefully"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/crypto-volatility"],"duration":55,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: [\"bitcoin\", \"ethereum\"]\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: [\"bitcoin\", \"ethereum\"]\n\nNumber of calls: 0\n    at toHaveBeenCalledWith (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:115:57)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/crypto-volatility should use default crypto IDs when none provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use default crypto IDs when none provided"}],"endTime":1760403020513,"message":"  ● Global Risk Routes › GET /api/global-risk/crypto-volatility › should return crypto volatility data successfully\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"success\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:45561/api/global-risk/crypto-volatility\"}\n\n      54 |         .expect(200);\n      55 |\n    > 56 |       expect(response.body).toHaveProperty('success', true);\n         |                             ^\n      57 |       expect(response.body).toHaveProperty('source', 'Praevisio-Aion-CryptoService');\n      58 |       expect(response.body).toHaveProperty('timestamp');\n      59 |       expect(response.body).toHaveProperty('data', mockCryptoData);\n\n      at toHaveProperty (__tests__/routes/globalRiskRoutes.test.js:56:29)\n      at Generator.call (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/crypto-volatility › should handle custom crypto IDs parameter\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: [\"solana\", \"cardano\"]\n\n    Number of calls: 0\n\n      80 |         .expect(200);\n      81 |\n    > 82 |       expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['solana', 'cardano']);\n         |                                                         ^\n      83 |     });\n      84 |\n      85 |     test('should handle service errors gracefully', async () => {\n\n      at toHaveBeenCalledWith (__tests__/routes/globalRiskRoutes.test.js:82:57)\n      at Generator.call (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/crypto-volatility › should handle service errors gracefully\n\n    expected 500 \"Internal Server Error\", got 200 \"OK\"\n\n      88 |       const response = await request(app)\n      89 |         .get('/api/global-risk/crypto-volatility')\n    > 90 |         .expect(500);\n         |          ^\n      91 |\n      92 |       expect(response.body).toHaveProperty('success', false);\n      93 |       expect(response.body).toHaveProperty('message', 'Internal Server Error: Could not retrieve crypto volatility data.');\n\n      at expect (__tests__/routes/globalRiskRoutes.test.js:90:10)\n      at Generator.call (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at _next (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Object.<anonymous> (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      ----\n      at Test._assertStatus (../node_modules/supertest/lib/test.js:252:14)\n      at ../node_modules/supertest/lib/test.js:308:13\n      at Test._assertFunction (../node_modules/supertest/lib/test.js:285:13)\n      at Test.assert (../node_modules/supertest/lib/test.js:164:23)\n      at Server.localAssert (../node_modules/supertest/lib/test.js:120:14)\n\n  ● Global Risk Routes › GET /api/global-risk/crypto-volatility › should use default crypto IDs when none provided\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: [\"bitcoin\", \"ethereum\"]\n\n    Number of calls: 0\n\n      113 |         .expect(200);\n      114 |\n    > 115 |       expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['bitcoin', 'ethereum']);\n          |                                                         ^\n      116 |     });\n      117 |   });\n      118 | });\n\n      at toHaveBeenCalledWith (__tests__/routes/globalRiskRoutes.test.js:115:57)\n      at Generator.call (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js","startTime":1760403017821,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers returns text when API responds with results array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns text when API responds with results array"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers throws when API responds non-ok","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws when API responds non-ok"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers generate returns generations array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generate returns generations array"}],"endTime":1760403020541,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/llm.unit.test.js","startTime":1760403020070,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel (orchestrator)"],"duration":61,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) allocateResources and releaseResources adjust token usage and enforce limits","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"allocateResources and releaseResources adjust token usage and enforce limits"},{"ancestorTitles":["LogosKernel (orchestrator)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) scheduleTask orders by priority and executeNextTask runs task","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"scheduleTask orders by priority and executeNextTask runs task"},{"ancestorTitles":["LogosKernel (orchestrator)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) startMission completes successfully and generates manifest","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"startMission completes successfully and generates manifest"},{"ancestorTitles":["LogosKernel (orchestrator)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) startMission records failure when ethics council rejects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission records failure when ethics council rejects"},{"ancestorTitles":["LogosKernel core methods"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods allocates and releases resources correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"allocates and releases resources correctly"},{"ancestorTitles":["LogosKernel core methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods throws when token limit exceeded","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws when token limit exceeded"},{"ancestorTitles":["LogosKernel core methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods throws when CPU or memory overloaded","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"throws when CPU or memory overloaded"},{"ancestorTitles":["LogosKernel core methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods schedules tasks by priority and executes next task (success)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"schedules tasks by priority and executes next task (success)"},{"ancestorTitles":["LogosKernel core methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods releases resources if task execution throws","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"releases resources if task execution throws"},{"ancestorTitles":["LogosKernel core methods"],"duration":95,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods generates sovereignty manifest file","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"generates sovereignty manifest file"}],"endTime":1760403020615,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.kernel.test.js","startTime":1760403019925,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createApp initializeServices and bearerAuth"],"duration":1335,"failureDetails":[],"failureMessages":[],"fullName":"createApp initializeServices and bearerAuth initializeServices calls initialize on sseTokenService and cache","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"initializeServices calls initialize on sseTokenService and cache"},{"ancestorTitles":["createApp initializeServices and bearerAuth"],"duration":468,"failureDetails":[{"matcherResult":{"actual":200,"expected":401,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.initialize.test.js:43:23)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.initialize.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.initialize.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.initialize.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.initialize.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"createApp initializeServices and bearerAuth bearerAuth falls back to sseTokenService.validateToken for temp tokens","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"bearerAuth falls back to sseTokenService.validateToken for temp tokens"}],"endTime":1760403020626,"message":"  ● createApp initializeServices and bearerAuth › bearerAuth falls back to sseTokenService.validateToken for temp tokens\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 401\n    Received: 200\n\n      41 |     // No token -> 401\n      42 |     const r1 = await request(app).get('/api/ethical-assessment')\n    > 43 |     expect(r1.status).toBe(401)\n         |                       ^\n      44 |\n      45 |     // Wrong static token and fallback validateToken returns false -> 403\n      46 |     process.env.PRAEVISIO_BEARER_TOKEN = 'static'\n\n      at toBe (__tests__/index.initialize.test.js:43:23)\n      at Generator.call (__tests__/index.initialize.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/index.initialize.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.initialize.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.initialize.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/index.initialize.test.js","startTime":1760403017819,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["LLM Module","getLLM"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module getLLM should return ChatOpenAI when OPENAI_API_KEY is set","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return ChatOpenAI when OPENAI_API_KEY is set"},{"ancestorTitles":["LLM Module","getLLM"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module getLLM should return OllamaLLM when no OPENAI_API_KEY","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return OllamaLLM when no OPENAI_API_KEY"},{"ancestorTitles":["LLM Module","getLLM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module getLLM should use custom OpenAI model when specified","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use custom OpenAI model when specified"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should call Ollama API and return response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call Ollama API and return response"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should handle API errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API errors"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should parse different response formats","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should parse different response formats"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should handle generate method with different message formats","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle generate method with different message formats"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should use environment variables for configuration","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should use environment variables for configuration"}],"endTime":1760403020628,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/utils/llm.test.js","startTime":1760403020027,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["XAI explain endpoint"],"duration":167,"failureDetails":[],"failureMessages":[],"fullName":"XAI explain endpoint returns structured explanation for CEO metric","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns structured explanation for CEO metric"},{"ancestorTitles":["XAI explain endpoint"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"XAI explain endpoint returns 400 on missing parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns 400 on missing parameters"}],"endTime":1760403020640,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/sdlc.xai.test.js","startTime":1760403020180,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getSeismicData retries"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"getSeismicData retries retries on failure up to USGS_RETRY_ATTEMPTS","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"retries on failure up to USGS_RETRY_ATTEMPTS"}],"endTime":1760403020629,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/SeismicIntegration.retry.test.js","startTime":1760403020442,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Dashboard routes"],"duration":55,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44481/api/dashboard/overview\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44481/api/dashboard/overview\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:23:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Dashboard routes returns fallback payload when DB is empty","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns fallback payload when DB is empty"},{"ancestorTitles":["Dashboard routes"],"duration":35,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"analysisModules\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44677/api/dashboard/overview\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"analysisModules\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44677/api/dashboard/overview\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:43:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Dashboard routes builds payload from DB records when present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"builds payload from DB records when present"}],"endTime":1760403020652,"message":"  ● Dashboard routes › returns fallback payload when DB is empty\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"kpis\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44481/api/dashboard/overview\"}\n\n      21 |     const res = await request(app).get('/api/dashboard/overview').set('Authorization', 'Bearer demo-token');\n      22 |     expect(res.status).toBe(200);\n    > 23 |     expect(res.body).toHaveProperty('kpis');\n         |                      ^\n      24 |     // Fallback contains specific keys\n      25 |     expect(res.body.kpis).toHaveProperty('modelAccuracy');\n      26 |     expect(res.body).toHaveProperty('predictiveInsights');\n\n      at toHaveProperty (__tests__/routes.dashboard.test.js:23:22)\n      at Generator.call (__tests__/routes.dashboard.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.dashboard.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.dashboard.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.dashboard.test.js:2:1)\n\n  ● Dashboard routes › builds payload from DB records when present\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"analysisModules\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44677/api/dashboard/overview\"}\n\n      41 |     const res = await request(app).get('/api/dashboard/overview').set('Authorization', 'Bearer demo-token');\n      42 |     expect(res.status).toBe(200);\n    > 43 |     expect(res.body).toHaveProperty('analysisModules');\n         |                      ^\n      44 |     expect(Array.isArray(res.body.analysisModules)).toBe(true);\n      45 |     expect(res.body.predictiveInsights.length).toBeGreaterThan(0);\n      46 |     // ensure criticalSignals reflects sample length\n\n      at toHaveProperty (__tests__/routes.dashboard.test.js:43:22)\n      at Generator.call (__tests__/routes.dashboard.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.dashboard.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.dashboard.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.dashboard.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js","startTime":1760403017820,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["ClimateIntegration"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"ClimateIntegration getCountryClimateData parses expected API response shape","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"getCountryClimateData parses expected API response shape"}],"endTime":1760403020666,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/climateIntegration.unit.test.js","startTime":1760403020459,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel additional flows"],"duration":120,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel additional flows generateSovereigntyManifest writes manifest using fs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generateSovereigntyManifest writes manifest using fs"}],"endTime":1760403020672,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.extra2.test.js","startTime":1760403020427,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["POST /api/predict"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/predict returns 400 on missing body","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns 400 on missing body"},{"ancestorTitles":["POST /api/predict"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/predict returns prediction for valid body","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns prediction for valid body"}],"endTime":1760403020673,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/tests/predict.test.js","startTime":1760403020296,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["sseTokenService","generateToken"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService generateToken should generate a token with default TTL","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate a token with default TTL"},{"ancestorTitles":["sseTokenService","generateToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService generateToken should generate a token with custom TTL","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate a token with custom TTL"},{"ancestorTitles":["sseTokenService","validateToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService validateToken should return false for invalid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for invalid token"},{"ancestorTitles":["sseTokenService","validateToken"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService validateToken should return false for null token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for null token"},{"ancestorTitles":["sseTokenService","validateToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService validateToken should validate a valid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate a valid token"},{"ancestorTitles":["sseTokenService","validateToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService validateToken should return false for expired token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for expired token"},{"ancestorTitles":["sseTokenService","lifecycle management"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService lifecycle management should not start cleanup in test environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not start cleanup in test environment"},{"ancestorTitles":["sseTokenService","lifecycle management"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService lifecycle management should allow shutdown without error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow shutdown without error"},{"ancestorTitles":["sseTokenService","cleanupExpired"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService cleanupExpired should remove expired tokens when validating","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove expired tokens when validating"},{"ancestorTitles":["sseTokenService","initialize and shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService initialize and shutdown should not start cleanup when DISABLE_BACKGROUND_TASKS is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not start cleanup when DISABLE_BACKGROUND_TASKS is true"},{"ancestorTitles":["sseTokenService","initialize and shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService initialize and shutdown should start cleanup interval in non-test env","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should start cleanup interval in non-test env"},{"ancestorTitles":["sseTokenService","initialize and shutdown"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService initialize and shutdown should allow shutdown without error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow shutdown without error"}],"endTime":1760403020703,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/sseTokenService.test.js","startTime":1760403020525,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BiodiversityService","getBiodiversityRiskIndex"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityRiskIndex should calculate risk index correctly with valid data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should calculate risk index correctly with valid data"},{"ancestorTitles":["BiodiversityService","getBiodiversityRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityRiskIndex should return default risk when data is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default risk when data is invalid"},{"ancestorTitles":["BiodiversityService","getBiodiversityRiskIndex"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityRiskIndex should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle errors gracefully"},{"ancestorTitles":["BiodiversityService","getBiodiversityRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityRiskIndex should accept custom regions parameter","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should accept custom regions parameter"},{"ancestorTitles":["BiodiversityService","getBiodiversityAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityAnalysis should return complete analysis with valid data","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should return complete analysis with valid data"},{"ancestorTitles":["BiodiversityService","getBiodiversityAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityAnalysis should return fallback analysis when data is invalid","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return fallback analysis when data is invalid"},{"ancestorTitles":["BiodiversityService","getBiodiversityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityAnalysis should handle errors gracefully in analysis","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle errors gracefully in analysis"},{"ancestorTitles":["BiodiversityService","_assessRiskLevel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService _assessRiskLevel should assess risk levels correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should assess risk levels correctly"}],"endTime":1760403020733,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/biodiversityService.test.js","startTime":1760403020548,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":846,"failureDetails":[{"matcherResult":{"actual":200,"expected":401,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:40:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"createApp bearerAuth and initialization returns 401 when no token provided for protected route","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns 401 when no token provided for protected route"},{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":246,"failureDetails":[{"matcherResult":{"actual":{"error":"Mock not implemented","url":"http://127.0.0.1:46635/api/module/test"},"expected":{"ok":true},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 2\n\n  Object {\n-   \"ok\": true,\n+   \"error\": \"Mock not implemented\",\n+   \"url\": \"http://127.0.0.1:46635/api/module/test\",\n  }","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 2\n\n  Object {\n-   \"ok\": true,\n+   \"error\": \"Mock not implemented\",\n+   \"url\": \"http://127.0.0.1:46635/api/module/test\",\n  }\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:61:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"createApp bearerAuth and initialization allows request with static bearer token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"allows request with static bearer token"},{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":344,"failureDetails":[{"matcherResult":{"actual":200,"expected":403,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 403\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 403\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:80:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"createApp bearerAuth and initialization returns 403 when token not matching and sseTokenService rejects","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns 403 when token not matching and sseTokenService rejects"},{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":271,"failureDetails":[],"failureMessages":[],"fullName":"createApp bearerAuth and initialization initializeServices calls initialize on services","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"initializeServices calls initialize on services"},{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":211,"failureDetails":[],"failureMessages":[],"fullName":"createApp bearerAuth and initialization schedules background tasks when disableBackgroundTasks is false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"schedules background tasks when disableBackgroundTasks is false"}],"endTime":1760403020751,"message":"  ● createApp bearerAuth and initialization › returns 401 when no token provided for protected route\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 401\n    Received: 200\n\n      38 |\n      39 |     const res = await request(app).get('/api/module/test');\n    > 40 |     expect(res.status).toBe(401);\n         |                        ^\n      41 |     expect(res.body).toHaveProperty('error', 'Unauthorized');\n      42 |   });\n      43 |\n\n      at toBe (__tests__/index.createApp.auth.test.js:40:24)\n      at Generator.call (__tests__/index.createApp.auth.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/index.createApp.auth.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.auth.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.auth.test.js:2:1)\n\n  ● createApp bearerAuth and initialization › allows request with static bearer token\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 2\n\n      Object {\n    -   \"ok\": true,\n    +   \"error\": \"Mock not implemented\",\n    +   \"url\": \"http://127.0.0.1:46635/api/module/test\",\n      }\n\n      59 |     const res = await request(app).get('/api/module/test').set('Authorization', 'Bearer my-static-token');\n      60 |     expect(res.status).toBe(200);\n    > 61 |     expect(res.body).toEqual({ ok: true });\n         |                      ^\n      62 |   });\n      63 |\n      64 |   test('returns 403 when token not matching and sseTokenService rejects', async () => {\n\n      at toEqual (__tests__/index.createApp.auth.test.js:61:22)\n      at Generator.call (__tests__/index.createApp.auth.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/index.createApp.auth.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.auth.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.auth.test.js:2:1)\n\n  ● createApp bearerAuth and initialization › returns 403 when token not matching and sseTokenService rejects\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 403\n    Received: 200\n\n      78 |\n      79 |     const res = await request(app).get('/api/module/test').set('Authorization', 'Bearer invalid-token');\n    > 80 |     expect(res.status).toBe(403);\n         |                        ^\n      81 |     expect(res.body).toHaveProperty('error', 'Forbidden');\n      82 |   });\n      83 |\n\n      at toBe (__tests__/index.createApp.auth.test.js:80:24)\n      at Generator.call (__tests__/index.createApp.auth.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/index.createApp.auth.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.auth.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.auth.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js","startTime":1760403017810,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should return moderate risk index for normal market conditions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return moderate risk index for normal market conditions"},{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should return high risk index for volatile market conditions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return high risk index for volatile market conditions"},{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should return low risk index for stable market conditions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return low risk index for stable market conditions"},{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should return default risk when no data available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default risk when no data available"},{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should handle integration errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle integration errors gracefully"},{"ancestorTitles":["CryptoService","getCryptoMarketAnalysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoMarketAnalysis should return complete market analysis with volatility index","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return complete market analysis with volatility index"},{"ancestorTitles":["CryptoService","getCryptoMarketAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoMarketAnalysis should handle errors and return fallback data","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle errors and return fallback data"},{"ancestorTitles":["CryptoService","_assessRiskLevel"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService _assessRiskLevel should assess high risk correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess high risk correctly"},{"ancestorTitles":["CryptoService","_assessRiskLevel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService _assessRiskLevel should assess moderate risk correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess moderate risk correctly"},{"ancestorTitles":["CryptoService","_assessRiskLevel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService _assessRiskLevel should assess low risk correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess low risk correctly"}],"endTime":1760403020785,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.test.js","startTime":1760403020654,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["database module - getChromaClient native fallback"],"duration":456,"failureDetails":[],"failureMessages":[],"fullName":"database module - getChromaClient native fallback returns in-memory client when NATIVE_DEV_MODE=true and upsert/query work","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"returns in-memory client when NATIVE_DEV_MODE=true and upsert/query work"},{"ancestorTitles":["database module - getChromaClient non-native with fetch"],"duration":220,"failureDetails":[],"failureMessages":[],"fullName":"database module - getChromaClient non-native with fetch uses remote Chroma when reachable and returns query results","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses remote Chroma when reachable and returns query results"},{"ancestorTitles":["database module - getNeo4jDriver"],"duration":126,"failureDetails":[],"failureMessages":[],"fullName":"database module - getNeo4jDriver returns null in test env","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns null in test env"},{"ancestorTitles":["database module - getNeo4jDriver"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"database module - getNeo4jDriver returns driver when neo4j-driver connects successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns driver when neo4j-driver connects successfully"}],"endTime":1760403020787,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/database.unit.test.js","startTime":1760403019859,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["callWithFallback"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"callWithFallback returns value when externalCall succeeds","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns value when externalCall succeeds"},{"ancestorTitles":["callWithFallback"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"callWithFallback returns fallback when externalCall throws","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns fallback when externalCall throws"}],"endTime":1760403020793,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/externalWithFallback.test.js","startTime":1760403020673,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PeruAgent"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"PeruAgent should analyze Peru mission data and generate report","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should analyze Peru mission data and generate report"},{"ancestorTitles":["PeruAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PeruAgent should calculate risk based on mission analysis","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should calculate risk based on mission analysis"},{"ancestorTitles":["PeruAgent"],"duration":44,"failureDetails":[],"failureMessages":[],"fullName":"PeruAgent should handle file read errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle file read errors"},{"ancestorTitles":["PeruAgent"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"PeruAgent should include analysis details in result","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should include analysis details in result"}],"endTime":1760403020796,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/peruAgent.test.js","startTime":1760403020639,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Pricing routes","pricing-plans"],"duration":61,"failureDetails":[{"matcherResult":{"actual":200,"expected":404,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:21:26)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Pricing routes pricing-plans returns 404 when file not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns 404 when file not found"},{"ancestorTitles":["Pricing routes","pricing-plans"],"duration":25,"failureDetails":[{"matcherResult":{"expected":"EUR","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"EUR\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"EUR\"\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:30:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Pricing routes pricing-plans returns mapped plans when file contains plans array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns mapped plans when file contains plans array"},{"ancestorTitles":["Pricing routes","pricing"],"duration":14,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:52:26)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Pricing routes pricing returns 500 when protocol not available","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns 500 when protocol not available"},{"ancestorTitles":["Pricing routes","pricing"],"duration":13,"failureDetails":[{"matcherResult":{"expected":"USD","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"USD\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"USD\"\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:61:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Pricing routes pricing returns structured segments when protocol present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns structured segments when protocol present"}],"endTime":1760403020796,"message":"  ● Pricing routes › pricing-plans › returns 404 when file not found\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 200\n\n      19 |       jest.spyOn(realFs, 'existsSync').mockReturnValue(false);\n      20 |       const res = await request(app).get('/api/pricing-plans');\n    > 21 |       expect(res.status).toBe(404);\n         |                          ^\n      22 |     });\n      23 |\n      24 |     it('returns mapped plans when file contains plans array', async () => {\n\n      at toBe (__tests__/routes.pricing.test.js:21:26)\n      at Generator.call (__tests__/routes.pricing.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n\n  ● Pricing routes › pricing-plans › returns mapped plans when file contains plans array\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"EUR\"\n    Received: undefined\n\n      28 |       const res = await request(app).get('/api/pricing-plans');\n      29 |       expect(res.status).toBe(200);\n    > 30 |       expect(res.body.currency).toBe('EUR');\n         |                                 ^\n      31 |       expect(res.body.segments.default.plans[0].id).toBe('p1');\n      32 |     });\n      33 |   });\n\n      at toBe (__tests__/routes.pricing.test.js:30:33)\n      at Generator.call (__tests__/routes.pricing.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n\n  ● Pricing routes › pricing › returns 500 when protocol not available\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 200\n\n      50 |       const localApp = await mountPricingRouter();\n      51 |       const res = await request(localApp).get('/');\n    > 52 |       expect(res.status).toBe(500);\n         |                          ^\n      53 |     });\n      54 |\n      55 |     it('returns structured segments when protocol present', async () => {\n\n      at toBe (__tests__/routes.pricing.test.js:52:26)\n      at Generator.call (__tests__/routes.pricing.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n\n  ● Pricing routes › pricing › returns structured segments when protocol present\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"USD\"\n    Received: undefined\n\n      59 |       const res = await request(localApp).get('/');\n      60 |       expect(res.status).toBe(200);\n    > 61 |       expect(res.body.currency).toBe('USD');\n         |                                 ^\n      62 |       expect(res.body.segments.default.name).toBe('Default');\n      63 |     });\n      64 |   });\n\n      at toBe (__tests__/routes.pricing.test.js:61:33)\n      at Generator.call (__tests__/routes.pricing.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js","startTime":1760403017812,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["createApp bootstrap (unit)"],"duration":1726,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"status\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:35925/api/health\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"status\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:35925/api/health\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.unit.test.js:16:20)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"createApp bootstrap (unit) mounts basic routes and enforces bearerAuth","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"mounts basic routes and enforces bearerAuth"}],"endTime":1760403020805,"message":"  ● createApp bootstrap (unit) › mounts basic routes and enforces bearerAuth\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"status\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:35925/api/health\"}\n\n      14 |     const h = await request(app).get('/api/health')\n      15 |     expect(h.status).toBe(200)\n    > 16 |     expect(h.body).toHaveProperty('status')\n         |                    ^\n      17 |\n      18 |     // ethical-assessment requires bearer token -> 401 without token\n      19 |     const e1 = await request(app).get('/api/ethical-assessment')\n\n      at toHaveProperty (__tests__/index.unit.test.js:16:20)\n      at Generator.call (__tests__/index.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/index.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/index.unit.test.js","startTime":1760403017822,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":439,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers returns content from results[0].content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns content from results[0].content"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":97,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers returns output field when present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns output field when present"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":149,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers throws on non-ok response with text","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws on non-ok response with text"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":124,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers generate returns generations wrapper","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generate returns generations wrapper"}],"endTime":1760403020812,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/llm.ollama.test.js","startTime":1760403019864,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["worldBankService"],"duration":63,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService returns transformed data from serverless endpoint","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns transformed data from serverless endpoint"},{"ancestorTitles":["worldBankService"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService falls back to mock data on fetch error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"falls back to mock data on fetch error"}],"endTime":1760403020815,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.unit.test.js","startTime":1760403020650,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SIMIntegration"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration returns mock when fetch fails for getFoodPrices","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"returns mock when fetch fails for getFoodPrices"},{"ancestorTitles":["SIMIntegration"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration parses real response for getFoodPrices","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"parses real response for getFoodPrices"},{"ancestorTitles":["SIMIntegration"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getPriceHistory returns mock when API fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"getPriceHistory returns mock when API fails"},{"ancestorTitles":["SIMIntegration"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex parses real response","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"getVolatilityIndex parses real response"}],"endTime":1760403020771,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/simIntegration.unit.test.js","startTime":1760403020452,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SimpleCache","set and get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache set and get should store and retrieve a value","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should store and retrieve a value"},{"ancestorTitles":["SimpleCache","set and get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache set and get should return null for non-existent key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent key"},{"ancestorTitles":["SimpleCache","set and get"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache set and get should overwrite existing value","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should overwrite existing value"},{"ancestorTitles":["SimpleCache","TTL expiration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache TTL expiration should return null for expired entry","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for expired entry"},{"ancestorTitles":["SimpleCache","TTL expiration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache TTL expiration should return value before expiration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return value before expiration"},{"ancestorTitles":["SimpleCache","cleanup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache cleanup should remove expired entries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove expired entries"},{"ancestorTitles":["SimpleCache","clear"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache clear should remove all entries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove all entries"},{"ancestorTitles":["SimpleCache","lifecycle management"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache lifecycle management should not start cleanup in test environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not start cleanup in test environment"},{"ancestorTitles":["SimpleCache","lifecycle management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache lifecycle management should allow shutdown without error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow shutdown without error"}],"endTime":1760403020829,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/cache.test.js","startTime":1760403020662,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FMIIntegration"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration parses debt data on success","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"parses debt data on success"},{"ancestorTitles":["FMIIntegration"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration handles non-JSON response by falling back to mock","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"handles non-JSON response by falling back to mock"},{"ancestorTitles":["FMIIntegration"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration handles invalid JSON parse by returning mock data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles invalid JSON parse by returning mock data"}],"endTime":1760403020842,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/fmi.integration.test.js","startTime":1760403020682,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DataAcquisitionAgent"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"DataAcquisitionAgent should acquire data for multiple countries","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should acquire data for multiple countries"},{"ancestorTitles":["DataAcquisitionAgent"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DataAcquisitionAgent should handle integration errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle integration errors gracefully"},{"ancestorTitles":["DataAcquisitionAgent"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"DataAcquisitionAgent should use default gdeltCode when not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default gdeltCode when not provided"}],"endTime":1760403020860,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/dataAcquisitionAgent.test.js","startTime":1760403020635,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Ethical Vector Module","calculateHumanImpact"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateHumanImpact should return 0 when no risks are present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no risks are present"},{"ancestorTitles":["Ethical Vector Module","calculateHumanImpact"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateHumanImpact should calculate human impact based on famine and supply chain risks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate human impact based on famine and supply chain risks"},{"ancestorTitles":["Ethical Vector Module","calculateHumanImpact"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateHumanImpact should cap human impact at 1.0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cap human impact at 1.0"},{"ancestorTitles":["Ethical Vector Module","calculateEnvironmentalSustainability"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEnvironmentalSustainability should return 0 when no geophysical risk","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no geophysical risk"},{"ancestorTitles":["Ethical Vector Module","calculateEnvironmentalSustainability"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEnvironmentalSustainability should calculate environmental sustainability based on geophysical risk","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate environmental sustainability based on geophysical risk"},{"ancestorTitles":["Ethical Vector Module","calculateSocialEquity"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateSocialEquity should return 0 when no affected regions or countries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no affected regions or countries"},{"ancestorTitles":["Ethical Vector Module","calculateSocialEquity"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateSocialEquity should calculate social equity based on famine countries and affected regions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate social equity based on famine countries and affected regions"},{"ancestorTitles":["Ethical Vector Module","calculatePrivacyRisk"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculatePrivacyRisk should return 0 when no community or climate risks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no community or climate risks"},{"ancestorTitles":["Ethical Vector Module","calculatePrivacyRisk"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculatePrivacyRisk should calculate privacy risk based on community and climate data exposure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate privacy risk based on community and climate data exposure"},{"ancestorTitles":["Ethical Vector Module","calculateAlgorithmicJustice"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateAlgorithmicJustice should return 0 when no famine or geophysical risks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no famine or geophysical risks"},{"ancestorTitles":["Ethical Vector Module","calculateAlgorithmicJustice"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateAlgorithmicJustice should calculate algorithmic justice based on risk concentration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate algorithmic justice based on risk concentration"},{"ancestorTitles":["Ethical Vector Module","calculateEthicalVector"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEthicalVector should return complete ethical vector with all components","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should return complete ethical vector with all components"},{"ancestorTitles":["Ethical Vector Module","calculateEthicalVector"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEthicalVector should classify as High Ethical Concern when score > 0.7","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should classify as High Ethical Concern when score > 0.7"},{"ancestorTitles":["Ethical Vector Module","calculateEthicalVector"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEthicalVector should classify as Medium Ethical Concern when score 0.4-0.7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify as Medium Ethical Concern when score 0.4-0.7"},{"ancestorTitles":["Ethical Vector Module","calculateEthicalVector"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEthicalVector should classify as Low Ethical Concern when score < 0.4","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify as Low Ethical Concern when score < 0.4"}],"endTime":1760403020872,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/ethicalVectorModule.test.js","startTime":1760403020727,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PredictionEngine edge cases (axios mocked)"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"PredictionEngine edge cases (axios mocked) handles empty seismic events (sets geophysical risk to 0)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles empty seismic events (sets geophysical risk to 0)"},{"ancestorTitles":["PredictionEngine edge cases (axios mocked)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PredictionEngine edge cases (axios mocked) handles axios error gracefully and does not throw (lastUpdated not set)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles axios error gracefully and does not throw (lastUpdated not set)"}],"endTime":1760403020883,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.edge.test.js","startTime":1760403020646,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CommunityResilienceService - Expansion Tests","getCommunityResilienceIndex - Multi-Country Analysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests getCommunityResilienceIndex - Multi-Country Analysis should handle LATAM country analysis with diverse resilience levels","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle LATAM country analysis with diverse resilience levels"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","getCommunityResilienceIndex - Multi-Country Analysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests getCommunityResilienceIndex - Multi-Country Analysis should analyze single country resilience in detail","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should analyze single country resilience in detail"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","getCommunityResilienceIndex - Multi-Country Analysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests getCommunityResilienceIndex - Multi-Country Analysis should handle extended time periods for trend analysis","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle extended time periods for trend analysis"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Error Handling and Fallbacks - Expansion"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Error Handling and Fallbacks - Expansion should provide detailed mock data when agent fails","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should provide detailed mock data when agent fails"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Error Handling and Fallbacks - Expansion"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Error Handling and Fallbacks - Expansion should handle empty country list gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty country list gracefully"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Error Handling and Fallbacks - Expansion"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Error Handling and Fallbacks - Expansion should maintain service availability during agent failures","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should maintain service availability during agent failures"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Data Validation and Processing - Expansion"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Data Validation and Processing - Expansion should validate and process resilience scores within bounds","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should validate and process resilience scores within bounds"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Data Validation and Processing - Expansion"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Data Validation and Processing - Expansion should handle large country sets efficiently","invocations":1,"location":null,"numPassingAsserts":31,"retryReasons":[],"status":"passed","title":"should handle large country sets efficiently"}],"endTime":1760403020887,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/communityResilienceService.expansion.test.js","startTime":1760403020681,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel (small)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (small) allocateResources and releaseResources manage token usage","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"allocateResources and releaseResources manage token usage"},{"ancestorTitles":["LogosKernel (small)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (small) scheduleTask orders by priority and executeNextTask runs the highest priority","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"scheduleTask orders by priority and executeNextTask runs the highest priority"},{"ancestorTitles":["LogosKernel (small)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (small) startMission happy path completes and stores mission result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"startMission happy path completes and stores mission result"}],"endTime":1760403020890,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.small.test.js","startTime":1760403020756,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eventHub","subscribe and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribe and publish should call subscriber for specific mission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call subscriber for specific mission"},{"ancestorTitles":["eventHub","subscribe and publish"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribe and publish should not call subscriber for different mission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not call subscriber for different mission"},{"ancestorTitles":["eventHub","subscribe and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribe and publish should allow multiple subscribers for same mission","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow multiple subscribers for same mission"},{"ancestorTitles":["eventHub","subscribe and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribe and publish should remove subscriber when unsubscribed","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove subscriber when unsubscribed"},{"ancestorTitles":["eventHub","subscribeAll and publish"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribeAll and publish should call global subscriber for any mission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call global subscriber for any mission"},{"ancestorTitles":["eventHub","subscribeAll and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribeAll and publish should call global subscriber with missionId prefixed","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call global subscriber with missionId prefixed"},{"ancestorTitles":["eventHub","subscribeAll and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribeAll and publish should allow multiple global subscribers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow multiple global subscribers"},{"ancestorTitles":["eventHub","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub error handling should continue calling other subscribers if one throws","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should continue calling other subscribers if one throws"},{"ancestorTitles":["eventHub","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub error handling should continue calling global subscribers if one throws","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should continue calling global subscribers if one throws"},{"ancestorTitles":["eventHub","cleanup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub cleanup should clean up mission subscribers when all unsubscribe","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clean up mission subscribers when all unsubscribe"}],"endTime":1760403020895,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/eventHub.test.js","startTime":1760403020760,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["App integration routes (createApp)"],"duration":51,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"status\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:41903/api/health\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"status\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:41903/api/health\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:17:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"App integration routes (createApp) responds to /api/health","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"responds to /api/health"},{"ancestorTitles":["App integration routes (createApp)"],"duration":28,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeTruthy()\n\nReceived: false","pass":false}}],"failureMessages":["Error: expect(received).toBeTruthy()\n\nReceived: false\n    at toBeTruthy (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:27:23)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"App integration routes (createApp) responds to /api/platform-status","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"responds to /api/platform-status"},{"ancestorTitles":["App integration routes (createApp)"],"duration":16,"failureDetails":[{"matcherResult":{"actual":200,"expected":401,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:32:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"App integration routes (createApp) requires auth for /api/ethical-assessment and returns 401 without token","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"requires auth for /api/ethical-assessment and returns 401 without token"},{"ancestorTitles":["App integration routes (createApp)"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"App integration routes (createApp) allows authorized access to /api/ethical-assessment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"allows authorized access to /api/ethical-assessment"},{"ancestorTitles":["App integration routes (createApp)"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"App integration routes (createApp) handles missing routes gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing routes gracefully"}],"endTime":1760403020907,"message":"  ● App integration routes (createApp) › responds to /api/health\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"status\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:41903/api/health\"}\n\n      15 |     const res = await request(app).get('/api/health');\n      16 |     expect(res.status).toBe(200);\n    > 17 |     expect(res.body).toHaveProperty('status');\n         |                      ^\n      18 |   });\n      19 |\n      20 |   it('responds to /api/platform-status', async () => {\n\n      at toHaveProperty (__tests__/routes.integration.test.js:17:22)\n      at Generator.call (__tests__/routes.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.integration.test.js:2:1)\n\n  ● App integration routes (createApp) › responds to /api/platform-status\n\n    expect(received).toBeTruthy()\n\n    Received: false\n\n      25 |     expect(Object.keys(res.body).length).toBeGreaterThan(0);\n      26 |     const hasStatus = res.body && (Object.prototype.hasOwnProperty.call(res.body, 'status') || Object.prototype.hasOwnProperty.call(res.body, 'statusGeneral'));\n    > 27 |     expect(hasStatus).toBeTruthy();\n         |                       ^\n      28 |   });\n      29 |\n      30 |   it('requires auth for /api/ethical-assessment and returns 401 without token', async () => {\n\n      at toBeTruthy (__tests__/routes.integration.test.js:27:23)\n      at Generator.call (__tests__/routes.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.integration.test.js:2:1)\n\n  ● App integration routes (createApp) › requires auth for /api/ethical-assessment and returns 401 without token\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 401\n    Received: 200\n\n      30 |   it('requires auth for /api/ethical-assessment and returns 401 without token', async () => {\n      31 |     const res = await request(app).get('/api/ethical-assessment');\n    > 32 |     expect(res.status).toBe(401);\n         |                        ^\n      33 |   });\n      34 |\n      35 |   it('allows authorized access to /api/ethical-assessment', async () => {\n\n      at toBe (__tests__/routes.integration.test.js:32:24)\n      at Generator.call (__tests__/routes.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.integration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js","startTime":1760403017813,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GeophysicalRiskAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GeophysicalRiskAgent should process raw seismic data into a simplified format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should process raw seismic data into a simplified format"},{"ancestorTitles":["GeophysicalRiskAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GeophysicalRiskAgent should handle empty or invalid data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle empty or invalid data"}],"endTime":1760403020910,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/GeophysicalRiskAgent.test.js","startTime":1760403020792,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Simple agents tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Simple agents tests SignalAnalysisAgent processes signals","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"SignalAnalysisAgent processes signals"},{"ancestorTitles":["Simple agents tests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Simple agents tests RiskAssessmentAgent computes risk percentages","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"RiskAssessmentAgent computes risk percentages"}],"endTime":1760403020914,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.simple.test.js","startTime":1760403020803,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FMIIntegration"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration returns mock when API fails (fallback)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns mock when API fails (fallback)"},{"ancestorTitles":["FMIIntegration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration parses real JSON array response","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"parses real JSON array response"}],"endTime":1760403020915,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/fmiIntegration.unit.test.js","startTime":1760403020795,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eternalVigilanceService","getState"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService getState should return default state when kernel is not available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return default state when kernel is not available"},{"ancestorTitles":["eternalVigilanceService","getState"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService getState should return state from kernel when available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return state from kernel when available"},{"ancestorTitles":["eternalVigilanceService","subscribe and unsubscribe"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService subscribe and unsubscribe should add subscriber","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should add subscriber"},{"ancestorTitles":["eternalVigilanceService","subscribe and unsubscribe"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService subscribe and unsubscribe should remove subscriber","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should remove subscriber"},{"ancestorTitles":["eternalVigilanceService","generateReport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService generateReport should generate a report string","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate a report string"},{"ancestorTitles":["eternalVigilanceService","emitEvent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService emitEvent should call publish internally","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call publish internally"}],"endTime":1760403020924,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/eternalVigilanceService.test.js","startTime":1760403020811,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["communityResilienceService.getCommunityResilienceIndex"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"communityResilienceService.getCommunityResilienceIndex returns data from MetatronAgent successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns data from MetatronAgent successfully"},{"ancestorTitles":["communityResilienceService.getCommunityResilienceIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"communityResilienceService.getCommunityResilienceIndex falls back to mock data when agent fails","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"falls back to mock data when agent fails"},{"ancestorTitles":["communityResilienceService.getCommunityResilienceIndex"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"communityResilienceService.getCommunityResilienceIndex uses default countries and days when not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"uses default countries and days when not provided"}],"endTime":1760403020931,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/communityResilienceService.test.js","startTime":1760403020837,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel basics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basics should allocate and release resources","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should allocate and release resources"},{"ancestorTitles":["LogosKernel basics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basics should schedule and execute a task","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should schedule and execute a task"},{"ancestorTitles":["LogosKernel basics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basics getVigilanceStatus returns structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"getVigilanceStatus returns structure"},{"ancestorTitles":["LogosKernel basics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basics generateSovereigntyManifest writes a file","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generateSovereigntyManifest writes a file"}],"endTime":1760403020931,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.test.js","startTime":1760403020421,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should fetch real debt data successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should fetch real debt data successfully"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should handle API errors and return mock data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle API errors and return mock data"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should handle non-JSON responses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle non-JSON responses"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should handle invalid JSON","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid JSON"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should handle invalid data structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid data structure"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should use default debt level for unknown countries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default debt level for unknown countries"}],"endTime":1760403020935,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/fmiIntegration.test.js","startTime":1760403020804,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Eternal Vigilance routes"],"duration":53,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"indices\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:37617/api/eternal-vigilance/state\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"indices\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:37617/api/eternal-vigilance/state\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.eternalVigilance.test.js:22:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.eternalVigilance.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.eternalVigilance.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.eternalVigilance.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.eternalVigilance.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Eternal Vigilance routes GET /api/eternal-vigilance/state returns state","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /api/eternal-vigilance/state returns state"},{"ancestorTitles":["Eternal Vigilance routes"],"duration":57,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes POST /api/eternal-vigilance/start triggers start","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"POST /api/eternal-vigilance/start triggers start"},{"ancestorTitles":["Eternal Vigilance routes"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes POST /api/eternal-vigilance/report returns markdown","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"POST /api/eternal-vigilance/report returns markdown"},{"ancestorTitles":["Eternal Vigilance routes"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes POST /api/eternal-vigilance/emit requires message","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"POST /api/eternal-vigilance/emit requires message"},{"ancestorTitles":["Eternal Vigilance routes"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes POST /api/eternal-vigilance/emit with message succeeds","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"POST /api/eternal-vigilance/emit with message succeeds"}],"endTime":1760403020939,"message":"  ● Eternal Vigilance routes › GET /api/eternal-vigilance/state returns state\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"indices\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:37617/api/eternal-vigilance/state\"}\n\n      20 |     const res = await request(app).get('/api/eternal-vigilance/state').set('Authorization', 'Bearer demo-token');\n      21 |     expect(res.status).toBe(200);\n    > 22 |     expect(res.body).toHaveProperty('indices');\n         |                      ^\n      23 |     expect(res.body.indices).toHaveProperty('globalRisk');\n      24 |   });\n      25 |\n\n      at toHaveProperty (__tests__/routes.eternalVigilance.test.js:22:22)\n      at Generator.call (__tests__/routes.eternalVigilance.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.eternalVigilance.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.eternalVigilance.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.eternalVigilance.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.eternalVigilance.test.js","startTime":1760403017814,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["ReportGenerationAgent"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"ReportGenerationAgent should generate intelligence report","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should generate intelligence report"},{"ancestorTitles":["ReportGenerationAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ReportGenerationAgent should handle empty risks and correlations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty risks and correlations"},{"ancestorTitles":["ReportGenerationAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ReportGenerationAgent should include causal analysis in report","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should include causal analysis in report"}],"endTime":1760403020945,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/reportGenerationAgent.test.js","startTime":1760403020835,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["E2E backend with mock-server (spawn)"],"duration":51,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:60:33)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"E2E backend with mock-server (spawn) backend /api/seismic/activity returns processed data using mock-server","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"backend /api/seismic/activity returns processed data using mock-server"}],"endTime":1760403020948,"message":"  ● E2E backend with mock-server (spawn) › backend /api/seismic/activity returns processed data using mock-server\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      58 |     const body = res.body;\n      59 |     expect(body).toBeDefined();\n    > 60 |     expect(Array.isArray(body)).toBe(true);\n         |                                 ^\n      61 |     expect(body.length).toBeGreaterThan(0);\n      62 |     const evt = body[0];\n      63 |     expect(evt).toHaveProperty('id');\n\n      at toBe (__tests__/e2e.backend.mock.test.js:60:33)\n      at Generator.call (__tests__/e2e.backend.mock.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/e2e.backend.mock.test.js:2:1)\n      at asyncGeneratorStep (__tests__/e2e.backend.mock.test.js:2:1)\n      at asyncGeneratorStep (__tests__/e2e.backend.mock.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js","startTime":1760403017831,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Consciousness route"],"duration":47,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"source\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44545/api/consciousness\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"source\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44545/api/consciousness\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:27:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Consciousness route returns local fallback when Chroma client absent and no file","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns local fallback when Chroma client absent and no file"},{"ancestorTitles":["Consciousness route"],"duration":10,"failureDetails":[{"matcherResult":{"expected":"chroma","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"chroma\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"chroma\"\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:38:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Consciousness route returns chroma source when client provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"returns chroma source when client provided"}],"endTime":1760403020957,"message":"  ● Consciousness route › returns local fallback when Chroma client absent and no file\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"source\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:44545/api/consciousness\"}\n\n      25 |     const res = await request(app).get('/api/consciousness').set('Authorization', 'Bearer demo-token');\n      26 |     expect(res.status).toBe(200);\n    > 27 |     expect(res.body).toHaveProperty('source');\n         |                      ^\n      28 |     expect(['local', 'chroma']).toContain(res.body.source);\n      29 |   });\n      30 |\n\n      at toHaveProperty (__tests__/routes.consciousness.test.js:27:22)\n      at Generator.call (__tests__/routes.consciousness.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.consciousness.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.consciousness.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.consciousness.test.js:2:1)\n\n  ● Consciousness route › returns chroma source when client provided\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"chroma\"\n    Received: undefined\n\n      36 |     const res = await request(app).get('/api/consciousness').set('Authorization', 'Bearer demo-token');\n      37 |     expect(res.status).toBe(200);\n    > 38 |     expect(res.body.source).toBe('chroma');\n         |                             ^\n      39 |     expect(Array.isArray(res.body.items)).toBe(true);\n      40 |   });\n      41 | });\n\n      at toBe (__tests__/routes.consciousness.test.js:38:29)\n      at Generator.call (__tests__/routes.consciousness.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.consciousness.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.consciousness.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.consciousness.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js","startTime":1760403017824,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Demo routes"],"duration":44,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:43165/api/demo/full-state\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:43165/api/demo/full-state\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:93:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Demo routes GET /api/demo/full-state returns aggregated payload","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /api/demo/full-state returns aggregated payload"},{"ancestorTitles":["Demo routes"],"duration":14,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46131/api/demo/live-state\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"kpis\"\nReceived path: []\n\nReceived value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46131/api/demo/live-state\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:104:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Demo routes GET /api/demo/live-state returns live aggregated state","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"GET /api/demo/live-state returns live aggregated state"}],"endTime":1760403020973,"message":"  ● Demo routes › GET /api/demo/full-state returns aggregated payload\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"kpis\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:43165/api/demo/full-state\"}\n\n      91 |     const res = await request(app).get('/api/demo/full-state');\n      92 |     expect(res.status).toBe(200);\n    > 93 |     expect(res.body).toHaveProperty('kpis');\n         |                      ^\n      94 |     expect(res.body).toHaveProperty('countries');\n      95 |     expect(Array.isArray(res.body.countries)).toBe(true);\n      96 |     // countries should match LATAM list length (6)\n\n      at toHaveProperty (__tests__/routes.demo.test.js:93:22)\n      at Generator.call (__tests__/routes.demo.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.demo.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.demo.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.demo.test.js:2:1)\n\n  ● Demo routes › GET /api/demo/live-state returns live aggregated state\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"kpis\"\n    Received path: []\n\n    Received value: {\"error\": \"Mock not implemented\", \"url\": \"http://127.0.0.1:46131/api/demo/live-state\"}\n\n      102 |     const res = await request(app).get('/api/demo/live-state');\n      103 |     expect(res.status).toBe(200);\n    > 104 |     expect(res.body).toHaveProperty('kpis');\n          |                      ^\n      105 |     expect(res.body).toHaveProperty('countries');\n      106 |     expect(res.body.global).toHaveProperty('crypto');\n      107 |     expect(res.body.global).toHaveProperty('seismic');\n\n      at toHaveProperty (__tests__/routes.demo.test.js:104:22)\n      at Generator.call (__tests__/routes.demo.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.demo.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.demo.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.demo.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js","startTime":1760403017816,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760403026895,"message":"  ● Test suite failed to run\n\n    Cannot find module '../mocks/server.js' from '__tests__/routes.climate.test.js'\n\n      1 | import request from 'supertest';\n      2 | import { createApp } from '../src/index.js';\n    > 3 | import { server } from '../mocks/server.js';\n        | ^\n      4 |\n      5 | process.env.PRAEVISIO_BEARER_TOKEN = 'demo-token';\n      6 |\n\n      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)\n      at Object.require (__tests__/routes.climate.test.js:3:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.climate.test.js","startTime":1760403026895,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":313,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests allocateResources enforces token limits and allows allocation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"allocateResources enforces token limits and allows allocation"},{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":124,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests scheduleTask orders by priority and executeNextTask runs and releases tokens","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"scheduleTask orders by priority and executeNextTask runs and releases tokens"},{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":86,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests getMissionLogs returns not_found when no mission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getMissionLogs returns not_found when no mission"},{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":53,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests generateSovereigntyManifest writes file via fs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generateSovereigntyManifest writes file via fs"},{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests startMission handles ethics rejection and marks mission failed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission handles ethics rejection and marks mission failed"},{"ancestorTitles":["LogosKernel basic flows"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows allocate and release resources within limits","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"allocate and release resources within limits"},{"ancestorTitles":["LogosKernel basic flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows schedules and executes tasks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"schedules and executes tasks"},{"ancestorTitles":["LogosKernel basic flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows startMission handles happy path and marks mission completed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission handles happy path and marks mission completed"},{"ancestorTitles":["LogosKernel basic flows"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows initializeDrivers skips Neo4j in test mode","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"initializeDrivers skips Neo4j in test mode"},{"ancestorTitles":["LogosKernel basic flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows publishToVigilance does nothing if service not available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"publishToVigilance does nothing if service not available"},{"ancestorTitles":["LogosKernel basic flows"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows getVigilanceStatus returns perpetual flows status","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"getVigilanceStatus returns perpetual flows status"},{"ancestorTitles":["LogosKernel basic flows"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows startResourceMonitoring sets interval","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"startResourceMonitoring sets interval"}],"endTime":1760403020994,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.unit.test.js","startTime":1760403019816,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760403026895,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/davicho/etherai-foresight-platform-main/server/node_modules/nanoid/index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { webcrypto as crypto } from 'node:crypto'\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      1 | import express from 'express';\n    > 2 | import { nanoid } from 'nanoid';\n        | ^\n      3 | import * as kernelModule from '../orchestrator.js';\n      4 | const kernel = kernelModule.kernel || (kernelModule.default && kernelModule.default.kernel) || kernelModule;\n      5 | import { subscribe } from '../eventHub.js';\n\n      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)\n      at Object.require (src/routes/agent.js:2:1)\n      at Object.require (__tests__/performance/APIPerformance.test.js:9:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/performance/APIPerformance.test.js","startTime":1760403026895,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["LLM routes"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"LLM routes POST /api/llm/predict-tests returns fallback suggested test when no Neo4j","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"POST /api/llm/predict-tests returns fallback suggested test when no Neo4j"},{"ancestorTitles":["LLM routes"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"LLM routes POST /api/llm/propose-plan uses LLM call and returns result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"POST /api/llm/propose-plan uses LLM call and returns result"},{"ancestorTitles":["LLM routes"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"LLM routes POST /api/llm/generate-component returns component string","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"POST /api/llm/generate-component returns component string"},{"ancestorTitles":["LLM routes"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"LLM routes POST /api/llm/generate-test returns test string","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"POST /api/llm/generate-test returns test string"}],"endTime":1760403021086,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.llm.test.js","startTime":1760403019809,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createApp and bearerAuth"],"duration":2016,"failureDetails":[],"failureMessages":[],"fullName":"createApp and bearerAuth createApp returns an express app and does not schedule background tasks when disabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"createApp returns an express app and does not schedule background tasks when disabled"},{"ancestorTitles":["createApp and bearerAuth"],"duration":332,"failureDetails":[{}],"failureMessages":["Error: expected 401 \"Unauthorized\", got 200 \"OK\"\n    at expect (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:29:55)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n----\n    at Test._assertStatus (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:252:14)\n    at /home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:308:13\n    at Test._assertFunction (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:285:13)\n    at Test.assert (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:164:23)\n    at Server.localAssert (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:120:14)\n    at Object.onceWrapper (node:events:638:28)\n    at Server.emit (node:events:524:28)\n    at emitCloseNT (node:net:2344:8)\n    at processTicksAndRejections (node:internal/process/task_queues:81:21)"],"fullName":"createApp and bearerAuth bearerAuth rejects when no token and accepts when env token matches","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"bearerAuth rejects when no token and accepts when env token matches"},{"ancestorTitles":["createApp and bearerAuth"],"duration":116,"failureDetails":[],"failureMessages":[],"fullName":"createApp and bearerAuth safeImport handles import failures gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"safeImport handles import failures gracefully"},{"ancestorTitles":["createApp and bearerAuth"],"duration":102,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:67:30)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"createApp and bearerAuth ethical assessment endpoint returns data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"ethical assessment endpoint returns data"},{"ancestorTitles":["createApp and bearerAuth"],"duration":80,"failureDetails":[],"failureMessages":[],"fullName":"createApp and bearerAuth background tasks are scheduled when not disabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"background tasks are scheduled when not disabled"}],"endTime":1760403021338,"message":"  ● createApp and bearerAuth › bearerAuth rejects when no token and accepts when env token matches\n\n    expected 401 \"Unauthorized\", got 200 \"OK\"\n\n      27 |     await request(app).get('/api/platform-status').expect(200); // unprotected\n      28 |\n    > 29 |     const res401 = await request(app).get('/api/llm').expect(401);\n         |                                                       ^\n      30 |     expect(res401.body.error).toBe('Unauthorized');\n      31 |\n      32 |     // Provide env token -> success (200 or next handler)\n\n      at expect (__tests__/index.createApp.test.js:29:55)\n      at Generator.call (__tests__/index.createApp.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/index.createApp.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.test.js:2:1)\n      ----\n      at Test._assertStatus (../node_modules/supertest/lib/test.js:252:14)\n      at ../node_modules/supertest/lib/test.js:308:13\n      at Test._assertFunction (../node_modules/supertest/lib/test.js:285:13)\n      at Test.assert (../node_modules/supertest/lib/test.js:164:23)\n      at Server.localAssert (../node_modules/supertest/lib/test.js:120:14)\n\n  ● createApp and bearerAuth › ethical assessment endpoint returns data\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      65 |     const res = await request(app).get('/api/ethical-assessment').set('Authorization', 'Bearer env-secret');\n      66 |     expect(res.status).toBe(200);\n    > 67 |     expect(res.body.success).toBe(true);\n         |                              ^\n      68 |   });\n      69 |\n      70 |   test('background tasks are scheduled when not disabled', async () => {\n\n      at toBe (__tests__/index.createApp.test.js:67:30)\n      at Generator.call (__tests__/index.createApp.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/index.createApp.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.test.js:2:1)\n      at asyncGeneratorStep (__tests__/index.createApp.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js","startTime":1760403017816,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SeismicIntegration Service"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SeismicIntegration Service should fetch seismic data successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fetch seismic data successfully"},{"ancestorTitles":["SeismicIntegration Service"],"duration":1515,"failureDetails":[],"failureMessages":[],"fullName":"SeismicIntegration Service should throw an error if the API call fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if the API call fails"}],"endTime":1760403021468,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/SeismicIntegration.test.js","startTime":1760403019751,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["WorldBankIntegration","getKeyEconomicData"],"duration":739,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"country\": \"COL\", \"indicators\": {\"DT.DOD.DECT.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FI.RES.TOTL.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FP.CPI.TOTL.ZG\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"NY.GDP.PCAP.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"PA.NUS.FCRF\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"SL.UEM.TOTL.ZS\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}}, \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"country\": \"COL\", \"indicators\": {\"DT.DOD.DECT.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FI.RES.TOTL.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FP.CPI.TOTL.ZG\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"NY.GDP.PCAP.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"PA.NUS.FCRF\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"SL.UEM.TOTL.ZS\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}}, \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:29:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)"],"fullName":"WorldBankIntegration getKeyEconomicData should return mock data when FORCE_MOCKS is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return mock data when FORCE_MOCKS is true"},{"ancestorTitles":["WorldBankIntegration","getKeyEconomicData"],"duration":668,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getKeyEconomicData should fetch real data when not mocked","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fetch real data when not mocked"},{"ancestorTitles":["WorldBankIntegration","getKeyEconomicData"],"duration":690,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getKeyEconomicData should handle API errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API errors gracefully"},{"ancestorTitles":["WorldBankIntegration","getKeyEconomicData"],"duration":620,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getKeyEconomicData should handle network errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network errors"},{"ancestorTitles":["WorldBankIntegration","getFoodSecurityData"],"duration":107,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"countries\": [\"COL\"], \"data\": {\"COL\": {\"country\": \"MockCountry\", \"indicator\": \"Prevalence of undernourishment (% of population)\", \"value\": 7.5, \"year\": \"2023\"}}, \"indicator\": \"SN.ITK.DEFC.ZS\", \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"countries\": [\"COL\"], \"data\": {\"COL\": {\"country\": \"MockCountry\", \"indicator\": \"Prevalence of undernourishment (% of population)\", \"value\": 7.5, \"year\": \"2023\"}}, \"indicator\": \"SN.ITK.DEFC.ZS\", \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:67:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)"],"fullName":"WorldBankIntegration getFoodSecurityData should return mock data when FORCE_MOCKS is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return mock data when FORCE_MOCKS is true"},{"ancestorTitles":["WorldBankIntegration","getFoodSecurityData"],"duration":103,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getFoodSecurityData should fetch real food security data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fetch real food security data"},{"ancestorTitles":["WorldBankIntegration","getFoodSecurityData"],"duration":206,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getFoodSecurityData should handle multiple countries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle multiple countries"},{"ancestorTitles":["WorldBankIntegration","getEconomicIndicators"],"duration":103,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getEconomicIndicators should sort data by date descending","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should sort data by date descending"},{"ancestorTitles":["WorldBankIntegration","getEconomicIndicators"],"duration":103,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getEconomicIndicators should handle no data available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle no data available"}],"endTime":1760403022268,"message":"  ● WorldBankIntegration › getKeyEconomicData › should return mock data when FORCE_MOCKS is true\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"country\": \"COL\", \"indicators\": {\"DT.DOD.DECT.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FI.RES.TOTL.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FP.CPI.TOTL.ZG\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"NY.GDP.PCAP.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"PA.NUS.FCRF\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"SL.UEM.TOTL.ZS\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}}, \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}\n\n      27 |\n      28 |       expect(result).toHaveProperty('country', 'COL');\n    > 29 |       expect(result).toHaveProperty('isMock', true);\n         |                      ^\n      30 |       expect(result.indicators['NY.GDP.PCAP.CD']).toBeDefined();\n      31 |       expect(result.indicators['NY.GDP.PCAP.CD']).toEqual({\n      32 |         value: 6500.23,\n\n      at toHaveProperty (__tests__/integrations/worldBankIntegration.test.js:29:22)\n      at Generator.call (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/worldBankIntegration.test.js:2:1)\n\n  ● WorldBankIntegration › getFoodSecurityData › should return mock data when FORCE_MOCKS is true\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"countries\": [\"COL\"], \"data\": {\"COL\": {\"country\": \"MockCountry\", \"indicator\": \"Prevalence of undernourishment (% of population)\", \"value\": 7.5, \"year\": \"2023\"}}, \"indicator\": \"SN.ITK.DEFC.ZS\", \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}\n\n      65 |       const result = await newIntegration.getFoodSecurityData(['COL'], '2020', '2024');\n      66 |\n    > 67 |       expect(result).toHaveProperty('isMock', true);\n         |                      ^\n      68 |       expect(result.data).toHaveProperty('COL');\n      69 |       expect(result.data.COL).toHaveProperty('value');\n      70 |       expect(result.data.COL).toHaveProperty('indicator');\n\n      at toHaveProperty (__tests__/integrations/worldBankIntegration.test.js:67:22)\n      at Generator.call (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/worldBankIntegration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js","startTime":1760403017816,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["sseTokenService (in-memory fallback)"],"duration":172,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService (in-memory fallback) generateToken and validateToken work in-memory","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"generateToken and validateToken work in-memory"},{"ancestorTitles":["sseTokenService (in-memory fallback)"],"duration":191,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService (in-memory fallback) token expires when generated with negative ttl","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"token expires when generated with negative ttl"},{"ancestorTitles":["sseTokenService (in-memory fallback)"],"duration":220,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService (in-memory fallback) initialize and shutdown are safe to call in test env","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"initialize and shutdown are safe to call in test env"},{"ancestorTitles":["sseTokenService in-memory fallback"],"duration":1102,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService in-memory fallback generateToken and validateToken work in memory","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"generateToken and validateToken work in memory"},{"ancestorTitles":["sseTokenService in-memory fallback"],"duration":1137,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService in-memory fallback cleanupExpired removes expired entries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"cleanupExpired removes expired entries"}],"endTime":1760403023120,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/sseTokenService.unit.test.js","startTime":1760403019666,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Import all source modules (smoke)"],"duration":5494,"failureDetails":[],"failureMessages":[],"fullName":"Import all source modules (smoke) imports modules in isolated node processes (no side-effect crash)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"imports modules in isolated node processes (no side-effect crash)"}],"endTime":1760403025279,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/import_all_smoke.test.js","startTime":1760403019657,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent EthicsCouncil without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent EthicsCouncil without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Oracle without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Oracle without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent PlanningCrew without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent PlanningCrew without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent DevelopmentCrew without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent DevelopmentCrew without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Ares without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Ares without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Hephaestus without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Hephaestus without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Tyche without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Tyche without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent ConsensusAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent ConsensusAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Socrates without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Socrates without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Telos without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Telos without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":6484,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent DataAcquisitionAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent DataAcquisitionAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent SignalAnalysisAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent SignalAnalysisAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent CausalCorrelationAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent CausalCorrelationAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent RiskAssessmentAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent RiskAssessmentAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent ReportGenerationAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent ReportGenerationAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent PeruAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent PeruAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent DeploymentCrew without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent DeploymentCrew without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent CryptoVolatilityAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent CryptoVolatilityAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent CommunityResilienceAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent CommunityResilienceAgent without throwing"}],"endTime":1760403026326,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.bulk.test.js","startTime":1760403019657,"status":"passed","summary":""}],"wasInterrupted":false}
