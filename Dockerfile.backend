
FROM node:20-bullseye-slim AS builder
WORKDIR /app

# Copy source first so that installs happen in the correct folder (/app/app)
COPY server ./app
WORKDIR /app/app

# Copy package files and install deps inside /app/app so node_modules are colocated
# Copy server package files. If the repo uses a root lockfile (workspaces),
# prefer that lockfile by copying it into the server folder inside the image
# so that `npm ci` has a lockfile to consume.
COPY server/package*.json ./
# If a root package-lock.json was provided in the build context, copy it into
# the server app folder as package-lock.json so npm ci works with workspaces.
# This COPY will simply be a no-op if no root package-lock.json is present.
COPY package-lock.json ./package-lock.json
# Try clean install from lockfile; if lockfile is incompatible, fall back to a
# best-effort `npm install --legacy-peer-deps` to allow the image build to
# proceed. This keeps deterministic installs when possible but avoids hard
# failures in heterogeneous workspace setups.
RUN if [ -f package-lock.json ]; then echo "Using root package-lock.json for server npm ci"; fi \
 && (npm ci --include=dev --no-audit --no-fund || (echo "npm ci failed, falling back to npm install" && npm install --legacy-peer-deps --no-audit --no-fund))

# Generate Prisma client against the schema (will use DATABASE_URL in CI)
RUN npx prisma generate --schema=./prisma/schema.prisma || true

# Optional: build step if project has a build script (keeps compatibility)
RUN npm run build --if-present || true

# Final image
FROM node:20-bullseye-slim AS runner
WORKDIR /app
ENV NODE_ENV=production
COPY --from=builder /app/app ./
RUN apt-get update && apt-get install -y curl ca-certificates && rm -rf /var/lib/apt/lists/*
EXPOSE 4000
HEALTHCHECK --interval=10s --timeout=5s --start-period=5s --retries=5 \
	CMD curl -f http://localhost:4000/api/platform-status || exit 1
CMD ["node", "src/index.js"]
