# Etapa 1: Constructor - Fortalecida con herramientas de compilación
FROM node:20-bullseye-slim AS builder
WORKDIR /app

# Instalar herramientas de compilación esenciales para dependencias nativas (como Prisma)
RUN apt-get update && apt-get install -y python build-essential && rm -rf /var/lib/apt/lists/*

# Copiar solo el package.json del servidor para generar un lockfile limpio.
COPY server/package.json ./

# Generar un package-lock.json y las dependencias exclusivamente para el servidor.
RUN npm install --legacy-peer-deps --no-audit --no-fund

# Ahora, copiar el resto del código fuente del servidor.
COPY server/ ./

# Generar el cliente Prisma.
RUN npx prisma generate --schema=./prisma/schema.prisma

# --- Etapa 2: Imagen Final ---
FROM node:20-bullseye-slim AS runner
WORKDIR /app
ENV NODE_ENV=production

# Instalar curl y postgresql-client para el healthcheck y espera de db.
RUN apt-get update && apt-get install -y curl postgresql-client && rm -rf /var/lib/apt/lists/*

# Copiar los artefactos de la etapa de construcción (código y node_modules).
COPY --from=builder /app ./

# Copiar el script de entrypoint
COPY server/entrypoint.sh ./

EXPOSE 4000

# Healthcheck para verificar que el servidor está respondiendo.
HEALTHCHECK --interval=10s --timeout=5s --start-period=15s --retries=5 \
  CMD curl -f http://localhost:4000/api/platform-status || exit 1

# Usar el entrypoint personalizado
ENTRYPOINT ["./entrypoint.sh"]