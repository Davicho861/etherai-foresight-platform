#!/usr/bin/env python3
"""
scripts/aion_open_pr.py

Uso seguro:
- Requiere las variables de entorno: GITHUB_TOKEN y GITHUB_REPOSITORY (owner/repo)
- Crea una rama remota `aion/evolution-<timestamp>`, empuja el `EVOLUTION_REPORT.md` y abre un PR.

Este script NO se ejecutará automáticamente desde aquí: debe ejecutarlo un usuario con token.
"""
import os
import sys
import json
import argparse
from datetime import datetime
import subprocess

ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
REPORT_PATH = os.path.join(ROOT, 'EVOLUTION_REPORT.md')


def log(msg):
    print(msg)


def run(cmd, dry_run=False):
    log(f"RUN: {cmd}")
    if dry_run:
        log('(dry-run) command not executed')
        return True
    res = subprocess.run(cmd, shell=True, cwd=ROOT, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if res.stdout:
        log(res.stdout.strip())
    if res.stderr:
        log(res.stderr.strip())
    return res.returncode == 0


def main():
    parser = argparse.ArgumentParser(description='Open PR for Aion EVOLUTION_REPORT')
    parser.add_argument('--dry-run', action='store_true', help='Do not push or create PR; just show actions')
    parser.add_argument('--auto-pr', action='store_true', help='Automatically call GitHub API to create PR (requires token)')
    parser.add_argument('--labels', type=str, default='', help='Comma-separated labels to add to the PR')
    parser.add_argument('--reviewers', type=str, default='', help='Comma-separated reviewer usernames to request review from')
    parser.add_argument('--auto-merge', action='store_true', help='Attempt to auto-merge the PR after creation (requires token and repo perms)')
    args = parser.parse_args()

    token = os.environ.get('GITHUB_TOKEN')
    repo = os.environ.get('GITHUB_REPOSITORY')

    if args.auto_pr and (not token or not repo):
        log('ERROR: --auto-pr requires GITHUB_TOKEN and GITHUB_REPOSITORY in env')
        return 2

    if not os.path.exists(REPORT_PATH):
        log(f'ERROR: {REPORT_PATH} not found. Generate the report first.')
        return 3

    branch = 'aion/evolution-' + datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')

    # Create local branch
    if not run(f'git checkout -b {branch}', dry_run=args.dry_run):
        log('ERROR: failed to create local branch')
        return 4

    if not run(f'git add {os.path.relpath(REPORT_PATH, ROOT)}', dry_run=args.dry_run):
        log('ERROR: git add failed')
        return 5

    if not run('git commit -m "Aion: EVOLUTION_REPORT (automatic)"', dry_run=args.dry_run):
        log('ERROR: git commit failed (maybe nothing to commit)')

    # Push branch using token - use HTTPS remote if needed
    if args.dry_run:
        log('(dry-run) would push branch to remote:')
        log(f'git push https://<TOKEN>@github.com/{repo}.git {branch}')
    else:
        remote = f'https://{token}@github.com/{repo}.git'
        if not run(f'git push {remote} {branch}'):
            log('ERROR: git push failed. Check token permissions (repo scope required).')
            return 6

    # Create PR using GitHub API via curl or via direct API call
    title = f'Aion - automated evolution report {datetime.utcnow().isoformat()}'
    body = 'Automated EVOLUTION_REPORT generated by Aion simulation. Please review.'
    payload = {
        'title': title,
        'head': branch,
        'base': 'main',
        'body': body
    }

    labels = [l.strip() for l in args.labels.split(',') if l.strip()]
    reviewers = [r.strip() for r in args.reviewers.split(',') if r.strip()]

    payload_json = json.dumps(payload)

    curl_cmd = (
        f"curl -s -X POST -H 'Authorization: token {token}' "
        f"-H 'Accept: application/vnd.github.v3+json' "
        f"https://api.github.com/repos/{repo}/pulls -d '{payload}'"
    )

    pr_url = None
    if args.auto_pr and not args.dry_run:
        log('Creating PR via GitHub API...')
        # Execute curl to create PR
        run(curl_cmd)
        # Note: for simplicity we instruct user to fetch PR info manually; full response parsing can be added.
        pr_url = '(see API response)'
    else:
        log('To create the PR, run the following command (or re-run with --auto-pr and valid token):')
        log(curl_cmd)

    # If labels were provided, show the command to add them
    if labels:
        labels_payload = json.dumps({'labels': labels})
        labels_cmd = f"curl -s -X POST -H 'Authorization: token {token}' -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/{repo}/issues/{{PR_NUMBER}}/labels -d '{labels_payload}'"
        log('To add labels (replace {PR_NUMBER} with the pull request number):')
        log(labels_cmd)

    # If reviewers were provided, show the command to request reviewers
    if reviewers:
        reviewers_payload = json.dumps({'reviewers': reviewers})
        reviewers_cmd = f"curl -s -X POST -H 'Authorization: token {token}' -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/{repo}/pulls/{{PR_NUMBER}}/requested_reviewers -d '{reviewers_payload}'"
        log('To request reviewers (replace {PR_NUMBER} with the pull request number):')
        log(reviewers_cmd)

    # Auto-merge instruction
    if args.auto_merge:
        merge_cmd = f"curl -s -X PUT -H 'Authorization: token {token}' -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/{repo}/pulls/{{PR_NUMBER}}/merge -d '{json.dumps({'merge_method':'merge'})}'"
        log('To auto-merge the PR (replace {PR_NUMBER} with the pull request number):')
        log(merge_cmd)

    return 0


if __name__ == '__main__':
    sys.exit(main())
