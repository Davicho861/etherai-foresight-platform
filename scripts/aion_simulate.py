#!/usr/bin/env python3
"""
Simulación local del ciclo Aion de evolución eterna.

Este script realiza operaciones seguras y locales:
- genera `EVOLUTION_REPORT.md` describiendo la "misión"
- crea una rama `aion/evolution-<timestamp>`
- añade y comitea los archivos generados
- intenta fusionar la rama en `main` mediante un merge fast-forward local si `main` existe

No realiza llamadas de red ni modifica remotos.
"""
import os
import sys
import subprocess
from datetime import datetime

ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
REPORT_PATH = os.path.join(ROOT, 'EVOLUTION_REPORT.md')
LOG_PATH = os.path.join(ROOT, 'tmp', 'aion_simulation.log')


def log(msg):
    os.makedirs(os.path.dirname(LOG_PATH), exist_ok=True)
    ts = datetime.utcnow().isoformat() + 'Z'
    line = f"[{ts}] {msg}\n"
    with open(LOG_PATH, 'a') as f:
        f.write(line)
    print(line, end='')


def run(cmd, **kwargs):
    log(f"RUN: {cmd}")
    res = subprocess.run(cmd, shell=True, cwd=ROOT, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if res.stdout:
        log(f"OUT: {res.stdout.strip()}")
    if res.stderr:
        log(f"ERR: {res.stderr.strip()}")
    return res


def generate_report(mission_name, summary, actions):
    ts = datetime.utcnow().isoformat() + 'Z'
    content = [
        f"# EVOLUTION REPORT - {mission_name}\n",
        f"Generated: {ts}\n",
        "## Summary\n",
        summary + "\n",
        "## Actions Taken\n",
    ]
    for a in actions:
        content.append(f"- {a}\n")
    content.append("\n## Verification\n- Local git operations performed. No network calls.\n")
    with open(REPORT_PATH, 'w') as f:
        f.writelines(content)
    log(f"Generated report at {REPORT_PATH}")


def safe_git_init_check():
    # Ensure we're in a git repo
    res = run('git rev-parse --is-inside-work-tree')
    return res.returncode == 0


def current_branch():
    res = run('git rev-parse --abbrev-ref HEAD')
    if res.returncode == 0:
        return res.stdout.strip()
    return None


def create_and_merge_branch(branch_name):
    # create branch
    res = run(f'git checkout -b {branch_name}')
    if res.returncode != 0:
        log('Failed to create branch; aborting branch workflow')
        return False

    # add and commit report
    run(f'git add {os.path.relpath(REPORT_PATH, ROOT)}')
    res = run('git commit -m "Aion: EVOLUTION_REPORT generated by simulation"')
    if res.returncode != 0:
        log('Nothing to commit or commit failed')

    # switch to main if exists
    res = run('git show-ref --verify --quiet refs/heads/main')
    if res.returncode == 0:
        run('git checkout main')
        # attempt fast-forward merge
        res = run(f'git merge --ff-only {branch_name}')
        if res.returncode == 0:
            log(f'Merged {branch_name} into main (fast-forward)')
        else:
            log('Fast-forward merge failed; leaving branch in place')
            run(f'git checkout {branch_name}')
    else:
        log('No local branch "main" found; merging skipped')

    return True


def main():
    mission_name = 'Aion - Praevisio Eternal Evolution (sim)'
    summary = (
        'Simulación local que demuestra el ciclo de auto-evolución: ' 
        'análisis, propuesta, creación de artefactos, y fusión local en main.'
    )
    actions = [
        'Activación simulada de Kairós y Cronos (no-network) para identificar mejoras.',
        'Generación de un EVOLUTION_REPORT.md con hallazgos y plan de mejora.',
        'Creación de rama local, commit del reporte y intento de merge en main.'
    ]

    log('Starting Aion simulation')

    generate_report(mission_name, summary, actions)

    # Si estamos en CI, solo generamos el informe y salimos (no tocamos git)
    ci_mode = os.environ.get('AION_CI_MODE', '0') == '1'
    if ci_mode:
        log('CI mode enabled: report generated, skipping git operations')
        log('Aion simulation completed (CI mode)')
        return 0

    if not safe_git_init_check():
        log('Not a git repository. Exiting after report generation.')
        return 1

    branch_name = 'aion/evolution-' + datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')
    success = create_and_merge_branch(branch_name)

    if success:
        log('Aion simulation completed')
        return 0
    else:
        log('Aion simulation encountered errors')
        return 2


if __name__ == '__main__':
    sys.exit(main())
