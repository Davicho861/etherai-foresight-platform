[{"filePath":"/home/davicho/etherai-foresight-platform-main/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/__mocks__/react-globe.gl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/__tests__/hooks/usePrefetch.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/__tests__/hooks/useServiceWorker.test.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'result' is assigned a value but never used.","line":63,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"result"},"fix":{"range":[1792,1848],"text":""},"desc":"Remove unused variable 'result'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used.","line":63,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\nimport { useServiceWorker } from '../../hooks/useServiceWorker';\n\n// Mock navigator.serviceWorker\nconst mockServiceWorker = {\n  register: jest.fn(),\n  ready: jest.fn(),\n  addEventListener: jest.fn(),\n  controller: null,\n};\n\nObject.defineProperty(navigator, 'serviceWorker', {\n  value: mockServiceWorker,\n  writable: true,\n});\n\ndescribe('useServiceWorker', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Reset service worker support\n    Object.defineProperty(navigator, 'serviceWorker', {\n      value: mockServiceWorker,\n      writable: true,\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllTimers();\n  });\n\n  it('should initialize with default values', () => {\n    const { result } = renderHook(() => useServiceWorker());\n\n    expect(result.current.isSupported).toBe(true);\n    expect(result.current.isRegistered).toBe(false);\n    expect(result.current.isUpdating).toBe(false);\n    expect(result.current.updateAvailable).toBe(false);\n  });\n\n  it('should register service worker successfully', async () => {\n    const mockRegistration = {\n      addEventListener: jest.fn(),\n    };\n\n    mockServiceWorker.register.mockResolvedValue(mockRegistration);\n\n    const { result } = renderHook(() => useServiceWorker());\n\n    await act(async () => {\n      // Wait for useEffect to run\n      await new Promise(resolve => setTimeout(resolve, 0));\n    });\n\n    expect(mockServiceWorker.register).toHaveBeenCalledWith('/sw.js');\n    expect(result.current.isRegistered).toBe(true);\n  });\n\n  it('should handle service worker registration failure', async () => {\n    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n    mockServiceWorker.register.mockRejectedValue(new Error('Registration failed'));\n\n    const { result } = renderHook(() => useServiceWorker());\n\n    await act(async () => {\n      await new Promise(resolve => setTimeout(resolve, 0));\n    });\n\n    expect(consoleErrorSpy).toHaveBeenCalledWith(\n      '[SW] Service worker registration failed:',\n      expect.any(Error)\n    );\n\n    consoleErrorSpy.mockRestore();\n  });\n\n  it('should handle update found event', async () => {\n    const mockRegistration = {\n      addEventListener: jest.fn(),\n      installing: {\n        addEventListener: jest.fn(),\n        state: 'installing',\n      },\n    };\n\n    mockServiceWorker.register.mockResolvedValue(mockRegistration);\n\n    const { result } = renderHook(() => useServiceWorker());\n\n    await act(async () => {\n      await new Promise(resolve => setTimeout(resolve, 0));\n    });\n\n    // Trigger updatefound event\n    const updateFoundCallback = mockRegistration.addEventListener.mock.calls.find(\n      call => call[0] === 'updatefound'\n    )[1];\n\n    act(() => {\n      updateFoundCallback();\n    });\n\n    expect(result.current.isUpdating).toBe(true);\n\n    // Simulate worker state change to installed\n    const stateChangeCallback = mockRegistration.installing.addEventListener.mock.calls.find(\n      call => call[0] === 'statechange'\n    )[1];\n\n    act(() => {\n      stateChangeCallback();\n    });\n\n    expect(result.current.updateAvailable).toBe(true);\n    expect(result.current.isUpdating).toBe(false);\n  });\n\n  it('should handle controller change', async () => {\n    const mockRegistration = {\n      addEventListener: jest.fn(),\n    };\n\n    mockServiceWorker.register.mockResolvedValue(mockRegistration);\n    const mockReload = jest.fn();\n    Object.defineProperty(window, 'location', {\n      value: { reload: mockReload },\n      writable: true,\n    });\n\n    renderHook(() => useServiceWorker());\n\n    await act(async () => {\n      await new Promise(resolve => setTimeout(resolve, 0));\n    });\n\n    // Trigger controllerchange event\n    const controllerChangeCallback = mockServiceWorker.addEventListener.mock.calls.find(\n      call => call[0] === 'controllerchange'\n    )[1];\n\n    act(() => {\n      controllerChangeCallback();\n    });\n\n    expect(mockReload).toHaveBeenCalled();\n  });\n\n  it('should handle message events', async () => {\n    const mockRegistration = {\n      addEventListener: jest.fn(),\n    };\n\n    mockServiceWorker.register.mockResolvedValue(mockRegistration);\n    const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n\n    renderHook(() => useServiceWorker());\n\n    await act(async () => {\n      await new Promise(resolve => setTimeout(resolve, 0));\n    });\n\n    // Trigger message event\n    const messageCallback = mockServiceWorker.addEventListener.mock.calls.find(\n      call => call[0] === 'message'\n    )[1];\n\n    const mockEvent = { data: 'test message' };\n\n    act(() => {\n      messageCallback(mockEvent);\n    });\n\n    expect(consoleLogSpy).toHaveBeenCalledWith('[SW] Message from service worker:', 'test message');\n\n    consoleLogSpy.mockRestore();\n  });\n\n  it('should update service worker', async () => {\n    const mockRegistration = {\n      update: jest.fn().mockResolvedValue(undefined),\n    };\n\n    mockServiceWorker.ready.mockResolvedValue(mockRegistration);\n\n    const { result } = renderHook(() => useServiceWorker());\n\n    await act(async () => {\n      await result.current.updateServiceWorker();\n    });\n\n    expect(mockServiceWorker.ready).toHaveBeenCalled();\n    expect(mockRegistration.update).toHaveBeenCalled();\n  });\n\n  it('should skip waiting when update is available', async () => {\n    const mockRegistration = {\n      waiting: {\n        postMessage: jest.fn(),\n      },\n    };\n\n    mockServiceWorker.ready.mockResolvedValue(mockRegistration);\n\n    const { result } = renderHook(() => useServiceWorker());\n\n    // Manually set update available\n    act(() => {\n      // Simulate update available state\n      result.current.updateAvailable = true;\n    });\n\n    await act(async () => {\n      await result.current.skipWaiting();\n    });\n\n    expect(mockServiceWorker.ready).toHaveBeenCalled();\n    expect(mockRegistration.waiting.postMessage).toHaveBeenCalledWith({ type: 'SKIP_WAITING' });\n  });\n\n  it('should not skip waiting when no update is available', async () => {\n    const { result } = renderHook(() => useServiceWorker());\n\n    await act(async () => {\n      await result.current.skipWaiting();\n    });\n\n    expect(mockServiceWorker.ready).not.toHaveBeenCalled();\n  });\n\n  it('should handle unsupported service worker', () => {\n    // Remove service worker support\n    delete (navigator as any).serviceWorker;\n\n    const { result } = renderHook(() => useServiceWorker());\n\n    expect(result.current.isSupported).toBe(false);\n    expect(result.current.isRegistered).toBe(false);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/__tests__/hooks/useXaiExplain.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/__tests__/pages/SdlcDashboardPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/__tests__/performance/PerformanceOptimization.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/AdvancedInteractiveDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/AnimatedMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/AutoPreservationWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ClimateWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/CommandCenterLayout.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'loadingStatus' is assigned a value but never used.","line":38,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"loadingStatus"},"fix":{"range":[1790,1803],"text":""},"desc":"Remove unused variable 'loadingStatus'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loadingStatus' is assigned a value but never used.","line":38,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":42,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":42,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":70,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":70,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":104,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":104,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":174,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":174,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Sun, Moon, Globe, LayoutDashboard, Activity, Brain, Lightbulb, AlertCircle, Settings } from 'lucide-react';\nimport Dashboard from '@/pages/Dashboard';\n\ntype PlatformStatus = {\n  statusGeneral: string;\n  componentes: {\n    apiPrincipal: { status: string; latencia_ms: number };\n    baseDeDatos: { status: string; conexionesActivas: number };\n    motorPredictivoIA: { status: string; modelosCargados: number };\n    pipelineDeDatos: { status: string; ultimoIngreso: string };\n  };\n  analisisActivos: number;\n  alertasCriticas: number;\n  cargaDelSistema: number;\n};\n\nconst StatusDot: React.FC<{ status: string }> = ({ status }) => {\n  let color = 'bg-gray-400';\n  if (status === 'ONLINE' || status === 'ACTIVO') color = 'bg-green-500';\n  else if (status === 'DEGRADADO') color = 'bg-yellow-400';\n  else if (status === 'OFFLINE' || status === 'INACTIVO') color = 'bg-red-500';\n  return <span className={`inline-block w-2 h-2 rounded-full mr-2 ${color}`}></span>;\n};\n\nconst NavItem: React.FC<{ to?: string; icon: React.ReactNode; label: string; collapsed: boolean; status?: string }> = ({ to = '#', icon, label, collapsed, status }) => (\n  <Link to={to} className=\"flex items-center space-x-3 px-3 py-2 rounded hover:bg-gray-700/40\">\n    <span className=\"w-5 h-5\">{icon}</span>\n    {!collapsed && <span className=\"flex items-center text-sm\">{status && <StatusDot status={status} />}{label}</span>}\n  </Link>\n);\n\nconst CommandCenterLayout: React.FC = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  const [dark, setDark] = useState(document.documentElement.classList.contains('dark'));\n  const [platformStatus, setPlatformStatus] = useState<PlatformStatus | null>(null);\n  const [loadingStatus, setLoadingStatus] = useState(true);\n  const [isMockMode, setIsMockMode] = useState(() => {\n    try {\n      return typeof window !== 'undefined' && window.localStorage && window.localStorage.getItem('NATIVE_DEV_MODE') === 'true';\n    } catch (e) {\n      return false;\n    }\n  });\n\n  useEffect(() => {\n    if (dark) document.documentElement.classList.add('dark');\n    else document.documentElement.classList.remove('dark');\n  }, [dark]);\n\n  useEffect(() => {\n    console.log('CommandCenterLayout useEffect');\n    let timer: NodeJS.Timeout;\n    const fetchStatus = async () => {\n      try {\n        const token = (typeof window !== 'undefined' && window.localStorage.getItem('praevisio_token')) || 'demo-token';\n        console.log('token:', token);\n        // Safe runtime env accessor to avoid import.meta usage (Jest/Node incompatibilities)\n        const getEnvFlag = (key: string) => {\n          try {\n            // Prefer a runtime-injected global\n            if (typeof (globalThis as any).__RUNTIME_ENV__ !== 'undefined' && (globalThis as any).__RUNTIME_ENV__[key]) {\n              return String((globalThis as any).__RUNTIME_ENV__[key]);\n            }\n            // Fallback to process.env when available (tests)\n            if (typeof process !== 'undefined' && process.env && process.env[key]) {\n              return String(process.env[key]);\n            }\n          } catch (e) {\n            // ignore\n          }\n          return undefined;\n        };\n        const isTestMode = getEnvFlag('TEST_MODE') === 'true';\n        const url = isTestMode ? 'http://localhost:3001/api/platform-status' : '/api/platform-status';\n        console.log('fetching:', url, 'testMode:', isTestMode);\n        const res = await fetch(url, { headers: { Authorization: `Bearer ${token}` } });\n        console.log('res.ok:', res.ok, 'status:', res.status);\n        if (!res.ok) throw new Error('fetch_error');\n        const json = await res.json();\n        console.log('json:', json);\n        setPlatformStatus(json);\n      } catch (err) {\n        console.log('fetch error:', err);\n        setPlatformStatus(null);\n      } finally {\n        setLoadingStatus(false);\n      }\n    };\n    fetchStatus();\n    timer = setInterval(fetchStatus, 60000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const getEnvFlagTop = (key: string) => {\n    try {\n      if (typeof (globalThis as any).__RUNTIME_ENV__ !== 'undefined' && (globalThis as any).__RUNTIME_ENV__[key]) {\n        return String((globalThis as any).__RUNTIME_ENV__[key]);\n      }\n      if (typeof process !== 'undefined' && process.env && process.env[key]) {\n        return String(process.env[key]);\n      }\n    } catch (e) {\n      // ignore\n    }\n    return undefined;\n  };\n\n  const globalMockActive = (getEnvFlagTop('FORCE_MOCKS') === 'true') || isMockMode;\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100\">\n      {/* Global mock/banner indicator */}\n      {globalMockActive && (\n        <div className=\"fixed top-2 left-1/2 transform -translate-x-1/2 z-50\">\n          <div className=\"px-3 py-1 rounded-full bg-yellow-600 text-black text-sm font-semibold\">MODO SIMULADO</div>\n        </div>\n      )}\n      <aside className={`flex flex-col ${collapsed ? 'w-16' : 'w-64'} bg-etherblue-dark/80 text-white border-r border-gray-800 transition-all`} data-testid=\"sidebar-nav\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-white/10 rounded\">\n              <Globe className=\"w-5 h-5\" />\n            </div>\n            {!collapsed && <div className=\"font-bold\">Praevisio AI</div>}\n          </div>\n          <button aria-label=\"collapse\" onClick={() => setCollapsed(s => !s)} className=\"p-2 rounded hover:bg-white/5\" data-testid=\"sidebar-collapse-btn\">\n            {/* simple menu icon */}\n            <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M4 6h16M4 12h16M4 18h16\"/></svg>\n          </button>\n        </div>\n\n        {/* Estado General */}\n        {!collapsed && (\n          <div className=\"px-4 pb-2\" data-testid=\"platform-status\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-bold text-lg\">{platformStatus ? platformStatus.statusGeneral : 'Cargando...'}</span>\n              {platformStatus && <StatusDot status={platformStatus.statusGeneral === 'OPERACIONAL' ? 'ONLINE' : 'OFFLINE'} />}\n            </div>\n          </div>\n        )}\n\n        <nav className=\"flex-1 p-2 space-y-1\">\n          <NavItem to=\"/dashboard\" icon={<LayoutDashboard />} label=\"Visión General\" collapsed={collapsed} status={platformStatus?.componentes?.apiPrincipal?.status} data-testid=\"nav-vision-general\" />\n          <NavItem to=\"#\" icon={<Activity />} label=\"Análisis de Señales\" collapsed={collapsed} status={platformStatus?.componentes?.pipelineDeDatos?.status} data-testid=\"nav-analisis-de-senales\" />\n          <NavItem to=\"#\" icon={<Brain />} label=\"Modelos Predictivos\" collapsed={collapsed} status={platformStatus?.componentes?.motorPredictivoIA?.status} data-testid=\"nav-modelos-predictivos\" />\n          <NavItem to=\"#\" icon={<Lightbulb />} label=\"Generador de Escenarios\" collapsed={collapsed} data-testid=\"nav-generador-de-escenarios\" />\n          <NavItem to=\"#\" icon={<AlertCircle />} label=\"Reportes y Alertas\" collapsed={collapsed} data-testid=\"nav-reportes-y-alertas\" />\n          <NavItem to=\"#\" icon={<Settings />} label=\"Configuración\" collapsed={collapsed} data-testid=\"nav-configuracion\" />\n        </nav>\n\n        <div className=\"p-4\" data-testid=\"user-profile\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gray-800 rounded-full flex items-center justify-center\">A</div>\n              {!collapsed && <div className=\"text-sm\">Nombre de Analista<br/><span className=\"text-xs text-gray-300\">Estratega de Riesgos</span></div>}\n            </div>\n            {!collapsed && (\n              <div className=\"flex items-center space-x-2\">\n                <button onClick={() => setDark(d => !d)} className=\"p-2 rounded hover:bg-white/5\" data-testid=\"theme-toggle-btn\">\n                  {dark ? <Sun className=\"w-4 h-4\" /> : <Moon className=\"w-4 h-4\" />}\n                </button>\n\n                {/* Toggle for mock mode (stores flag in localStorage) */}\n                <button\n                  onClick={() => {\n                    try {\n                      const next = !isMockMode;\n                      setIsMockMode(next);\n                      if (typeof window !== 'undefined' && window.localStorage) {\n                        window.localStorage.setItem('NATIVE_DEV_MODE', next ? 'true' : 'false');\n                      }\n                    } catch (e) {\n                      // ignore\n                    }\n                  }}\n                  className={`px-2 py-1 rounded text-xs ${isMockMode ? 'bg-yellow-600 text-black' : 'bg-gray-700 text-white'}`}\n                  data-testid=\"mock-toggle-btn\"\n                >\n                  {isMockMode ? 'SIMULADO ON' : 'SIMULADO OFF'}\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </aside>\n\n      <main className=\"flex-1 overflow-auto\">\n        <Dashboard />\n      </main>\n    </div>\n  );\n};\n\nexport default CommandCenterLayout;\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/CommunityResilienceSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/CommunityResilienceWidget.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'getTooltipContent' is assigned a value but never used.","line":52,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"getTooltipContent"},"fix":{"range":[1815,2420],"text":""},"desc":"Remove unused variable 'getTooltipContent'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getTooltipContent' is assigned a value but never used.","line":52,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\";\n\ninterface ResilienceData {\n  country: string;\n  socialEvents: number;\n  resilienceScore: number;\n  recommendations: string[];\n  period: { startDate: string; endDate: string };\n}\n\ninterface CommunityResilienceResponse {\n  resilienceAnalysis: { [key: string]: ResilienceData };\n  globalResilienceAssessment: any;\n  timestamp: string;\n}\n\ninterface CommunityResilienceWidgetProps {\n  resilienceData?: CommunityResilienceResponse;\n}\n\nconst CommunityResilienceWidget: React.FC<CommunityResilienceWidgetProps> = ({ resilienceData: resilienceData }) => {\n  const [hoveredCountry, setHoveredCountry] = useState<string | null>(null);\n\n  // If no resilienceData is provided, we show an informative state — DemoSection is expected to supply data\n  if (!resilienceData || !resilienceData.resilienceAnalysis) {\n    return (\n      <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-300\">Datos de resiliencia comunitaria no disponibles (orquestador)</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getCountryColor = (countryCode: string) => {\n    if (!resilienceData) return '#DDD';\n    const countryData = resilienceData.resilienceAnalysis[countryCode];\n    if (!countryData) return '#DDD';\n\n    const score = countryData.resilienceScore;\n    if (score >= 80) return '#10B981'; // Green\n    if (score >= 60) return '#F59E0B'; // Yellow\n    return '#EF4444'; // Red\n  };\n\n  const getTooltipContent = (countryCode: string) => {\n    if (!resilienceData) return '';\n    const countryData = resilienceData.resilienceAnalysis[countryCode];\n    if (!countryData) return `${countryCode}: Sin datos`;\n\n    return `\n      <div style=\"max-width: 200px;\">\n        <strong>${countryData.country}</strong><br/>\n        Resiliencia: ${countryData.resilienceScore.toFixed(1)}/100<br/>\n        Eventos Sociales: ${countryData.socialEvents}<br/>\n        <br/>\n        <strong>Recomendaciones:</strong><br/>\n        ${countryData.recommendations.slice(0, 2).join('<br/>')}\n      </div>\n    `;\n  };\n\n\n  return (\n    <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n      <CardHeader>\n        <CardTitle className=\"text-white\">Resiliencia Comunitaria LATAM</CardTitle>\n        <p className=\"text-gray-400 text-sm\">Mapa interactivo de fortaleza social</p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64\" data-testid=\"resilience-map\">\n          <ComposableMap\n            projection=\"geoMercator\"\n            projectionConfig={{\n              scale: 300,\n              center: [-60, -15]\n            }}\n            className=\"w-full h-full\"\n          >\n            <Geographies geography={geoUrl}>\n              {({ geographies }) =>\n                geographies.map((geo) => {\n                  const countryCode = geo.properties.ISO_A3;\n                  return (\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill={getCountryColor(countryCode)}\n                      stroke=\"#FFFFFF\"\n                      strokeWidth={0.5}\n                      style={{\n                        default: { outline: 'none' },\n                        hover: { outline: 'none', fill: '#60A5FA' },\n                        pressed: { outline: 'none' },\n                      }}\n                      onMouseEnter={() => setHoveredCountry(countryCode)}\n                      onMouseLeave={() => setHoveredCountry(null)}\n                    />\n                  );\n                })\n              }\n            </Geographies>\n          </ComposableMap>\n        </div>\n        <div className=\"mt-4 flex justify-between text-sm text-gray-400\">\n          <span>🟢 Alta Resiliencia (80-100)</span>\n          <span>🟡 Media Resiliencia (60-79)</span>\n          <span>🔴 Baja Resiliencia (0-59)</span>\n        </div>\n        {hoveredCountry && (\n          <div className=\"mt-4 p-3 bg-gray-700/50 rounded-lg\">\n            {(() => {\n              const countryData = resilienceData?.resilienceAnalysis[hoveredCountry];\n              if (!countryData) return <p className=\"text-gray-300\">Sin datos para {hoveredCountry}</p>;\n              return (\n                <div>\n                  <h4 className=\"text-white font-semibold\">{countryData.country}</h4>\n                  <p className=\"text-gray-300\">Resiliencia: {countryData.resilienceScore.toFixed(1)}/100</p>\n                  <p className=\"text-gray-300\">Eventos Sociales: {countryData.socialEvents}</p>\n                  <div className=\"mt-2\">\n                    <p className=\"text-gray-400 text-sm\">Recomendaciones:</p>\n                    <ul className=\"text-xs text-gray-400 list-disc list-inside\">\n                      {countryData.recommendations.slice(0, 2).map((rec, idx) => (\n                        <li key={idx}>{rec}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              );\n            })()}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CommunityResilienceWidget;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ComparisonSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/CredibilitySection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/DemoSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/EnhancedContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/EnhancedCredibilitySection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/EnhancedFAQSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/EnhancedRiskDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/EthicalVectorDisplay.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'getProgressColor' is assigned a value but never used.","line":32,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"getProgressColor"},"fix":{"range":[964,1128],"text":""},"desc":"Remove unused variable 'getProgressColor'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getProgressColor' is assigned a value but never used.","line":32,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\n\ninterface EthicalVector {\n  vector: [number, number, number]; // [humanImpact, environmentalSustainability, socialEquity]\n  overallScore: number;\n  assessment: string;\n  timestamp: string;\n}\n\ninterface EthicalAssessmentResponse {\n  success: boolean;\n  data: EthicalVector;\n  isMock?: boolean;\n}\n\ninterface Props {\n  ethicalAssessment?: EthicalAssessmentResponse | null;\n}\n\nconst EthicalVectorDisplay: React.FC<Props> = ({ ethicalAssessment = null }) => {\n  const [error] = useState<string | null>(null);\n\n  const ethicalData = ethicalAssessment && ethicalAssessment.data ? ethicalAssessment.data : null;\n  const getScoreColor = (score: number) => {\n    if (score >= 70) return 'text-green-400';\n    if (score >= 40) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  const getProgressColor = (score: number) => {\n    if (score >= 70) return 'bg-green-500';\n    if (score >= 40) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const getAssessmentColor = (assessment: string) => {\n    if (assessment.includes('Low')) return 'text-green-400';\n    if (assessment.includes('Medium')) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  if (error || !ethicalData) {\n    return (\n      <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-red-400\">{error || 'No hay datos éticos disponibles (orquestador no proporcionó datos)'}</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const [humanImpact, environmentalSustainability, socialEquity] = ethicalData.vector;\n\n  return (\n    <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n      <CardHeader>\n        <CardTitle className=\"text-white text-2xl\">Vector Ético - IA Explicable</CardTitle>\n        <p className=\"text-gray-400 text-sm\">\n          Evaluación ética de la última predicción importante\n        </p>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          Última actualización: {new Date(ethicalData.timestamp).toLocaleString()}\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Overall Assessment */}\n        <div className=\"text-center p-4 bg-gray-700/50 rounded-lg\">\n          <div className={`text-4xl font-bold ${getAssessmentColor(ethicalData.assessment)}`}>\n            {ethicalData.overallScore.toFixed(1)}%\n          </div>\n          <div className={`text-lg font-semibold ${getAssessmentColor(ethicalData.assessment)}`}>\n            {ethicalData.assessment}\n          </div>\n          <p className=\"text-gray-400 text-sm mt-1\">Puntuación Ética General</p>\n        </div>\n\n        {/* Ethical Vector Components */}\n        <div className=\"space-y-4\">\n          <div>\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-white font-medium\">Impacto Humano</span>\n              <span className={`font-bold ${getScoreColor(humanImpact)}`}>\n                {humanImpact.toFixed(1)}%\n              </span>\n            </div>\n            <Progress value={humanImpact} className=\"h-3\" />\n            <p className=\"text-xs text-gray-400 mt-1\">\n              Evaluación del impacto potencial en poblaciones humanas\n            </p>\n          </div>\n\n          <div>\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-white font-medium\">Sostenibilidad Ambiental</span>\n              <span className={`font-bold ${getScoreColor(environmentalSustainability)}`}>\n                {environmentalSustainability.toFixed(1)}%\n              </span>\n            </div>\n            <Progress value={environmentalSustainability} className=\"h-3\" />\n            <p className=\"text-xs text-gray-400 mt-1\">\n              Medida de sostenibilidad y respeto al medio ambiente\n            </p>\n          </div>\n\n          <div>\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-white font-medium\">Equidad Social</span>\n              <span className={`font-bold ${getScoreColor(socialEquity)}`}>\n                {socialEquity.toFixed(1)}%\n              </span>\n            </div>\n            <Progress value={socialEquity} className=\"h-3\" />\n            <p className=\"text-xs text-gray-400 mt-1\">\n              Evaluación de equidad en la distribución de riesgos y beneficios\n            </p>\n          </div>\n        </div>\n\n        {/* Vector Visualization */}\n        <div className=\"p-4 bg-gray-700/30 rounded-lg\">\n          <h4 className=\"text-white font-semibold mb-3\">Vector Ético Completo</h4>\n          <div className=\"flex items-end justify-center space-x-2 h-20\">\n            <div className=\"flex flex-col items-center\">\n              <div\n                className=\"w-8 bg-red-500 rounded-t\"\n                style={{ height: `${humanImpact * 0.8}px` }}\n              ></div>\n              <span className=\"text-xs text-gray-400 mt-1\">Humano</span>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div\n                className=\"w-8 bg-green-500 rounded-t\"\n                style={{ height: `${environmentalSustainability * 0.8}px` }}\n              ></div>\n              <span className=\"text-xs text-gray-400 mt-1\">Ambiental</span>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div\n                className=\"w-8 bg-blue-500 rounded-t\"\n                style={{ height: `${socialEquity * 0.8}px` }}\n              ></div>\n              <span className=\"text-xs text-gray-400 mt-1\">Social</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Ethical Guidelines */}\n        <div className=\"text-xs text-gray-400 space-y-1\">\n          <p><strong>Directrices Éticas:</strong></p>\n          <p>• Impacto Humano: Prioriza la reducción de riesgos para poblaciones vulnerables</p>\n          <p>• Sostenibilidad Ambiental: Minimiza el impacto ecológico de las predicciones</p>\n          <p>• Equidad Social: Asegura distribución justa de beneficios y riesgos</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default EthicalVectorDisplay;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/FAQSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/FeaturesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/FoodSecurityDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\n\ninterface FoodSecurityData {\n  country: string;\n  year: number;\n  prevalenceUndernourishment: number;\n  riskIndex: number;\n  volatilityIndex: number;\n}\n\ninterface FoodSecurityResponse {\n  data: FoodSecurityData[];\n  timestamp?: string;\n  source?: string;\n  isMock?: boolean;\n}\n\ninterface Props {\n  foodSecurityData?: FoodSecurityResponse | null;\n}\n\nconst FoodSecurityDashboard: React.FC<Props> = ({ foodSecurityData = null }) => {\n  const [selectedCountry, setSelectedCountry] = useState<string>('COL');\n\n  // Get unique countries\n  const countries = Array.isArray(foodSecurityData?.data) ? [...new Set(foodSecurityData!.data.map(d => d.country))] : [];\n\n  // Filter data for selected country\n  const countryData = Array.isArray(foodSecurityData?.data) ? foodSecurityData!.data.filter(d => d.country === selectedCountry) : [];\n\n  // Prepare chart data\n  const chartData = Array.isArray(countryData) ? countryData.map(d => ({\n    year: d.year,\n    prevalence: d.prevalenceUndernourishment,\n    riskIndex: d.riskIndex,\n    volatility: d.volatilityIndex,\n  })) : [];\n\n  // Get latest data for selected country\n  const latestData = Array.isArray(countryData) && countryData.length > 0 ? countryData.sort((a, b) => b.year - a.year)[0] : null;\n\n  const getRiskColor = (risk: number) => {\n    if (risk >= 70) return 'text-red-400';\n    if (risk >= 40) return 'text-yellow-400';\n    return 'text-green-400';\n  };\n\n  const getRiskLevel = (risk: number) => {\n    if (risk >= 70) return 'Alto';\n    if (risk >= 40) return 'Medio';\n    return 'Bajo';\n  };\n\n  // If no data provided, render an informative empty state (frontend expects backend to provide structured data)\n  if (!foodSecurityData || !Array.isArray(foodSecurityData.data)) {\n    return (\n      <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-300\">Datos de seguridad alimentaria no disponibles (esperando orquestador)</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-orange-900 to-red-900 border-gray-700\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle className=\"text-white text-2xl\">Dashboard de Seguridad Alimentaria</CardTitle>\n              <p className=\"text-gray-300 mt-1\">\n                Índice de Riesgo de Hambruna y Volatilidad de Precios\n              </p>\n            </div>\n            <Select value={selectedCountry} onValueChange={setSelectedCountry}>\n              <SelectTrigger className=\"w-40 bg-gray-700 border-gray-600 text-white\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-700 border-gray-600\">\n                {Array.isArray(countries) && countries.map(country => (\n                  <SelectItem key={country} value={country} className=\"text-white\">\n                    {country}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Current Status */}\n      {latestData && (\n        <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n          <CardContent className=\"pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className={`text-3xl font-bold ${getRiskColor(latestData.riskIndex)}`}>\n                  {latestData.riskIndex.toFixed(1)}%\n                </div>\n                <div className=\"text-sm text-gray-400\">Índice de Riesgo de Hambruna</div>\n                <div className={`text-sm font-semibold ${getRiskColor(latestData.riskIndex)}`}>\n                  Nivel: {getRiskLevel(latestData.riskIndex)}\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-400\">\n                  {latestData.prevalenceUndernourishment.toFixed(1)}%\n                </div>\n                <div className=\"text-sm text-gray-400\">Prevalencia de Desnutrición</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-400\">\n                  {latestData.volatilityIndex.toFixed(1)}%\n                </div>\n                <div className=\"text-sm text-gray-400\">Índice de Volatilidad</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Evolución del Riesgo de Hambruna</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                <XAxis dataKey=\"year\" stroke=\"#9CA3AF\" />\n                <YAxis stroke=\"#9CA3AF\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: '#1F2937',\n                    border: '1px solid #374151',\n                    borderRadius: '8px',\n                    color: '#FFFFFF'\n                  }}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"riskIndex\"\n                  stroke=\"#EF4444\"\n                  strokeWidth={3}\n                  name=\"Riesgo de Hambruna (%)\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Volatilidad de Precios Alimentarios</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                <XAxis dataKey=\"year\" stroke=\"#9CA3AF\" />\n                <YAxis stroke=\"#9CA3AF\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: '#1F2937',\n                    border: '1px solid #374151',\n                    borderRadius: '8px',\n                    color: '#FFFFFF'\n                  }}\n                />\n                <Bar dataKey=\"volatility\" fill=\"#F59E0B\" name=\"Volatilidad (%)\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Prevalence Trend */}\n      <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Tendencia de Prevalencia de Desnutrición</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis dataKey=\"year\" stroke=\"#9CA3AF\" />\n              <YAxis stroke=\"#9CA3AF\" />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '8px',\n                  color: '#FFFFFF'\n                }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"prevalence\"\n                stroke=\"#10B981\"\n                strokeWidth={3}\n                name=\"Prevalencia (%)\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default FoodSecurityDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/HowItWorksSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/IntelligenceReportWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/InteractiveDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/KnowledgeFlowWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/MetatronPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/MissionGallery.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'missionId' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"missionId"},"fix":{"range":[428,452],"text":""},"desc":"Remove unused variable 'missionId'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TypewriterText' is assigned a value but never used.","line":21,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TypewriterText' is assigned a value but never used.","line":21,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock, Target, CheckCircle } from 'lucide-react';\n\ninterface Mission {\n  id: string;\n  title: string;\n  description: string;\n  objective: string;\n  result: string;\n  ethicalVector: number[];\n  timestamp: number;\n  status: string;\n}\n\ninterface MissionGalleryProps {\n  onMissionSelect?: (missionId: string | null) => void;\n  selectedMissionId?: string | null;\n}\n\nconst TypewriterText: React.FC<{ text: string; speed?: number }> = ({ text, speed = 50 }) => {\n  const [displayText, setDisplayText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timer = setTimeout(() => {\n        setDisplayText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n      }, speed);\n      return () => clearTimeout(timer);\n    }\n  }, [currentIndex, text, speed]);\n\n  return <span>{displayText}<span className=\"animate-pulse\">|</span></span>;\n};\n\nconst MissionGallery: React.FC<MissionGalleryProps> = ({ onMissionSelect, selectedMissionId }) => {\n  const [missions, setMissions] = useState<Mission[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchMissions = async () => {\n      try {\n        const response = await fetch('/api/missions/replays');\n        if (!response.ok) {\n          throw new Error(`Error ${response.status}: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setMissions(data.missions || []);\n      } catch (error) {\n        console.error('Error fetching missions:', error);\n        setError('Error al cargar las misiones. Inténtalo de nuevo más tarde.');\n        setMissions([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMissions();\n  }, []);\n\n  const handleMissionSelect = (mission: Mission) => {\n    if (onMissionSelect) {\n      onMissionSelect(selectedMissionId === mission.id ? null : mission.id);\n    }\n  };\n\n  const formatTimestamp = (timestamp: number) => {\n    return new Date(timestamp).toLocaleDateString('es-ES', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"text-center text-gray-400 py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-etherneon mx-auto mb-2\"></div>\n        Cargando misiones...\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center text-red-400 py-8\">\n        <div className=\"text-2xl mb-2\">⚠️</div>\n        {error}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4 max-h-screen overflow-y-auto\">\n      <h2 className=\"text-lg font-semibold text-etherneon mb-4 flex items-center\">\n        <Target className=\"w-5 h-5 mr-2\" />\n        Galería de Misiones\n      </h2>\n\n      {missions.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          No hay misiones disponibles\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {missions.map((mission) => (\n            <Card\n              key={mission.id}\n              className={`cursor-pointer transition-all duration-200 ${\n                selectedMissionId === mission.id\n                  ? 'bg-etherblue-600 border-etherneon shadow-lg'\n                  : 'bg-etherblue-dark/60 border-gray-700 hover:bg-etherblue-dark/80'\n              }`}\n              onClick={() => handleMissionSelect(mission)}\n            >\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-start justify-between\">\n                  <CardTitle className=\"text-sm text-white leading-tight\">\n                    {mission.title}\n                  </CardTitle>\n                  <span className={`inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold ${\n                    mission.status === 'completed'\n                      ? 'bg-green-600 text-white'\n                      : 'bg-yellow-600 text-black'\n                  }`}>\n                    {mission.status === 'completed' && <CheckCircle className=\"w-3 h-3 mr-1\" />}\n                    {mission.status}\n                  </span>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <p className=\"text-xs text-gray-300 mb-2 line-clamp-2\">\n                  {mission.description}\n                </p>\n                <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                  <div className=\"flex items-center\">\n                    <Clock className=\"w-3 h-3 mr-1\" />\n                    {formatTimestamp(mission.timestamp)}\n                  </div>\n                  <div className=\"text-right\">\n                    <div>Ético: {Math.round(mission.ethicalVector[0] * 100)}%</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MissionGallery;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/NativeModeBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/Navbar.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":11,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"navigate"},"fix":{"range":[390,421],"text":""},"desc":"Remove unused variable 'navigate'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useNavigate, Link } from 'react-router-dom';\n\nconst Navbar: React.FC = () => {\n  const [scrolled, setScrolled] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 20) {\n        setScrolled(true);\n      } else {\n        setScrolled(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const navLinks = [\n    { name: \"Inicio\", href: \"#inicio\" },\n    { name: \"Acceder\", href: \"/login\" },\n    { name: \"Dashboard\", href: \"/dashboard\" },\n    { name: \"Precios\", href: \"/pricing\" },\n    { name: \"Módulo LATAM\", href: \"/module/colombia\" },\n    { name: \"Qué Hacemos\", href: \"#features\" },\n    { name: \"Soluciones\", href: \"#solutions\" },\n    { name: \"Cómo Funciona\", href: \"#how-it-works\" },\n    { name: \"Casos de Éxito\", href: \"#credibility\" },\n  ];\n\n  return (\n    <>\n      <header \n        className={`fixed top-0 left-0 right-0 z-50 py-4 transition-all duration-300 ${\n          scrolled ? 'bg-etherblue-dark/90 backdrop-blur-md shadow-md' : 'bg-transparent'\n        }`}\n      >\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Link to=\"#inicio\" className=\"text-white font-bold text-xl flex items-center\">\n                <div className=\"h-8 w-8 rounded-full bg-etherneon mr-2 flex items-center justify-center text-etherblue-dark font-bold\">P</div>\n                <span>Praevisio AI</span>\n              </Link>\n            </div>\n            \n            {!isMobile ? (\n              <nav className=\"hidden md:flex items-center space-x-6\">\n                {navLinks.map((link) => (\n                  <Link\n                    key={link.name}\n                    to={link.href}\n                    className=\"text-sm text-white hover:text-etherneon transition-colors link-underline\"\n                  >\n                    {link.name}\n                  </Link>\n                ))}\n                {/* Desktop CTA */}\n                <Link to=\"/login\" className=\"ml-4 inline-block\">\n                  <Button className=\"bg-etherneon text-etherblue-dark px-4 py-2\">Acceder</Button>\n                </Link>\n              </nav>\n            ) : (\n              <button\n                className=\"md:hidden text-white flex items-center\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              >\n                <svg \n                  xmlns=\"http://www.w3.org/2000/svg\" \n                  className=\"h-6 w-6\" \n                  fill=\"none\" \n                  viewBox=\"0 0 24 24\" \n                  stroke=\"currentColor\"\n                >\n                  {mobileMenuOpen ? (\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  ) : (\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                  )}\n                </svg>\n              </button>\n            )}\n          </div>\n        </div>\n      </header>\n      \n      {/* Mobile menu */}\n      {mobileMenuOpen && isMobile && (\n        <div className=\"fixed inset-0 z-40 bg-etherblue-dark/95 pt-20 px-4 flex flex-col\">\n          <nav className=\"flex flex-col space-y-6 items-center py-8\">\n            {navLinks.map((link) => (\n              <Link\n                key={link.name}\n                to={link.href}\n                className=\"text-lg text-white hover:text-etherneon transition-colors\"\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                {link.name}\n              </Link>\n            ))}\n          </nav>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Navbar;\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ProphecyFlowWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ProphecyWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/SeismicMapWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/Sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[27,75],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Brain, TrendingUp, Shield, Truck } from 'lucide-react';\nimport { Link } from 'react-router-dom';\n\nconst Sidebar: React.FC = () => {\n  const menuItems = [\n    { icon: Brain, label: 'Centro de Mando', href: '#demo', active: true },\n    { icon: TrendingUp, label: 'Análisis Predictivo', href: '#analisis' },\n    { icon: Shield, label: 'Evaluación de Riesgos', href: '#riesgos' },\n    { icon: Truck, label: 'Optimización Logística', href: '#logistica' }\n  ];\n\n  return (\n    <div className=\"w-64 bg-gray-900 text-white h-full\">\n      <div className=\"p-6\">\n        <h2 className=\"text-xl font-bold mb-8\">Praevisio AI</h2>\n        <nav className=\"space-y-2\" data-testid=\"sidebar-nav\">\n          {menuItems.map((item, index) => (\n            <Link\n              key={index}\n              to={item.href}\n              className={`flex items-center w-full px-3 py-2 text-left rounded-md transition-colors ${\n                item.active ? 'bg-blue-600 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n              }`}\n            >\n              <item.icon className=\"w-5 h-5 mr-3\" />\n              {item.label}\n            </Link>\n          ))}\n        </nav>\n      </div>\n\n      <div className=\"p-6 mt-8\">\n        <Card className=\"bg-gray-800 text-white\">\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Estado del Sistema</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm\">Todos los sistemas operativos</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/SolutionsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/TaskReplayViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/ClimateWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/CommandCenterLayout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/DemoSection.props.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"props"},"fix":{"range":[255,265],"text":""},"desc":"Remove unused variable 'props'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"props"},"fix":{"range":[333,343],"text":""},"desc":"Remove unused variable 'props'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"props"},"fix":{"range":[417,427],"text":""},"desc":"Remove unused variable 'props'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"props"},"fix":{"range":[1982,1992],"text":""},"desc":"Remove unused variable 'props'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, waitFor } from '@testing-library/react';\nimport DemoSection from '@/components/DemoSection';\nimport { MemoryRouter } from 'react-router-dom';\n\n// Mock child components to capture props\nconst mockFood = jest.fn((props: any) => <div data-testid=\"mock-food\" />);\nconst mockEthical = jest.fn((props: any) => <div data-testid=\"mock-ethical\" />);\nconst mockResilience = jest.fn((props: any) => <div data-testid=\"mock-resilience\" />);\n\njest.mock('@/components/FoodSecurityDashboard', () => (props: any) => {\n  mockFood(props);\n  return <div data-testid=\"mock-food\" />;\n});\njest.mock('@/components/EthicalVectorDisplay', () => (props: any) => {\n  mockEthical(props);\n  return <div data-testid=\"mock-ethical\" />;\n});\njest.mock('@/components/CommunityResilienceWidget', () => (props: any) => {\n  mockResilience(props);\n  return <div data-testid=\"mock-resilience\" />;\n});\n\n// Mock Sidebar and SeismicMapWidget to avoid router/context heavy behavior in test\njest.mock('@/components/Sidebar', () => () => <div data-testid=\"mock-sidebar\" />);\njest.mock('@/components/SeismicMapWidget', () => () => <div data-testid=\"mock-seismic\" />);\n// Mock AnimatedMetrics and MissionGallery which use browser APIs\njest.mock('@/components/AnimatedMetrics', () => () => <div data-testid=\"mock-animated-metric\" />);\njest.mock('@/components/MissionGallery', () => () => <div data-testid=\"mock-mission-gallery\" />);\n\n// Mock react-simple-maps to avoid fetching topojson and internal geographies logic in JSDOM\njest.mock('react-simple-maps', () => ({\n  ComposableMap: (props: any) => <div data-testid=\"mock-composable-map\">{props.children}</div>,\n  Geographies: (props: any) => {\n    // Call function-as-children with an empty geographies array to avoid geographies.map errors\n    const render = typeof props.children === 'function' ? props.children({ geographies: [] }) : props.children;\n    return <div data-testid=\"mock-geographies\">{render}</div>;\n  },\n  Geography: (props: any) => <div data-testid=\"mock-geography\" />,\n}));\n\n// Provide a mock response for fetch\nconst demoResponse = {\n  timestamp: '2025-10-10T21:08:02.902Z',\n  lastUpdated: '2025-10-10T21:08:02.902Z',\n  kpis: { precisionPromedio: 90, prediccionesDiarias: 100, monitoreoContinuo: 24, coberturaRegional: 6 },\n  countries: [{ name: 'Colombia', code: 'COL', lat: 4.57, lon: -74.29 }],\n  communityResilience: { data: { COL: { country: 'Colombia', resilienceScore: 75 } }, isMock: true },\n  foodSecurity: { data: [{ country: 'Colombia', year: 2024, prevalenceUndernourishment: 10, riskIndex: 45, volatilityIndex: 12 }], isMock: false },\n  ethicalAssessment: { success: true, data: { overallScore: 65, vector: [60,70,65], assessment: 'Medium', timestamp: '2025-10-10T21:08:02.902Z' }, isMock: false },\n  global: { crypto: [], seismic: { events: [], summary: { totalEvents:0 } } }\n};\n\nbeforeEach(() => {\n  jest.resetAllMocks();\n  // Provide a minimal IntersectionObserver mock for JSDOM\n  // @ts-ignore\n  if (typeof global.IntersectionObserver === 'undefined') {\n    // @ts-ignore\n    global.IntersectionObserver = class {\n      constructor() {}\n      observe() {}\n      unobserve() {}\n      disconnect() {}\n    };\n  }\n  // @ts-ignore\n  global.fetch = jest.fn(() => Promise.resolve({ ok: true, json: () => Promise.resolve(demoResponse) }));\n});\n\nafterEach(() => {\n  // @ts-ignore\n  global.fetch = undefined;\n});\n\ntest('DemoSection fetches live-state and passes props to children', async () => {\n  const { getByTestId } = render(\n    <MemoryRouter>\n      <DemoSection />\n    </MemoryRouter>\n  );\n\n  // Wait for loading to finish and for our mocked child components to be rendered\n  await waitFor(() => expect(getByTestId('mock-food')).toBeInTheDocument());\n  await waitFor(() => expect(getByTestId('mock-ethical')).toBeInTheDocument());\n  await waitFor(() => expect(getByTestId('mock-resilience')).toBeInTheDocument());\n\n  // Assert the child components were called with the expected props\n  expect(mockFood).toHaveBeenCalledWith(expect.objectContaining({ foodSecurityData: expect.any(Object) }));\n  expect(mockEthical).toHaveBeenCalledWith(expect.objectContaining({ ethicalAssessment: expect.any(Object) }));\n  expect(mockResilience).toHaveBeenCalledWith(expect.objectContaining({ resilienceData: expect.any(Object) }));\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/EnhancedRiskDashboard.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'waitFor' is defined but never used.","line":2,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"waitFor"},"fix":{"range":[61,70],"text":""},"desc":"Remove unused variable 'waitFor'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'waitFor' is defined but never used.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport EnhancedRiskDashboard from '../EnhancedRiskDashboard';\n\n// Mock recharts components\njest.mock('recharts', () => ({\n  ResponsiveContainer: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  BarChart: ({ children }: { children: React.ReactNode }) => <div data-testid=\"bar-chart\">{children}</div>,\n  Bar: () => <div data-testid=\"bar\" />,\n  XAxis: () => <div data-testid=\"x-axis\" />,\n  YAxis: () => <div data-testid=\"y-axis\" />,\n  CartesianGrid: () => <div data-testid=\"cartesian-grid\" />,\n  Tooltip: () => <div data-testid=\"tooltip\" />,\n  PieChart: ({ children }: { children: React.ReactNode }) => <div data-testid=\"pie-chart\">{children}</div>,\n  Pie: ({ children }: { children: React.ReactNode }) => <div data-testid=\"pie\">{children}</div>,\n  Cell: () => <div data-testid=\"cell\" />,\n}));\n\n// Mock lucide-react icons\njest.mock('lucide-react', () => ({\n  AlertTriangle: () => <div data-testid=\"alert-triangle-icon\" />,\n  Download: () => <div data-testid=\"download-icon\" />,\n  Filter: () => <div data-testid=\"filter-icon\" />,\n  RefreshCw: () => <div data-testid=\"refresh-icon\" />,\n}));\n\ndescribe('EnhancedRiskDashboard', () => {\n  beforeEach(() => {\n    // Mock URL.createObjectURL and URL.revokeObjectURL\n    global.URL.createObjectURL = jest.fn(() => 'mock-url');\n    global.URL.revokeObjectURL = jest.fn();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders the dashboard title', () => {\n    render(<EnhancedRiskDashboard />);\n    expect(screen.getByText('Dashboard de Riesgos en Tiempo Real')).toBeInTheDocument();\n  });\n\n  it('displays risk overview cards', () => {\n    render(<EnhancedRiskDashboard />);\n    expect(screen.getAllByText('COL')).toHaveLength(2); // One in card header, one in alert\n    expect(screen.getAllByText('PER')).toHaveLength(2); // One in card header, one in alert\n    expect(screen.getAllByText('ARG')).toHaveLength(2); // One in card header, one in alert\n  });\n\n  it('shows filter controls', () => {\n    render(<EnhancedRiskDashboard />);\n    expect(screen.getByText('Filtros:')).toBeInTheDocument();\n    expect(screen.getByText('Todos los países')).toBeInTheDocument();\n    expect(screen.getByText('Todos los niveles')).toBeInTheDocument();\n  });\n\n  it('displays active alerts section', () => {\n    render(<EnhancedRiskDashboard />);\n    expect(screen.getByText('Alertas Activas (3)')).toBeInTheDocument();\n  });\n\n  it('shows risk level badges', () => {\n    render(<EnhancedRiskDashboard />);\n    expect(screen.getByText('High')).toBeInTheDocument();\n    expect(screen.getByText('Medium')).toBeInTheDocument();\n    expect(screen.getByText('Critical')).toBeInTheDocument();\n  });\n\n  it('has export functionality', () => {\n    render(<EnhancedRiskDashboard />);\n    const exportButton = screen.getByText('Exportar');\n    expect(exportButton).toBeInTheDocument();\n  });\n\n  it('has refresh functionality', () => {\n    render(<EnhancedRiskDashboard />);\n    const refreshButton = screen.getByText('Actualizar');\n    expect(refreshButton).toBeInTheDocument();\n  });\n\n  it('displays charts', () => {\n    render(<EnhancedRiskDashboard />);\n    expect(screen.getByTestId('bar-chart')).toBeInTheDocument();\n    expect(screen.getByTestId('pie-chart')).toBeInTheDocument();\n  });\n\n  it('shows last update timestamp', () => {\n    render(<EnhancedRiskDashboard />);\n    expect(screen.getByText(/Última actualización:/)).toBeInTheDocument();\n  });\n\n  it('filters alerts by country', async () => {\n    render(<EnhancedRiskDashboard />);\n\n    // Initially shows all alerts\n    expect(screen.getByText('Alertas Activas (3)')).toBeInTheDocument();\n\n    // Filter by Colombia\n    const selectElement = screen.getByDisplayValue('Todos los países');\n    fireEvent.change(selectElement, { target: { value: 'COL' } });\n\n    // Should still show alerts (mock data includes COL)\n    expect(screen.getByText('Alertas Activas (1)')).toBeInTheDocument();\n  });\n\n  it('exports data when export button is clicked', () => {\n    // Mock document methods\n    const mockLink = {\n      click: jest.fn(),\n      setAttribute: jest.fn(),\n      style: {}\n    };\n    const originalCreateElement = document.createElement;\n    jest.spyOn(document, 'createElement').mockImplementation((tagName: string) => {\n      if (tagName === 'a') {\n        return mockLink as any;\n      }\n      return originalCreateElement.call(document, tagName);\n    });\n\n    render(<EnhancedRiskDashboard />);\n\n    const exportButton = screen.getByText('Exportar');\n    fireEvent.click(exportButton);\n\n    expect(mockLink.click).toHaveBeenCalled();\n  });\n\n  it('shows loading state when refreshing', async () => {\n    render(<EnhancedRiskDashboard />);\n\n    const refreshButton = screen.getByText('Actualizar');\n    fireEvent.click(refreshButton);\n\n    // The button should still be present (no loading text in this implementation)\n    expect(refreshButton).toBeInTheDocument();\n  });\n\n  it('displays risk factors for alerts', () => {\n    render(<EnhancedRiskDashboard />);\n\n    // Check if factors are displayed (Economic, Social, etc.)\n    expect(screen.getByText('Economic: 85%')).toBeInTheDocument();\n    expect(screen.getByText('Social: 70%')).toBeInTheDocument();\n  });\n\n  it('shows trend indicators', () => {\n    render(<EnhancedRiskDashboard />);\n\n    // Check for trend emojis or indicators\n    const trendElements = screen.getAllByText('📈');\n    expect(trendElements.length).toBeGreaterThan(0);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/FAQSection.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/FeaturesSection.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/HeroSection.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/IntelligenceReportWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/InteractiveDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/MetatronPanel.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/MissionGallery.dom.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'act' is defined but never used.","line":2,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"act"},"fix":{"range":[70,75],"text":""},"desc":"Remove unused variable 'act'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'act' is defined but never used.","line":2,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport MissionGallery from '../MissionGallery';\n\nconst mockMissions = {\n  missions: [\n    {\n      id: 'm1',\n      title: 'Misión Demo 1',\n      description: 'Descripción de la misión demo 1',\n      objective: 'Objetivo 1',\n      result: 'Resultado 1',\n      ethicalVector: [0.85, 0.92],\n      timestamp: Date.now(),\n      status: 'completed'\n    },\n    {\n      id: 'm2',\n      title: 'Misión Demo 2',\n      description: 'Descripción de la misión demo 2',\n      objective: 'Objetivo 2',\n      result: 'Resultado 2',\n      ethicalVector: [0.78, 0.88],\n      timestamp: Date.now() - 86400000,\n      status: 'pending'\n    }\n  ]\n};\n\ndescribe('MissionGallery (DOM)', () => {\n  const mockOnMissionSelect = jest.fn();\n\n  beforeEach(() => {\n    // Mock global.fetch used by the component\n    jest.spyOn(global, 'fetch').mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve(mockMissions)\n    } as Response);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n    mockOnMissionSelect.mockClear();\n  });\n\n  test('renders mission cards and handles selection', async () => {\n    const { rerender } = render(<MissionGallery onMissionSelect={mockOnMissionSelect} />);\n\n    // Wait for the cards to appear\n    await waitFor(() => expect(screen.getByText('Misión Demo 1')).toBeInTheDocument());\n\n    // Verify both mission titles are rendered\n    expect(screen.getByText('Misión Demo 1')).toBeInTheDocument();\n    expect(screen.getByText('Misión Demo 2')).toBeInTheDocument();\n\n    // Verify descriptions are rendered\n    expect(screen.getByText('Descripción de la misión demo 1')).toBeInTheDocument();\n    expect(screen.getByText('Descripción de la misión demo 2')).toBeInTheDocument();\n\n    // Verify ethical vector is displayed (rounded to 85%)\n    expect(screen.getByText('Ético: 85%')).toBeInTheDocument();\n\n    // Click first card to select\n    fireEvent.click(screen.getByText('Misión Demo 1'));\n\n    // Verify onMissionSelect was called with the mission id\n    expect(mockOnMissionSelect).toHaveBeenCalledWith('m1');\n\n    // Re-render with selected mission to test deselection\n    rerender(<MissionGallery onMissionSelect={mockOnMissionSelect} selectedMissionId=\"m1\" />);\n\n    // Click again to deselect\n    fireEvent.click(screen.getByText('Misión Demo 1'));\n    expect(mockOnMissionSelect).toHaveBeenCalledWith(null);\n  });\n\n  test('displays loading state initially', () => {\n    render(<MissionGallery onMissionSelect={mockOnMissionSelect} />);\n\n    expect(screen.getByText('Cargando misiones...')).toBeInTheDocument();\n  });\n\n  test('displays no missions message when empty', async () => {\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve({ missions: [] })\n      })\n    ) as any;\n\n    render(<MissionGallery onMissionSelect={mockOnMissionSelect} />);\n\n    await waitFor(() => expect(screen.getByText('No hay misiones disponibles')).toBeInTheDocument());\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/Navbar.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'mockUseNavigate' is assigned a value but never used.","line":22,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"mockUseNavigate"},"fix":{"range":[643,722],"text":""},"desc":"Remove unused variable 'mockUseNavigate'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockUseNavigate' is assigned a value but never used.","line":22,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { MemoryRouter } from 'react-router-dom';\nimport Navbar from '../Navbar';\n\n// Mock the use-mobile hook\njest.mock('@/hooks/use-mobile', () => ({\n  useIsMobile: jest.fn(),\n}));\n\n// Mock react-router-dom\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: jest.fn(),\n}));\n\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { useNavigate } from 'react-router-dom';\n\nconst mockUseIsMobile = useIsMobile as jest.MockedFunction<typeof useIsMobile>;\nconst mockUseNavigate = useNavigate as jest.MockedFunction<typeof useNavigate>;\n\ndescribe('Navbar', () => {\n  beforeEach(() => {\n    // Reset mocks\n    mockUseIsMobile.mockReset();\n  });\n\n  it('renders the navbar with logo and navigation links on desktop', () => {\n    mockUseIsMobile.mockReturnValue(false);\n\n    render(\n      <MemoryRouter>\n        <Navbar />\n      </MemoryRouter>\n    );\n\n    expect(screen.getByText('Praevisio AI')).toBeInTheDocument();\n    expect(screen.getByText('Inicio')).toBeInTheDocument();\n    expect(screen.getByText('Dashboard')).toBeInTheDocument();\n  });\n\n  it('renders mobile menu button on mobile', () => {\n    mockUseIsMobile.mockReturnValue(true);\n\n    render(\n      <MemoryRouter>\n        <Navbar />\n      </MemoryRouter>\n    );\n\n    const menuButton = screen.getByRole('button');\n    expect(menuButton).toBeInTheDocument();\n  });\n\n  it('toggles mobile menu when button is clicked', () => {\n    mockUseIsMobile.mockReturnValue(true);\n\n    render(\n      <MemoryRouter>\n        <Navbar />\n      </MemoryRouter>\n    );\n\n    const menuButton = screen.getByRole('button');\n\n    // Initially menu should not be open\n    expect(screen.queryByText('Inicio')).not.toBeInTheDocument();\n\n    // Click to open menu\n    fireEvent.click(menuButton);\n\n    // Now menu should be visible\n    expect(screen.getByText('Inicio')).toBeInTheDocument();\n    expect(screen.getByText('Dashboard')).toBeInTheDocument();\n  });\n\n  it('closes mobile menu when navigation link is clicked', () => {\n    mockUseIsMobile.mockReturnValue(true);\n\n    render(\n      <MemoryRouter>\n        <Navbar />\n      </MemoryRouter>\n    );\n\n    const menuButton = screen.getByRole('button');\n    fireEvent.click(menuButton);\n\n    // Menu should be open\n    expect(screen.getByText('Inicio')).toBeInTheDocument();\n\n    // Click a link\n    fireEvent.click(screen.getByText('Inicio'));\n\n    // Menu should close (link should not be visible anymore in mobile overlay)\n    // Note: In the mobile menu, links are still rendered but in overlay\n    // This test verifies the onClick handler is called\n  });\n\n  it('applies scrolled class when window is scrolled', async () => {\n    mockUseIsMobile.mockReturnValue(false);\n\n    // Mock window.scrollY\n    Object.defineProperty(window, 'scrollY', { value: 0, writable: true });\n\n    render(\n      <MemoryRouter>\n        <Navbar />\n      </MemoryRouter>\n    );\n\n    const header = screen.getByRole('banner');\n\n    // Initially should not have scrolled class\n    expect(header).toHaveClass('bg-transparent');\n\n    // Simulate scroll\n    Object.defineProperty(window, 'scrollY', { value: 50 });\n    fireEvent.scroll(window);\n\n    await waitFor(() => {\n      expect(header).toHaveClass('bg-etherblue-dark/90');\n    });\n  });\n\n});","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/ProphecyWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/SeismicMapWidget.dom.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/SeismicMapWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/__tests__/XaiExplainModal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboard/CIMetricsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboard/ModuleCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboard/PhaseProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboard/ProgressRing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboard/SeismicActivityWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboard/__tests__/CIMetricsWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboard/__tests__/ProgressRing.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/CEODashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"_selectedMetric"},"fix":{"range":[475,490],"text":""},"desc":"Remove unused variable '_selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":15,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"_setSelectedMetric"},"fix":{"range":[490,510],"text":""},"desc":"Remove unused variable '_setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":15,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface CEODashboardProps {\n  ceoData: any;\n  // parameter names prefixed with '_' to avoid unused-var lint in type positions\n  requestDivineExplanation: (_metric: string, _value: any, _context: string) => void;\n}\n\nconst CEODashboard: React.FC<CEODashboardProps> = ({\n  ceoData,\n  requestDivineExplanation\n}) => {\n  // selectedMetric not used yet; prefix with '_' to satisfy linter\n  const [_selectedMetric, _setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DEL CEO - CONEXIÓN CON BACKEND\n  const empireHealth = ceoData?.empireHealth || 87;\n  const strategicProgress = ceoData?.strategicProgress || 73;\n  const burnRate = ceoData?.burnRate || '$45k/month';\n  const arr = ceoData?.arr || '$2.1M ARR';\n  const marketPosition = ceoData?.marketPosition || 'Líder en IA Predictiva';\n  const innovationVelocity = ceoData?.innovationVelocity || 12;\n  const riskIndex = ceoData?.riskIndex || 23;\n  const stakeholderSatisfaction = ceoData?.stakeholderSatisfaction || 89;\n\n  return (\n  <div className=\"space-y-8 p-8 bg-google-background\">\n      {/* HEADER DIVINO CEO */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n          <h1 className=\"text-6xl font-bold text-google-text-primary mb-4\">\n              👑 Santuario Ejecutivo - CEO\n            </h1>\n          <p className=\"text-google-text-secondary text-2xl font-light\">\n            Visión soberana del imperio - Gobernanza divina\n          </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS EJECUTIVAS */}\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n        {/* SALUD DEL IMPERIO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n            <div className=\"p-8 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🏛️</div>\n              <button\n                onClick={() => requestDivineExplanation('empireHealth', empireHealth, 'CEODashboard')}\n                className=\"text-google-primary hover:text-google-primary/80 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-3\">\n                <h3 className=\"text-xl font-semibold text-google-text-primary\">Salud del Imperio</h3>\n                <div className=\"text-5xl font-bold text-google-primary\">\n                {empireHealth}%\n              </div>\n                <p className=\"text-base text-google-text-secondary\">Estado general operativo</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* PROGRESO ESTRATÉGICO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n            <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🎯</div>\n              <button\n                onClick={() => requestDivineExplanation('strategicProgress', strategicProgress, 'CEODashboard')}\n                className=\"text-google-primary hover:text-google-primary/80 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold text-google-text-primary\">Progreso Estratégico</h3>\n                <div className=\"text-4xl font-bold text-google-primary\">\n                {strategicProgress}%\n              </div>\n                <p className=\"text-sm text-google-text-secondary\">Hacia objetivos principales</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* BURN RATE */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n            <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🔥</div>\n              <button\n                onClick={() => requestDivineExplanation('burnRate', burnRate, 'CEODashboard')}\n                className=\"text-google-primary hover:text-google-primary/80 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold text-google-text-primary\">Burn Rate</h3>\n                <div className=\"text-2xl font-bold text-google-primary\">\n                {burnRate}\n              </div>\n                <p className=\"text-sm text-google-text-secondary\">Consumo de recursos</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* ARR PROYECTADO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n            <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">💎</div>\n              <button\n                onClick={() => requestDivineExplanation('arr', arr, 'CEODashboard')}\n                className=\"text-google-primary hover:text-google-primary/80 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold text-google-text-primary\">ARR Proyectado</h3>\n                <div className=\"text-2xl font-bold text-google-primary\">\n                {arr}\n              </div>\n                <p className=\"text-sm text-google-text-secondary\">Ingresos recurrentes</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* VISUALIZACIONES EJECUTIVAS AVANZADAS */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* POSICIÓN DE MERCADO */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">🏆</span>\n            Posición de Mercado\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-google-primary mb-2\">{marketPosition}</div>\n            <p className=\"text-google-text-secondary\">Ventaja competitiva en IA predictiva</p>\n          </div>\n        </motion.div>\n\n        {/* VELOCIDAD DE INNOVACIÓN */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">🚀</span>\n            Velocidad de Innovación\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-google-primary mb-2\">{innovationVelocity} commits/semana</div>\n            <p className=\"text-google-text-secondary\">Ritmo de desarrollo e innovación</p>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* ÍNDICE DE RIESGO GLOBAL */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"p-8 rounded-lg border border-gray-700 bg-google-surface\"\n      >\n        <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n          <span className=\"mr-3\">⚠️</span>\n          Índice de Riesgo Global\n        </h3>\n        <div className=\"flex items-center justify-center space-x-8\">\n          <div className=\"text-center\">\n            <div className=\"text-6xl font-bold text-google-primary mb-2\">{riskIndex}</div>\n            <p className=\"text-google-text-secondary\">Nivel de riesgo actual</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-google-primary mb-2\">{stakeholderSatisfaction}%</div>\n            <p className=\"text-google-text-secondary\">Satisfacción de stakeholders</p>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-gray-200\"\n      >\n        <div className=\"text-xs text-google-text-secondary\">\n          🔒 Certificado por Apolo Prime - Visión ejecutiva 100% real del imperio\n        </div>\n        <div className=\"text-xs text-google-text-secondary mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default CEODashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/CFODashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"_selectedMetric"},"fix":{"range":[326,341],"text":""},"desc":"Remove unused variable '_selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":14,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"_setSelectedMetric"},"fix":{"range":[341,361],"text":""},"desc":"Remove unused variable '_setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":14,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface CFODashboardProps {\n  cfoData: any;\n  requestDivineExplanation: (_metric: string, _value: any, _context: string) => void;\n}\n\n\nconst CFODashboard: React.FC<CFODashboardProps> = ({\n  cfoData,\n  requestDivineExplanation\n}) => {\n  const [_selectedMetric, _setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DEL CFO - CONEXIÓN CON BACKEND\n  const costZeroEfficiency = cfoData?.costZeroEfficiency || 78;\n  const profitabilityProjection = cfoData?.profitabilityProjection || '$125k/month';\n  const resourceEfficiency = cfoData?.resourceEfficiency || 82;\n  const cashFlow = cfoData?.cashFlow || '$89k';\n  const roi = cfoData?.roi || '156%';\n  const burnMultiple = cfoData?.burnMultiple || 2.3;\n  const fundingRunway = cfoData?.fundingRunway || '18 months';\n\n  const unitEconomics = cfoData?.unitEconomics || {\n    cac: '$45',\n    ltv: '$890',\n    paybackPeriod: '8 months'\n  };\n\n  return (\n    <div className=\"space-y-8 bg-google-background p-8\">\n      {/* HEADER DIVINO CFO */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-google-text-primary mb-2\">\n          💰 Santuario Financiero - CFO\n        </h1>\n        <p className=\"text-google-text-secondary text-xl\">\n          Eficiencia financiera soberana - Economía de costo cero\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS FINANCIERAS */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* EFICIENCIA COSTO CERO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">⚡</div>\n              <button\n                onClick={() => requestDivineExplanation('costZeroEfficiency', costZeroEfficiency, 'CFODashboard')}\n                className=\"text-google-primary hover:text-google-primary/90 transition-colors text-xl\"\n                aria-label=\"explicar-cost-zero\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Eficiencia Costo Cero</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {costZeroEfficiency}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Automatización financiera</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* PROYECCIÓN DE RENTABILIDAD */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">📈</div>\n              <button\n                onClick={() => requestDivineExplanation('profitabilityProjection', profitabilityProjection, 'CFODashboard')}\n                className=\"text-google-primary hover:text-google-primary/90 transition-colors text-xl\"\n                aria-label=\"explicar-rentabilidad\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Rentabilidad Proyectada</h3>\n              <div className=\"text-2xl font-bold text-google-primary\">\n                {profitabilityProjection}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Ingresos mensuales</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* EFICIENCIA DE RECURSOS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🎯</div>\n              <button\n                onClick={() => requestDivineExplanation('resourceEfficiency', resourceEfficiency, 'CFODashboard')}\n                className=\"text-google-primary hover:text-google-primary/90 transition-colors text-xl\"\n                aria-label=\"explicar-eficiencia-recursos\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Eficiencia de Recursos</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {resourceEfficiency}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Optimización de dependencias</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* CASH FLOW */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">💵</div>\n              <button\n                onClick={() => requestDivineExplanation('cashFlow', cashFlow, 'CFODashboard')}\n                className=\"text-google-primary hover:text-google-primary/90 transition-colors text-xl\"\n                aria-label=\"explicar-cashflow\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Cash Flow</h3>\n              <div className=\"text-3xl font-bold text-google-primary\">\n                {cashFlow}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Flujo de caja operativo</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* ECONOMÍA UNITARIA DETALLADA */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.5 }}\n        className=\"p-8 rounded-lg border border-gray-700 bg-google-surface\"\n      >\n        <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n          <span className=\"mr-3\">📊</span>\n          Economía Unitaria\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"text-center p-4 bg-google-surface rounded-lg\">\n            <div className=\"text-2xl font-bold text-google-primary mb-2\">{unitEconomics.cac}</div>\n            <div className=\"text-sm text-google-text-secondary\">CAC (Customer Acquisition Cost)</div>\n          </div>\n          <div className=\"text-center p-4 bg-google-surface rounded-lg\">\n            <div className=\"text-2xl font-bold text-google-primary mb-2\">{unitEconomics.ltv}</div>\n            <div className=\"text-sm text-google-text-secondary\">LTV (Lifetime Value)</div>\n          </div>\n          <div className=\"text-center p-4 bg-google-surface rounded-lg\">\n            <div className=\"text-2xl font-bold text-google-primary mb-2\">{unitEconomics.paybackPeriod}</div>\n            <div className=\"text-sm text-google-text-secondary\">Payback Period</div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* MÉTRICAS DE CRECIMIENTO */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* ROI Y BURN MULTIPLE */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">📈</span>\n            ROI & Burn Multiple\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-google-text-secondary\">ROI Anual:</span>\n              <span className=\"font-mono text-google-primary text-xl\">{roi}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-google-text-secondary\">Burn Multiple:</span>\n              <span className=\"font-mono text-google-accent-yellow text-xl\">{burnMultiple}x</span>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* RUNWAY DE FINANCIAMIENTO */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.7 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">⏱️</span>\n            Runway de Financiamiento\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-google-accent-red mb-2\">{fundingRunway}</div>\n            <p className=\"text-google-text-secondary\">Tiempo hasta siguiente ronda</p>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-gray-700/50\"\n      >\n        <div className=\"text-xs text-slate-500\">\n          🔒 Certificado por Apolo Prime - Análisis financiero 100% real del imperio\n        </div>\n        <div className=\"text-xs text-slate-600 mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default CFODashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/CIODashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"_selectedMetric"},"fix":{"range":[325,340],"text":""},"desc":"Remove unused variable '_selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":13,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"_setSelectedMetric"},"fix":{"range":[340,360],"text":""},"desc":"Remove unused variable '_setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":13,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface CIODashboardProps {\n  cioData: any;\n  requestDivineExplanation: (_metric: string, _value: any, _context: string) => void;\n}\n\nconst CIODashboard: React.FC<CIODashboardProps> = ({\n  cioData,\n  requestDivineExplanation\n}) => {\n  const [_selectedMetric, _setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DEL CIO - CONEXIÓN CON BACKEND\n  const dataFlowHealth = cioData?.dataFlowHealth || 92;\n  const integrationLatency = cioData?.integrationLatency || '45ms';\n  const dataQuality = cioData?.dataQuality || 88;\n  const apiUptime = cioData?.apiUptime || '99.9%';\n  const dataVolume = cioData?.dataVolume || '2.3GB';\n  const processingThroughput = cioData?.processingThroughput || '1,250 req/s';\n  const errorRate = cioData?.errorRate || '0.02%';\n  const complianceScore = cioData?.complianceScore || 94;\n\n  return (\n    <div className=\"space-y-8\">\n      {/* HEADER DIVINO CIO */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-[color:var(--text-primary)] mb-2\">\n          🗄️ Santuario de Datos - CIO\n        </h1>\n        <p className=\"text-slate-400 text-xl\">\n          Flujos de datos soberanos - Integración y procesamiento del imperio\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS DE DATOS */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* SALUD DE FLUJOS DE DATOS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)] transition-all duration-300 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🌊</div>\n              <button\n                onClick={() => requestDivineExplanation('dataFlowHealth', dataFlowHealth, 'CIODashboard')}\n                className=\"text-teal-400 hover:text-teal-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-white\">Flujos de Datos</h3>\n              <div className=\"text-4xl font-bold text-teal-400\">\n                {dataFlowHealth}%\n              </div>\n              <p className=\"text-sm text-slate-400\">Salud de integraciones</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* LATENCIA DE INTEGRACIONES */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)] transition-all duration-300 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">⚡</div>\n              <button\n                onClick={() => requestDivineExplanation('integrationLatency', integrationLatency, 'CIODashboard')}\n                className=\"text-cyan-400 hover:text-cyan-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-white\">Latencia</h3>\n              <div className=\"text-3xl font-bold text-cyan-400\">\n                {integrationLatency}\n              </div>\n              <p className=\"text-sm text-slate-400\">Tiempo de respuesta</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* CALIDAD DE DATOS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)] transition-all duration-300 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">✨</div>\n              <button\n                onClick={() => requestDivineExplanation('dataQuality', dataQuality, 'CIODashboard')}\n                className=\"text-blue-400 hover:text-blue-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-white\">Calidad de Datos</h3>\n              <div className=\"text-4xl font-bold text-blue-400\">\n                {dataQuality}%\n              </div>\n              <p className=\"text-sm text-slate-400\">Integridad y precisión</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* UPTIME DE APIs */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)] transition-all duration-300 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🟢</div>\n              <button\n                onClick={() => requestDivineExplanation('apiUptime', apiUptime, 'CIODashboard')}\n                className=\"text-green-400 hover:text-green-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-white\">API Uptime</h3>\n              <div className=\"text-3xl font-bold text-green-400\">\n                {apiUptime}\n              </div>\n              <p className=\"text-sm text-slate-400\">Disponibilidad de servicios</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* MÉTRICAS DE PROCESAMIENTO */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* VOLUMEN DE DATOS */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\"\n        >\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n            <span className=\"mr-3\">💾</span>\n            Volumen de Datos\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-[color:var(--primary)] mb-2\">{dataVolume}</div>\n            <p className=\"text-[color:var(--text-secondary)]\">Datos procesados mensualmente</p>\n          </div>\n        </motion.div>\n\n        {/* THROUGHPUT DE PROCESAMIENTO */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\"\n        >\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n            <span className=\"mr-3\">🚀</span>\n            Throughput\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-[color:var(--primary)] mb-2\">{processingThroughput}</div>\n            <p className=\"text-[color:var(--text-secondary)]\">Procesamiento por segundo</p>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* CALIDAD Y CUMPLIMIENTO */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"p-8 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\"\n      >\n        <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n          <span className=\"mr-3\">🔒</span>\n          Calidad & Cumplimiento\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-[color:var(--text-secondary)]\">Tasa de Error:</span>\n              <span className=\"font-mono text-[color:var(--accent-red)]\">{errorRate}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-[color:var(--text-secondary)]\">Score de Cumplimiento:</span>\n              <span className=\"font-mono text-[color:var(--primary)]\">{complianceScore}%</span>\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-[color:var(--accent-yellow)] mb-2\">\n              {Math.round((100 - parseFloat(errorRate)) * complianceScore / 100)}%\n            </div>\n            <p className=\"text-[color:var(--text-secondary)]\">Índice de Confiabilidad</p>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-slate-700/50\"\n      >\n        <div className=\"text-xs text-slate-500\">\n          🔒 Certificado por Apolo Prime - Arquitectura de datos 100% real del imperio\n        </div>\n        <div className=\"text-xs text-slate-600 mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default CIODashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/CMODashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"_selectedMetric"},"fix":{"range":[325,340],"text":""},"desc":"Remove unused variable '_selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":13,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"_setSelectedMetric"},"fix":{"range":[340,360],"text":""},"desc":"Remove unused variable '_setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":13,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface CMODashboardProps {\n  cmoData: any;\n  requestDivineExplanation: (_metric: string, _value: any, _context: string) => void;\n}\n\nconst CMODashboard: React.FC<CMODashboardProps> = ({\n  cmoData,\n  requestDivineExplanation\n}) => {\n  const [_selectedMetric, _setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DEL CMO - CONEXIÓN CON BACKEND\n  const demoEngagement = cmoData?.demoEngagement || 87;\n  const leadsGenerated = cmoData?.leadsGenerated || 234;\n  const brandSentiment = cmoData?.brandSentiment || 91;\n  const marketPenetration = cmoData?.marketPenetration || 73;\n  const conversionRate = cmoData?.conversionRate || '12.5%';\n  const customerAcquisition = cmoData?.customerAcquisition || 45;\n  const retentionRate = cmoData?.retentionRate || '89%';\n  const viralCoefficient = cmoData?.viralCoefficient || 1.8;\n\n  return (\n    <div className=\"space-y-8\">\n      {/* HEADER DIVINO CMO */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-[color:var(--text-primary)] mb-2\">\n          📈 Santuario de Mercado - CMO\n        </h1>\n        <p className=\"text-slate-400 text-xl\">\n          Engagement soberano - Métricas de mercado del imperio\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS DE MERCADO */}\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* ENGAGEMENT DE LA DEMO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🎯</div>\n              <button\n                onClick={() => requestDivineExplanation('demoEngagement', demoEngagement, 'CMODashboard')}\n                className=\"text-pink-400 hover:text-pink-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Demo Engagement</h3>\n              <div className=\"text-4xl font-bold text-pink-400\">\n                {demoEngagement}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Interacción con la plataforma</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* LEADS GENERADOS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">👥</div>\n              <button\n                onClick={() => requestDivineExplanation('leadsGenerated', leadsGenerated, 'CMODashboard')}\n                className=\"text-purple-400 hover:text-purple-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Leads Generados</h3>\n              <div className=\"text-4xl font-bold text-purple-400\">\n                {leadsGenerated}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Prospectos interesados</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* SENTIMIENTO DE MARCA */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">💝</div>\n              <button\n                onClick={() => requestDivineExplanation('brandSentiment', brandSentiment, 'CMODashboard')}\n                className=\"text-amber-400 hover:text-amber-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Sentimiento de Marca</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">{brandSentiment}%</div>\n              <p className=\"text-sm text-google-text-secondary\">Percepción pública y feedback</p>\n              <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                <div className=\"text-center p-3 bg-google-surface rounded-lg\">\n                  <div className=\"text-2xl font-bold text-google-primary\">{customerAcquisition}</div>\n                  <div className=\"text-sm text-google-text-secondary\">Adquisición</div>\n                </div>\n                <div className=\"text-center p-3 bg-google-surface rounded-lg\">\n                  <div className=\"text-2xl font-bold text-google-primary\">{viralCoefficient}</div>\n                  <div className=\"text-sm text-google-text-secondary\">Viralidad</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* PENETRACIÓN DE MERCADO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🌍</div>\n              <button\n                onClick={() => requestDivineExplanation('marketPenetration', marketPenetration, 'CMODashboard')}\n                className=\"text-cyan-400 hover:text-cyan-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-[color:var(--text-primary)]\">Penetración</h3>\n              <div className=\"text-4xl font-bold text-[color:var(--primary)]\">{marketPenetration}%</div>\n              <p className=\"text-sm text-[color:var(--text-secondary)]\">Cobertura de mercado</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* CONVERSIÓN Y RETENCIÓN */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* TASA DE CONVERSIÓN */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n            <span className=\"mr-3\">🎯</span>\n            Conversión\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-green-400 mb-2\">{conversionRate}</div>\n            <p className=\"text-slate-400\">Tasa de conversión de leads</p>\n          </div>\n        </motion.div>\n\n        {/* TASA DE RETENCIÓN */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n            <span className=\"mr-3\">🔄</span>\n            Retención\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-orange-400 mb-2\">{retentionRate}</div>\n            <p className=\"text-slate-400\">Retención de clientes</p>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* ADQUISICIÓN Y VIRALIDAD */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"p-8 rounded-lg border border-gray-700 bg-google-surface\"\n      >\n        <h3 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n          <span className=\"mr-3\">🚀</span>\n          Adquisición & Viralidad\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"text-center p-4 bg-google-surface rounded-lg\">\n            <div className=\"text-3xl font-bold text-google-primary mb-2\">{customerAcquisition}</div>\n            <div className=\"text-sm text-google-text-secondary\">Adquisición de Clientes</div>\n          </div>\n          <div className=\"text-center p-4 bg-google-surface rounded-lg\">\n            <div className=\"text-3xl font-bold text-google-primary mb-2\">{viralCoefficient}</div>\n            <div className=\"text-sm text-google-text-secondary\">Coeficiente Viral</div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n        <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-slate-700/50\"\n      >\n        <div className=\"text-xs text-slate-500\">\n          🔒 Certificado por Apolo Prime - Métricas de mercado 100% reales del imperio\n        </div>\n        <div className=\"text-xs text-slate-600 mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default CMODashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/COODashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"_selectedMetric"},"fix":{"range":[325,340],"text":""},"desc":"Remove unused variable '_selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":13,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"_setSelectedMetric"},"fix":{"range":[340,360],"text":""},"desc":"Remove unused variable '_setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":13,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface COODashboardProps {\n  cooData: any;\n  requestDivineExplanation: (_metric: string, _value: any, _context: string) => void;\n}\n\nconst COODashboard: React.FC<COODashboardProps> = ({\n  cooData,\n  requestDivineExplanation\n}) => {\n  const [_selectedMetric, _setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DEL COO - CONEXIÓN CON BACKEND\n  const crewVelocity = cooData?.crewVelocity || 23;\n  const kanbanThroughput = cooData?.kanbanThroughput || 45;\n  const leadTime = cooData?.leadTime || '12 days';\n  const operationalEfficiency = cooData?.operationalEfficiency || 87;\n  const resourceUtilization = cooData?.resourceUtilization || 78;\n  const processAutomation = cooData?.processAutomation || 64;\n  const teamProductivity = cooData?.teamProductivity || 82;\n\n  const qualityMetrics = cooData?.qualityMetrics || {\n    defectRate: '2.1%',\n    reworkRate: '8.5%',\n    customerSatisfaction: 91\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* HEADER DIVINO COO */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-[color:var(--text-primary)] mb-2\">\n          🏭 Santuario Operativo - COO\n        </h1>\n        <p className=\"text-slate-400 text-xl\">\n          Eficiencia operativa soberana - Procesos y ejecución del imperio\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS OPERATIVAS */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* VELOCIDAD DE CREWS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🚀</div>\n              <button\n                onClick={() => requestDivineExplanation('crewVelocity', crewVelocity, 'COODashboard')}\n                className=\"text-amber-400 hover:text-amber-300 transition-colors text-xl\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Velocidad de Crews</h3>\n              <div className=\"text-4xl font-bold text-amber-400\">\n                {crewVelocity}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Commits por desarrollador</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* THROUGHPUT DEL KANBAN */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-300 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">📋</div>\n              <button\n                onClick={() => requestDivineExplanation('kanbanThroughput', kanbanThroughput, 'COODashboard')}\n                className=\"text-orange-400 hover:text-orange-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Kanban Throughput</h3>\n              <div className=\"text-4xl font-bold text-orange-400\">\n                {kanbanThroughput}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Issues cerrados</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* LEAD TIME */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-300 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">⏱️</div>\n              <button\n                onClick={() => requestDivineExplanation('leadTime', leadTime, 'COODashboard')}\n                className=\"text-red-400 hover:text-red-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Lead Time</h3>\n              <div className=\"text-2xl font-bold text-red-400\">\n                {leadTime}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Tiempo de entrega</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* EFICIENCIA OPERATIVA */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-300 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">⚙️</div>\n              <button\n                onClick={() => requestDivineExplanation('operationalEfficiency', operationalEfficiency, 'COODashboard')}\n                className=\"text-green-400 hover:text-green-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Eficiencia Operativa</h3>\n              <div className=\"text-4xl font-bold text-green-400\">\n                {operationalEfficiency}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Optimización de procesos</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* UTILIZACIÓN Y AUTOMATIZACIÓN */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* UTILIZACIÓN DE RECURSOS */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\"\n        >\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n            <span className=\"mr-3\">📊</span>\n            Utilización de Recursos\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-[color:var(--primary)] mb-2\">{resourceUtilization}%</div>\n            <p className=\"text-[color:var(--text-secondary)]\">Eficiencia en el uso de recursos</p>\n          </div>\n        </motion.div>\n\n        {/* AUTOMATIZACIÓN DE PROCESOS */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\"\n        >\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n            <span className=\"mr-3\">🤖</span>\n            Automatización\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-[color:var(--primary)] mb-2\">{processAutomation}%</div>\n            <p className=\"text-[color:var(--text-secondary)]\">Procesos automatizados</p>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* MÉTRICAS DE CALIDAD Y PRODUCTIVIDAD */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"p-8 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\"\n      >\n        <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n          <span className=\"mr-3\">⭐</span>\n          Calidad & Productividad\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-[color:var(--text-secondary)]\">Tasa de Defectos:</span>\n              <span className=\"font-mono text-[color:var(--accent-red)]\">{qualityMetrics.defectRate}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-[color:var(--text-secondary)]\">Tasa de Retrabajo:</span>\n              <span className=\"font-mono text-[color:var(--accent-yellow)]\">{qualityMetrics.reworkRate}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-[color:var(--text-secondary)]\">Satisfacción del Cliente:</span>\n              <span className=\"font-mono text-[color:var(--primary)]\">{qualityMetrics.customerSatisfaction}%</span>\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-[color:var(--accent-yellow)] mb-2\">{teamProductivity}%</div>\n            <p className=\"text-[color:var(--text-secondary)]\">Productividad del Equipo</p>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-slate-700/50\"\n      >\n        <div className=\"text-xs text-slate-500\">\n          🔒 Certificado por Apolo Prime - Operaciones 100% reales del imperio\n        </div>\n        <div className=\"text-xs text-slate-600 mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default COODashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/CSODashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/CTODashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"_selectedMetric"},"fix":{"range":[325,340],"text":""},"desc":"Remove unused variable '_selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_selectedMetric' is assigned a value but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":13,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"_setSelectedMetric"},"fix":{"range":[340,360],"text":""},"desc":"Remove unused variable '_setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setSelectedMetric' is assigned a value but never used.","line":13,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface CTODashboardProps {\n  ctoData: any;\n  requestDivineExplanation: (_metric: string, _value: any, _context: string) => void;\n}\n\nconst CTODashboard: React.FC<CTODashboardProps> = ({\n  ctoData,\n  requestDivineExplanation\n}) => {\n  const [_selectedMetric, _setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DEL CTO - CONEXIÓN CON BACKEND\n  const technicalDebt = ctoData?.technicalDebt || 23;\n  const complexityScore = ctoData?.complexityScore || 78;\n  const innovationVelocity = ctoData?.innovationVelocity || 15;\n  const architectureHealth = ctoData?.architectureHealth || 89;\n  const scalabilityIndex = ctoData?.scalabilityIndex || 82;\n  const modernizationReadiness = ctoData?.modernizationReadiness || 91;\n  const dependencyVulnerabilities = ctoData?.dependencyVulnerabilities || 2;\n  const codeQuality = ctoData?.codeQuality || 87;\n\n  return (\n  <div className=\"space-y-8 bg-google-background p-6\">\n      {/* HEADER DIVINO CTO */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-google-text-primary mb-2\">\n          ⚡ Santuario Tecnológico - CTO\n        </h1>\n        <p className=\"text-google-text-secondary text-xl\">\n          Arquitectura soberana - Salud técnica del imperio\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS TÉCNICAS */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* DEUDA TÉCNICA */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🏗️</div>\n              <button\n                onClick={() => requestDivineExplanation('technicalDebt', technicalDebt, 'CTODashboard')}\n                className=\"text-red-400 hover:text-red-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Deuda Técnica</h3>\n              <div className=\"text-4xl font-bold text-red-400\">\n                {technicalDebt}%\n              </div>\n              <p className=\"text-sm text-slate-400\">Código legacy por refactorizar</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* SCORE DE COMPLEJIDAD */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🧩</div>\n              <button\n                onClick={() => requestDivineExplanation('complexityScore', complexityScore, 'CTODashboard')}\n                className=\"text-orange-400 hover:text-orange-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Complejidad</h3>\n              <div className=\"text-4xl font-bold text-orange-400\">\n                {complexityScore}%\n              </div>\n              <p className=\"text-sm text-slate-400\">Score ciclomático promedio</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* VELOCIDAD DE INNOVACIÓN */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🚀</div>\n              <button\n                onClick={() => requestDivineExplanation('innovationVelocity', innovationVelocity, 'CTODashboard')}\n                className=\"text-purple-400 hover:text-purple-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Innovación</h3>\n              <div className=\"text-3xl font-bold text-purple-400\">\n                {innovationVelocity}\n              </div>\n              <p className=\"text-sm text-slate-400\">Commits por semana</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* SALUD DE ARQUITECTURA */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-shadow duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🏛️</div>\n              <button\n                onClick={() => requestDivineExplanation('architectureHealth', architectureHealth, 'CTODashboard')}\n                className=\"text-green-400 hover:text-green-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Arquitectura</h3>\n              <div className=\"text-4xl font-bold text-green-400\">\n                {architectureHealth}%\n              </div>\n              <p className=\"text-sm text-slate-400\">Salud de la arquitectura</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* MÉTRICAS DE ESCALABILIDAD Y MODERNIZACIÓN */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* ÍNDICE DE ESCALABILIDAD */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n            <span className=\"mr-3\">📈</span>\n            Escalabilidad\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-[color:var(--primary)] mb-2\">{scalabilityIndex}%</div>\n            <p className=\"text-[color:var(--text-secondary)]\">Índice de escalabilidad del sistema</p>\n          </div>\n        </motion.div>\n\n        {/* PREPARACIÓN PARA MODERNIZACIÓN */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n            <span className=\"mr-3\">🔄</span>\n            Modernización\n          </h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-[color:var(--primary)] mb-2\">{modernizationReadiness}%</div>\n            <p className=\"text-[color:var(--text-secondary)]\">Preparación para tecnologías modernas</p>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* SEGURIDAD Y CALIDAD */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"p-8 rounded-lg border border-gray-700 bg-google-surface\"\n      >\n        <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\">\n          <span className=\"mr-3\">🔒</span>\n          Seguridad & Calidad\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-[color:var(--text-secondary)]\">Vulnerabilidades:</span>\n              <span className=\"font-mono text-[color:var(--accent-red)]\">{dependencyVulnerabilities}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-[color:var(--text-secondary)]\">Calidad de Código:</span>\n              <span className=\"font-mono text-[color:var(--primary)]\">{codeQuality}%</span>\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-[color:var(--accent-yellow)] mb-2\">\n              {codeQuality - dependencyVulnerabilities * 5}%\n            </div>\n            <p className=\"text-[color:var(--text-secondary)]\">Score Técnico General</p>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-slate-700/50\"\n      >\n        <div className=\"text-xs text-slate-500\">\n          🔒 Certificado por Apolo Prime - Arquitectura técnica 100% real del imperio\n        </div>\n        <div className=\"text-xs text-slate-600 mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default CTODashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/DeploymentDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'metric' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"metric"},"fix":{"range":[290,305],"text":""},"desc":"Remove unused variable 'metric'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[304,316],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"context"},"fix":{"range":[316,333],"text":""},"desc":"Remove unused variable 'context'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts';\n\ninterface DeploymentDashboardProps {\n  deploymentData?: any;\n  requestDivineExplanation: (metric: string, value: any, context: string) => void;\n}\n\nconst DeploymentDashboard: React.FC<DeploymentDashboardProps> = ({\n  deploymentData,\n  requestDivineExplanation\n}) => {\n  useState<string | null>(null);\n\n  // DATOS REALES DE DEPLOYMENT - CONEXIÓN CON BACKEND\n  const deploymentStatus = deploymentData?.deploymentStatus || 'SUCCESS';\n  const lastDeployment = deploymentData?.lastDeployment || '2h ago';\n  const uptime = deploymentData?.uptime || '99.98%';\n  const rollbackRate = deploymentData?.rollbackRate || 2;\n  const deploymentFrequency = deploymentData?.deploymentFrequency || 18;\n  const pipelineHealth = deploymentData?.pipelineHealth || 96;\n\n  // Datos para gráficos\n  const deploymentHistory = [\n    { date: '2025-10-07', deployments: 12, success: 11, failures: 1 },\n    { date: '2025-10-08', deployments: 15, success: 14, failures: 1 },\n    { date: '2025-10-09', deployments: 8, success: 8, failures: 0 },\n    { date: '2025-10-10', deployments: 22, success: 21, failures: 1 },\n    { date: '2025-10-11', deployments: 18, success: 17, failures: 1 },\n    { date: '2025-10-12', deployments: 25, success: 24, failures: 1 },\n    { date: '2025-10-13', deployments: 16, success: 15, failures: 1 }\n  ];\n\n  const environmentData = [\n    { env: 'Development', uptime: 95, latency: 120 },\n    { env: 'Staging', uptime: 98, latency: 95 },\n    { env: 'Production', uptime: 99.9, latency: 85 },\n    { env: 'DR', uptime: 99.5, latency: 110 }\n  ];\n\n  const pipelineStages = [\n    { name: 'Build', success: 98, duration: 8 },\n    { name: 'Test', success: 96, duration: 12 },\n    { name: 'Security', success: 99, duration: 5 },\n    { name: 'Deploy', success: 97, duration: 3 },\n    { name: 'Monitor', success: 100, duration: 1 }\n  ];\n\n  return (\n  <div className=\"space-y-8\">\n      {/* HEADER DIVINO DEPLOYMENT */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-google-text-primary mb-2\">🏹 Santuario del Vuelo - El Vuelo de Hermes</h1>\n        <p className=\"text-google-text-secondary text-xl\">\n          Despliegue divino y entrega continua - Mensajero de los dioses\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS DEPLOYMENT */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* ESTADO DEL DESPLIEGUE */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🚀</div>\n              <button\n                onClick={() => requestDivineExplanation('deploymentStatus', deploymentStatus, 'DeploymentDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Estado del Despliegue</h3>\n              <div className=\"text-2xl font-bold text-google-primary\">\n                {deploymentStatus}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Último despliegue</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* ÚLTIMO DESPLIEGUE */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">⏰</div>\n              <button\n                onClick={() => requestDivineExplanation('lastDeployment', lastDeployment, 'DeploymentDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Último Despliegue</h3>\n              <div className=\"text-2xl font-bold text-google-primary\">\n                {lastDeployment}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Tiempo transcurrido</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* UPTIME GLOBAL */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">📈</div>\n              <button\n                onClick={() => requestDivineExplanation('uptime', uptime, 'DeploymentDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Uptime Global</h3>\n              <div className=\"text-2xl font-bold text-google-primary\">\n                {uptime}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Disponibilidad</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* TASA DE ROLLBACK */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">↩️</div>\n              <button\n                onClick={() => requestDivineExplanation('rollbackRate', rollbackRate, 'DeploymentDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Rollbacks</h3>\n              <div className=\"text-4xl font-bold text-google-accent-red\">\n                {rollbackRate}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Tasa de reversión</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* VISUALIZACIONES DEPLOYMENT AVANZADAS */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* HISTORIAL DE DESPLIEGUES */}\n        <motion.div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.5 }}>\n          <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\"><span className=\"mr-3\">📊</span> Historial de Despliegues</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={deploymentHistory}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"date\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              <Bar dataKey=\"success\" stackId=\"a\" fill=\"hsl(var(--primary))\" />\n              <Bar dataKey=\"failures\" stackId=\"a\" fill=\"hsl(var(--accent-red))\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </motion.div>\n\n        {/* SALUD DE ENTORNOS */}\n        <motion.div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.6 }}>\n          <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\"><span className=\"mr-3\">🌐</span> Salud de Entornos</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={environmentData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"env\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              <Line type=\"monotone\" dataKey=\"uptime\" stroke=\"hsl(var(--primary))\" strokeWidth={3} />\n              <Line type=\"monotone\" dataKey=\"latency\" stroke=\"hsl(var(--accent-yellow))\" strokeWidth={2} strokeDasharray=\"5 5\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </motion.div>\n      </div>\n\n      {/* PIPELINE DE DESPLIEGUE */}\n      <motion.div className=\"p-8 rounded-lg border border-gray-700 bg-google-surface\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.7 }}>\n        <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\"><span className=\"mr-3\">🔄</span> Pipeline de Despliegue - Camino de Hermes</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div>\n            <h4 className=\"text-lg font-semibold text-[color:var(--text-primary)] mb-4\">Éxito por Etapa</h4>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <BarChart data={pipelineStages}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                <XAxis dataKey=\"name\" stroke=\"hsl(var(--text-secondary))\" />\n                <YAxis stroke=\"hsl(var(--text-secondary))\" />\n                <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n                <Bar dataKey=\"success\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between p-4 bg-google-background rounded-lg\">\n              <div>\n                <div className=\"text-sm text-google-text-secondary\">Frecuencia de Despliegues</div>\n                <div className=\"text-xl font-bold text-google-primary\">{deploymentFrequency}/día</div>\n              </div>\n              <div className=\"text-sm text-google-text-secondary\">ritmo continuo</div>\n            </div>\n            <div className=\"flex items-center justify-between p-4 bg-google-background rounded-lg\">\n              <div>\n                <div className=\"text-sm text-google-text-secondary\">Salud del Pipeline</div>\n                <div className=\"text-xl font-bold text-google-primary\">{pipelineHealth}%</div>\n              </div>\n              <div className=\"w-4 h-4 bg-google-primary rounded-full animate-pulse\"></div>\n            </div>\n            <div className=\"flex items-center justify-between p-4 bg-google-background rounded-lg\">\n              <div>\n                <div className=\"text-sm text-google-text-secondary\">Próximo Despliegue</div>\n                <div className=\"text-xl font-bold text-google-primary\">En 2h</div>\n              </div>\n              <div className=\"text-sm text-google-text-secondary\">programado</div>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-gray-700/50\"\n      >\n        <div className=\"text-xs text-google-text-secondary\">\n          🔒 Certificado por Apolo Prime - Despliegue divino 100% real del imperio\n        </div>\n        <div className=\"text-xs text-google-text-secondary mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default DeploymentDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/DesignDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'metric' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"metric"},"fix":{"range":[314,329],"text":""},"desc":"Remove unused variable 'metric'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[328,340],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"context"},"fix":{"range":[340,357],"text":""},"desc":"Remove unused variable 'context'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedMetric"},"fix":{"range":[488,502],"text":""},"desc":"Remove unused variable 'selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'setSelectedMetric' is assigned a value but never used.","line":14,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSelectedMetric"},"fix":{"range":[502,521],"text":""},"desc":"Remove unused variable 'setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedMetric' is assigned a value but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\n\ninterface DesignDashboardProps {\n  designData?: any;\n  requestDivineExplanation: (metric: string, value: any, context: string) => void;\n}\n\nconst DesignDashboard: React.FC<DesignDashboardProps> = ({\n  designData,\n  requestDivineExplanation\n}) => {\n  const [selectedMetric, setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DEL DESIGN - CONEXIÓN CON BACKEND\n  const designCompleteness = designData?.designCompleteness || 72;\n  const architectureStability = designData?.architectureStability || 89;\n  const userExperienceScore = designData?.userExperienceScore || 94;\n  const technicalDebt = designData?.technicalDebt || 15;\n  const scalabilityIndex = designData?.scalabilityIndex || 87;\n  const securityScore = designData?.securityScore || 91;\n\n  // Datos para gráficos\n  const architectureData = [\n    { component: 'Frontend', stability: 92, complexity: 'Medium' },\n    { component: 'Backend', stability: 88, complexity: 'High' },\n    { component: 'Database', stability: 95, complexity: 'Medium' },\n    { component: 'API', stability: 85, complexity: 'High' },\n    { component: 'Infrastructure', stability: 78, complexity: 'High' }\n  ];\n\n  const uxMetricsData = [\n    { metric: 'Usability', score: 94, target: 90 },\n    { metric: 'Accessibility', score: 96, target: 95 },\n    { metric: 'Performance', score: 88, target: 85 },\n    { metric: 'Mobile UX', score: 92, target: 90 }\n  ];\n\n  const debtData = [\n    { name: 'Código Legacy', value: 25, color: '#FF6B00' },\n    { name: 'Dependencias', value: 15, color: '#FFD700' },\n    { name: 'Arquitectura', value: 35, color: '#FF0080' },\n    { name: 'Documentación', value: 10, color: '#00FF80' },\n    { name: 'Testing', value: 15, color: '#00D4FF' }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* HEADER DIVINO DESIGN */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n          <h1 className=\"text-5xl font-bold text-google-text-primary mb-4\">\n          🎨 Santuario del Diseño - Consejo Técnico Soberano\n        </h1>\n        <p className=\"text-google-text-secondary text-xl\">\n          Arquitectura digital divina - Diseño de sistemas inmortales\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS DESIGN */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* COMPLETITUD DEL DISEÑO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-200\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🎯</div>\n              <button\n                onClick={() => requestDivineExplanation('designCompleteness', designCompleteness, 'DesignDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Completitud del Diseño</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {designCompleteness}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Especificaciones completadas</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* ESTABILIDAD ARQUITECTURAL */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-200\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🏗️</div>\n              <button\n                onClick={() => requestDivineExplanation('architectureStability', architectureStability, 'DesignDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Estabilidad Arquitectural</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {architectureStability}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Solidez del diseño</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* PUNTAJE DE UX */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-200\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">👥</div>\n              <button\n                onClick={() => requestDivineExplanation('userExperienceScore', userExperienceScore, 'DesignDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Puntaje de UX</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {userExperienceScore}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Experiencia de usuario</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* DEUDA TÉCNICA */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-200\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">⚠️</div>\n              <button\n                onClick={() => requestDivineExplanation('technicalDebt', technicalDebt, 'DesignDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Deuda Técnica</h3>\n              <div className=\"text-4xl font-bold text-google-accent-red\">\n                {technicalDebt}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Acumulación de deuda</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* VISUALIZACIONES DESIGN AVANZADAS */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* ESTABILIDAD ARQUITECTURAL */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n            <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">🏗️</span>\n            Estabilidad Arquitectural por Componente\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={architectureData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"component\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              <Bar dataKey=\"stability\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </motion.div>\n\n        {/* MÉTRICAS DE UX */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n            <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">👥</span>\n            Métricas de Experiencia de Usuario\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={uxMetricsData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"metric\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              <Line type=\"monotone\" dataKey=\"score\" stroke=\"hsl(var(--primary))\" strokeWidth={3} />\n              <Line type=\"monotone\" dataKey=\"target\" stroke=\"hsl(var(--accent-yellow))\" strokeWidth={2} strokeDasharray=\"5 5\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </motion.div>\n      </div>\n\n      {/* ANÁLISIS DE DEUDA TÉCNICA */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"p-8 rounded-lg border border-gray-700 bg-google-surface\"\n      >\n        <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n          <span className=\"mr-3\">⚠️</span>\n          Composición de Deuda Técnica\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <PieChart>\n                <Pie\n                  data={debtData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={40}\n                  outerRadius={80}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {debtData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-google-text-secondary\">Índice de Escalabilidad</span>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-2xl font-bold text-google-primary\">{scalabilityIndex}%</span>\n                <button\n                  onClick={() => requestDivineExplanation('scalabilityIndex', scalabilityIndex, 'DesignDashboard')}\n                  className=\"text-google-primary hover:opacity-90 transition-colors text-lg\"\n                >\n                  ✨\n                </button>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-google-text-secondary\">Puntaje de Seguridad</span>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-2xl font-bold text-google-accent-yellow\">{securityScore}</span>\n                <button\n                  onClick={() => requestDivineExplanation('securityScore', securityScore, 'DesignDashboard')}\n                  className=\"text-google-accent-yellow hover:opacity-90 transition-colors text-lg\"\n                >\n                  ✨\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-gray-700/50\"\n      >\n        <div className=\"text-xs text-google-text-secondary\">\n          🔒 Certificado por Apolo Prime - Diseño arquitectónico 100% real del imperio\n        </div>\n        <div className=\"text-xs text-google-text-secondary mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default DesignDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/ImplementationDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":3,"column":101,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":109,"suggestions":[{"messageId":"removeVar","data":{"varName":"PieChart"},"fix":{"range":[190,200],"text":""},"desc":"Remove unused variable 'PieChart'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":3,"column":101,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":109},{"ruleId":"no-unused-vars","severity":1,"message":"'Pie' is defined but never used.","line":3,"column":111,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":114,"suggestions":[{"messageId":"removeVar","data":{"varName":"Pie"},"fix":{"range":[200,205],"text":""},"desc":"Remove unused variable 'Pie'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pie' is defined but never used.","line":3,"column":111,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":114},{"ruleId":"no-unused-vars","severity":1,"message":"'Cell' is defined but never used.","line":3,"column":116,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":120,"suggestions":[{"messageId":"removeVar","data":{"varName":"Cell"},"fix":{"range":[205,211],"text":""},"desc":"Remove unused variable 'Cell'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cell' is defined but never used.","line":3,"column":116,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":120},{"ruleId":"no-unused-vars","severity":1,"message":"'metric' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"metric"},"fix":{"range":[330,345],"text":""},"desc":"Remove unused variable 'metric'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[344,356],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"context"},"fix":{"range":[356,373],"text":""},"desc":"Remove unused variable 'context'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedMetric"},"fix":{"range":[528,542],"text":""},"desc":"Remove unused variable 'selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'setSelectedMetric' is assigned a value but never used.","line":14,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSelectedMetric"},"fix":{"range":[542,561],"text":""},"desc":"Remove unused variable 'setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedMetric' is assigned a value but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\n\ninterface ImplementationDashboardProps {\n  implementationData?: any;\n  requestDivineExplanation: (metric: string, value: any, context: string) => void;\n}\n\nconst ImplementationDashboard: React.FC<ImplementationDashboardProps> = ({\n  implementationData,\n  requestDivineExplanation\n}) => {\n  const [selectedMetric, setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DE IMPLEMENTACIÓN - CONEXIÓN CON BACKEND\n  const codeCoverage = implementationData?.codeCoverage || 84.11;\n  const buildSuccessRate = implementationData?.buildSuccessRate || 96;\n  const deploymentFrequency = implementationData?.deploymentFrequency || 12;\n  const meanTimeToRecovery = implementationData?.meanTimeToRecovery || '4.2h';\n  const activeWorkers = implementationData?.activeWorkers || 4;\n  const pendingQueues = implementationData?.pendingQueues || 12;\n\n  // Datos para gráficos\n  const buildData = [\n    { day: 'Lun', success: 98, failures: 2 },\n    { day: 'Mar', success: 96, failures: 4 },\n    { day: 'Mié', success: 99, failures: 1 },\n    { day: 'Jue', success: 97, failures: 3 },\n    { day: 'Vie', success: 95, failures: 5 },\n    { day: 'Sáb', success: 100, failures: 0 },\n    { day: 'Dom', success: 98, failures: 2 }\n  ];\n\n  const deploymentData = [\n    { week: 'Sem 1', deployments: 8, rollbacks: 1 },\n    { week: 'Sem 2', deployments: 12, rollbacks: 0 },\n    { week: 'Sem 3', deployments: 15, rollbacks: 2 },\n    { week: 'Sem 4', deployments: 18, rollbacks: 1 }\n  ];\n\n  const workerData = [\n    { name: 'Worker A', tasks: 45, status: 'Active' },\n    { name: 'Worker B', tasks: 38, status: 'Active' },\n    { name: 'Worker C', tasks: 52, status: 'Active' },\n    { name: 'Worker D', tasks: 29, status: 'Active' }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* HEADER DIVINO IMPLEMENTATION */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-google-text-primary mb-2\">\n          ⚒️ Santuario de la Forja - La Forja de Hefesto\n        </h1>\n        <p className=\"text-google-text-secondary text-xl\">\n          Motor de agentes inmortal - Implementación divina del código\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS IMPLEMENTATION */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* COBERTURA DE CÓDIGO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">📊</div>\n              <button\n                onClick={() => requestDivineExplanation('codeCoverage', codeCoverage, 'ImplementationDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Cobertura de Código</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {codeCoverage}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Líneas testeadas</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* TASA DE ÉXITO DE BUILDS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🔨</div>\n              <button\n                onClick={() => requestDivineExplanation('buildSuccessRate', buildSuccessRate, 'ImplementationDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Éxito de Builds</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {buildSuccessRate}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Builds exitosos</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* FRECUENCIA DE DESPLIEGUES */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🚀</div>\n              <button\n                onClick={() => requestDivineExplanation('deploymentFrequency', deploymentFrequency, 'ImplementationDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Despliegues/Semana</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {deploymentFrequency}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Ritmo de entrega</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* MTTR */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">⏱️</div>\n              <button\n                onClick={() => requestDivineExplanation('meanTimeToRecovery', meanTimeToRecovery, 'ImplementationDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">MTTR</h3>\n              <div className=\"text-2xl font-bold text-google-primary\">\n                {meanTimeToRecovery}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Tiempo de recuperación</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* VISUALIZACIONES IMPLEMENTATION AVANZADAS */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* ÉXITO DE BUILDS SEMANAL */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n            <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">🔨</span>\n            Éxito de Builds por Día\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={buildData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"day\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              <Bar dataKey=\"success\" stackId=\"a\" fill=\"hsl(var(--primary))\" />\n              <Bar dataKey=\"failures\" stackId=\"a\" fill=\"hsl(var(--accent-red))\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </motion.div>\n\n        {/* FRECUENCIA DE DESPLIEGUES */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n            <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">🚀</span>\n            Despliegues vs Rollbacks\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={deploymentData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"week\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              <Line type=\"monotone\" dataKey=\"deployments\" stroke=\"hsl(var(--primary))\" strokeWidth={3} />\n              <Line type=\"monotone\" dataKey=\"rollbacks\" stroke=\"hsl(var(--accent-red))\" strokeWidth={2} strokeDasharray=\"5 5\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </motion.div>\n      </div>\n\n      {/* ESTADO DEL MOTOR DE AGENTES */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"p-8 rounded-lg border border-gray-700 bg-google-surface\"\n      >\n        <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n          <span className=\"mr-3\">⚙️</span>\n          Estado del Motor de Agentes Inmortales\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between p-4 bg-google-background rounded-lg\">\n              <div>\n                <div className=\"text-sm text-google-text-secondary\">Estado del Motor</div>\n                <div className=\"text-xl font-bold text-google-primary\">Operativo</div>\n              </div>\n              <div className=\"w-4 h-4 bg-google-primary rounded-full animate-pulse\"></div>\n            </div>\n            <div className=\"flex items-center justify-between p-4 bg-google-background rounded-lg\">\n              <div>\n                <div className=\"text-sm text-google-text-secondary\">Workers Activos</div>\n                <div className=\"text-xl font-bold text-google-primary\">{activeWorkers}</div>\n              </div>\n              <div className=\"text-sm text-google-text-secondary\">de 6 totales</div>\n            </div>\n            <div className=\"flex items-center justify-between p-4 bg-google-background rounded-lg\">\n              <div>\n                <div className=\"text-sm text-google-text-secondary\">Colas Pendientes</div>\n                <div className=\"text-xl font-bold text-google-accent-yellow\">{pendingQueues}</div>\n              </div>\n              <div className=\"text-sm text-google-text-secondary\">tareas en espera</div>\n            </div>\n          </div>\n          <div>\n            <h4 className=\"text-lg font-semibold text-[color:var(--text-primary)] mb-4\">Distribución de Carga por Worker</h4>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <BarChart data={workerData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                <XAxis dataKey=\"name\" stroke=\"hsl(var(--text-secondary))\" />\n                <YAxis stroke=\"hsl(var(--text-secondary))\" />\n                <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n                <Bar dataKey=\"tasks\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-slate-700/50\"\n      >\n        <div className=\"text-xs text-slate-500\">\n          🔒 Certificado por Apolo Prime - Implementación divina 100% real del imperio\n        </div>\n        <div className=\"text-xs text-slate-600 mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default ImplementationDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/LogisticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/LogisticsOptimizationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/PlanningDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'metric' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"metric"},"fix":{"range":[318,333],"text":""},"desc":"Remove unused variable 'metric'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[332,344],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"context"},"fix":{"range":[344,361],"text":""},"desc":"Remove unused variable 'context'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedMetric"},"fix":{"range":[498,512],"text":""},"desc":"Remove unused variable 'selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'setSelectedMetric' is assigned a value but never used.","line":14,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSelectedMetric"},"fix":{"range":[512,531],"text":""},"desc":"Remove unused variable 'setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedMetric' is assigned a value but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\n\ninterface PlanningDashboardProps {\n  planningData?: any;\n  requestDivineExplanation: (metric: string, value: any, context: string) => void;\n}\n\nconst PlanningDashboard: React.FC<PlanningDashboardProps> = ({\n  planningData,\n  requestDivineExplanation\n}) => {\n  const [selectedMetric, setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DEL PLANNING - CONEXIÓN CON BACKEND\n  const planningProgress = planningData?.planningProgress || 78;\n  const requirementsGathered = planningData?.requirementsGathered || 92;\n  const stakeholderAlignment = planningData?.stakeholderAlignment || 85;\n  const riskAssessment = planningData?.riskAssessment || 23;\n  const timelineConfidence = planningData?.timelineConfidence || 88;\n  const budgetAllocated = planningData?.budgetAllocated || '$450k';\n\n  // Datos para gráficos\n  const stakeholderData = [\n    { name: 'CEO', alignment: 95, influence: 'High' },\n    { name: 'CTO', alignment: 88, influence: 'High' },\n    { name: 'Product', alignment: 92, influence: 'Medium' },\n    { name: 'Dev Team', alignment: 85, influence: 'Medium' },\n    { name: 'QA', alignment: 78, influence: 'Low' }\n  ];\n\n  const timelineData = [\n    { phase: 'Week 1', progress: 20, target: 25 },\n    { phase: 'Week 2', progress: 45, target: 50 },\n    { phase: 'Week 3', progress: 68, target: 75 },\n    { phase: 'Week 4', progress: 85, target: 100 }\n  ];\n\n  const riskData = [\n    { name: 'Technical', value: 15, color: '#FF6B00' },\n    { name: 'Business', value: 8, color: '#FFD700' },\n    { name: 'Operational', value: 12, color: '#FF0080' },\n    { name: 'External', value: 5, color: '#00FF80' }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* HEADER DIVINO PLANNING */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-google-text-primary mb-2\">\n          🏛️ Santuario de la Planificación - Junta Directiva\n        </h1>\n        <p className=\"text-google-text-secondary text-xl\">\n          Arquitectura estratégica del imperio - Planificación soberana\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS PLANNING */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* PROGRESO DE PLANIFICACIÓN */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-200 hover:shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">📋</div>\n              <button\n                onClick={() => requestDivineExplanation('planningProgress', planningProgress, 'PlanningDashboard')}\n                className=\"text-google-primary hover:opacity-90 transition-colors text-xl\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Progreso de Planificación</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {planningProgress}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Hacia objetivos estratégicos</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* REQUISITOS RECOPILADOS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div\n            className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-200 hover:shadow-md\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">📝</div>\n              <button\n                onClick={() => requestDivineExplanation('requirementsGathered', requirementsGathered, 'PlanningDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Requisitos Recopilados</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {requirementsGathered}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Cobertura de requerimientos</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* ALINEACIÓN DE STAKEHOLDERS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div\n            className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-200 hover:shadow-md\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🤝</div>\n              <button\n                onClick={() => requestDivineExplanation('stakeholderAlignment', stakeholderAlignment, 'PlanningDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Alineación Stakeholders</h3>\n              <div className=\"text-4xl font-bold text-google-primary\">\n                {stakeholderAlignment}%\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Consenso del equipo</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* PRESUPUESTO ASIGNADO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div\n            className=\"p-6 rounded-lg border border-gray-700 bg-google-surface transition-all duration-200 hover:shadow-md\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">💰</div>\n              <button\n                onClick={() => requestDivineExplanation('budgetAllocated', budgetAllocated, 'PlanningDashboard')}\n                className=\"text-google-primary hover:brightness-110 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-google-text-primary\">Presupuesto Asignado</h3>\n              <div className=\"text-2xl font-bold text-google-primary\">\n                {budgetAllocated}\n              </div>\n              <p className=\"text-sm text-google-text-secondary\">Recursos disponibles</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* VISUALIZACIONES PLANNING AVANZADAS */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* ALINEACIÓN DE STAKEHOLDERS */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.5 }}\n            className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n        >\n          <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">🤝</span>\n            Alineación de Stakeholders\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={stakeholderData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"name\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: `1px solid hsl(var(--border))`, borderRadius: '8px' }} />\n              <Bar dataKey=\"alignment\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </motion.div>\n\n        {/* PROGRESO DEL TIMELINE */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.6 }}\n            className=\"p-6 rounded-lg border border-gray-700 bg-google-surface\"\n          >\n          <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n            <span className=\"mr-3\">📈</span>\n            Progreso del Timeline\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={timelineData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"phase\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: `1px solid hsl(var(--border))`, borderRadius: '8px' }} />\n              <Line type=\"monotone\" dataKey=\"progress\" stroke=\"hsl(var(--primary))\" strokeWidth={3} />\n              <Line type=\"monotone\" dataKey=\"target\" stroke=\"hsl(var(--accent-yellow))\" strokeWidth={2} strokeDasharray=\"5 5\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </motion.div>\n      </div>\n\n      {/* ANÁLISIS DE RIESGOS */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"p-8 rounded-lg border border-gray-700 bg-google-surface\"\n      >\n        <h3 className=\"text-2xl font-bold text-google-text-primary mb-6 flex items-center\">\n          <span className=\"mr-3\">⚠️</span>\n          Análisis de Riesgos de Planificación\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div>\n              <ResponsiveContainer width=\"100%\" height={200}>\n              <PieChart>\n                <Pie\n                  data={riskData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={40}\n                  outerRadius={80}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {riskData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: `1px solid hsl(var(--border))`, borderRadius: '8px' }} />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-google-text-secondary\">Confianza del Timeline</span>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-2xl font-bold text-google-primary\">{timelineConfidence}%</span>\n                <button\n                  onClick={() => requestDivineExplanation('timelineConfidence', timelineConfidence, 'PlanningDashboard')}\n                  className=\"text-google-primary hover:brightness-110 transition-colors text-lg animate-pulse\"\n                >\n                  ✨\n                </button>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-google-text-secondary\">Índice de Riesgo Global</span>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-2xl font-bold text-google-accent-red\">{riskAssessment}</span>\n                <button\n                  onClick={() => requestDivineExplanation('riskAssessment', riskAssessment, 'PlanningDashboard')}\n                  className=\"text-google-accent-red hover:brightness-110 transition-colors text-lg animate-pulse\"\n                >\n                  ✨\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-gray-700/50\"\n      >\n        <div className=\"text-xs text-google-text-secondary\">\n          🔒 Certificado por Apolo Prime - Planificación soberana 100% real del imperio\n        </div>\n        <div className=\"text-xs text-google-text-secondary mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default PlanningDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/PredictiveAnalysisDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'metric' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"metric"},"fix":{"range":[300,315],"text":""},"desc":"Remove unused variable 'metric'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[314,326],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"context"},"fix":{"range":[326,343],"text":""},"desc":"Remove unused variable 'context'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\ninterface PredictiveAnalysisDashboardProps {\n  divineData: any;\n  requestDivineExplanation: (metric: string, value: any, context: string) => void;\n}\n\nconst PredictiveAnalysisDashboard: React.FC<PredictiveAnalysisDashboardProps> = ({\n  divineData,\n  requestDivineExplanation\n}) => {\n  if (!divineData) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-slate-400\">Cargando datos predictivos divinos...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* HEADER DIVINO */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-4xl font-bold text-[color:var(--text-primary)] mb-2\">\n          🔮 Santuario del Análisis Predictivo\n        </h1>\n        <p className=\"text-slate-400 text-lg\">\n          Visión divina del futuro del imperio - 100% datos reales\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS PREDICTIVAS */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {/* KPI: PRECISIÓN PREDICTIVA */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"rounded-2xl p-6 border border-[color:var(--border)] bg-[color:var(--card)]\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"text-2xl\">🎯</div>\n            <button\n              onClick={() => requestDivineExplanation('precisionPromedio', divineData.kpis?.precisionPromedio || 0, 'PredictiveAnalysis')}\n              className=\"text-cyan-400 hover:text-cyan-300 transition-colors text-lg\"\n            >\n              ✨\n            </button>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-semibold text-[color:var(--text-primary)]\">Precisión Predictiva</h3>\n            <div className=\"text-3xl font-bold text-[color:var(--primary)]\">\n              {divineData.kpis?.precisionPromedio || 0}%\n            </div>\n            <p className=\"text-sm text-[color:var(--text-secondary)]\">Accuracy de modelos predictivos</p>\n          </div>\n        </motion.div>\n\n        {/* KPI: PREDICCIONES DIARIAS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"rounded-2xl p-6 border border-[color:var(--border)] bg-[color:var(--card)]\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"text-2xl\">📊</div>\n            <button\n              onClick={() => requestDivineExplanation('prediccionesDiarias', divineData.kpis?.prediccionesDiarias || 0, 'PredictiveAnalysis')}\n              className=\"text-cyan-400 hover:text-cyan-300 transition-colors text-lg\"\n            >\n              ✨\n            </button>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-semibold text-[color:var(--text-primary)]\">Predicciones Diarias</h3>\n            <div className=\"text-3xl font-bold text-[color:var(--primary)]\">\n              {divineData.kpis?.prediccionesDiarias || 0}\n            </div>\n            <p className=\"text-sm text-[color:var(--text-secondary)]\">Señales críticas procesadas</p>\n          </div>\n        </motion.div>\n\n        {/* KPI: MONITOREO CONTINUO */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"rounded-2xl p-6 border border-[color:var(--border)] bg-[color:var(--card)]\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"text-2xl\">⏰</div>\n            <button\n              onClick={() => requestDivineExplanation('monitoreoContinuo', divineData.kpis?.monitoreoContinuo || 0, 'PredictiveAnalysis')}\n              className=\"text-cyan-400 hover:text-cyan-300 transition-colors text-lg\"\n            >\n              ✨\n            </button>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-semibold text-white\">Monitoreo Continuo</h3>\n            <div className=\"text-3xl font-bold text-purple-400\">\n              {divineData.kpis?.monitoreoContinuo || 0}h\n            </div>\n            <p className=\"text-sm text-slate-400\">Horas de vigilancia activa</p>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* GRÁFICOS INTERACTIVOS DE PREDICCIONES */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* EVOLUCIÓN DEL RIESGO */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n          className=\"bg-gradient-to-br from-slate-800/50 to-slate-900/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50\"\n        >\n            <h3 className=\"text-xl font-bold text-[color:var(--text-primary)] mb-4 flex items-center\">\n            📈 Evolución del Riesgo\n            <button\n              onClick={() => requestDivineExplanation('evolucionRiesgo', 'Gráfico temporal', 'PredictiveAnalysis')}\n              className=\"ml-2 text-cyan-400 hover:text-cyan-300 transition-colors text-lg\"\n            >\n              ✨\n            </button>\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={[\n              { name: 'Ene', riesgo: 65 },\n              { name: 'Feb', riesgo: 72 },\n              { name: 'Mar', riesgo: 68 },\n              { name: 'Abr', riesgo: 75 },\n              { name: 'May', riesgo: 70 },\n              { name: 'Jun', riesgo: 78 }\n            ]}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"name\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: `1px solid hsl(var(--border))` }} />\n              <Line type=\"monotone\" dataKey=\"riesgo\" stroke=\"hsl(var(--primary))\" strokeWidth={3} />\n            </LineChart>\n          </ResponsiveContainer>\n        </motion.div>\n\n        {/* DISTRIBUCIÓN POR CATEGORÍA */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"bg-gradient-to-br from-slate-800/50 to-slate-900/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50\"\n        >\n          <h3 className=\"text-xl font-bold text-white mb-4 flex items-center\">\n            📊 Distribución por Categoría\n            <button\n              onClick={() => requestDivineExplanation('distribucionCategoria', 'Gráfico de barras', 'PredictiveAnalysis')}\n              className=\"ml-2 text-cyan-400 hover:text-cyan-300 transition-colors text-lg\"\n            >\n              ✨\n            </button>\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={[\n              { name: 'Geofísico', valor: 35 },\n              { name: 'Climático', valor: 28 },\n              { name: 'Económico', valor: 22 },\n              { name: 'Social', valor: 15 }\n            ]}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"name\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: `1px solid hsl(var(--border))` }} />\n              <Bar dataKey=\"valor\" fill=\"hsl(var(--primary))\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </motion.div>\n      </div>\n\n      {/* VOLUMEN DE PREDICCIONES */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.6 }}\n        className=\"bg-gradient-to-br from-slate-800/50 to-slate-900/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50\"\n      >\n        <h3 className=\"text-xl font-bold text-white mb-4 flex items-center\">\n          📊 Volumen de Predicciones\n          <button\n            onClick={() => requestDivineExplanation('volumenPredicciones', 'Gráfico circular', 'PredictiveAnalysis')}\n            className=\"ml-2 text-cyan-400 hover:text-cyan-300 transition-colors text-lg\"\n          >\n            ✨\n          </button>\n        </h3>\n        <ResponsiveContainer width=\"100%\" height={250}>\n          <PieChart>\n            <Pie\n              data={[\n                { name: 'Procesadas', value: 85 },\n                { name: 'Pendientes', value: 15 }\n              ]}\n              cx=\"50%\"\n              cy=\"50%\"\n              innerRadius={60}\n              outerRadius={100}\n              paddingAngle={5}\n              dataKey=\"value\"\n            >\n              <Cell fill=\"#06B6D4\" />\n              <Cell fill=\"#374151\" />\n            </Pie>\n            <Tooltip contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151' }} />\n          </PieChart>\n        </ResponsiveContainer>\n      </motion.div>\n\n      {/* DATOS GLOBALES */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.6 }}\n        className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\n      >\n        {/* CRIPTOMONEDAS */}\n        <div className=\"bg-gradient-to-br from-slate-800/50 to-slate-900/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50\">\n          <h3 className=\"text-xl font-bold text-white mb-4\">₿ Mercado Cripto</h3>\n          {divineData.global?.crypto ? (\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-slate-300\">Bitcoin</span>\n                <span className=\"font-mono text-green-400\">\n                  ${divineData.global.crypto.bitcoin?.price?.toLocaleString() || 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-slate-300\">Ethereum</span>\n                <span className=\"font-mono text-blue-400\">\n                  ${divineData.global.crypto.ethereum?.price?.toLocaleString() || 'N/A'}\n                </span>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-slate-400\">Datos cripto no disponibles</div>\n          )}\n        </div>\n\n        {/* SÍSMICOS */}\n        <div className=\"bg-gradient-to-br from-slate-800/50 to-slate-900/50 backdrop-blur-xl rounded-2xl p-6 border border-slate-700/50\">\n          <h3 className=\"text-xl font-bold text-white mb-4\">🌋 Actividad Sísmica Global</h3>\n          {divineData.global?.seismic?.recentEarthquakes ? (\n            <div className=\"space-y-2\">\n              {divineData.global.seismic.recentEarthquakes.slice(0, 3).map((quake: any, index: number) => (\n                <div key={index} className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-slate-300\">{quake.location}</span>\n                  <span className=\"font-mono text-red-400\">{quake.magnitude}M</span>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-slate-400\">Datos sísmicos no disponibles</div>\n          )}\n        </div>\n      </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.8 }}\n        className=\"text-center py-4 border-t border-slate-700/50\"\n      >\n        <div className=\"text-xs text-slate-500\">\n          🔒 Certificado por Apolo Prime - Datos 100% reales del tejido de la realidad\n        </div>\n        <div className=\"text-xs text-slate-600 mt-1\">\n          Última actualización: {new Date(divineData.timestamp).toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default PredictiveAnalysisDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/RiskAssessmentDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/SystemStatusDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/dashboards/TestingDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'metric' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"metric"},"fix":{"range":[316,331],"text":""},"desc":"Remove unused variable 'metric'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[330,342],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"context"},"fix":{"range":[342,359],"text":""},"desc":"Remove unused variable 'context'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedMetric"},"fix":{"range":[493,507],"text":""},"desc":"Remove unused variable 'selectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedMetric' is assigned a value but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'setSelectedMetric' is assigned a value but never used.","line":14,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSelectedMetric"},"fix":{"range":[507,526],"text":""},"desc":"Remove unused variable 'setSelectedMetric'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedMetric' is assigned a value but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\n\ninterface TestingDashboardProps {\n  testingData?: any;\n  requestDivineExplanation: (metric: string, value: any, context: string) => void;\n}\n\nconst TestingDashboard: React.FC<TestingDashboardProps> = ({\n  testingData,\n  requestDivineExplanation\n}) => {\n  const [selectedMetric, setSelectedMetric] = useState<string | null>(null);\n\n  // DATOS REALES DE TESTING - CONEXIÓN CON BACKEND\n  const testCoverage = testingData?.testCoverage || 84.11;\n  const testExecutionTime = testingData?.testExecutionTime || '12m 34s';\n  const defectDensity = testingData?.defectDensity || 0.8;\n  const automationRate = testingData?.automationRate || 76;\n  const flakyTests = testingData?.flakyTests || 3;\n  const criticalBugs = testingData?.criticalBugs || 0;\n\n  // Datos para gráficos\n  const coverageData = [\n    { type: 'Unit Tests', coverage: 89, target: 85 },\n    { type: 'Integration', coverage: 78, target: 80 },\n    { type: 'E2E', coverage: 65, target: 70 },\n    { type: 'UI Tests', coverage: 84, target: 85 }\n  ];\n\n  const defectData = [\n    { week: 'Sem 1', defects: 12, critical: 2 },\n    { week: 'Sem 2', defects: 8, critical: 1 },\n    { week: 'Sem 3', defects: 15, critical: 3 },\n    { week: 'Sem 4', defects: 6, critical: 0 }\n  ];\n\n  const testTypesData = [\n    { name: 'Unit Tests', value: 45, color: '#10B981' },\n    { name: 'Integration', value: 25, color: '#3B82F6' },\n    { name: 'E2E Tests', value: 15, color: '#8B5CF6' },\n    { name: 'Manual Tests', value: 10, color: '#F59E0B' },\n    { name: 'Performance', value: 5, color: '#EF4444' }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* HEADER DIVINO TESTING */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h1 className=\"text-5xl font-bold text-[color:var(--text-primary)] mb-2\">⚔️ Santuario del Juicio - El Juicio de Ares</h1>\n        <p className=\"text-slate-400 text-xl\">\n          Calidad de código inmortal - Testing divino y validación\n        </p>\n      </motion.div>\n\n      {/* GRID DE MÉTRICAS TESTING */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* COBERTURA GLOBAL DE TESTS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🎯</div>\n              <button\n                onClick={() => requestDivineExplanation('testCoverage', testCoverage, 'TestingDashboard')}\n                className=\"text-green-400 hover:text-green-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-[color:var(--text-primary)]\">Cobertura Global</h3>\n              <div className=\"text-4xl font-bold text-[color:var(--primary)]\">\n                {testCoverage}%\n              </div>\n              <p className=\"text-sm text-[color:var(--text-secondary)]\">Código testeado</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* TIEMPO DE EJECUCIÓN */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">⏱️</div>\n              <button\n                onClick={() => requestDivineExplanation('testExecutionTime', testExecutionTime, 'TestingDashboard')}\n                className=\"text-blue-400 hover:text-blue-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-[color:var(--text-primary)]\">Tiempo de Ejecución</h3>\n              <div className=\"text-2xl font-bold text-[color:var(--primary)]\">\n                {testExecutionTime}\n              </div>\n              <p className=\"text-sm text-[color:var(--text-secondary)]\">Suite completa</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* DENSIDAD DE DEFECTOS */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.3 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🐛</div>\n              <button\n                onClick={() => requestDivineExplanation('defectDensity', defectDensity, 'TestingDashboard')}\n                className=\"text-orange-400 hover:text-orange-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-[color:var(--text-primary)]\">Defectos/KLOC</h3>\n              <div className=\"text-4xl font-bold text-[color:var(--accent-red)]\">\n                {defectDensity}\n              </div>\n              <p className=\"text-sm text-[color:var(--text-secondary)]\">Por mil líneas</p>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* TASA DE AUTOMATIZACIÓN */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"relative group\"\n        >\n          <div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-3xl\">🤖</div>\n              <button\n                onClick={() => requestDivineExplanation('automationRate', automationRate, 'TestingDashboard')}\n                className=\"text-purple-400 hover:text-purple-300 transition-colors text-xl animate-pulse\"\n              >\n                ✨\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold text-[color:var(--text-primary)]\">Automatización</h3>\n              <div className=\"text-4xl font-bold text-[color:var(--primary)]\">\n                {automationRate}%\n              </div>\n              <p className=\"text-sm text-[color:var(--text-secondary)]\">Tests automatizados</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* VISUALIZACIONES TESTING AVANZADAS */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* COBERTURA POR TIPO DE TEST */}\n        <motion.div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.5 }}>\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\"><span className=\"mr-3\">🎯</span> Cobertura por Tipo de Test</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={coverageData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"type\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              <Bar dataKey=\"coverage\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n              <Bar dataKey=\"target\" fill=\"hsl(var(--border))\" radius={[4, 4, 0, 0]} opacity={0.5} />\n            </BarChart>\n          </ResponsiveContainer>\n        </motion.div>\n\n        {/* TENDENCIA DE DEFECTOS */}\n        <motion.div className=\"p-6 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.6 }}>\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\"><span className=\"mr-3\">🐛</span> Tendencia de Defectos</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={defectData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"week\" stroke=\"hsl(var(--text-secondary))\" />\n              <YAxis stroke=\"hsl(var(--text-secondary))\" />\n              <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n              <Line type=\"monotone\" dataKey=\"defects\" stroke=\"hsl(var(--accent-yellow))\" strokeWidth={3} />\n              <Line type=\"monotone\" dataKey=\"critical\" stroke=\"hsl(var(--accent-red))\" strokeWidth={2} strokeDasharray=\"5 5\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </motion.div>\n      </div>\n\n      {/* DASHBOARD DE CALIDAD DE CÓDIGO */}\n        <motion.div className=\"p-8 rounded-2xl border border-[color:var(--border)] bg-[color:var(--card)]\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.7 }}>\n          <h3 className=\"text-2xl font-bold text-[color:var(--text-primary)] mb-6 flex items-center\"><span className=\"mr-3\">⚔️</span> Dashboard de Calidad de Código - El Juicio Final</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div>\n              <h4 className=\"text-lg font-semibold text-[color:var(--text-primary)] mb-4\">Distribución de Tipos de Test</h4>\n              <ResponsiveContainer width=\"100%\" height={200}>\n                <PieChart>\n                  <Pie data={testTypesData} cx=\"50%\" cy=\"50%\" innerRadius={40} outerRadius={80} paddingAngle={5} dataKey=\"value\">\n                    {testTypesData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip contentStyle={{ backgroundColor: 'hsl(var(--card))', border: '1px solid hsl(var(--border))', borderRadius: '8px' }} />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between p-4 bg-[color:var(--popover)] rounded-lg\">\n                <div>\n                  <div className=\"text-sm text-[color:var(--text-secondary)]\">Tests Flaky</div>\n                  <div className=\"text-xl font-bold text-[color:var(--accent-yellow)]\">{flakyTests}</div>\n                </div>\n                <div className=\"text-sm text-[color:var(--text-secondary)]\">requieren atención</div>\n              </div>\n              <div className=\"flex items-center justify-between p-4 bg-[color:var(--popover)] rounded-lg\">\n                <div>\n                  <div className=\"text-sm text-[color:var(--text-secondary)]\">Bugs Críticos</div>\n                  <div className=\"text-xl font-bold text-[color:var(--accent-red)]\">{criticalBugs}</div>\n                </div>\n                <div className=\"text-sm text-[color:var(--text-secondary)]\">bloquean release</div>\n              </div>\n              <div className=\"flex items-center justify-between p-4 bg-[color:var(--popover)] rounded-lg\">\n                <div>\n                  <div className=\"text-sm text-[color:var(--text-secondary)]\">Estado General</div>\n                  <div className=\"text-xl font-bold text-[color:var(--primary)]\">PASSED</div>\n                </div>\n                <div className=\"w-4 h-4 bg-[color:var(--primary)] rounded-full animate-pulse\"></div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n      {/* CERTIFICACIÓN DE REALIDAD */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.9 }}\n        className=\"text-center py-4 border-t border-slate-700/50\"\n      >\n        <div className=\"text-xs text-slate-500\">\n          🔒 Certificado por Apolo Prime - Testing divino 100% real del imperio\n        </div>\n        <div className=\"text-xs text-slate-600 mt-1\">\n          Última actualización: {new Date().toLocaleString()}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default TestingDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/demo/DemoPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'TaskReplayViewer' is defined but never used.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"TaskReplayViewer"},"fix":{"range":[270,292],"text":""},"desc":"Remove unused variable 'TaskReplayViewer'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TaskReplayViewer' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'ProphecyWidget' is defined but never used.","line":9,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"ProphecyWidget"},"fix":{"range":[535,555],"text":""},"desc":"Remove unused variable 'ProphecyWidget'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ProphecyWidget' is defined but never used.","line":9,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport AnimatedMetric from '@/components/AnimatedMetrics';\nimport SeismicMapWidget from '@/components/SeismicMapWidget';\nimport ConsciousnessHealthWidget from '@/components/generated/ConsciousnessHealthWidget';\nimport TaskReplayViewer from '@/components/TaskReplayViewer';\nimport MetatronPanelWidget from '@/components/metatron/MetatronPanelWidget';\nimport EthicalVectorDisplay from '@/components/EthicalVectorDisplay';\nimport ClimateWidget from '@/components/ClimateWidget';\nimport ProphecyWidget from '@/components/ProphecyWidget';\nimport MissionGallery from '@/components/MissionGallery';\n\nconst DemoPanel: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [result, setResult] = useState<string | null>(null);\n  const [selectedPlan, setSelectedPlan] = useState<'starter' | 'growth' | 'pantheon'>('starter');\n\n  // Mock data for widgets\n  const mockData = {\n    kpis: {\n      precision: 90,\n      predictions: 120,\n      monitoring: 24,\n      coverage: 6\n    },\n    seismicData: [],\n    ethicalAssessment: {\n      success: true,\n      data: {\n        vector: [25, 70, 55],\n        overallScore: 50,\n        assessment: 'Medium Ethical Concern',\n        timestamp: new Date().toISOString()\n      },\n      isMock: true\n    }\n  };\n\n  useEffect(() => {\n    let mounted = true;\n    // Simulate fetching a prediction from backend\n    setTimeout(() => {\n      if (!mounted) return;\n      setResult('Probabilidad de crisis alimentaria en PER: 12% (estimación)');\n      setLoading(false);\n    }, 600);\n    return () => { mounted = false; };\n  }, []);\n\n  // Determine which widgets to show based on selectedPlan\n  const widgetsForPlan = (plan: 'starter' | 'growth' | 'pantheon') => {\n    switch (plan) {\n      case 'starter':\n        return {\n          kpis: true,\n          seismic: true,\n          causal: false,\n          taskReplays: false,\n          simulation: false,\n          ethical: false,\n          predictive: false\n        };\n      case 'growth':\n        return {\n          kpis: true,\n          seismic: true,\n          causal: true,\n          taskReplays: true,\n          simulation: false,\n          ethical: false,\n          predictive: false\n        };\n      case 'pantheon':\n        return {\n          kpis: true,\n          seismic: true,\n          causal: true,\n          taskReplays: true,\n          simulation: true,\n          ethical: true,\n          predictive: true\n        };\n      default:\n        return {\n          kpis: true,\n          seismic: true,\n          causal: false,\n          taskReplays: false,\n          simulation: false,\n          ethical: false,\n          predictive: false\n        };\n    }\n  };\n\n  const activeWidgets = widgetsForPlan(selectedPlan);\n\n  return (\n    <div className=\"bg-white/3 p-4 rounded\">\n      <div className=\"mb-4\">\n        <p className=\"text-sm mb-2\">Ver Demo como:</p>\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={() => setSelectedPlan('starter')}\n            className={`px-4 py-2 rounded transition-colors ${\n              selectedPlan === 'starter'\n                ? 'bg-blue-500 text-white'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            Starter\n          </button>\n          <button\n            onClick={() => setSelectedPlan('growth')}\n            className={`px-4 py-2 rounded transition-colors ${\n              selectedPlan === 'growth'\n                ? 'bg-blue-500 text-white'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            Growth\n          </button>\n          <button\n            onClick={() => setSelectedPlan('pantheon')}\n            className={`px-4 py-2 rounded transition-colors ${\n              selectedPlan === 'pantheon'\n                ? 'bg-blue-500 text-white'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            Panteón\n          </button>\n        </div>\n      </div>\n\n      {loading ? (\n        <div>Cargando demo...</div>\n      ) : (\n        <div className=\"space-y-6\">\n          {/* KPIs Generales */}\n          {activeWidgets.kpis && (\n            <div>\n              <h4 className=\"text-lg font-semibold mb-2\">KPIs Generales</h4>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center\">\n                  <AnimatedMetric value={mockData.kpis.precision} suffix=\"%\" />\n                  <p className=\"text-sm text-gray-600\">Precisión</p>\n                </div>\n                <div className=\"text-center\">\n                  <AnimatedMetric value={mockData.kpis.predictions} suffix=\"K\" />\n                  <p className=\"text-sm text-gray-600\">Predicciones</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Mapa de Riesgo Simple */}\n          {activeWidgets.seismic && (\n            <div>\n              <h4 className=\"text-lg font-semibold mb-2\">Mapa de Riesgo Sísmico</h4>\n              <SeismicMapWidget seismicData={mockData.seismicData} />\n            </div>\n          )}\n\n          {/* Análisis Causal */}\n          {activeWidgets.causal && (\n            <div>\n              <h4 className=\"text-lg font-semibold mb-2\">Análisis Causal</h4>\n              <ConsciousnessHealthWidget />\n            </div>\n          )}\n\n          {/* Task Replays */}\n          {activeWidgets.taskReplays && (\n            <div>\n              <h4 className=\"text-lg font-semibold mb-2\">Task Replays</h4>\n              <MissionGallery />\n            </div>\n          )}\n\n          {/* Simulación Interactiva */}\n          {activeWidgets.simulation && (\n            <div>\n              <h4 className=\"text-lg font-semibold mb-2\">Simulación Interactiva</h4>\n              <MetatronPanelWidget running={false} toggleVigilance={() => {}} emitMessage=\"\" setEmitMessage={() => {}} handleEmit={() => {}} handleDownload={() => {}} sseConnected={true} events={[]} />\n            </div>\n          )}\n\n          {/* Vector Ético Detallado */}\n          {activeWidgets.ethical && (\n            <div>\n              <h4 className=\"text-lg font-semibold mb-2\">Vector Ético Detallado</h4>\n              <EthicalVectorDisplay ethicalAssessment={mockData.ethicalAssessment} />\n            </div>\n          )}\n\n          {/* Análisis Predictivos Avanzados */}\n          {activeWidgets.predictive && (\n            <div>\n              <h4 className=\"text-lg font-semibold mb-2\">Análisis Predictivos Avanzados</h4>\n              <ClimateWidget />\n            </div>\n          )}\n\n          {/* Demo predictivo original */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-2\">Demo predictivo</h4>\n            <div className=\"text-sm\">{result}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DemoPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/demos/GrowthDemoDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/demos/PantheonDemoDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/demos/StarterDemoDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/metatron/FlowsStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/metatron/MetatronPanelWidget.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'msg' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"msg"},"fix":{"range":[159,170],"text":""},"desc":"Remove unused variable 'msg'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nconst MetatronPanelWidget: React.FC<{\n  running: boolean;\n  toggleVigilance: () => void;\n  emitMessage: string;\n  setEmitMessage: (msg: string) => void;\n  handleEmit: () => void;\n  handleDownload: () => void;\n  sseConnected: boolean;\n  events: string[];\n  state: any;\n}> = ({\n  running,\n  toggleVigilance,\n  emitMessage,\n  setEmitMessage,\n  handleEmit,\n  handleDownload,\n  sseConnected,\n  events,\n  state\n}) => {\n  const indices = state?.indices || { globalRisk: 0, stability: 100 };\n  const riskIndices = state?.riskIndices || {};\n  const activityFeed = state?.activityFeed || [];\n\n  const getRiskColor = (level: string) => {\n    switch (level) {\n      case 'Alto': return 'text-red-400';\n      case 'Medio': return 'text-yellow-400';\n      case 'Bajo': return 'text-green-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header con controles */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">Centro de Operaciones - Aion</h2>\n          <div className=\"text-sm text-gray-300\">Vigilia Eterna Activa</div>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className={`px-3 py-1 rounded-full text-sm ${sseConnected ? 'bg-green-600' : 'bg-red-600'}`}>\n            {sseConnected ? 'SSE Conectado' : 'SSE Desconectado'}\n          </div>\n          <button\n            onClick={toggleVigilance}\n            className={`px-4 py-2 rounded ${running ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'} text-white font-semibold`}\n          >\n            {running ? 'Detener Vigilia' : 'Iniciar Vigilia'}\n          </button>\n        </div>\n      </div>\n\n      {/* Índices de Riesgo Global */}\n      <div className=\"bg-gray-900 p-6 rounded-lg\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">Índices de Riesgo Global</h3>\n            <div className=\"text-sm text-gray-300\">Actualizados en tiempo real por Apolo</div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-3xl font-bold text-red-400\">{indices.globalRisk.toFixed(1)}%</div>\n            <div className=\"text-xs text-gray-400\">Estabilidad Global: {indices.stability.toFixed(1)}%</div>\n          </div>\n        </div>\n\n        {/* Índices por país */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {Object.entries(riskIndices).map(([country, data]: [string, any]) => (\n            <div key={country} className=\"bg-gray-800 p-4 rounded\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-white font-medium\">{country}</span>\n                <span className={`text-sm font-bold ${getRiskColor(data.level)}`}>\n                  {data.level}\n                </span>\n              </div>\n              <div className=\"text-2xl font-bold text-white mt-2\">\n                {data.riskScore.toFixed(1)}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Feed de Actividad */}\n      <div className=\"bg-gray-900 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Feed de Actividad - Aion</h3>\n        <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n          {activityFeed.slice(0, 20).map((entry: any, index: number) => (\n            <div key={index} className=\"bg-gray-800 p-3 rounded text-sm\">\n              <div className=\"flex items-start space-x-3\">\n                <div className={`w-2 h-2 rounded-full mt-2 ${\n                  entry.flow === 'Auto-Preservación' ? 'bg-blue-400' :\n                  entry.flow === 'Conocimiento' ? 'bg-purple-400' :\n                  entry.flow === 'Profecía' ? 'bg-yellow-400' : 'bg-gray-400'\n                }`}></div>\n                <div className=\"flex-1\">\n                  <div className=\"text-gray-300 text-xs\">\n                    {entry.timestamp ? new Date(entry.timestamp).toLocaleTimeString() : 'N/A'} - <span className=\"text-white font-medium\">{entry.flow}</span>\n                  </div>\n                  <div className=\"text-white\">{entry.message || entry}</div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Controles de debug */}\n      <div className=\"bg-gray-900 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Controles de Comunicación</h3>\n        <div className=\"flex space-x-4\">\n          <input\n            type=\"text\"\n            value={emitMessage}\n            onChange={(e) => setEmitMessage(e.target.value)}\n            placeholder=\"Enviar mensaje a Aion...\"\n            className=\"flex-1 px-3 py-2 bg-gray-800 text-white rounded border border-gray-600 focus:border-blue-500 focus:outline-none\"\n          />\n          <button\n            onClick={handleEmit}\n            className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded font-semibold\"\n          >\n            Enviar\n          </button>\n          <button\n            onClick={handleDownload}\n            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded font-semibold\"\n          >\n            Descargar Reporte\n          </button>\n        </div>\n      </div>\n\n      {/* Eventos SSE recientes */}\n      <div className=\"bg-gray-900 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Eventos SSE Recientes</h3>\n        <div className=\"space-y-1 max-h-32 overflow-y-auto text-sm\">\n          {events.slice(0, 10).map((event, index) => (\n            <div key={index} className=\"text-gray-300 bg-gray-800 p-2 rounded\">\n              {event}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MetatronPanelWidget;\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/metatron/__tests__/MetatronPanelWidget.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/pricing/PricingCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'api' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"api"},"fix":{"range":[625,641],"text":""},"desc":"Remove unused variable 'api'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/lazy-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'open' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[990,1003],"text":""},"desc":"Remove unused variable 'open'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'open' is defined but never used. Allowed unused args must match /^_/u.","line":34,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[1053,1066],"text":""},"desc":"Remove unused variable 'open'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'open' is defined but never used. Allowed unused args must match /^_/u.","line":55,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[1555,1568],"text":""},"desc":"Remove unused variable 'open'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":78,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[2161,2175],"text":""},"desc":"Remove unused variable 'value'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/widgets/CommunityResilienceWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/widgets/FoodSecurityWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/widgets/SeismicMapWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/widgets/VectorEthicWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/components/widgets/XaiExplainModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":25,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":25,"endColumn":18}],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'state' is defined but never used. Allowed unused args must match /^_/u.","line":130,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"state"},"fix":{"range":[2827,2839],"text":""},"desc":"Remove unused variable 'state'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\ntype Action =\n  | {\n      type: (typeof actionTypes)[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: (typeof actionTypes)[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: (typeof actionTypes)[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: (typeof actionTypes)[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\n// listeners are callbacks subscribed by components; the parameter is used by callers.\n \n/* eslint-disable no-unused-vars */\nconst listeners: Array<(state: State) => void> = []\n/* eslint-enable no-unused-vars */\n \n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [_state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [])\n\n  return {\n    ..._state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/hooks/useDemoData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/hooks/useLiveState.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-await-in-loop').","line":45,"column":11,"severity":1,"nodeType":null,"fix":{"range":[1507,1551],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useCallback, useEffect, useRef, useState } from 'react';\n\ntype UseLiveStateOptions = {\n  url?: string;\n  intervalMs?: number;\n  retryCount?: number;\n};\n\nexport default function useLiveState(options?: UseLiveStateOptions) {\n  const url = options?.url ?? '/api/demo/live-state';\n  const intervalMs = options?.intervalMs ?? 15000;\n  const retryCount = options?.retryCount ?? 2;\n\n  const [data, setData] = useState<any | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const mountedRef = useRef(true);\n\n  const fetchLiveState = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    let attempt = 0;\n    while (attempt <= retryCount && mountedRef.current) {\n      try {\n        const res = await fetch(url);\n        if (!res.ok) {\n          const body = await res.json().catch(() => ({ message: 'No details' }));\n          throw new Error(body.error || body.message || `HTTP ${res.status}`);\n        }\n        const json = await res.json();\n        if (!mountedRef.current) return;\n        setData(json);\n        setError(null);\n        break;\n      } catch (err: any) {\n        attempt += 1;\n        if (attempt > retryCount) {\n          console.error('useLiveState fetch error:', err);\n          if (!mountedRef.current) return;\n          setError(err.message || 'Error fetching live state');\n        } else {\n          // backoff\n          const backoff = Math.min(1000 * attempt, 5000);\n          // eslint-disable-next-line no-await-in-loop\n          await new Promise((r) => setTimeout(r, backoff));\n        }\n      } finally {\n        if (mountedRef.current) setLoading(false);\n      }\n    }\n  }, [url, retryCount]);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    fetchLiveState().catch(() => {});\n    const id = setInterval(() => {\n      fetchLiveState().catch(() => {});\n    }, intervalMs);\n    return () => {\n      mountedRef.current = false;\n      clearInterval(id);\n    };\n  }, [fetchLiveState, intervalMs]);\n\n  return { data, loading, error, refresh: fetchLiveState } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/hooks/usePrefetch.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[0,34],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":12,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":12,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'e2' is defined but never used.","line":15,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e2' is defined but never used.","line":15,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":29,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":29,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\n\n// Helper to fetch JSON and throw a clear error on network/HTTP failures\nasync function fetchJson(url: string) {\n  const res = await fetch(url);\n  if (!res.ok) {\n    // Try to parse JSON body for richer diagnostics\n    let body: any = null;\n    try {\n      body = await res.json();\n    } catch (e) {\n      try {\n        body = await res.text();\n      } catch (e2) {\n        body = null;\n      }\n    }\n    const bodyStr = body ? (typeof body === 'string' ? body : JSON.stringify(body)) : '';\n    throw new Error(`Fetch ${url} failed: ${res.status} ${res.statusText} ${bodyStr}`);\n  }\n  return res.json();\n}\n\nexport const usePrefetch = () => {\n  let queryClient;\n  try {\n    queryClient = useQueryClient();\n  } catch (_e) {\n    // If no QueryClientProvider is present (e.g. some tests), provide\n    // a minimal fallback that implements the methods we call so code\n    // can run without throwing. This keeps tests isolated and avoids\n    // having to wrap every render with a provider.\n    queryClient = {\n      prefetchQuery: async () => Promise.resolve(),\n    } as any;\n  }\n\n  const prefetchSDLCData = async () => {\n    try {\n      // Prefetch critical SDLC data\n      await Promise.all([\n        queryClient.prefetchQuery({\n          queryKey: ['sdlc', 'full-state'],\n          queryFn: () => fetchJson('/api/sdlc/full-state'),\n          staleTime: 5 * 60 * 1000, // 5 minutes\n          retry: 0,\n        }),\n        queryClient.prefetchQuery({\n          queryKey: ['kanban', 'board'],\n          queryFn: () => fetchJson('/api/kanban/board'),\n          staleTime: 5 * 60 * 1000,\n          retry: 0,\n        }),\n      ]);\n    } catch (error) {\n      console.warn('[Prefetch] Failed to prefetch critical data:', error);\n    }\n  };\n\n  const prefetchRoute = (route: string) => {\n    // Prefetch route-specific data\n    switch (route) {\n      case '/sdlc-dashboard':\n        prefetchSDLCData();\n        break;\n      case '/dashboard':\n        queryClient.prefetchQuery({\n          queryKey: ['dashboard', 'global-risk'],\n          queryFn: () => fetchJson('/api/global-risk/summary'),\n          staleTime: 10 * 60 * 1000, // 10 minutes\n          retry: 0,\n        });\n        break;\n      case '/demo':\n        queryClient.prefetchQuery({\n          queryKey: ['demo', 'data'],\n          queryFn: () => fetchJson('/api/demo/predictive-data'),\n          staleTime: 15 * 60 * 1000, // 15 minutes\n          retry: 0,\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  const prefetchOnHover = (route: string) => {\n    // Debounce prefetching to avoid excessive requests\n    let timeoutId: NodeJS.Timeout;\n\n    return () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => prefetchRoute(route), 100);\n    };\n  };\n\n  const prefetchOnVisible = (route: string) => {\n    // Use Intersection Observer for prefetching when route becomes visible\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            prefetchRoute(route);\n            observer.disconnect();\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    return observer;\n  };\n\n  return {\n    prefetchSDLCData,\n    prefetchRoute,\n    prefetchOnHover,\n    prefetchOnVisible,\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/hooks/useServiceWorker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/hooks/useXaiExplain.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/lib/eternalVigilanceSimulator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/lib/schemas/predictSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/CoffeeResiliencePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/CommandCenterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/Dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tabs"},"fix":{"range":[300,305],"text":""},"desc":"Remove unused variable 'Tabs'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":6,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"TabsContent"},"fix":{"range":[304,317],"text":""},"desc":"Remove unused variable 'TabsContent'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":6,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"TabsList"},"fix":{"range":[317,327],"text":""},"desc":"Remove unused variable 'TabsList'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":6,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"TabsTrigger"},"fix":{"range":[327,340],"text":""},"desc":"Remove unused variable 'TabsTrigger'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":6,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport useLiveState from '../hooks/useLiveState';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { Progress } from '../components/ui/progress';\nimport { BarChart3, TrendingUp, AlertTriangle, MapPin, Users, Activity, Zap, Shield } from 'lucide-react';\n\n// Importar estilos Gemini\nimport '../styles/gemini.css';\n\ninterface DashboardData {\n  kpis?: {\n    precisionPromedio: number;\n    prediccionesDiarias: number;\n    monitoreoContinuo: number;\n    coberturaRegional: number;\n  };\n  countries?: any[];\n  communityResilience?: any;\n  foodSecurity?: any;\n  ethicalAssessment?: any;\n  global?: any;\n}\n\nconst Dashboard: React.FC = () => {\n  const { data: liveState, loading, error, refresh } = useLiveState();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Datos del backend\n  const dashboardData: DashboardData = liveState || {};\n\n  // KPIs principales\n  const kpis = dashboardData.kpis || {\n    precisionPromedio: 90,\n    prediccionesDiarias: 120,\n    monitoreoContinuo: 24,\n    coberturaRegional: 6\n  };\n\n  // Componente de KPI Card\n  const KPICard = ({ title, value, unit, icon: Icon, trend, color = 'primary' }: {\n    title: string;\n    value: number | string;\n    unit?: string;\n    icon: any;\n    trend?: 'up' | 'down' | 'stable';\n    color?: string;\n  }) => (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"gemini-card gemini-fade-in\"\n    >\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-gemini-text-secondary\">\n          {title}\n        </CardTitle>\n        <Icon className={`h-4 w-4 text-gemini-${color}`} />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-gemini-text-primary\">\n          {value}{unit}\n        </div>\n        {trend && (\n          <p className=\"text-xs text-gemini-text-muted\">\n            {trend === 'up' && '↗️ +2.5%'}\n            {trend === 'down' && '↘️ -1.2%'}\n            {trend === 'stable' && '→ Estable'}\n          </p>\n        )}\n      </CardContent>\n    </motion.div>\n  );\n\n  // Componente de Widget de Riesgo\n  const RiskWidget = ({ title, level, description, icon: Icon }: {\n    title: string;\n    level: 'low' | 'medium' | 'high';\n    description: string;\n    icon: any;\n  }) => {\n    const levelColors = {\n      low: 'success',\n      medium: 'warning',\n      high: 'error'\n    };\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"gemini-card\"\n      >\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className={`p-3 rounded-full bg-gemini-${levelColors[level]}/10`}>\n              <Icon className={`h-6 w-6 text-gemini-${levelColors[level]}`} />\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-gemini-text-primary\">{title}</h3>\n              <p className=\"text-sm text-gemini-text-secondary\">{description}</p>\n              <div className={`inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold mt-2 border-gemini-${levelColors[level]} text-gemini-${levelColors[level]}`}>\n                Nivel {level === 'low' ? 'Bajo' : level === 'medium' ? 'Medio' : 'Alto'}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </motion.div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gemini-background flex items-center justify-center\">\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"text-center\"\n        >\n          <div className=\"relative mb-8\">\n            <div className=\"w-20 h-20 border-4 border-gemini-primary/20 border-t-gemini-primary rounded-full animate-spin mx-auto\"></div>\n            <div className=\"absolute inset-0 w-20 h-20 border-4 border-gemini-accent-yellow/20 border-t-gemini-accent-yellow rounded-full animate-spin mx-auto\" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>\n          </div>\n          <h3 className=\"text-xl font-bold text-gemini-text-primary mb-2\">Cargando Dashboard Soberano</h3>\n          <p className=\"text-gemini-text-secondary\">Estableciendo conexión con la realidad predictiva</p>\n        </motion.div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gemini-background flex items-center justify-center\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"gemini-card max-w-lg mx-auto\"\n        >\n          <CardContent className=\"p-8 text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-gemini-error mx-auto mb-4\" />\n            <h3 className=\"text-xl font-bold text-gemini-text-primary mb-2\">Error de Conexión</h3>\n            <p className=\"text-gemini-text-secondary mb-4\">{error}</p>\n            <Button onClick={refresh} className=\"gemini-button-primary\">\n              Reintentar Conexión\n            </Button>\n          </CardContent>\n        </motion.div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gemini-background text-gemini-text-primary\">\n      {/* Header */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"border-b border-gemini-border bg-gemini-background-secondary/50 backdrop-blur-sm\"\n      >\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gemini-text-primary\">\n                🏛️ Dashboard Soberano\n              </h1>\n              <p className=\"text-gemini-text-secondary\">\n                Visión predictiva con el alma de Gemini\n              </p>\n            </div>\n            <Button onClick={refresh} variant=\"outline\" className=\"border-gemini-border text-gemini-text-primary hover:bg-gemini-primary/10\">\n              <Activity className=\"h-4 w-4 mr-2\" />\n              Actualizar\n            </Button>\n          </div>\n        </div>\n      </motion.div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {/* Layout Bipartito */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar */}\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"lg:col-span-1\"\n          >\n            <div className=\"sticky top-8\">\n              <Card className=\"gemini-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-gemini-text-primary\">Navegación</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <Button\n                    variant={activeTab === 'overview' ? 'default' : 'ghost'}\n                    className={`w-full justify-start ${\n                      activeTab === 'overview'\n                        ? 'bg-gemini-primary text-gemini-background'\n                        : 'text-gemini-text-primary hover:bg-gemini-primary/10'\n                    }`}\n                    onClick={() => setActiveTab('overview')}\n                  >\n                    <BarChart3 className=\"h-4 w-4 mr-2\" />\n                    Visión General\n                  </Button>\n                  <Button\n                    variant={activeTab === 'predictive' ? 'default' : 'ghost'}\n                    className={`w-full justify-start ${\n                      activeTab === 'predictive'\n                        ? 'bg-gemini-primary text-gemini-background'\n                        : 'text-gemini-text-primary hover:bg-gemini-primary/10'\n                    }`}\n                    onClick={() => setActiveTab('predictive')}\n                  >\n                    <TrendingUp className=\"h-4 w-4 mr-2\" />\n                    Análisis Predictivo\n                  </Button>\n                  <Button\n                    variant={activeTab === 'risks' ? 'default' : 'ghost'}\n                    className={`w-full justify-start ${\n                      activeTab === 'risks'\n                        ? 'bg-gemini-primary text-gemini-background'\n                        : 'text-gemini-text-primary hover:bg-gemini-primary/10'\n                    }`}\n                    onClick={() => setActiveTab('risks')}\n                  >\n                    <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                    Evaluación de Riesgos\n                  </Button>\n                  <Button\n                    variant={activeTab === 'logistics' ? 'default' : 'ghost'}\n                    className={`w-full justify-start ${\n                      activeTab === 'logistics'\n                        ? 'bg-gemini-primary text-gemini-background'\n                        : 'text-gemini-text-primary hover:bg-gemini-primary/10'\n                    }`}\n                    onClick={() => setActiveTab('logistics')}\n                  >\n                    <MapPin className=\"h-4 w-4 mr-2\" />\n                    Optimización Logística\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </motion.div>\n\n          {/* Panel de Contenido */}\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"lg:col-span-3\"\n          >\n            <AnimatePresence mode=\"wait\">\n              {activeTab === 'overview' && (\n                <motion.div\n                  key=\"overview\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  className=\"space-y-8\"\n                >\n                  {/* KPIs Principales */}\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gemini-text-primary mb-6\">\n                      📊 Indicadores Clave de Rendimiento\n                    </h2>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                      <KPICard\n                        title=\"Precisión Promedio\"\n                        value={kpis.precisionPromedio}\n                        unit=\"%\"\n                        icon={Zap}\n                        trend=\"up\"\n                        color=\"primary\"\n                      />\n                      <KPICard\n                        title=\"Predicciones Diarias\"\n                        value={kpis.prediccionesDiarias}\n                        icon={Activity}\n                        trend=\"up\"\n                        color=\"success\"\n                      />\n                      <KPICard\n                        title=\"Monitoreo Continuo\"\n                        value={kpis.monitoreoContinuo}\n                        unit=\"h\"\n                        icon={Shield}\n                        trend=\"stable\"\n                        color=\"warning\"\n                      />\n                      <KPICard\n                        title=\"Cobertura Regional\"\n                        value={kpis.coberturaRegional}\n                        icon={MapPin}\n                        trend=\"up\"\n                        color=\"primary\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Estado General */}\n                  <Card className=\"gemini-card\">\n                    <CardHeader>\n                      <CardTitle className=\"text-gemini-text-primary\">Estado del Sistema</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"text-gemini-text-secondary\">Conectividad Backend</span>\n                            <span className=\"text-gemini-success\">100%</span>\n                          </div>\n                          <Progress value={100} className=\"h-2\" />\n                        </div>\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"text-gemini-text-secondary\">Procesamiento de Datos</span>\n                            <span className=\"text-gemini-success\">95%</span>\n                          </div>\n                          <Progress value={95} className=\"h-2\" />\n                        </div>\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"text-gemini-text-secondary\">Modelos Predictivos</span>\n                            <span className=\"text-gemini-warning\">87%</span>\n                          </div>\n                          <Progress value={87} className=\"h-2\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              )}\n\n              {activeTab === 'predictive' && (\n                <motion.div\n                  key=\"predictive\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  className=\"space-y-8\"\n                >\n                  <h2 className=\"text-2xl font-bold text-gemini-text-primary\">\n                    🔮 Análisis Predictivo\n                  </h2>\n                  <Card className=\"gemini-card\">\n                    <CardContent className=\"p-8 text-center\">\n                      <TrendingUp className=\"h-16 w-16 text-gemini-primary mx-auto mb-4\" />\n                      <h3 className=\"text-xl font-bold text-gemini-text-primary mb-2\">\n                        Motor Predictivo Activo\n                      </h3>\n                      <p className=\"text-gemini-text-secondary\">\n                        Procesando datos en tiempo real para generar predicciones precisas\n                      </p>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              )}\n\n              {activeTab === 'risks' && (\n                <motion.div\n                  key=\"risks\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  className=\"space-y-8\"\n                >\n                  <h2 className=\"text-2xl font-bold text-gemini-text-primary\">\n                    ⚠️ Evaluación de Riesgos\n                  </h2>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <RiskWidget\n                      title=\"Riesgo Sísmico\"\n                      level=\"medium\"\n                      description=\"Actividad moderada detectada en zona costera\"\n                      icon={AlertTriangle}\n                    />\n                    <RiskWidget\n                      title=\"Riesgo Climático\"\n                      level=\"low\"\n                      description=\"Condiciones meteorológicas estables\"\n                      icon={Zap}\n                    />\n                    <RiskWidget\n                      title=\"Riesgo Social\"\n                      level=\"low\"\n                      description=\"Estabilidad comunitaria mantenida\"\n                      icon={Users}\n                    />\n                    <RiskWidget\n                      title=\"Riesgo Logístico\"\n                      level=\"high\"\n                      description=\"Interrupciones en cadena de suministro detectadas\"\n                      icon={MapPin}\n                    />\n                  </div>\n                </motion.div>\n              )}\n\n              {activeTab === 'logistics' && (\n                <motion.div\n                  key=\"logistics\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  className=\"space-y-8\"\n                >\n                  <h2 className=\"text-2xl font-bold text-gemini-text-primary\">\n                    🚛 Optimización Logística\n                  </h2>\n                  <Card className=\"gemini-card\">\n                    <CardContent className=\"p-8 text-center\">\n                      <MapPin className=\"h-16 w-16 text-gemini-primary mx-auto mb-4\" />\n                      <h3 className=\"text-xl font-bold text-gemini-text-primary mb-2\">\n                        Sistema de Optimización Activo\n                      </h3>\n                      <p className=\"text-gemini-text-secondary\">\n                        Optimizando rutas y recursos para máxima eficiencia\n                      </p>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/DashboardPage.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'fetchLiveState' is assigned a value but never used.","line":7,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"fetchLiveState"},"fix":{"range":[188,361],"text":""},"desc":"Remove unused variable 'fetchLiveState'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchLiveState' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'p' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"p"},"fix":{"range":[411,418],"text":""},"desc":"Remove unused variable 'p'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'refresh' is assigned a value but never used.","line":48,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"refresh"},"fix":{"range":[2072,2081],"text":""},"desc":"Remove unused variable 'refresh'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refresh' is assigned a value but never used.","line":48,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport useLiveState from '../hooks/useLiveState';\n\ntype Plan = 'Starter' | 'Growth' | 'Panteon';\n\nconst fetchLiveState = async () => {\n  const res = await fetch('/api/demo/live-state');\n  if (!res.ok) throw new Error('Failed fetching live-state');\n  return res.json();\n};\n\nconst Sidebar: React.FC<{ plan: Plan; setPlan: (p: Plan) => void }> = ({ plan, setPlan }) => {\n  return (\n    <aside className=\"w-64 bg-gray-900 text-white h-screen p-4 border-r border-gray-800\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-xl font-bold\">Sovereign</h1>\n        <div className=\"text-xs text-gray-400\">Dashboard Unificado</div>\n      </div>\n      <div className=\"mb-4\">\n        <div className=\"text-sm text-gray-300 mb-2\">Plan</div>\n        <div className=\"flex flex-col gap-2\">\n          {(['Starter','Growth','Panteon'] as Plan[]).map((p) => (\n            <button key={p} onClick={() => setPlan(p)} className={`text-left px-3 py-2 rounded ${p===plan? 'bg-blue-600': 'hover:bg-gray-800'}`}>\n              {p}\n            </button>\n          ))}\n        </div>\n      </div>\n      <nav className=\"mt-6 text-sm text-gray-300\">\n        <a href=\"/dashboard\" className=\"block py-2\">Dashboard</a>\n        <a href=\"/sdlc-dashboard\" className=\"block py-2\">SDLC</a>\n        <a href=\"/demo\" className=\"block py-2\">Demo</a>\n      </nav>\n    </aside>\n  );\n};\n\nconst Widget: React.FC<{ title: string; value?: string | number; children?: React.ReactNode; enabled?: boolean }> = ({ title, value, children, enabled=true }) => (\n  <motion.div initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} className={`bg-gray-800 rounded-lg p-4 border border-gray-700 ${enabled ? '' : 'opacity-40 grayscale'}`}>\n    <div className=\"text-sm text-gray-400\">{title}</div>\n    <div className=\"text-2xl font-bold text-white mt-2\">{value ?? children}</div>\n  </motion.div>\n);\n\nconst DashboardPage: React.FC = () => {\n  const [plan, setPlan] = useState<Plan>('Starter');\n  const { data: live, loading, error, refresh } = useLiveState();\n\n  const planConfig = useMemo(() => {\n    switch(plan) {\n      case 'Starter': return { widgets: ['uptime','kpi'] };\n      case 'Growth': return { widgets: ['uptime','kpi','risk','kanban'] };\n      case 'Panteon': return { widgets: ['uptime','kpi','risk','kanban','oracles'] };\n    }\n  }, [plan]);\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"bg-red-900 text-white p-6 rounded\">Error: {error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex bg-gray-950 text-white min-h-screen\">\n      <Sidebar plan={plan} setPlan={setPlan} />\n      <main className=\"flex-1 p-8\">\n        <header className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold\">Dashboard Unificado</h2>\n            <div className=\"text-sm text-gray-400\">Plan activo: {plan}</div>\n          </div>\n          <div className=\"text-sm text-gray-400\">{loading ? 'Cargando...' : `Última: ${new Date().toLocaleTimeString()}`}</div>\n        </header>\n\n        <section className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Widget title=\"Uptime\" value={live?.uptime ?? '—'} enabled={planConfig.widgets.includes('uptime')} />\n          <Widget title=\"KPI Principal\" value={live?.kpi?.main ?? '—'} enabled={planConfig.widgets.includes('kpi')} />\n          <Widget title=\"Índice de Riesgo\" value={live?.risk ?? '—'} enabled={planConfig.widgets.includes('risk')} />\n        </section>\n\n        <section className=\"mt-6 grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          <div className=\"bg-gray-900 rounded-lg p-4 border border-gray-800\">\n            <h3 className=\"text-lg font-semibold mb-4\">Kanban</h3>\n            {planConfig.widgets.includes('kanban') ? (\n              <pre className=\"text-xs text-gray-300\">{JSON.stringify(live?.kanban ?? { columns: [] }, null, 2)}</pre>\n            ) : (\n              <div className=\"text-sm text-gray-400\">Disponible en plan Growth</div>\n            )}\n          </div>\n\n          <div className=\"bg-gray-900 rounded-lg p-4 border border-gray-800\">\n            <h3 className=\"text-lg font-semibold mb-4\">Oráculos</h3>\n            {planConfig.widgets.includes('oracles') ? (\n              <pre className=\"text-xs text-gray-300\">{JSON.stringify(live?.oracles ?? {}, null, 2)}</pre>\n            ) : (\n              <div className=\"text-sm text-gray-400\">Disponible en plan Panteón</div>\n            )}\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n};\n\nexport default DashboardPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/DemoPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/FoodResiliencePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/MetatronPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/ModuleColombia.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/PricingPage.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'globalOfferingProtocol' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"globalOfferingProtocol"},"fix":{"range":[178,206],"text":""},"desc":"Remove unused variable 'globalOfferingProtocol'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'globalOfferingProtocol' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'reqErr' is defined but never used.","line":42,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reqErr' is defined but never used.","line":42,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":62,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":62,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":77,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":77,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":15},{"ruleId":"no-empty","severity":1,"message":"Empty block statement.","line":77,"column":17,"nodeType":"BlockStatement","messageId":"unexpected","endLine":77,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[3044,3044],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';\nimport globalOfferingProtocol from '../../GLOBAL_OFFERING_PROTOCOL.json';\nimport DemoPage from './DemoPage';\n\ntype Plan = {\n  id: string;\n  name: string;\n  price?: number | string;\n  price_monthly?: number;\n  billingCycle?: string;\n  baseCredits?: number;\n  description?: string;\n  features?: Array<any>;\n  popular?: boolean;\n};\n\nconst PricingPage: React.FC<{ protocolOverride?: any }> = ({ protocolOverride }) => {\n   console.log('PricingPage render');\n   const [segments, setSegments] = useState<Record<string, { name: string; plans: Plan[] }>>({});\n   const [currency, setCurrency] = useState<string>('USD');\n   const [error, setError] = useState<string | null>(null);\n   const [demoModalOpen, setDemoModalOpen] = useState(false);\n   const [selectedPlanForDemo, setSelectedPlanForDemo] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Dynamically import GLOBAL_OFFERING_PROTOCOL.json to allow tests to mock it\n    let mounted = true;\n    (async () => {\n      try {\n        let protocol: any = null;\n        if (protocolOverride !== undefined) {\n          if (protocolOverride === null) throw new Error('protocol override null');\n          protocol = protocolOverride;\n        } else {\n          // Prefer synchronous require so jest.mock at top of tests is honored\n          try {\n             \n            protocol = require('../../GLOBAL_OFFERING_PROTOCOL.json');\n            protocol = (protocol && protocol.default) ? protocol.default : protocol;\n          } catch (reqErr) {\n            // Fallback to dynamic import if require isn't available\n             \n            const protocolModule = await import('../../GLOBAL_OFFERING_PROTOCOL.json');\n            protocol = (protocolModule && protocolModule.default) ? protocolModule.default : protocolModule;\n          }\n        }\n\n        const defaultSegment = {\n          name: 'Planes Principales',\n          plans: (protocol.plans || []).map((plan: Plan) => ({\n            ...plan,\n            price: plan.price_monthly,\n            popular: plan.id === 'panteon'\n          }))\n        };\n        if (mounted) {\n          setSegments({ default: defaultSegment });\n          setCurrency('USD');\n        }\n      } catch (err) {\n        if (mounted) setError('Error loading pricing data');\n      }\n    })();\n\n    return () => { mounted = false; };\n  }, []);\n\n  // Simple client-side ERI demo modifier: look for ?region=mx or the navigator.language\n  function eriModifier() {\n    try {\n      const params = new URLSearchParams(window.location.search);\n      const region = (params.get('region') || navigator.language || 'en').toLowerCase();\n      if (region.includes('es-mx') || region.includes('mx') || region.includes('mex')) return 0.85; // cheaper in MX demo\n      if (region.includes('co') || region.includes('es-co') || region.includes('col')) return 0.95; // slightly cheaper in CO\n    } catch (e) {}\n    return 1;\n  }\n\n  const modifier = eriModifier();\n\n  const openDemoModal = (planId: string) => {\n    setSelectedPlanForDemo(planId);\n    setDemoModalOpen(true);\n  };\n\n  if (error) return <div className=\"p-8\">Error cargando planes de precios: {error}</div>;\n  if (!Object.keys(segments).length) return <div className=\"p-8\">Cargando planes de precios...</div>;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-etherblue-dark via-gray-900 to-purple-900 text-white relative overflow-hidden\">\n      {/* Background blur effect */}\n      <div className=\"absolute inset-0 bg-etherblue-dark/50 backdrop-blur-sm\"></div>\n\n      <div className=\"relative z-10 p-8\">\n        <motion.h1\n          className=\"text-5xl font-bold mb-12 text-center bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\"\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          Panteón de Valor - Praevisio AI\n        </motion.h1>\n\n        <motion.p\n          className=\"text-xl text-center mb-16 text-gray-300 max-w-4xl mx-auto\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.3, duration: 0.8 }}\n        >\n          Cada plan es un altar sagrado, cada demo una epifanía. Elige tu camino hacia la inteligencia predictiva de élite.\n        </motion.p>\n\n        {/* Pricing table container - used by visual tests */}\n        <section data-testid=\"pricing-table\" className=\"mb-20\">\n          {Object.keys(segments).map((segKey, segIndex) => {\n            const seg = segments[segKey];\n            return (\n              <motion.div\n                key={segKey}\n                className=\"mb-16\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.5 + segIndex * 0.2, duration: 0.6 }}\n              >\n                <h2 className=\"text-3xl font-semibold mb-8 text-center\">{seg.name}</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n                  {seg.plans.map((plan, planIndex) => (\n                    <motion.div\n                      key={plan.id}\n                      className={`relative p-8 rounded-2xl border backdrop-blur-md bg-white/5 shadow-2xl ${\n                        plan.popular\n                          ? 'border-etherneon shadow-etherneon/20'\n                          : 'border-white/20 hover:border-white/40'\n                      } transition-all duration-300`}\n                      initial={{ opacity: 0, scale: 0.9 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      transition={{ delay: 0.7 + planIndex * 0.1, duration: 0.5 }}\n                      whileHover={{ y: -10, scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                    >\n                      {plan.popular && (\n                        <motion.div\n                          className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 bg-etherneon text-etherblue-dark px-4 py-1 rounded-full text-sm font-semibold uppercase\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: 1 + planIndex * 0.1, type: 'spring', stiffness: 200 }}\n                        >\n                          Altar Principal\n                        </motion.div>\n                      )}\n\n                      <div className=\"text-center mb-6\">\n                        <h3 className=\"text-2xl font-bold mb-2\">{plan.name}</h3>\n                        <div\n                          data-testid={`plan-price-${plan.id}`}\n                          className=\"text-4xl font-extrabold text-etherneon mb-2\"\n                        >\n                          {typeof plan.price === 'number' ? `${Math.round((plan.price as number) * modifier)} ${currency}` : plan.price}\n                        </div>\n                        {plan.baseCredits && (\n                          <div className=\"text-sm text-gray-400\">Créditos: {plan.baseCredits}</div>\n                        )}\n                      </div>\n\n                      <p className=\"text-gray-300 mb-6 text-center\">{plan.description}</p>\n\n                      <ul className=\"text-sm mb-8 space-y-2\">\n                        {(plan.features || []).map((f: any, i: number) => (\n                          <li key={i} className=\"flex items-center\">\n                            <span className=\"text-etherneon mr-2\">✦</span>\n                            {typeof f === 'string' ? f : f.name}\n                          </li>\n                        ))}\n                      </ul>\n\n                      <div className=\"flex flex-col gap-3\">\n                        <Dialog open={demoModalOpen && selectedPlanForDemo === plan.id} onOpenChange={setDemoModalOpen}>\n                          <DialogTrigger asChild>\n                            <motion.button\n                              className=\"w-full bg-gradient-to-r from-etherneon to-blue-500 text-etherblue-dark font-semibold py-3 px-6 rounded-lg hover:shadow-lg transition-all\"\n                              whileHover={{ scale: 1.05 }}\n                              whileTap={{ scale: 0.95 }}\n                              onClick={() => openDemoModal(plan.id)}\n                            >\n                              Ver Demo de este Plan\n                            </motion.button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-full h-full p-0 bg-transparent border-none\">\n                            <DemoPage plan={selectedPlanForDemo || undefined} />\n                          </DialogContent>\n                        </Dialog>\n\n                        <a\n                          href=\"#contact\"\n                          className=\"text-center text-sm underline text-etherneon hover:text-white transition-colors\"\n                        >\n                          Solicitar Demo Personalizada\n                        </a>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n            );\n          })}\n        </section>\n\n        {/* Calculadora Soberana */}\n        <motion.section\n          className=\"mb-20 p-8 rounded-3xl border border-etherneon/30 backdrop-blur-md bg-gradient-to-br from-etherblue-light/20 to-purple-900/20 shadow-2xl\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 1.2, duration: 0.8 }}\n        >\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-etherneon to-blue-400 bg-clip-text text-transparent\">\n              Calculadora Soberana\n            </h2>\n            <p className=\"text-lg text-gray-300\">\n              Forja tu combo perfecto. Nuestra IA revela el valor oculto de cada elección.\n            </p>\n          </div>\n          <ComboCalculator plans={(Object.values(segments) as Array<{ name: string; plans: Plan[] }>).flatMap(seg => seg.plans)} />\n        </motion.section>\n\n        {/* Panteón destacado */}\n        <motion.aside\n          className=\"p-8 rounded-3xl border border-amber-400/50 backdrop-blur-md bg-gradient-to-br from-amber-900/20 to-etherblue-light/20 shadow-2xl text-center\"\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 1.5, duration: 0.8 }}\n        >\n          <h2 className=\"text-3xl font-bold mb-4 text-amber-400\">Nivel Panteón</h2>\n          <p className=\"text-lg text-gray-300 mb-6\">\n            Oferta exclusiva para visionarios de máximo impacto. Accede a la inteligencia predictiva definitiva.\n          </p>\n          <motion.button\n            className=\"bg-gradient-to-r from-amber-500 to-amber-600 text-black font-semibold py-3 px-8 rounded-lg hover:shadow-lg transition-all\"\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            Solicitar Acceso Panteón\n          </motion.button>\n        </motion.aside>\n      </div>\n    </div>\n  );\n};\n\n// Componente de Calculadora Soberana\nconst ComboCalculator: React.FC<{ plans: Plan[] }> = ({ plans }) => {\n  const [selectedPlans, setSelectedPlans] = useState<Set<string>>(new Set());\n  const [selectedFeatures, setSelectedFeatures] = useState<Set<string>>(new Set());\n\n  const togglePlan = (planId: string) => {\n    const newSelected = new Set(selectedPlans);\n    if (newSelected.has(planId)) {\n      newSelected.delete(planId);\n    } else {\n      newSelected.add(planId);\n    }\n    setSelectedPlans(newSelected);\n  };\n\n  const toggleFeature = (feature: string) => {\n    const newSelected = new Set(selectedFeatures);\n    if (newSelected.has(feature)) {\n      newSelected.delete(feature);\n    } else {\n      newSelected.add(feature);\n    }\n    setSelectedFeatures(newSelected);\n  };\n\n  const calculateTotal = () => {\n    let total = 0;\n    selectedPlans.forEach(planId => {\n      const plan = plans.find(p => p.id === planId);\n      if (plan && typeof plan.price === 'number') {\n        total += plan.price;\n      }\n    });\n    // Agregar costo por características adicionales (simulado)\n    selectedFeatures.forEach(() => {\n      total += 50; // $50 por característica adicional\n    });\n    return total;\n  };\n\n  const getAIExplanation = (item: string, type: 'plan' | 'feature') => {\n    if (type === 'plan') {\n      return `Este plan ${item} proporciona una base sólida para la predicción anticipatoria, con precisión del 90% validada en escenarios reales de Latinoamérica.`;\n    } else {\n      return `La característica \"${item}\" mejora la capacidad predictiva al integrar datos adicionales, reduciendo falsos positivos en un 25%.`;\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n      {/* Panel de Selección */}\n      <div className=\"space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <h3 className=\"text-2xl font-bold mb-6 text-etherneon\">Altares Base</h3>\n          <div className=\"space-y-4\">\n            {plans.map(plan => (\n              <motion.div\n                key={plan.id}\n                data-testid={`plan-toggle-${plan.id}`}\n                className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                  selectedPlans.has(plan.id)\n                    ? 'border-etherneon bg-etherneon/10 shadow-lg'\n                    : 'border-white/20 hover:border-white/40'\n                }`}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => togglePlan(plan.id)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-semibold\">{plan.name}</h4>\n                    <p className=\"text-sm text-gray-400\">${typeof plan.price === 'number' ? plan.price : 'N/A'}/mes</p>\n                  </div>\n                  <div className={`w-6 h-6 rounded border-2 flex items-center justify-center ${\n                    selectedPlans.has(plan.id) ? 'bg-etherneon border-etherneon' : 'border-white/40'\n                  }`}>\n                    {selectedPlans.has(plan.id) && <span className=\"text-black text-sm\">✓</span>}\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.2, duration: 0.6 }}\n        >\n          <h3 className=\"text-2xl font-bold mb-6 text-etherneon\">Reliquias Adicionales</h3>\n          <div className=\"grid grid-cols-1 gap-4\">\n            {['Integración API Avanzada', 'Dashboard Personalizado', 'Soporte 24/7', 'Análisis de Tendencias'].map(feature => (\n              <motion.div\n                key={feature}\n                data-testid={`feature-toggle-${feature.replace(/\\s+/g, '-').toLowerCase()}`}\n                className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                  selectedFeatures.has(feature)\n                    ? 'border-etherneon bg-etherneon/10 shadow-lg'\n                    : 'border-white/20 hover:border-white/40'\n                }`}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => toggleFeature(feature)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-semibold\">{feature}</h4>\n                    <p className=\"text-sm text-gray-400\">$50/mes</p>\n                  </div>\n                  <div className={`w-6 h-6 rounded border-2 flex items-center justify-center ${\n                    selectedFeatures.has(feature) ? 'bg-etherneon border-etherneon' : 'border-white/40'\n                  }`}>\n                    {selectedFeatures.has(feature) && <span className=\"text-black text-sm\">✓</span>}\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Panel de Resultados */}\n      <motion.div\n        className=\"space-y-6\"\n        initial={{ opacity: 0, x: 20 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ delay: 0.4, duration: 0.6 }}\n      >\n        <div className=\"bg-gradient-to-br from-etherblue-light/30 to-purple-900/30 p-6 rounded-2xl border border-etherneon/30\">\n          <h3 className=\"text-2xl font-bold mb-4 text-center\">Total Soberano</h3>\n          <motion.div\n            className=\"text-5xl font-extrabold text-center text-etherneon mb-2\"\n            data-testid=\"calculator-total\"\n            key={calculateTotal()}\n            initial={{ scale: 0.8 }}\n            animate={{ scale: 1 }}\n            transition={{ type: 'spring', stiffness: 200 }}\n          >\n            ${calculateTotal()}/mes\n          </motion.div>\n          <p className=\"text-center text-gray-400\">Valor calculado instantáneamente</p>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-xl font-bold text-etherneon\">Oráculo de Valor</h3>\n          {Array.from(selectedPlans).map(planId => {\n            const plan = plans.find(p => p.id === planId);\n            return plan ? (\n              <motion.div\n                key={planId}\n                className=\"p-4 bg-gradient-to-r from-blue-900/50 to-purple-900/50 rounded-lg border border-blue-500/30\"\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4 }}\n              >\n                <h4 className=\"font-semibold text-blue-400 mb-2\">{plan.name}</h4>\n                <p className=\"text-sm text-gray-300\">{getAIExplanation(plan.name, 'plan')}</p>\n              </motion.div>\n            ) : null;\n          })}\n          {Array.from(selectedFeatures).map(feature => (\n            <motion.div\n              key={feature}\n              className=\"p-4 bg-gradient-to-r from-green-900/50 to-teal-900/50 rounded-lg border border-green-500/30\"\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.4 }}\n            >\n              <h4 className=\"font-semibold text-green-400 mb-2\">{feature}</h4>\n              <p className=\"text-sm text-gray-300\">{getAIExplanation(feature as string, 'feature')}</p>\n            </motion.div>\n          ))}\n          {selectedPlans.size === 0 && selectedFeatures.size === 0 && (\n            <div className=\"text-center text-gray-500 py-8\">\n              Selecciona altares y reliquias para revelar el oráculo de valor\n            </div>\n          )}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default PricingPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/SdlcDashboardPage.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"BarChart"},"fix":{"range":[132,141],"text":""},"desc":"Remove unused variable 'BarChart'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":3,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bar"},"fix":{"range":[140,145],"text":""},"desc":"Remove unused variable 'Bar'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'DragOverlay' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DragOverlay"},"fix":{"range":[316,331],"text":""},"desc":"Remove unused variable 'DragOverlay'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DragOverlay' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'COLORS' is assigned a value but never used.","line":48,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"COLORS"},"fix":{"range":[2462,2533],"text":""},"desc":"Remove unused variable 'COLORS'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'COLORS' is assigned a value but never used.","line":48,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SDLCModule' is assigned a value but never used.","line":50,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":3,"suggestions":[{"messageId":"removeVar","data":{"varName":"SDLCModule"},"fix":{"range":[2535,3970],"text":""},"desc":"Remove unused variable 'SDLCModule'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SDLCModule' is assigned a value but never used.","line":50,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":171,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[7344,7363],"text":""},"desc":"Remove unused variable 'event'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":172,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[7390,7411],"text":""},"desc":"Remove unused variable 'event'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":173,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":173,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[7437,7457],"text":""},"desc":"Remove unused variable 'event'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'BoardMemberCard' is assigned a value but never used.","line":206,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":99,"suggestions":[{"messageId":"removeVar","data":{"varName":"BoardMemberCard"},"fix":{"range":[8161,8846],"text":""},"desc":"Remove unused variable 'BoardMemberCard'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BoardMemberCard' is assigned a value but never used.","line":206,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'HealthChart' is assigned a value but never used.","line":228,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":228,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"HealthChart"},"fix":{"range":[9367,9952],"text":""},"desc":"Remove unused variable 'HealthChart'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HealthChart' is assigned a value but never used.","line":228,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":228,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'RiskIndexChart' is assigned a value but never used.","line":241,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":241,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"RiskIndexChart"},"fix":{"range":[9954,10689],"text":""},"desc":"Remove unused variable 'RiskIndexChart'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RiskIndexChart' is assigned a value but never used.","line":241,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'moduleKey' is defined but never used. Allowed unused args must match /^_/u.","line":271,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":271,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"moduleKey"},"fix":{"range":[10871,10888],"text":""},"desc":"Remove unused variable 'moduleKey'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'sdlcFiles' is defined but never used. Allowed unused args must match /^_/u.","line":272,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":272,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"sdlcFiles"},"fix":{"range":[10919,10930],"text":""},"desc":"Remove unused variable 'sdlcFiles'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sdlcFiles' is defined but never used. Allowed unused args must match /^_/u.","line":272,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ExecutivePanel' is assigned a value but never used.","line":401,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":401,"endColumn":83,"suggestions":[{"messageId":"removeVar","data":{"varName":"ExecutivePanel"},"fix":{"range":[15951,17413],"text":""},"desc":"Remove unused variable 'ExecutivePanel'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExecutivePanel' is assigned a value but never used.","line":401,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":401,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'summary' is assigned a value but never used.","line":402,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":402,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"summary"},"fix":{"range":[16061,16199],"text":""},"desc":"Remove unused variable 'summary'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'summary' is assigned a value but never used.","line":402,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":402,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'PhasePanel' is assigned a value but never used.","line":428,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":428,"endColumn":70,"suggestions":[{"messageId":"removeVar","data":{"varName":"PhasePanel"},"fix":{"range":[17498,20300],"text":""},"desc":"Remove unused variable 'PhasePanel'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PhasePanel' is assigned a value but never used.","line":428,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":428,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'phaseError' is assigned a value but never used.","line":431,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":431,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"phaseError"},"fix":{"range":[17732,17742],"text":""},"desc":"Remove unused variable 'phaseError'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'phaseError' is assigned a value but never used.","line":431,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":431,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":533,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":533,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[22270,22275],"text":""},"desc":"Remove unused variable 'error'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":533,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":533,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'draggedTask' is assigned a value but never used.","line":540,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":540,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"draggedTask"},"fix":{"range":[22750,22761],"text":""},"desc":"Remove unused variable 'draggedTask'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'draggedTask' is assigned a value but never used.","line":540,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":540,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'extractRoleFromSections' is assigned a value but never used.","line":705,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":705,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"extractRoleFromSections"},"fix":{"range":[27710,28099],"text":""},"desc":"Remove unused variable 'extractRoleFromSections'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'extractRoleFromSections' is assigned a value but never used.","line":705,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":705,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleDragStart' is assigned a value but never used.","line":718,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":718,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDragStart"},"fix":{"range":[28131,28331],"text":""},"desc":"Remove unused variable 'handleDragStart'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleDragStart' is assigned a value but never used.","line":718,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":718,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleDragEnd' is assigned a value but never used.","line":724,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":724,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDragEnd"},"fix":{"range":[28335,29945],"text":""},"desc":"Remove unused variable 'handleDragEnd'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleDragEnd' is assigned a value but never used.","line":724,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":724,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleDragOver' is assigned a value but never used.","line":774,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":774,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDragOver"},"fix":{"range":[29949,30044],"text":""},"desc":"Remove unused variable 'handleDragOver'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleDragOver' is assigned a value but never used.","line":774,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":774,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":774,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":774,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[29973,29993],"text":""},"desc":"Remove unused variable 'event'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":774,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":774,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/SolutionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/__tests__/DemoPage.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'mockGeography' is assigned a value but never used.","line":320,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":320,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"mockGeography"},"fix":{"range":[9300,9393],"text":""},"desc":"Remove unused variable 'mockGeography'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockGeography' is assigned a value but never used.","line":320,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":320,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport { MemoryRouter } from 'react-router-dom';\nimport DemoPage from '../DemoPage';\n\n// Mock all subcomponents\njest.mock('@/components/Sidebar', () => {\n  return function MockSidebar() {\n    return <div data-testid=\"sidebar\">Sidebar</div>;\n  };\n});\n\njest.mock('@/components/MissionGallery', () => {\n  return function MockMissionGallery() {\n    return <div data-testid=\"mission-gallery\">Mission Gallery</div>;\n  };\n});\n\njest.mock('@/components/AnimatedMetrics', () => {\n  return function MockAnimatedMetric({ value, suffix }: { value: number; suffix: string }) {\n    return <div data-testid=\"animated-metric\">{value}{suffix}</div>;\n  };\n});\n\njest.mock('@/components/CommunityResilienceWidget', () => {\n  return function MockCommunityResilienceWidget() {\n    return <div data-testid=\"community-resilience-widget\">Community Resilience</div>;\n  };\n});\n\njest.mock('@/components/SeismicMapWidget', () => {\n  return function MockSeismicMapWidget() {\n    return <div data-testid=\"seismic-map-widget\">Seismic Map</div>;\n  };\n});\n\njest.mock('@/components/FoodSecurityDashboard', () => {\n  return function MockFoodSecurityDashboard() {\n    return <div data-testid=\"food-security-dashboard\">Food Security</div>;\n  };\n});\n\njest.mock('@/components/EthicalVectorDisplay', () => {\n  return function MockEthicalVectorDisplay() {\n    return <div data-testid=\"ethical-vector-display\">Ethical Vector</div>;\n  };\n});\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('DemoPage', () => {\n  const mockDemoData = {\n    kpis: {\n      precisionPromedio: 90,\n      prediccionesDiarias: 150,\n      monitoreoContinuo: 24,\n      coberturaRegional: 20\n    },\n    countries: [\n      {\n        name: 'Argentina',\n        code: 'ARG',\n        lat: -34,\n        lon: -64,\n        climate: {},\n        social: {},\n        economic: {}\n      },\n      {\n        name: 'Brasil',\n        code: 'BRA',\n        lat: -10,\n        lon: -55,\n        climate: {},\n        social: {},\n        economic: {}\n      }\n    ],\n    global: {\n      crypto: {},\n      seismic: {}\n    },\n    lastUpdated: '2025-10-11T18:47:41.528Z'\n  };\n\n  // Ensure a safe default for global fetch: return demo data for live-state and\n  // a sensible response for predict-scenario. Individual tests may override.\n  beforeEach(() => {\n    // Reset the mock implementation and calls to avoid bleed between tests\n    mockFetch.mockReset();\n    mockFetch.mockImplementation((input, init) => {\n      const url = typeof input === 'string' ? input : (input && input.url) || '';\n      if (url.includes('/predict-scenario') || (init && init.method === 'POST')) {\n        return Promise.resolve({ ok: true, json: () => Promise.resolve({ riskIndex: 75 }) });\n      }\n      return Promise.resolve({ ok: true, json: () => Promise.resolve(mockDemoData) });\n    });\n    // @ts-ignore\n    global.fetch = mockFetch;\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  describe('Loading State', () => {\n    test('renders loading state initially', () => {\n      mockFetch.mockImplementation(() => new Promise(() => {})); // Never resolves\n\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      expect(screen.getByText('Cargando datos de la demo...')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error State', () => {\n    test('renders error state when fetch fails', async () => {\n      mockFetch.mockRejectedValue(new Error('Network error'));\n\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        // The UI now shows a non-blocking informational banner when demo falls back to mocks\n        expect(screen.getByText(/datos de la demo/i)).toBeInTheDocument();\n      });\n    });\n\n    test('renders error state when response is not ok', async () => {\n      mockFetch.mockResolvedValue({\n        ok: false,\n        json: () => Promise.reject(new Error('Bad response'))\n      });\n\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        // The UI now shows a non-blocking informational banner when demo falls back to mocks\n        expect(screen.getByText(/datos de la demo/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Data Loaded State', () => {\n    beforeEach(() => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockDemoData)\n      });\n    });\n\n    test('renders header correctly', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Praevisio AI - Centro de Mando')).toBeInTheDocument();\n        expect(screen.getByText('Inteligencia Predictiva de Élite para América Latina - 90% de Precisión')).toBeInTheDocument();\n      });\n    });\n\n    test('renders KPI metrics', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n  const metrics = screen.getAllByTestId('animated-metric');\n  expect(metrics[0]).toHaveTextContent('90%');\n  expect(metrics[1]).toHaveTextContent('150K');\n  expect(metrics[2]).toHaveTextContent('24/7');\n  expect(metrics[3]).toHaveTextContent('20 Países');\n      });\n    });\n\n    test('renders country selector', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Selección de País')).toBeInTheDocument();\n        // Prefer the testid for the Select trigger to avoid Radix duplication\n        expect(screen.getByTestId('country-select-trigger')).toBeInTheDocument();\n      });\n    });\n\n    test('renders interactive map', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Mapa Interactivo - América Latina')).toBeInTheDocument();\n        expect(screen.getByTestId('global-map')).toBeInTheDocument();\n      });\n    });\n\n    test('renders oracle control panel', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Panel de Control del Oráculo')).toBeInTheDocument();\n        expect(screen.getByText('Simula escenarios y observa cómo cambian las predicciones')).toBeInTheDocument();\n      });\n    });\n\n    test('renders mission gallery', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Galería de Misiones - Task Replay')).toBeInTheDocument();\n        expect(screen.getByTestId('mission-gallery')).toBeInTheDocument();\n      });\n    });\n\n    test('renders symphony of manifestation section', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Sinfonía de Manifestación Total')).toBeInTheDocument();\n        expect(screen.getByTestId('community-resilience-widget')).toBeInTheDocument();\n        expect(screen.getByTestId('seismic-map-widget')).toBeInTheDocument();\n        expect(screen.getByTestId('food-security-dashboard')).toBeInTheDocument();\n        expect(screen.getByTestId('ethical-vector-display')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Country Selection', () => {\n    beforeEach(() => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockDemoData)\n      });\n    });\n\n    test('selects country and displays country card', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        // Use the testid added to the Select trigger to avoid Radix internal nodes\n        expect(screen.getByTestId('country-select-trigger')).toBeInTheDocument();\n      });\n\n  const selectTrigger = screen.getByTestId('country-select-trigger');\n  fireEvent.click(selectTrigger);\n\n  // The option text may be duplicated by Radix internals; pick the first visible match\n  const argentinaOption = screen.getAllByText(/Argentina/).find(el => el.textContent && el.textContent.includes('Argentina'));\n  if (argentinaOption) fireEvent.click(argentinaOption);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('country-card-ARG')).toBeInTheDocument();\n        expect(screen.getByText('País Seleccionado:')).toBeInTheDocument();\n        expect(screen.getByText('Argentina')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Map Interactions', () => {\n    beforeEach(() => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockDemoData)\n      });\n    });\n\n    test('shows country name on hover', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('global-map')).toBeInTheDocument();\n      });\n\n      // Mock geography element\n      const mockGeography = {\n        rsmKey: 'ARG',\n        properties: { ISO_A3: 'ARG' }\n      };\n\n      // Find the geography element (this is simplified, in real test we'd need to mock ComposableMap properly)\n      // For now, we'll test that the map renders\n      expect(screen.getByTestId('global-map')).toBeInTheDocument();\n    });\n  });\n\n  describe('Simulation Panel', () => {\n    beforeEach(() => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockDemoData)\n      });\n    });\n\n    test('renders simulation controls', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Selecciona País para Simulación')).toBeInTheDocument();\n        expect(screen.getByText('Aumento de Inflación (%): 0%')).toBeInTheDocument();\n        expect(screen.getByText('Nivel de Sequía: 0/10')).toBeInTheDocument();\n        expect(screen.getByTestId('simulate-button')).toBeInTheDocument();\n      });\n    });\n\n    test('updates inflation slider', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Aumento de Inflación (%): 0%')).toBeInTheDocument();\n      });\n\n      // Note: Slider interaction testing would require more complex mocking\n      // This is a basic test to ensure the component renders\n    });\n\n    test('simulates scenario successfully', async () => {\n      // First call: live-state, second call: predict-scenario\n      mockFetch\n        .mockResolvedValueOnce({ ok: true, json: () => Promise.resolve(mockDemoData) })\n        .mockResolvedValueOnce({ ok: true, json: () => Promise.resolve({ riskIndex: 75 }) });\n\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Calcular Índice de Riesgo')).toBeInTheDocument();\n      });\n\n      // Select country via simulation select trigger\n  const countrySelect = screen.getByTestId('simulation-select-trigger');\n  fireEvent.click(countrySelect);\n\n  // Prefer the first visible Argentina option\n  const argentinaOptions = screen.getAllByText(/Argentina/).filter(el => el.textContent && el.textContent.trim() === 'Argentina');\n  if (argentinaOptions.length) fireEvent.click(argentinaOptions[0]);\n\n  // Click simulate button via testid\n  const simulateButton = screen.getByTestId('simulate-button');\n  fireEvent.click(simulateButton);\n\n      // Ensure the predict-scenario endpoint was called (POST)\n      await waitFor(() => {\n        expect(mockFetch.mock.calls.some(call => {\n          const url = typeof call[0] === 'string' ? call[0] : (call[0] && call[0].url) || '';\n          const opts = call[1] || {};\n          return url.includes('/predict-scenario') || opts.method === 'POST';\n        })).toBe(true);\n      });\n    });\n\n    test('shows explanation when button is clicked', async () => {\n      mockFetch\n        .mockResolvedValueOnce({ ok: true, json: () => Promise.resolve(mockDemoData) })\n        .mockResolvedValueOnce({ ok: true, json: () => Promise.resolve({ riskIndex: 75 }) });\n\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('simulation-select-trigger')).toBeInTheDocument();\n      });\n\n      // Select country and simulate\n      const countrySelect = screen.getByTestId('simulation-select-trigger');\n      fireEvent.click(countrySelect);\n      const argentinaBtn = screen.getAllByText(/Argentina/).find(el => el.textContent && el.textContent.trim() === 'Argentina');\n      if (argentinaBtn) fireEvent.click(argentinaBtn);\n\n  const simulateButton = screen.getByTestId('simulate-button');\n  fireEvent.click(simulateButton);\n\n      // Ensure the POST to predict-scenario happened\n      await waitFor(() => {\n        expect(mockFetch.mock.calls.some(call => (typeof call[0] === 'string' ? call[0] : (call[0] && call[0].url) || '').includes('/predict-scenario') || (call[1] && call[1].method === 'POST'))).toBe(true);\n      });\n    });\n\n    test('handles simulation error with fallback calculation', async () => {\n      mockFetch\n        .mockResolvedValueOnce({ ok: true, json: () => Promise.resolve(mockDemoData) })\n        .mockRejectedValueOnce(new Error('Simulation failed'));\n\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Calcular Índice de Riesgo')).toBeInTheDocument();\n      });\n\n      // Select country and set parameters\n  const countrySelect = screen.getByTestId('simulation-select-trigger');\n  fireEvent.click(countrySelect);\n  const argentinaBtn = screen.getAllByText(/Argentina/).find(el => el.textContent && el.textContent.trim() === 'Argentina');\n  if (argentinaBtn) fireEvent.click(argentinaBtn);\n\n      // Set inflation to 10 and drought to 5\n      // Note: Actual slider interaction would require more setup\n\n  fireEvent.click(screen.getByTestId('simulate-button'));\n\n      await waitFor(() => {\n        // Ensure we attempted the simulation (POST) which was rejected, so fallback path executed\n        expect(mockFetch.mock.calls.some(call => (typeof call[0] === 'string' ? call[0] : (call[0] && call[0].url) || '').includes('/predict-scenario') || (call[1] && call[1].method === 'POST'))).toBe(true);\n      });\n    });\n  });\n\n  describe('Data Refresh', () => {\n    test('refreshes data every 60 seconds', async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockDemoData)\n      });\n\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/demo/live-state');\n      });\n\n      // Fast-forward 60 seconds\n      act(() => {\n        jest.advanceTimersByTime(60000);\n      });\n\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledTimes(2);\n      });\n    });\n  });\n\n  describe('Briefing Panel', () => {\n    beforeEach(() => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockDemoData)\n      });\n    });\n\n    test('shows briefing panel when country is clicked on map', async () => {\n      render(\n        <MemoryRouter>\n          <DemoPage />\n        </MemoryRouter>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('global-map')).toBeInTheDocument();\n      });\n\n      // Mock clicking on a country in the map\n      // This would require mocking the ComposableMap component properly\n      // For now, we test that the briefing panel can be shown by setting showBriefing to true\n      // In a real scenario, we'd need to simulate the map click\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/__tests__/Index.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/__tests__/MetatronPanel.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'mockStopSimulator' is assigned a value but never used.","line":64,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"mockStopSimulator"},"fix":{"range":[2204,2289],"text":""},"desc":"Remove unused variable 'mockStopSimulator'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockStopSimulator' is assigned a value but never used.","line":64,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'handler' is defined but never used. Allowed unused args must match /^_/u.","line":77,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"handler"},"fix":{"range":[3105,3112],"text":""},"desc":"Remove unused variable 'handler'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handler' is defined but never used. Allowed unused args must match /^_/u.","line":77,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { MemoryRouter } from 'react-router-dom';\nimport MetatronPanel from '../MetatronPanel';\n\n// Mock the use-mobile hook\njest.mock('@/hooks/use-mobile', () => ({\n  useIsMobile: jest.fn(),\n}));\n\n// Mock the eternal vigilance simulator\njest.mock('../../lib/eternalVigilanceSimulator', () => ({\n  startSimulator: jest.fn(),\n  stopSimulator: jest.fn(),\n  subscribeEvents: jest.fn(),\n  getCurrentState: jest.fn(),\n  downloadReport: jest.fn(),\n}));\n\n// Mock the metatron components\njest.mock('../../components/metatron/FlowsStatus', () => ({\n  default: () => <div>FlowsStatus Component</div>,\n}));\n\njest.mock('../../components/metatron/MetatronPanelWidget', () => ({\n  default: ({ running, toggleVigilance, emitMessage, setEmitMessage, handleEmit, handleDownload, sseConnected, events, state }: any) => (\n    <div data-testid=\"metatron-panel-widget\">\n      <button onClick={toggleVigilance} data-testid=\"toggle-vigilance\">\n        {running ? 'Stop' : 'Start'}\n      </button>\n      <input\n        value={emitMessage}\n        onChange={(e) => setEmitMessage(e.target.value)}\n        data-testid=\"emit-input\"\n      />\n      <button onClick={handleEmit} data-testid=\"emit-button\">Emit</button>\n      <button onClick={handleDownload} data-testid=\"download-button\">Download</button>\n      <div data-testid=\"sse-status\">{sseConnected ? 'Connected' : 'Disconnected'}</div>\n      <div data-testid=\"events-count\">{events.length}</div>\n      <div data-testid=\"state-display\">{state ? 'Has State' : 'No State'}</div>\n    </div>\n  ),\n}));\n\nimport { useIsMobile } from '@/hooks/use-mobile';\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\n// Mock EventSource\nglobal.EventSource = jest.fn().mockImplementation(() => ({\n  onopen: null,\n  onerror: null,\n  onmessage: null,\n  close: jest.fn(),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n}));\n\nimport { startSimulator, stopSimulator, subscribeEvents, getCurrentState, downloadReport } from '../../lib/eternalVigilanceSimulator';\n\nconst mockStartSimulator = startSimulator as jest.MockedFunction<typeof startSimulator>;\nconst mockStopSimulator = stopSimulator as jest.MockedFunction<typeof stopSimulator>;\nconst mockSubscribeEvents = subscribeEvents as jest.MockedFunction<typeof subscribeEvents>;\nconst mockGetCurrentState = getCurrentState as jest.MockedFunction<typeof getCurrentState>;\nconst mockDownloadReport = downloadReport as jest.MockedFunction<typeof downloadReport>;\nconst mockFetch = global.fetch as jest.MockedFunction<typeof global.fetch>;\nconst mockEventSource = global.EventSource as jest.MockedFunction<typeof global.EventSource>;\nconst mockUseIsMobile = useIsMobile as jest.MockedFunction<typeof useIsMobile>;\n\ndescribe('MetatronPanel', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUseIsMobile.mockReturnValue(false); // Default to desktop\n    mockGetCurrentState.mockReturnValue({ indices: { globalRisk: 0, stability: 100 }, flows: {} });\n    mockSubscribeEvents.mockImplementation((handler) => {\n      // Mock subscription\n    });\n  });\n\n  it('renders component without crashing', () => {\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    expect(screen.getByText('Metatrón - Centro de Operaciones')).toBeInTheDocument();\n    expect(screen.getByTestId('metatron-panel-widget')).toBeInTheDocument();\n  });\n\n  it('loads simulator functions successfully', () => {\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    // Should not show fallback messages\n    expect(screen.queryByText('FlowsStatus no disponible')).not.toBeInTheDocument();\n  });\n\n  it('handles simulator loading errors gracefully', () => {\n    // This test is not applicable since we mock the components directly\n    // The component handles errors internally with try/catch\n    expect(true).toBe(true);\n  });\n\n  it('initializes with correct default state', () => {\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    expect(screen.getByTestId('sse-status')).toHaveTextContent('Disconnected');\n    expect(screen.getByTestId('events-count')).toHaveTextContent('0');\n  });\n\n  it('sets up EventSource connection on mount', async () => {\n    mockFetch.mockResolvedValueOnce({} as Response);\n    const mockESInstance = {\n      onopen: jest.fn(),\n      onerror: jest.fn(),\n      onmessage: jest.fn(),\n      close: jest.fn(),\n    };\n    mockEventSource.mockReturnValueOnce(mockESInstance as any);\n\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith('/api/eternal-vigilance/token', expect.any(Object));\n      expect(mockEventSource).toHaveBeenCalledWith('/api/eternal-vigilance/stream');\n    });\n  });\n\n  it('handles EventSource connection success', async () => {\n    mockFetch.mockResolvedValueOnce({} as Response);\n    const mockESInstance = {\n      onopen: jest.fn(),\n      onerror: jest.fn(),\n      onmessage: jest.fn(),\n      close: jest.fn(),\n    };\n    mockEventSource.mockReturnValueOnce(mockESInstance as any);\n\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    await waitFor(() => {\n      expect(mockESInstance.onopen).toBeDefined();\n    });\n\n    // Simulate onopen\n    mockESInstance.onopen();\n\n    await waitFor(() => {\n      expect(screen.getByTestId('sse-status')).toHaveTextContent('Connected');\n    });\n  });\n\n  it('handles EventSource messages', async () => {\n    mockFetch.mockResolvedValueOnce({} as Response);\n    const mockESInstance = {\n      onopen: jest.fn(),\n      onerror: jest.fn(),\n      onmessage: jest.fn(),\n      close: jest.fn(),\n    };\n    mockEventSource.mockReturnValueOnce(mockESInstance as any);\n\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    await waitFor(() => {\n      expect(mockESInstance.onmessage).toBeDefined();\n    });\n\n    // Simulate message\n    const mockEvent = { data: JSON.stringify({ event: 'Test event', state: { indices: { globalRisk: 10, stability: 90 } } }) };\n    mockESInstance.onmessage(mockEvent as any);\n\n    await waitFor(() => {\n      expect(screen.getByTestId('events-count')).toHaveTextContent('1');\n      expect(screen.getByTestId('state-display')).toHaveTextContent('Has State');\n    });\n  });\n\n  it('handles EventSource errors', async () => {\n    mockFetch.mockResolvedValueOnce({} as Response);\n    const mockESInstance = {\n      onopen: jest.fn(),\n      onerror: jest.fn(),\n      onmessage: jest.fn(),\n      close: jest.fn(),\n    };\n    mockEventSource.mockReturnValueOnce(mockESInstance as any);\n\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    await waitFor(() => {\n      expect(mockESInstance.onerror).toBeDefined();\n    });\n\n    // Simulate error\n    mockESInstance.onerror();\n\n    await waitFor(() => {\n      expect(screen.getByTestId('sse-status')).toHaveTextContent('Disconnected');\n    });\n  });\n\n  it('toggles vigilance when button is clicked', async () => {\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    const toggleButton = screen.getByTestId('toggle-vigilance');\n\n    // Initially should show Start\n    expect(toggleButton).toHaveTextContent('Start');\n\n    // Click to start\n    fireEvent.click(toggleButton);\n    expect(mockStartSimulator).toHaveBeenCalled();\n\n    // Mock running state change\n    // Note: In real component, this would be handled by state update\n  });\n\n  it('handles emit message functionality', async () => {\n    mockFetch.mockResolvedValueOnce({} as Response);\n\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    const input = screen.getByTestId('emit-input');\n    const emitButton = screen.getByTestId('emit-button');\n\n    fireEvent.change(input, { target: { value: 'Test message' } });\n    fireEvent.click(emitButton);\n\n    expect(mockFetch).toHaveBeenCalledWith('/api/eternal-vigilance/emit', expect.objectContaining({\n      method: 'POST',\n      body: JSON.stringify({ event: 'Test message' }),\n    }));\n  });\n\n  it('handles download report functionality', () => {\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    const downloadButton = screen.getByTestId('download-button');\n    fireEvent.click(downloadButton);\n\n    expect(mockDownloadReport).toHaveBeenCalled();\n  });\n\n  it('cleans up EventSource on unmount', async () => {\n    mockFetch.mockResolvedValueOnce({} as Response);\n    const mockESInstance = {\n      onopen: jest.fn(),\n      onerror: jest.fn(),\n      onmessage: jest.fn(),\n      close: jest.fn(),\n    };\n    mockEventSource.mockReturnValueOnce(mockESInstance as any);\n\n    const { unmount } = render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    // Wait for EventSource to be created\n    await waitFor(() => {\n      expect(mockEventSource).toHaveBeenCalled();\n    });\n\n    unmount();\n\n    expect(mockESInstance.close).toHaveBeenCalled();\n  });\n\n  it('handles fetch token failure gracefully', async () => {\n    mockFetch.mockRejectedValueOnce(new Error('Network error'));\n    const mockESInstance = {\n      onopen: jest.fn(),\n      onerror: jest.fn(),\n      onmessage: jest.fn(),\n      close: jest.fn(),\n    };\n    mockEventSource.mockReturnValueOnce(mockESInstance as any);\n\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    // Should still attempt to create EventSource\n    await waitFor(() => {\n      expect(mockEventSource).toHaveBeenCalled();\n    });\n  });\n\n  it('skips EventSource setup in SSR environment', () => {\n    const originalWindow = global.window;\n    delete (global as any).window;\n\n    render(\n      <MemoryRouter>\n        <MetatronPanel />\n      </MemoryRouter>\n    );\n\n    expect(mockEventSource).not.toHaveBeenCalled();\n\n    // Restore window\n    (global as any).window = originalWindow;\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/__tests__/PricingPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/pages/__tests__/routing.integration.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'screen' is defined but never used.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"screen"},"fix":{"range":[42,50],"text":""},"desc":"Remove unused variable 'screen'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'screen' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used.","line":2,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"fireEvent"},"fix":{"range":[50,61],"text":""},"desc":"Remove unused variable 'fireEvent'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport App from '../../App';\n\n// Mock global layout parts to keep the test focused and avoid heavy UI providers\njest.mock('../../components/Navbar', () => {\n  return { __esModule: true, default: () => null };\n});\njest.mock('../../components/Footer', () => {\n  return { __esModule: true, default: () => null };\n});\n// Mock Toaster and Sonner UI providers used in App to avoid side-effects in jsdom\njest.mock('@/components/ui/toaster', () => {\n  return { Toaster: () => null };\n});\njest.mock('@/components/ui/sonner', () => {\n  return { Toaster: () => null };\n});\n\ndescribe('Routing Integration', () => {\n  test('landing CTAs route to solutions, demo and pricing', async () => {\n    // App already includes a HashRouter internally, so render it directly to avoid nested Router errors\n    render(<App />);\n\n    // Simulate hash navigation by setting location.hash and re-rendering\n    window.location.hash = '/solutions';\n    // Wait a tick for lazy load\n    await waitFor(() => expect(window.location.hash).toBe('#/solutions'));\n\n    // Now go to demo\n    window.location.hash = '/demo';\n    await waitFor(() => expect(window.location.hash).toBe('#/demo'));\n\n    // Now go to pricing\n    window.location.hash = '/pricing';\n    await waitFor(() => expect(window.location.hash).toBe('#/pricing'));\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/davicho/etherai-foresight-platform-main/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
