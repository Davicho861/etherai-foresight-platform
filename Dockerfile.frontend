FROM node:20-bullseye-slim AS base
WORKDIR /app

# Allow injecting API base URL at build time
ARG VITE_API_BASE_URL
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}

# Install curl for healthcheck
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Install dependencies at image build time so node_modules live inside the image/volume
# Copy unified package manifests to leverage Docker layer caching
# Copy package manifests
COPY package*.json ./
COPY package-lock.json ./

# Install dependencies. Use npm ci for reproducible builds from lockfile.
RUN npm config set fetch-retries 5 && npm config set fetch-retry-mintimeout 10000 && npm config set fetch-retry-maxtimeout 60000
RUN npm ci --legacy-peer-deps --no-audit --no-fund --verbose

# Ensure vite and react plugin are available in the image so the dev server
# can be started from the container without requiring global installs.
RUN npm install --legacy-peer-deps --no-audit --no-fund vite @vitejs/plugin-react-swc @tailwindcss/postcss --prefer-offline
# Also install vite globally to ensure the `vite` command is available
RUN npm install -g --legacy-peer-deps vite --no-audit --no-fund

# Copy the rest of the source (this will be shadowed by the host bind mount in dev)
COPY . /app

EXPOSE 3002

# Declare node_modules as a volume so when a named volume is attached Docker
# will initialize it with the node_modules produced at build time.
VOLUME ["/app/node_modules"]

# Persist a copy of the image-installed node_modules so a fresh named volume
# can be bootstrapped at container start if it is empty. This avoids running
# npm install during container startup while ensuring node_modules exist.
RUN cp -a /app/node_modules /preinstalled_node_modules || true

# Provide two execution modes:
# - dev: run the vite dev server (expects source mounted). Use script `dev:container`.
# - prod: serve the built static files from /app/dist
CMD ["sh", "-c", "if [ ! -d /app/node_modules ] || [ -z \"$(ls -A /app/node_modules 2>/dev/null)\" ]; then echo 'Initializing /app/node_modules from image...' && cp -a /preinstalled_node_modules/. /app/node_modules || true; fi; if [ \"${NODE_ENV:-production}\" = 'development' ]; then vite --host 0.0.0.0 --port 3002; else npx http-server dist -p 3002 -a 0.0.0.0; fi"]
