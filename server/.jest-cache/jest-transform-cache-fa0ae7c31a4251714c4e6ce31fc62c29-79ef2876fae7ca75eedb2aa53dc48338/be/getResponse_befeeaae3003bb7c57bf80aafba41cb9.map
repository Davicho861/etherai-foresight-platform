{"version":3,"names":["getResponse_exports","__export","getResponse","module","exports","__toCommonJS","import_interceptors","require","import_executeHandlers","handlers","request","resolutionContext","result","executeHandlers","requestId","createRequestId","response"],"sources":["../../src/core/getResponse.ts"],"sourcesContent":["import { createRequestId } from '@mswjs/interceptors'\nimport type { RequestHandler } from './handlers/RequestHandler'\nimport {\n  executeHandlers,\n  type ResponseResolutionContext,\n} from './utils/executeHandlers'\n\n/**\n * Finds a response for the given request instance\n * in the array of request handlers.\n * @param handlers The array of request handlers.\n * @param request The `Request` instance.\n * @param resolutionContext Request resolution options.\n * @returns {Response} A mocked response, if any.\n */\nexport const getResponse = async (\n  handlers: Array<RequestHandler>,\n  request: Request,\n  resolutionContext?: ResponseResolutionContext,\n): Promise<Response | undefined> => {\n  const result = await executeHandlers({\n    request,\n    requestId: createRequestId(),\n    handlers,\n    resolutionContext,\n  })\n\n  return result?.response\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,mBAAA;AAAAC,QAAA,CAAAD,mBAAA;EAAAE,WAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,mBAAA;AAAA,IAAAM,mBAAA,GAAgCC,OAAA;AAEhC,IAAAC,sBAAA,GAGOD,OAAA;AAUA,MAAML,WAAA,GAAc,MAAAA,CACzBO,QAAA,EACAC,OAAA,EACAC,iBAAA,KACkC;EAClC,MAAMC,MAAA,GAAS,UAAMJ,sBAAA,CAAAK,eAAA,EAAgB;IACnCH,OAAA;IACAI,SAAA,MAAWR,mBAAA,CAAAS,eAAA,EAAgB;IAC3BN,QAAA;IACAE;EACF,CAAC;EAED,OAAOC,MAAA,EAAQI,QAAA;AACjB","ignoreList":[]}