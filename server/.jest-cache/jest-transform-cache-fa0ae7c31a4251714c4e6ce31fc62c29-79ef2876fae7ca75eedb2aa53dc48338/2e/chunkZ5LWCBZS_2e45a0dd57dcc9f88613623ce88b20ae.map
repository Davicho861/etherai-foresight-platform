{"version":3,"names":["_outvariant","require","_deferredpromise","createNetworkError","cause","Object","assign","TypeError","REQUEST_BODY_HEADERS","kRedirectCount","Symbol","followFetchRedirect","request","response","status","body","Promise","reject","requestUrl","URL","url","locationUrl","headers","get","error","protocol","Reflect","defineProperty","value","mode","username","password","sameOrigin","requestInit","includes","method","forEach","headerName","delete","finalResponse","fetch","Request","configurable","left","right","origin","hostname","port","_zlib","_zlib2","_interopRequireDefault","BrotliDecompressionStream","TransformStream","constructor","decompress","default","createBrotliDecompress","flush","constants","BROTLI_OPERATION_FLUSH","finishFlush","transform","chunk","controller","buffer","Buffer","from","decompressed","resolve","write","once","data","terminate","catch","enqueue","PipelineStream","transformStreams","strategies","readable","reduce","readable2","pipeThrough","parseContentEncoding","contentEncoding","toLowerCase","split","map","coding","trim","createDecompressionStream","codings","length","transformers","reduceRight","transformers2","concat","DecompressionStream","decompressResponse","decompressionStream","pipeTo","writable","_FetchInterceptor","_chunkA7U44ARPjs","Interceptor","symbol","checkEnvironment","_chunkPFGO5BSMjs","hasConfigurableGlobal","call","setup","pureFetch","globalThis","invariant","_chunk73NOP3T5js","IS_PATCHED_MODULE","input","init","requestId","createRequestId","resolvedInput","location","canParseUrl","href","_chunkSMXZPJEAjs","setRawRequest","responsePromise","DeferredPromise","_chunk72ZIHMEBjs","RequestController","logger","info","emitter","listenerCount","isRequestHandled","handleRequest","onResponse","rawResponse","decompressedStream","FetchResponse","setUrl","isRedirectResponse","redirect","then","response2","reason","emitAsync","clone","isMockedResponse","onRequestError","onError","requestCloneForResponseEvent","responseClone","enumerable","subscriptions","push","name","FetchInterceptor"],"sources":["../../src/interceptors/fetch/index.ts","../../src/interceptors/fetch/utils/createNetworkError.ts","../../src/interceptors/fetch/utils/followRedirect.ts","../../src/interceptors/fetch/utils/brotli-decompress.ts","../../src/interceptors/fetch/utils/decompression.ts"],"sourcesContent":["import { invariant } from 'outvariant'\nimport { DeferredPromise } from '@open-draft/deferred-promise'\nimport { HttpRequestEventMap, IS_PATCHED_MODULE } from '../../glossary'\nimport { Interceptor } from '../../Interceptor'\nimport { RequestController } from '../../RequestController'\nimport { emitAsync } from '../../utils/emitAsync'\nimport { handleRequest } from '../../utils/handleRequest'\nimport { canParseUrl } from '../../utils/canParseUrl'\nimport { createRequestId } from '../../createRequestId'\nimport { createNetworkError } from './utils/createNetworkError'\nimport { followFetchRedirect } from './utils/followRedirect'\nimport { decompressResponse } from './utils/decompression'\nimport { hasConfigurableGlobal } from '../../utils/hasConfigurableGlobal'\nimport { FetchResponse } from '../../utils/fetchUtils'\nimport { setRawRequest } from '../../getRawRequest'\n\nexport class FetchInterceptor extends Interceptor<HttpRequestEventMap> {\n  static symbol = Symbol('fetch')\n\n  constructor() {\n    super(FetchInterceptor.symbol)\n  }\n\n  protected checkEnvironment() {\n    return hasConfigurableGlobal('fetch')\n  }\n\n  protected async setup() {\n    const pureFetch = globalThis.fetch\n\n    invariant(\n      !(pureFetch as any)[IS_PATCHED_MODULE],\n      'Failed to patch the \"fetch\" module: already patched.'\n    )\n\n    globalThis.fetch = async (input, init) => {\n      const requestId = createRequestId()\n\n      /**\n       * @note Resolve potentially relative request URL\n       * against the present `location`. This is mainly\n       * for native `fetch` in JSDOM.\n       * @see https://github.com/mswjs/msw/issues/1625\n       */\n      const resolvedInput =\n        typeof input === 'string' &&\n        typeof location !== 'undefined' &&\n        !canParseUrl(input)\n          ? new URL(input, location.href)\n          : input\n\n      const request = new Request(resolvedInput, init)\n\n      /**\n       * @note Set the raw request only if a Request instance was provided to fetch.\n       */\n      if (input instanceof Request) {\n        setRawRequest(request, input)\n      }\n\n      const responsePromise = new DeferredPromise<Response>()\n      const controller = new RequestController(request)\n\n      this.logger.info('[%s] %s', request.method, request.url)\n      this.logger.info('awaiting for the mocked response...')\n\n      this.logger.info(\n        'emitting the \"request\" event for %s listener(s)...',\n        this.emitter.listenerCount('request')\n      )\n\n      const isRequestHandled = await handleRequest({\n        request,\n        requestId,\n        emitter: this.emitter,\n        controller,\n        onResponse: async (rawResponse) => {\n          this.logger.info('received mocked response!', {\n            rawResponse,\n          })\n\n          // Decompress the mocked response body, if applicable.\n          const decompressedStream = decompressResponse(rawResponse)\n          const response =\n            decompressedStream === null\n              ? rawResponse\n              : new FetchResponse(decompressedStream, rawResponse)\n\n          FetchResponse.setUrl(request.url, response)\n\n          /**\n           * Undici's handling of following redirect responses.\n           * Treat the \"manual\" redirect mode as a regular mocked response.\n           * This way, the client can manually follow the redirect it receives.\n           * @see https://github.com/nodejs/undici/blob/a6dac3149c505b58d2e6d068b97f4dc993da55f0/lib/web/fetch/index.js#L1173\n           */\n          if (FetchResponse.isRedirectResponse(response.status)) {\n            // Reject the request promise if its `redirect` is set to `error`\n            // and it receives a mocked redirect response.\n            if (request.redirect === 'error') {\n              responsePromise.reject(createNetworkError('unexpected redirect'))\n              return\n            }\n\n            if (request.redirect === 'follow') {\n              followFetchRedirect(request, response).then(\n                (response) => {\n                  responsePromise.resolve(response)\n                },\n                (reason) => {\n                  responsePromise.reject(reason)\n                }\n              )\n              return\n            }\n          }\n\n          if (this.emitter.listenerCount('response') > 0) {\n            this.logger.info('emitting the \"response\" event...')\n\n            // Await the response listeners to finish before resolving\n            // the response promise. This ensures all your logic finishes\n            // before the interceptor resolves the pending response.\n            await emitAsync(this.emitter, 'response', {\n              // Clone the mocked response for the \"response\" event listener.\n              // This way, the listener can read the response and not lock its body\n              // for the actual fetch consumer.\n              response: response.clone(),\n              isMockedResponse: true,\n              request,\n              requestId,\n            })\n          }\n\n          responsePromise.resolve(response)\n        },\n        onRequestError: (response) => {\n          this.logger.info('request has errored!', { response })\n          responsePromise.reject(createNetworkError(response))\n        },\n        onError: (error) => {\n          this.logger.info('request has been aborted!', { error })\n          responsePromise.reject(error)\n        },\n      })\n\n      if (isRequestHandled) {\n        this.logger.info('request has been handled, returning mock promise...')\n        return responsePromise\n      }\n\n      this.logger.info(\n        'no mocked response received, performing request as-is...'\n      )\n\n      /**\n       * @note Clone the request instance right before performing it.\n       * This preserves any modifications made to the intercepted request\n       * in the \"request\" listener. This also allows the user to read the\n       * request body in the \"response\" listener (otherwise \"unusable\").\n       */\n      const requestCloneForResponseEvent = request.clone()\n\n      return pureFetch(request).then(async (response) => {\n        this.logger.info('original fetch performed', response)\n\n        if (this.emitter.listenerCount('response') > 0) {\n          this.logger.info('emitting the \"response\" event...')\n\n          const responseClone = response.clone()\n\n          await emitAsync(this.emitter, 'response', {\n            response: responseClone,\n            isMockedResponse: false,\n            request: requestCloneForResponseEvent,\n            requestId,\n          })\n        }\n\n        return response\n      })\n    }\n\n    Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true,\n    })\n\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n        value: undefined,\n      })\n\n      globalThis.fetch = pureFetch\n\n      this.logger.info(\n        'restored native \"globalThis.fetch\"!',\n        globalThis.fetch.name\n      )\n    })\n  }\n}\n","export function createNetworkError(cause?: unknown) {\n  return Object.assign(new TypeError('Failed to fetch'), {\n    cause,\n  })\n}\n","import { createNetworkError } from './createNetworkError'\n\nconst REQUEST_BODY_HEADERS = [\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-type',\n  'content-length',\n]\n\nconst kRedirectCount = Symbol('kRedirectCount')\n\n/**\n * @see https://github.com/nodejs/undici/blob/a6dac3149c505b58d2e6d068b97f4dc993da55f0/lib/web/fetch/index.js#L1210\n */\nexport async function followFetchRedirect(\n  request: Request,\n  response: Response\n): Promise<Response> {\n  if (response.status !== 303 && request.body != null) {\n    return Promise.reject(createNetworkError())\n  }\n\n  const requestUrl = new URL(request.url)\n\n  let locationUrl: URL\n  try {\n    // If the location is a relative URL, use the request URL as the base URL.\n    locationUrl = new URL(response.headers.get('location')!, request.url) \n  } catch (error) {\n    return Promise.reject(createNetworkError(error))\n  }\n\n  if (\n    !(locationUrl.protocol === 'http:' || locationUrl.protocol === 'https:')\n  ) {\n    return Promise.reject(\n      createNetworkError('URL scheme must be a HTTP(S) scheme')\n    )\n  }\n\n  if (Reflect.get(request, kRedirectCount) > 20) {\n    return Promise.reject(createNetworkError('redirect count exceeded'))\n  }\n\n  Object.defineProperty(request, kRedirectCount, {\n    value: (Reflect.get(request, kRedirectCount) || 0) + 1,\n  })\n\n  if (\n    request.mode === 'cors' &&\n    (locationUrl.username || locationUrl.password) &&\n    !sameOrigin(requestUrl, locationUrl)\n  ) {\n    return Promise.reject(\n      createNetworkError('cross origin not allowed for request mode \"cors\"')\n    )\n  }\n\n  const requestInit: RequestInit = {}\n\n  if (\n    ([301, 302].includes(response.status) && request.method === 'POST') ||\n    (response.status === 303 && !['HEAD', 'GET'].includes(request.method))\n  ) {\n    requestInit.method = 'GET'\n    requestInit.body = null\n\n    REQUEST_BODY_HEADERS.forEach((headerName) => {\n      request.headers.delete(headerName)\n    })\n  }\n\n  if (!sameOrigin(requestUrl, locationUrl)) {\n    request.headers.delete('authorization')\n    request.headers.delete('proxy-authorization')\n    request.headers.delete('cookie')\n    request.headers.delete('host')\n  }\n\n  /**\n   * @note Undici \"safely\" extracts the request body.\n   * I suspect we cannot dispatch this request again\n   * since its body has been read and the stream is locked.\n   */\n\n  requestInit.headers = request.headers\n  const finalResponse = await fetch(new Request(locationUrl, requestInit))\n  Object.defineProperty(finalResponse, 'redirected', {\n    value: true,\n    configurable: true,\n  })\n\n  return finalResponse\n}\n\n/**\n * @see https://github.com/nodejs/undici/blob/a6dac3149c505b58d2e6d068b97f4dc993da55f0/lib/web/fetch/util.js#L761\n */\nfunction sameOrigin(left: URL, right: URL): boolean {\n  if (left.origin === right.origin && left.origin === 'null') {\n    return true\n  }\n\n  if (\n    left.protocol === right.protocol &&\n    left.hostname === right.hostname &&\n    left.port === right.port\n  ) {\n    return true\n  }\n\n  return false\n}\n","import zlib from 'node:zlib'\n\nexport class BrotliDecompressionStream extends TransformStream {\n  constructor() {\n    const decompress = zlib.createBrotliDecompress({\n      flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n      finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH,\n    })\n\n    super({\n      async transform(chunk, controller) {\n        const buffer = Buffer.from(chunk)\n\n        const decompressed = await new Promise<Buffer>((resolve, reject) => {\n          decompress.write(buffer, (error) => {\n            if (error) reject(error)\n          })\n\n          decompress.flush()\n          decompress.once('data', (data) => resolve(data))\n          decompress.once('error', (error) => reject(error))\n          decompress.once('end', () => controller.terminate())\n        }).catch((error) => {\n          controller.error(error)\n        })\n\n        controller.enqueue(decompressed)\n      },\n    })\n  }\n}\n","// Import from an internal alias that resolves to different modules\n// depending on the environment. This way, we can keep the fetch interceptor\n// intact while using different strategies for Brotli decompression.\nimport { BrotliDecompressionStream } from 'internal:brotli-decompress'\n\nclass PipelineStream extends TransformStream {\n  constructor(\n    transformStreams: Array<TransformStream>,\n    ...strategies: Array<QueuingStrategy>\n  ) {\n    super({}, ...strategies)\n\n    const readable = [super.readable as any, ...transformStreams].reduce(\n      (readable, transform) => readable.pipeThrough(transform)\n    )\n\n    Object.defineProperty(this, 'readable', {\n      get() {\n        return readable\n      },\n    })\n  }\n}\n\nexport function parseContentEncoding(contentEncoding: string): Array<string> {\n  return contentEncoding\n    .toLowerCase()\n    .split(',')\n    .map((coding) => coding.trim())\n}\n\nfunction createDecompressionStream(\n  contentEncoding: string\n): TransformStream | null {\n  if (contentEncoding === '') {\n    return null\n  }\n\n  const codings = parseContentEncoding(contentEncoding)\n\n  if (codings.length === 0) {\n    return null\n  }\n\n  const transformers = codings.reduceRight<Array<TransformStream>>(\n    (transformers, coding) => {\n      if (coding === 'gzip' || coding === 'x-gzip') {\n        return transformers.concat(new DecompressionStream('gzip'))\n      } else if (coding === 'deflate') {\n        return transformers.concat(new DecompressionStream('deflate'))\n      } else if (coding === 'br') {\n        return transformers.concat(new BrotliDecompressionStream())\n      } else {\n        transformers.length = 0\n      }\n\n      return transformers\n    },\n    []\n  )\n\n  return new PipelineStream(transformers)\n}\n\nexport function decompressResponse(\n  response: Response\n): ReadableStream<any> | null {\n  if (response.body === null) {\n    return null\n  }\n\n  const decompressionStream = createDecompressionStream(\n    response.headers.get('content-encoding') || ''\n  )\n\n  if (!decompressionStream) {\n    return null\n  }\n\n  // Use `pipeTo` and return the decompression stream's readable\n  // instead of `pipeThrough` because that will lock the original\n  // response stream, making it unusable as the input to Response.\n  response.body.pipeTo(decompressionStream.writable)\n  return decompressionStream.readable\n}\n"],"mappings":"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","ignoreList":[]}