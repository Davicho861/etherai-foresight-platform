{"version":3,"names":["_llm","require","global","fetch","jest","fn","describe","beforeEach","clearAllMocks","it","originalKey","process","env","OPENAI_API_KEY","llm","getLLM","expect","toBeInstanceOf","ChatOpenAI","openAIApiKey","toBe","modelName","OllamaLLM","model","originalModel","OPENAI_MODEL","ollamaLLM","mockResponse","ok","json","mockResolvedValue","output","result","call","toHaveBeenCalledWith","stringContaining","objectContaining","method","headers","body","status","text","rejects","toThrow","testCases","response","results","content","expected","other","result1","generate","generations","result2","result3","OLLAMA_MODEL","originalUrl","OLLAMA_URL","originalTemp","OLLAMA_TEMPERATURE","originalTokens","OLLAMA_MAX_TOKENS","customLLM","url","callBody","JSON","parse","mock","calls","temperature","max_tokens"],"sources":["llm.test.js"],"sourcesContent":["import { getLLM } from '../../src/llm.js';\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe('LLM Module', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getLLM', () => {\n    it('should return ChatOpenAI when OPENAI_API_KEY is set', () => {\n      const originalKey = process.env.OPENAI_API_KEY;\n      process.env.OPENAI_API_KEY = 'test-key';\n\n      const llm = getLLM();\n\n      expect(llm).toBeInstanceOf(require('@langchain/openai').ChatOpenAI);\n      expect(llm.openAIApiKey).toBe('test-key');\n      expect(llm.modelName).toBe('gpt-4o-mini'); // default\n\n      process.env.OPENAI_API_KEY = originalKey;\n    });\n\n    it('should return OllamaLLM when no OPENAI_API_KEY', () => {\n      const originalKey = process.env.OPENAI_API_KEY;\n      delete process.env.OPENAI_API_KEY;\n\n      const llm = getLLM();\n\n      expect(llm).toBeInstanceOf(require('../../src/llm.js').OllamaLLM);\n      expect(llm.model).toBe('llama3'); // default\n\n      process.env.OPENAI_API_KEY = originalKey;\n    });\n\n    it('should use custom OpenAI model when specified', () => {\n      const originalKey = process.env.OPENAI_API_KEY;\n      const originalModel = process.env.OPENAI_MODEL;\n      process.env.OPENAI_API_KEY = 'test-key';\n      process.env.OPENAI_MODEL = 'gpt-4';\n\n      const llm = getLLM();\n\n      expect(llm.modelName).toBe('gpt-4');\n\n      process.env.OPENAI_API_KEY = originalKey;\n      process.env.OPENAI_MODEL = originalModel;\n    });\n  });\n\n  describe('OllamaLLM', () => {\n    let ollamaLLM;\n\n    beforeEach(() => {\n      ollamaLLM = new (require('../../src/llm.js').OllamaLLM)();\n    });\n\n    it('should call Ollama API and return response', async () => {\n      const mockResponse = {\n        ok: true,\n        json: jest.fn().mockResolvedValue({ output: 'Test response' })\n      };\n      fetch.mockResolvedValue(mockResponse);\n\n      const result = await ollamaLLM.call('Test prompt');\n\n      expect(fetch).toHaveBeenCalledWith(\n        expect.stringContaining('ollama-mock:11434'),\n        expect.objectContaining({\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: expect.stringContaining('Test prompt')\n        })\n      );\n      expect(result).toBe('Test response');\n    });\n\n    it('should handle API errors', async () => {\n      const mockResponse = {\n        ok: false,\n        status: 500,\n        text: jest.fn().mockResolvedValue('Server error')\n      };\n      fetch.mockResolvedValue(mockResponse);\n\n      await expect(ollamaLLM.call('Test prompt')).rejects.toThrow('Ollama API error 500: Server error');\n    });\n\n    it('should parse different response formats', async () => {\n      const testCases = [\n        { response: { results: [{ content: 'Content response' }] }, expected: 'Content response' },\n        { response: { output: 'Output response' }, expected: 'Output response' },\n        { response: 'String response', expected: 'String response' },\n        { response: { other: 'data' }, expected: '{\"other\":\"data\"}' }\n      ];\n\n      for (const { response, expected } of testCases) {\n        fetch.mockResolvedValue({\n          ok: true,\n          json: jest.fn().mockResolvedValue(response)\n        });\n\n        const result = await ollamaLLM.call('Test');\n        expect(result).toBe(expected);\n      }\n    });\n\n    it('should handle generate method with different message formats', async () => {\n      fetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ output: 'Generated text' })\n      });\n\n      // Test string input\n      const result1 = await ollamaLLM.generate('Simple string');\n      expect(result1.generations[0][0].text).toBe('Generated text');\n\n      // Test array of objects with content\n      const result2 = await ollamaLLM.generate([{ content: 'Message 1' }, { content: 'Message 2' }]);\n      expect(result2.generations[0][0].text).toBe('Generated text');\n\n      // Test array of objects with text\n      const result3 = await ollamaLLM.generate([{ text: 'Text 1' }, { text: 'Text 2' }]);\n      expect(result3.generations[0][0].text).toBe('Generated text');\n    });\n\n    it('should use environment variables for configuration', () => {\n      const originalModel = process.env.OLLAMA_MODEL;\n      const originalUrl = process.env.OLLAMA_URL;\n      const originalTemp = process.env.OLLAMA_TEMPERATURE;\n      const originalTokens = process.env.OLLAMA_MAX_TOKENS;\n\n      process.env.OLLAMA_MODEL = 'custom-model';\n      process.env.OLLAMA_URL = 'http://custom-url:1234/api/generate';\n      process.env.OLLAMA_TEMPERATURE = '0.5';\n      process.env.OLLAMA_MAX_TOKENS = '2048';\n\n      const customLLM = new (require('../../src/llm.js').OllamaLLM)();\n\n      expect(customLLM.model).toBe('custom-model');\n      expect(customLLM.url).toBe('http://custom-url:1234/api/generate');\n\n      // Test that env vars are used in API call\n      fetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ output: 'Response' })\n      });\n\n      customLLM.call('Test');\n\n      const callBody = JSON.parse(fetch.mock.calls[0][1].body);\n      expect(callBody.temperature).toBe(0.5);\n      expect(callBody.max_tokens).toBe(2048);\n\n      process.env.OLLAMA_MODEL = originalModel;\n      process.env.OLLAMA_URL = originalUrl;\n      process.env.OLLAMA_TEMPERATURE = originalTemp;\n      process.env.OLLAMA_MAX_TOKENS = originalTokens;\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}