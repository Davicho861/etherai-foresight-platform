780282113619f4b28ce81a4dad967d67
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _safeFetch = _interopRequireDefault(require("../lib/safeFetch.js"));
var _forceMocks = require("../lib/force-mocks.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class SIMIntegration {
  constructor() {
    // SIM (Sistema de Información de Mercados) MINAGRI API
    this.baseUrl = process.env.TEST_MODE === 'true' ? 'http://mock-api-server:3001/sim' // internal mock server
    : 'https://sim.minagri.gob.pe/api/v1';
  }
  async getFoodPrices(product, region) {
    try {
      // Attempt to fetch real SIM food prices
      const url = `${this.baseUrl}/precios?producto=${encodeURIComponent(product)}&region=${encodeURIComponent(region)}&fecha=${new Date().toISOString().split('T')[0]}`;
      const data = await (0, _safeFetch.default)(url, {}, {
        timeout: 10000,
        retries: 2
      });

      // Process price data
      const priceData = {
        product: product,
        region: region || 'Lima',
        currentPrice: data.precio_actual || 0,
        minPrice: data.precio_minimo || 0,
        maxPrice: data.precio_maximo || 0,
        averagePrice: data.precio_promedio || 0,
        unit: data.unidad || 'PEN/kg',
        date: data.fecha || new Date().toISOString(),
        source: 'SIM MINAGRI'
      };
      return {
        product,
        region,
        priceData,
        isMock: false
      };
    } catch (error) {
      console.log(`SIMIntegration: API failed for ${product} in ${region}: ${error && error.message}`);
      if (!(0, _forceMocks.forceMocksEnabled)()) {
        throw new Error(`SIMIntegration failure: ${error && error.message ? error.message : String(error)}`);
      }
      const mockPrices = {
        'rice': {
          current: 4.50,
          min: 4.20,
          max: 4.80,
          avg: 4.45
        },
        'potatoes': {
          current: 2.20,
          min: 1.80,
          max: 2.60,
          avg: 2.25
        },
        'corn': {
          current: 3.10,
          min: 2.80,
          max: 3.40,
          avg: 3.15
        },
        'beans': {
          current: 5.80,
          min: 5.20,
          max: 6.50,
          avg: 5.85
        }
      };
      const productData = mockPrices[product.toLowerCase()] || {
        current: 3.00,
        min: 2.50,
        max: 3.50,
        avg: 3.00
      };
      return {
        product,
        region,
        priceData: {
          product,
          region: region || 'Lima',
          currentPrice: productData.current,
          minPrice: productData.min,
          maxPrice: productData.max,
          averagePrice: productData.avg,
          unit: 'PEN/kg',
          date: new Date().toISOString(),
          source: 'FALLBACK_MOCK:SIM'
        },
        isMock: true
      };
    }
  }
  async getPriceHistory(product, region, days = 30) {
    try {
      // Attempt to fetch real SIM price history
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(endDate.getDate() - days);
      const url = `${this.baseUrl}/precios/historico?producto=${encodeURIComponent(product)}&region=${encodeURIComponent(region)}&fecha_inicio=${startDate.toISOString().split('T')[0]}&fecha_fin=${endDate.toISOString().split('T')[0]}`;
      const data = await (0, _safeFetch.default)(url, {}, {
        timeout: 10000,
        retries: 2
      });

      // Process historical price data
      const historyData = (data.precios || []).map(item => ({
        date: item.fecha,
        price: item.precio,
        volume: item.volumen || 0
      }));
      return {
        product,
        region,
        historyData,
        isMock: false
      };
    } catch (error) {
      console.log(`SIMIntegration: API failed for ${product} in ${region}: ${error && error.message}`);
      if (!(0, _forceMocks.forceMocksEnabled)()) {
        throw new Error(`SIMIntegration failure: ${error && error.message ? error.message : String(error)}`);
      }
      // Generate mock historical data
      const historyData = [];
      const basePrice = {
        rice: 4.50,
        potatoes: 2.20,
        corn: 3.10,
        beans: 5.80
      }[product.toLowerCase()] || 3.00;
      for (let i = days; i >= 0; i--) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        const variation = (Math.random() - 0.5) * 0.4; // ±20% variation
        const price = Math.max(0.1, basePrice + variation);
        historyData.push({
          date: date.toISOString().split('T')[0],
          price: Math.round(price * 100) / 100,
          volume: Math.floor(Math.random() * 1000) + 100
        });
      }
      return {
        product,
        region,
        historyData,
        isMock: true,
        source: 'FALLBACK_MOCK:SIM'
      };
    }
  }
  async getVolatilityIndex(product, region) {
    try {
      // Attempt to fetch real SIM volatility data
      const url = `${this.baseUrl}/volatilidad?producto=${encodeURIComponent(product)}&region=${encodeURIComponent(region)}`;
      const data = await (0, _safeFetch.default)(url, {}, {
        timeout: 10000,
        retries: 2
      });
      return {
        product,
        region,
        volatilityIndex: data.indice_volatilidad || 0,
        riskLevel: data.nivel_riesgo || 'medium',
        isMock: false
      };
    } catch (error) {
      console.log(`SIMIntegration: API failed for ${product} in ${region}: ${error && error.message}`);
      if (!(0, _forceMocks.forceMocksEnabled)()) {
        throw new Error(`SIMIntegration failure: ${error && error.message ? error.message : String(error)}`);
      }
      const volatilities = {
        'rice': 0.12,
        'potatoes': 0.18,
        'corn': 0.15,
        'beans': 0.09
      };
      const volatility = volatilities[product.toLowerCase()] || 0.15;
      const riskLevel = volatility > 0.15 ? 'high' : volatility > 0.10 ? 'medium' : 'low';
      return {
        product,
        region,
        volatilityIndex: volatility,
        riskLevel,
        isMock: true,
        source: 'FALLBACK_MOCK:SIM'
      };
    }
  }
}
var _default = exports.default = SIMIntegration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,