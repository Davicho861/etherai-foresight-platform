6683f02c5768f91fb21bcc0a0c8d36dd
"use strict";

var _server = require("../mocks/server.js");
// Tests for SIMIntegration

describe('SIMIntegration', () => {
  beforeAll(() => {
    _server.server.listen();
  });
  afterAll(() => {
    _server.server.close();
  });
  afterEach(() => {
    jest.resetModules();
    jest.restoreAllMocks();
  });
  test('returns mock when fetch fails for getFoodPrices', async () => {
    await jest.isolateModules(async () => {
      let SIMIntegration = require('../../src/integrations/SIMIntegration.js');
      if (SIMIntegration && SIMIntegration.default) SIMIntegration = SIMIntegration.default;
      const sim = new SIMIntegration();
      const res = await sim.getFoodPrices('rice', 'Lima');
      expect(res).toBeDefined();
      expect(res.isMock).toBe(true);
      expect(res.priceData.currentPrice).toBeGreaterThan(0);
    });
  });
  test('parses real response for getFoodPrices', async () => {
    await jest.isolateModules(async () => {
      let SIMIntegration = require('../../src/integrations/SIMIntegration.js');
      if (SIMIntegration && SIMIntegration.default) SIMIntegration = SIMIntegration.default;
      const sim = new SIMIntegration();
      const res = await sim.getFoodPrices('rice', 'Lima');
      expect(res).toBeDefined();
      expect(res.isMock).toBe(true); // MSW always returns mock data
      expect(res.priceData.currentPrice).toBeCloseTo(4.5);
    });
  });
  test('getPriceHistory returns mock when API fails', async () => {
    await jest.isolateModules(async () => {
      let SIMIntegration = require('../../src/integrations/SIMIntegration.js');
      if (SIMIntegration && SIMIntegration.default) SIMIntegration = SIMIntegration.default;
      const sim = new SIMIntegration();
      const res = await sim.getPriceHistory('potatoes', 'Cusco', 5);
      expect(res).toBeDefined();
      expect(res.isMock).toBe(true);
      expect(Array.isArray(res.historyData)).toBe(true);
    });
  });
  test('getVolatilityIndex parses real response', async () => {
    await jest.isolateModules(async () => {
      let SIMIntegration = require('../../src/integrations/SIMIntegration.js');
      if (SIMIntegration && SIMIntegration.default) SIMIntegration = SIMIntegration.default;
      const sim = new SIMIntegration();
      const res = await sim.getVolatilityIndex('rice', 'Lima');
      expect(res).toBeDefined();
      expect(res.isMock).toBe(true); // MSW always returns mock data
      expect(typeof res.volatilityIndex).toBe('number');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2VydmVyIiwicmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwic2VydmVyIiwibGlzdGVuIiwiYWZ0ZXJBbGwiLCJjbG9zZSIsImFmdGVyRWFjaCIsImplc3QiLCJyZXNldE1vZHVsZXMiLCJyZXN0b3JlQWxsTW9ja3MiLCJ0ZXN0IiwiaXNvbGF0ZU1vZHVsZXMiLCJTSU1JbnRlZ3JhdGlvbiIsImRlZmF1bHQiLCJzaW0iLCJyZXMiLCJnZXRGb29kUHJpY2VzIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJpc01vY2siLCJ0b0JlIiwicHJpY2VEYXRhIiwiY3VycmVudFByaWNlIiwidG9CZUdyZWF0ZXJUaGFuIiwidG9CZUNsb3NlVG8iLCJnZXRQcmljZUhpc3RvcnkiLCJBcnJheSIsImlzQXJyYXkiLCJoaXN0b3J5RGF0YSIsImdldFZvbGF0aWxpdHlJbmRleCIsInZvbGF0aWxpdHlJbmRleCJdLCJzb3VyY2VzIjpbInNpbUludGVncmF0aW9uLnVuaXQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUZXN0cyBmb3IgU0lNSW50ZWdyYXRpb25cbmltcG9ydCB7IHNlcnZlciB9IGZyb20gJy4uL21vY2tzL3NlcnZlci5qcyc7XG5cbmRlc2NyaWJlKCdTSU1JbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBzZXJ2ZXIubGlzdGVuKCk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKCgpID0+IHtcbiAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0TW9kdWxlcygpO1xuICAgIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JldHVybnMgbW9jayB3aGVuIGZldGNoIGZhaWxzIGZvciBnZXRGb29kUHJpY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGplc3QuaXNvbGF0ZU1vZHVsZXMoYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IFNJTUludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vLi4vc3JjL2ludGVncmF0aW9ucy9TSU1JbnRlZ3JhdGlvbi5qcycpO1xuICAgICAgaWYgKFNJTUludGVncmF0aW9uICYmIFNJTUludGVncmF0aW9uLmRlZmF1bHQpIFNJTUludGVncmF0aW9uID0gU0lNSW50ZWdyYXRpb24uZGVmYXVsdDtcblxuICAgICAgY29uc3Qgc2ltID0gbmV3IFNJTUludGVncmF0aW9uKCk7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBzaW0uZ2V0Rm9vZFByaWNlcygncmljZScsICdMaW1hJyk7XG4gICAgICBleHBlY3QocmVzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlcy5pc01vY2spLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzLnByaWNlRGF0YS5jdXJyZW50UHJpY2UpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncGFyc2VzIHJlYWwgcmVzcG9uc2UgZm9yIGdldEZvb2RQcmljZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgamVzdC5pc29sYXRlTW9kdWxlcyhhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgU0lNSW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi8uLi9zcmMvaW50ZWdyYXRpb25zL1NJTUludGVncmF0aW9uLmpzJyk7XG4gICAgICBpZiAoU0lNSW50ZWdyYXRpb24gJiYgU0lNSW50ZWdyYXRpb24uZGVmYXVsdCkgU0lNSW50ZWdyYXRpb24gPSBTSU1JbnRlZ3JhdGlvbi5kZWZhdWx0O1xuXG4gICAgICBjb25zdCBzaW0gPSBuZXcgU0lNSW50ZWdyYXRpb24oKTtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHNpbS5nZXRGb29kUHJpY2VzKCdyaWNlJywgJ0xpbWEnKTtcbiAgICAgIGV4cGVjdChyZXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzLmlzTW9jaykudG9CZSh0cnVlKTsgLy8gTVNXIGFsd2F5cyByZXR1cm5zIG1vY2sgZGF0YVxuICAgICAgZXhwZWN0KHJlcy5wcmljZURhdGEuY3VycmVudFByaWNlKS50b0JlQ2xvc2VUbyg0LjUpO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdnZXRQcmljZUhpc3RvcnkgcmV0dXJucyBtb2NrIHdoZW4gQVBJIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGplc3QuaXNvbGF0ZU1vZHVsZXMoYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IFNJTUludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vLi4vc3JjL2ludGVncmF0aW9ucy9TSU1JbnRlZ3JhdGlvbi5qcycpO1xuICAgICAgaWYgKFNJTUludGVncmF0aW9uICYmIFNJTUludGVncmF0aW9uLmRlZmF1bHQpIFNJTUludGVncmF0aW9uID0gU0lNSW50ZWdyYXRpb24uZGVmYXVsdDtcblxuICAgICAgY29uc3Qgc2ltID0gbmV3IFNJTUludGVncmF0aW9uKCk7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBzaW0uZ2V0UHJpY2VIaXN0b3J5KCdwb3RhdG9lcycsICdDdXNjbycsIDUpO1xuICAgICAgZXhwZWN0KHJlcykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXMuaXNNb2NrKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzLmhpc3RvcnlEYXRhKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnZ2V0Vm9sYXRpbGl0eUluZGV4IHBhcnNlcyByZWFsIHJlc3BvbnNlJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGplc3QuaXNvbGF0ZU1vZHVsZXMoYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IFNJTUludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vLi4vc3JjL2ludGVncmF0aW9ucy9TSU1JbnRlZ3JhdGlvbi5qcycpO1xuICAgICAgaWYgKFNJTUludGVncmF0aW9uICYmIFNJTUludGVncmF0aW9uLmRlZmF1bHQpIFNJTUludGVncmF0aW9uID0gU0lNSW50ZWdyYXRpb24uZGVmYXVsdDtcblxuICAgICAgY29uc3Qgc2ltID0gbmV3IFNJTUludGVncmF0aW9uKCk7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBzaW0uZ2V0Vm9sYXRpbGl0eUluZGV4KCdyaWNlJywgJ0xpbWEnKTtcbiAgICAgIGV4cGVjdChyZXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzLmlzTW9jaykudG9CZSh0cnVlKTsgLy8gTVNXIGFsd2F5cyByZXR1cm5zIG1vY2sgZGF0YVxuICAgICAgZXhwZWN0KHR5cGVvZiByZXMudm9sYXRpbGl0eUluZGV4KS50b0JlKCdudW1iZXInKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFEQTs7QUFHQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLE1BQU07RUFDL0JDLFNBQVMsQ0FBQyxNQUFNO0lBQ2RDLGNBQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUM7RUFDakIsQ0FBQyxDQUFDO0VBRUZDLFFBQVEsQ0FBQyxNQUFNO0lBQ2JGLGNBQU0sQ0FBQ0csS0FBSyxDQUFDLENBQUM7RUFDaEIsQ0FBQyxDQUFDO0VBRUZDLFNBQVMsQ0FBQyxNQUFNO0lBQ2RDLElBQUksQ0FBQ0MsWUFBWSxDQUFDLENBQUM7SUFDbkJELElBQUksQ0FBQ0UsZUFBZSxDQUFDLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxpREFBaUQsRUFBRSxZQUFZO0lBQ2xFLE1BQU1ILElBQUksQ0FBQ0ksY0FBYyxDQUFDLFlBQVk7TUFDcEMsSUFBSUMsY0FBYyxHQUFHYixPQUFPLENBQUMsMENBQTBDLENBQUM7TUFDeEUsSUFBSWEsY0FBYyxJQUFJQSxjQUFjLENBQUNDLE9BQU8sRUFBRUQsY0FBYyxHQUFHQSxjQUFjLENBQUNDLE9BQU87TUFFckYsTUFBTUMsR0FBRyxHQUFHLElBQUlGLGNBQWMsQ0FBQyxDQUFDO01BQ2hDLE1BQU1HLEdBQUcsR0FB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