{"version":3,"names":["_server","require","describe","beforeAll","server","listen","afterAll","close","afterEach","jest","resetModules","restoreAllMocks","test","isolateModules","SIMIntegration","default","sim","res","getFoodPrices","expect","toBeDefined","isMock","toBe","priceData","currentPrice","toBeGreaterThan","toBeCloseTo","getPriceHistory","Array","isArray","historyData","getVolatilityIndex","volatilityIndex"],"sources":["simIntegration.unit.test.js"],"sourcesContent":["// Tests for SIMIntegration\nimport { server } from '../mocks/server.js';\n\ndescribe('SIMIntegration', () => {\n  beforeAll(() => {\n    server.listen();\n  });\n\n  afterAll(() => {\n    server.close();\n  });\n\n  afterEach(() => {\n    jest.resetModules();\n    jest.restoreAllMocks();\n  });\n\n  test('returns mock when fetch fails for getFoodPrices', async () => {\n    await jest.isolateModules(async () => {\n      let SIMIntegration = require('../../src/integrations/SIMIntegration.js');\n      if (SIMIntegration && SIMIntegration.default) SIMIntegration = SIMIntegration.default;\n\n      const sim = new SIMIntegration();\n      const res = await sim.getFoodPrices('rice', 'Lima');\n      expect(res).toBeDefined();\n      expect(res.isMock).toBe(true);\n      expect(res.priceData.currentPrice).toBeGreaterThan(0);\n    });\n  });\n\n  test('parses real response for getFoodPrices', async () => {\n    await jest.isolateModules(async () => {\n      let SIMIntegration = require('../../src/integrations/SIMIntegration.js');\n      if (SIMIntegration && SIMIntegration.default) SIMIntegration = SIMIntegration.default;\n\n      const sim = new SIMIntegration();\n      const res = await sim.getFoodPrices('rice', 'Lima');\n      expect(res).toBeDefined();\n      expect(res.isMock).toBe(true); // MSW always returns mock data\n      expect(res.priceData.currentPrice).toBeCloseTo(4.5);\n    });\n  });\n\n  test('getPriceHistory returns mock when API fails', async () => {\n    await jest.isolateModules(async () => {\n      let SIMIntegration = require('../../src/integrations/SIMIntegration.js');\n      if (SIMIntegration && SIMIntegration.default) SIMIntegration = SIMIntegration.default;\n\n      const sim = new SIMIntegration();\n      const res = await sim.getPriceHistory('potatoes', 'Cusco', 5);\n      expect(res).toBeDefined();\n      expect(res.isMock).toBe(true);\n      expect(Array.isArray(res.historyData)).toBe(true);\n    });\n  });\n\n  test('getVolatilityIndex parses real response', async () => {\n    await jest.isolateModules(async () => {\n      let SIMIntegration = require('../../src/integrations/SIMIntegration.js');\n      if (SIMIntegration && SIMIntegration.default) SIMIntegration = SIMIntegration.default;\n\n      const sim = new SIMIntegration();\n      const res = await sim.getVolatilityIndex('rice', 'Lima');\n      expect(res).toBeDefined();\n      expect(res.isMock).toBe(true); // MSW always returns mock data\n      expect(typeof res.volatilityIndex).toBe('number');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}