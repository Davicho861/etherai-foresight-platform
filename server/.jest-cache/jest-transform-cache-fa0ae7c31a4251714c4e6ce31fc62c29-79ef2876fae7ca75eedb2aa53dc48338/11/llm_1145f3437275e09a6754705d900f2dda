e0c1a752db27cdc099f6b8b3a52ed2d0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OllamaLLM = void 0;
exports.getLLM = getLLM;
var _openai = require("@langchain/openai");
require("dotenv/config");
class OllamaLLM {
  constructor(opts = {}) {
    this.model = opts.model || process.env.OLLAMA_MODEL || 'llama3';
    this.url = opts.url || process.env.OLLAMA_URL || 'http://ollama-mock:11434/api/generate';
  }
  async _callOllama(prompt) {
    const body = {
      model: this.model,
      prompt,
      temperature: Number(process.env.OLLAMA_TEMPERATURE || 0.2),
      max_tokens: Number(process.env.OLLAMA_MAX_TOKENS || 1024)
    };
    const resp = await fetch(this.url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    });
    if (!resp.ok) {
      const txt = await resp.text().catch(() => '');
      throw new Error(`Ollama API error ${resp.status}: ${txt}`);
    }
    const data = await resp.json();
    if (data?.results && data.results[0]?.content) return data.results[0].content;
    if (data?.output) return data.output;
    if (typeof data === 'string') return data;
    return JSON.stringify(data);
  }
  async generate(messages) {
    let prompt = '';
    if (Array.isArray(messages)) {
      prompt = messages.map(m => m.content || m).join('\n');
    } else if (typeof messages === 'string') {
      prompt = messages;
    } else if (messages && messages[0] && messages[0].text) {
      prompt = messages.map(m => m.text).join('\n');
    }
    const text = await this._callOllama(prompt);
    return {
      generations: [[{
        text
      }]]
    };
  }
  async call(input) {
    const prompt = typeof input === 'string' ? input : input?.prompt || JSON.stringify(input);
    return await this._callOllama(prompt);
  }
}
exports.OllamaLLM = OllamaLLM;
function getLLM() {
  if (process.env.OPENAI_API_KEY) {
    return new _openai.ChatOpenAI({
      openAIApiKey: process.env.OPENAI_API_KEY,
      modelName: process.env.OPENAI_MODEL || 'gpt-4o-mini'
    });
  }
  return new OllamaLLM({
    model: process.env.OLLAMA_MODEL || 'llama3',
    url: process.env.OLLAMA_URL
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb3BlbmFpIiwicmVxdWlyZSIsIk9sbGFtYUxMTSIsImNvbnN0cnVjdG9yIiwib3B0cyIsIm1vZGVsIiwicHJvY2VzcyIsImVudiIsIk9MTEFNQV9NT0RFTCIsInVybCIsIk9MTEFNQV9VUkwiLCJfY2FsbE9sbGFtYSIsInByb21wdCIsImJvZHkiLCJ0ZW1wZXJhdHVyZSIsIk51bWJlciIsIk9MTEFNQV9URU1QRVJBVFVSRSIsIm1heF90b2tlbnMiLCJPTExBTUFfTUFYX1RPS0VOUyIsInJlc3AiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJ0eHQiLCJ0ZXh0IiwiY2F0Y2giLCJFcnJvciIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwicmVzdWx0cyIsImNvbnRlbnQiLCJvdXRwdXQiLCJnZW5lcmF0ZSIsIm1lc3NhZ2VzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwibSIsImpvaW4iLCJnZW5lcmF0aW9ucyIsImNhbGwiLCJpbnB1dCIsImV4cG9ydHMiLCJnZXRMTE0iLCJPUEVOQUlfQVBJX0tFWSIsIkNoYXRPcGVuQUkiLCJvcGVuQUlBcGlLZXkiLCJtb2RlbE5hbWUiLCJPUEVOQUlfTU9ERUwiXSwic291cmNlcyI6WyJsbG0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdE9wZW5BSSB9IGZyb20gJ0BsYW5nY2hhaW4vb3BlbmFpJztcbmltcG9ydCAnZG90ZW52L2NvbmZpZyc7XG5cbmNsYXNzIE9sbGFtYUxMTSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHRoaXMubW9kZWwgPSBvcHRzLm1vZGVsIHx8IHByb2Nlc3MuZW52Lk9MTEFNQV9NT0RFTCB8fCAnbGxhbWEzJztcbiAgICB0aGlzLnVybCA9IG9wdHMudXJsIHx8IHByb2Nlc3MuZW52Lk9MTEFNQV9VUkwgfHwgJ2h0dHA6Ly9vbGxhbWEtbW9jazoxMTQzNC9hcGkvZ2VuZXJhdGUnO1xuICB9XG5cbiAgYXN5bmMgX2NhbGxPbGxhbWEocHJvbXB0KSB7XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxuICAgICAgcHJvbXB0LFxuICAgICAgdGVtcGVyYXR1cmU6IE51bWJlcihwcm9jZXNzLmVudi5PTExBTUFfVEVNUEVSQVRVUkUgfHwgMC4yKSxcbiAgICAgIG1heF90b2tlbnM6IE51bWJlcihwcm9jZXNzLmVudi5PTExBTUFfTUFYX1RPS0VOUyB8fCAxMDI0KVxuICAgIH07XG5cbiAgICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2godGhpcy51cmwsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KVxuICAgIH0pO1xuICAgIGlmICghcmVzcC5vaykge1xuICAgICAgY29uc3QgdHh0ID0gYXdhaXQgcmVzcC50ZXh0KCkuY2F0Y2goKCkgPT4gJycpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPbGxhbWEgQVBJIGVycm9yICR7cmVzcC5zdGF0dXN9OiAke3R4dH1gKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3AuanNvbigpO1xuICAgIGlmIChkYXRhPy5yZXN1bHRzICYmIGRhdGEucmVzdWx0c1swXT8uY29udGVudCkgcmV0dXJuIGRhdGEucmVzdWx0c1swXS5jb250ZW50O1xuICAgIGlmIChkYXRhPy5vdXRwdXQpIHJldHVybiBkYXRhLm91dHB1dDtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSByZXR1cm4gZGF0YTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZShtZXNzYWdlcykge1xuICAgIGxldCBwcm9tcHQgPSAnJztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlcykpIHtcbiAgICAgIHByb21wdCA9IG1lc3NhZ2VzLm1hcChtID0+IChtLmNvbnRlbnQgfHwgbSkpLmpvaW4oJ1xcbicpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2VzID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvbXB0ID0gbWVzc2FnZXM7XG4gICAgfSBlbHNlIGlmIChtZXNzYWdlcyAmJiBtZXNzYWdlc1swXSAmJiBtZXNzYWdlc1swXS50ZXh0KSB7XG4gICAgICBwcm9tcHQgPSBtZXNzYWdlcy5tYXAobSA9PiBtLnRleHQpLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0ID0gYXdhaXQgdGhpcy5fY2FsbE9sbGFtYShwcm9tcHQpO1xuICAgIHJldHVybiB7IGdlbmVyYXRpb25zOiBbW3sgdGV4dCB9XV0gfTtcbiAgfVxuXG4gIGFzeW5jIGNhbGwoaW5wdXQpIHtcbiAgICBjb25zdCBwcm9tcHQgPSB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnID8gaW5wdXQgOiAoaW5wdXQ/LnByb21wdCB8fCBKU09OLnN0cmluZ2lmeShpbnB1dCkpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9jYWxsT2xsYW1hKHByb21wdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TExNKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkpIHtcbiAgICByZXR1cm4gbmV3IENoYXRPcGVuQUkoe1xuICAgICAgb3BlbkFJQXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSxcbiAgICAgIG1vZGVsTmFtZTogcHJvY2Vzcy5lbnYuT1BFTkFJX01PREVMIHx8ICdncHQtNG8tbWluaScsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBPbGxhbWFMTE0oeyBtb2RlbDogcHJvY2Vzcy5lbnYuT0xMQU1BX01PREVMIHx8ICdsbGFtYTMnLCB1cmw6IHByb2Nlc3MuZW52Lk9MTEFNQV9VUkwgfSk7XG59XG5cbmV4cG9ydCB7IGdldExMTSwgT2xsYW1hTExNIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFB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