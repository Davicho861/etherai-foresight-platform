7566603e713ccd3a2d5a70bc12871a57
"use strict";

var _server = require("../mocks/server.js");
var _supertest = _interopRequireDefault(require("supertest"));
var _express = _interopRequireDefault(require("express"));
var _seismic = _interopRequireDefault(require("../../src/routes/seismic.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('Seismic Routes', () => {
  let app;
  beforeAll(() => {
    _server.server.listen();
  });
  afterAll(() => {
    _server.server.close();
  });
  beforeEach(() => {
    // Create express app with the router
    app = (0, _express.default)();
    app.use(_express.default.json());
    app.use('/api/seismic', _seismic.default);
  });
  describe('GET /api/seismic/activity', () => {
    it('should return processed seismic activity with risk scores', async () => {
      const response = await (0, _supertest.default)(app).get('/api/seismic/activity');
      expect(response.status).toBe(200);
      expect(Array.isArray(response.body)).toBe(true);
      expect(response.body).toHaveLength(1);
      expect(response.body[0]).toMatchObject({
        id: 'test1',
        place: expect.any(String),
        magnitude: expect.any(Number),
        riskScore: expect.any(Number)
      });
    });
  });
  describe('GET /api/seismic/risk', () => {
    it('should return geophysical risk prediction', async () => {
      const response = await (0, _supertest.default)(app).get('/api/seismic/risk');
      expect(response.status).toBe(200);
      expect(response.body).toMatchObject({
        overallRisk: expect.any(Number),
        eventCount: 1,
        maxMagnitude: 6.0,
        highRiskZones: expect.any(Array)
      });
    });
    it('should handle no seismic events', async () => {
      const response = await (0, _supertest.default)(app).get('/api/seismic/risk');
      expect(response.status).toBe(200);
      expect(typeof response.body.overallRisk).toBe('number');
      expect(typeof response.body.eventCount).toBe('number');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2VydmVyIiwicmVxdWlyZSIsIl9zdXBlcnRlc3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2V4cHJlc3MiLCJfc2Vpc21pYyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRlc2NyaWJlIiwiYXBwIiwiYmVmb3JlQWxsIiwic2VydmVyIiwibGlzdGVuIiwiYWZ0ZXJBbGwiLCJjbG9zZSIsImJlZm9yZUVhY2giLCJleHByZXNzIiwidXNlIiwianNvbiIsInNlaXNtaWNSb3V0ZXIiLCJpdCIsInJlc3BvbnNlIiwicmVxdWVzdCIsImdldCIsImV4cGVjdCIsInN0YXR1cyIsInRvQmUiLCJBcnJheSIsImlzQXJyYXkiLCJib2R5IiwidG9IYXZlTGVuZ3RoIiwidG9NYXRjaE9iamVjdCIsImlkIiwicGxhY2UiLCJhbnkiLCJTdHJpbmciLCJtYWduaXR1ZGUiLCJOdW1iZXIiLCJyaXNrU2NvcmUiLCJvdmVyYWxsUmlzayIsImV2ZW50Q291bnQiLCJtYXhNYWduaXR1ZGUiLCJoaWdoUmlza1pvbmVzIl0sInNvdXJjZXMiOlsic2Vpc21pYy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlcnZlciB9IGZyb20gJy4uL21vY2tzL3NlcnZlci5qcyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdzdXBlcnRlc3QnO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgc2Vpc21pY1JvdXRlciBmcm9tICcuLi8uLi9zcmMvcm91dGVzL3NlaXNtaWMuanMnO1xuXG5kZXNjcmliZSgnU2Vpc21pYyBSb3V0ZXMnLCAoKSA9PiB7XG4gIGxldCBhcHA7XG5cbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBzZXJ2ZXIubGlzdGVuKCk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKCgpID0+IHtcbiAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gQ3JlYXRlIGV4cHJlc3MgYXBwIHdpdGggdGhlIHJvdXRlclxuICAgIGFwcCA9IGV4cHJlc3MoKTtcbiAgICBhcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbiAgICBhcHAudXNlKCcvYXBpL3NlaXNtaWMnLCBzZWlzbWljUm91dGVyKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL3NlaXNtaWMvYWN0aXZpdHknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gcHJvY2Vzc2VkIHNlaXNtaWMgYWN0aXZpdHkgd2l0aCByaXNrIHNjb3JlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL2FwaS9zZWlzbWljL2FjdGl2aXR5Jyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlc3BvbnNlLmJvZHkpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5WzBdKS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgaWQ6ICd0ZXN0MScsXG4gICAgICAgIHBsYWNlOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICAgIG1hZ25pdHVkZTogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICByaXNrU2NvcmU6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnR0VUIC9hcGkvc2Vpc21pYy9yaXNrJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGdlb3BoeXNpY2FsIHJpc2sgcHJlZGljdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL2FwaS9zZWlzbWljL3Jpc2snKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICBvdmVyYWxsUmlzazogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICBldmVudENvdW50OiAxLFxuICAgICAgICBtYXhNYWduaXR1ZGU6IDYuMCxcbiAgICAgICAgaGlnaFJpc2tab25lczogZXhwZWN0LmFueShBcnJheSksXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG5vIHNlaXNtaWMgZXZlbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvYXBpL3NlaXNtaWMvcmlzaycpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QodHlwZW9mIHJlc3BvbnNlLmJvZHkub3ZlcmFsbFJpc2spLnRvQmUoJ251bWJlcicpO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXNwb25zZS5ib2R5LmV2ZW50Q291bnQpLnRvQmUoJ251bWJlcicpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxRQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFBd0QsU0FBQUUsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFeERHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNO0VBQy9CLElBQUlDLEdBQUc7RUFFUEMsU0FBUyxDQUFDLE1BQU07SUFDZEMsY0FBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQztFQUNqQixDQUFD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