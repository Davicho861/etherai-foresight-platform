{"version":3,"names":["_nodeFetch","data","_interopRequireDefault","require","_fs","_path","e","__esModule","default","defaultFetch","global","fetch","USER_AGENTS","safeFetch","url","opts","timeout","retries","attempt","controller","AbortController","id","setTimeout","abort","headers","length","fetchImpl","res","signal","clearTimeout","ok","errText","text","catch","json","j","JSON","stringify","_e","logPath","path","resolve","process","cwd","fs","mkdirSync","dirname","recursive","entry","Date","toISOString","status","slice","appendFileSync","Error","ct","get","toLowerCase","includes","Promise","parseErr","message","String","bodyText","err","delay","Math","floor","random","r","_default","exports"],"sources":["safeFetch.js"],"sourcesContent":["// Minimal safeFetch helper: timeout, retries, JSON parse guard\nimport fetch from 'node-fetch';\n// Prefer a global fetch (jest mock) when available so tests that set global.mockFetch\n// or global.fetch will be effective. Otherwise fall back to imported node-fetch.\nconst defaultFetch = typeof global.fetch !== 'undefined' ? global.fetch : fetch;\nimport fs from 'fs';\nimport path from 'path';\n\nconst USER_AGENTS = [\n  'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n  'Praevisio/1.0 (+https://praevisio.local)'\n];\n\nasync function safeFetch(url, opts = {}, { timeout = 8000, retries = 2 } = {}) {\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    const controller = new AbortController();\n    const id = setTimeout(() => controller.abort(), timeout);\n    try {\n      const headers = { ...(opts.headers || {}), 'Accept': 'application/json, text/plain, */*', 'User-Agent': USER_AGENTS[attempt % USER_AGENTS.length] };\n      const fetchImpl = typeof defaultFetch === 'function' ? defaultFetch : fetch;\n      const res = await fetchImpl(url, { ...opts, headers, signal: controller.signal });\n      clearTimeout(id);\n      if (!res.ok) {\n          // Try to safely read body/text for error reporting. Some test mocks may not\n          // implement res.text(), so guard against that.\n          let errText = '';\n          if (res && typeof res.text === 'function') {\n            errText = await res.text().catch(() => '');\n          } else if (res && typeof res.json === 'function') {\n            try {\n              const j = await res.json();\n              errText = typeof j === 'string' ? j : JSON.stringify(j);\n            } catch (_e) {\n              errText = '';\n            }\n          }\n          // Log raw error response for debugging\n          try {\n            const logPath = path.resolve(process.cwd(), 'tmp', 'integration_errors.log');\n            fs.mkdirSync(path.dirname(logPath), { recursive: true });\n            const entry = `[${new Date().toISOString()}] HTTP ${res.status} GET ${url} \\n${errText.slice(0,200)}\\n\\n`;\n            fs.appendFileSync(logPath, entry);\n          } catch (e) {\n            // ignore logging errors\n          }\n          throw new Error(`HTTP ${res.status}: ${errText}`);\n      }\n        // Detect content-type in a defensive way: test mocks may supply headers as a\n        // simple object without a .get() method. Prefer headers.get if available.\n        let ct = '';\n        try {\n          if (res && res.headers) {\n            if (typeof res.headers.get === 'function') {\n              ct = res.headers.get('content-type') || '';\n            } else if (res.headers['content-type']) {\n              ct = res.headers['content-type'];\n            }\n          }\n        } catch (e) {\n          ct = '';\n        }\n\n        // Some mocks simply provide a json() method but no headers â€” assume JSON\n        if (!ct && res && typeof res.json === 'function') {\n          ct = 'application/json';\n        }\n\n        if (ct && ct.toLowerCase().includes('application/json')) {\n          try {\n            return await (typeof res.json === 'function' ? res.json() : Promise.resolve(null));\n          } catch (parseErr) {\n            // Log invalid JSON parse for debugging\n            try {\n              const logPath = path.resolve(process.cwd(), 'tmp', 'integration_errors.log');\n              fs.mkdirSync(path.dirname(logPath), { recursive: true });\n              const entry = `[${new Date().toISOString()}] Invalid JSON GET ${url} \\nparseError: ${parseErr && parseErr.message ? parseErr.message : String(parseErr)}\\n\\n`;\n              fs.appendFileSync(logPath, entry);\n            } catch (e) {}\n            throw new Error(`Invalid JSON response: ${parseErr && parseErr.message ? parseErr.message : String(parseErr)}`);\n          }\n        }\n\n        // If we received a non-JSON body (likely HTML blocking page), try to read text()\n        let bodyText = '';\n        if (res && typeof res.text === 'function') {\n          bodyText = await res.text().catch(() => '');\n        } else if (res && typeof res.json === 'function') {\n          try {\n            const j = await res.json();\n            bodyText = typeof j === 'string' ? j : JSON.stringify(j);\n          } catch (_e) {\n            bodyText = '';\n          }\n        }\n        // Log non-JSON body for debugging (first 2000 chars)\n        try {\n          const logPath = path.resolve(process.cwd(), 'tmp', 'integration_errors.log');\n          fs.mkdirSync(path.dirname(logPath), { recursive: true });\n          const entry = `[${new Date().toISOString()}] Non-JSON GET ${url} \\ncontent-type: ${ct} \\nbody: ${bodyText.slice(0,2000)}\\n\\n`;\n          fs.appendFileSync(logPath, entry);\n        } catch (e) {}\n        throw new Error(`Non-JSON response (content-type: ${ct}): ${bodyText.slice(0, 200)}`);\n    } catch (err) {\n      clearTimeout(id);\n      if (attempt === retries) throw err;\n      // exponential-ish backoff with jitter\n      const delay = 300 + attempt * 500 + Math.floor(Math.random() * 200);\n      await new Promise(r => setTimeout(r, delay));\n    }\n  }\n}\n\nexport default safeFetch;\n"],"mappings":"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","ignoreList":[]}