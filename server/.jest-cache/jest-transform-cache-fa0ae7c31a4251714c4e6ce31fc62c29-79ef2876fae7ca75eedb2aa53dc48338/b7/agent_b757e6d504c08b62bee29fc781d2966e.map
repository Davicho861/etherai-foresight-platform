{"version":3,"names":["_express","data","_interopRequireDefault","require","_nanoid","kernelModule","_interopRequireWildcard","_eventHub","_cache","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","kernel","router","express","Router","activeStreams","Map","post","req","res","missionContract","body","status","json","error","missionId","nanoid","startMission","log","conns","forEach","c","write","JSON","stringify","err","console","id","title","description","parameters","target","scope","params","writeHead","Connection","push","mission","getMissionLogs","logs","l","unsub","subscribe","ev","on","indexOf","splice","length","delete","cacheKey","cachedStatus","cache","getVigilanceStatus","reportContent","Date","toISOString","flows","autoPreservation","active","lastRun","knowledge","prophecy","entries","riskIndices","map","country","riskScore","toFixed","level","join","activityFeed","entry","timestamp","flow","message","fs","path","reportPath","resolve","process","cwd","writeFileSync","_default","exports"],"sources":["agent.js"],"sourcesContent":["import express from 'express';\nimport { nanoid } from 'nanoid';\nimport * as kernelModule from '../orchestrator.js';\nconst kernel = kernelModule.kernel || (kernelModule.default && kernelModule.default.kernel) || kernelModule;\nimport { subscribe } from '../eventHub.js';\nimport cache from '../cache.js';\n\nconst router = express.Router();\n\n// Mapa de conexiones SSE activas por missionId\nconst activeStreams = new Map();\n\n// POST /api/agent/start-mission\nrouter.post('/start-mission', async (req, res) => {\n  try {\n    const { missionContract } = req.body;\n    if (!missionContract) return res.status(400).json({ error: 'missionContract is required' });\n\n    const missionId = nanoid();\n\n    // Iniciar la misión de forma asíncrona; la orquestación emitirá logs mediante el callback\n    kernel.startMission(missionId, missionContract, (log) => {\n      const conns = activeStreams.get(missionId) || [];\n      conns.forEach((c) => {\n        try {\n          c.write(`data: ${JSON.stringify(log)}\\n\\n`);\n        } catch {\n          // ignore broken pipe\n        }\n      });\n    });\n\n    return res.json({ missionId });\n  } catch (err) {\n    console.error('Error starting mission', err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// POST /api/agent/start-tyche-mission -> helper para la Misión Génesis: crear Tyche\nrouter.post('/start-tyche-mission', async (req, res) => {\n  try {\n    const missionContract = {\n      id: 'genesis-tyche',\n      title: 'Misión Génesis: Crear Agente Tyche',\n      description: \"Crear e integrar al agente 'Tyche' que detecta flaky tests y propone correcciones. Automatizar PR local.\",\n      parameters: { target: 'tests', scope: 'repository' }\n    };\n    const missionId = nanoid();\n    kernel.startMission(missionId, missionContract, (log) => {\n      const conns = activeStreams.get(missionId) || [];\n      conns.forEach((c) => {\n        try { c.write(`data: ${JSON.stringify(log)}\\n\\n`); } catch { /* ignore */ }\n      });\n    });\n    return res.json({ missionId });\n  } catch (err) {\n    console.error('Error starting tyche mission', err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// GET /api/agent/mission/:id/stream  -> SSE stream\nrouter.get('/mission/:id/stream', (req, res) => {\n  const { id } = req.params;\n\n  res.writeHead(200, {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache',\n    Connection: 'keep-alive',\n    'Access-Control-Allow-Origin': '*',\n  });\n\n  if (!activeStreams.has(id)) activeStreams.set(id, []);\n  activeStreams.get(id).push(res);\n\n  // Enviar logs ya existentes (si los hay)\n  const mission = kernel.getMissionLogs(id) || { logs: [], status: 'not_found' };\n  (mission.logs || []).forEach((l) => {\n    try { res.write(`data: ${JSON.stringify(l)}\\n\\n`); } catch { /* ignore */ }\n  });\n\n  // Suscribirse a eventos futuros para esta misión\n  const unsub = subscribe(id, (ev) => {\n    try { res.write(`data: ${JSON.stringify(ev)}\\n\\n`); } catch { /* ignore */ }\n  });\n\n  // Manejar cierre de conexión y limpieza\n  req.on('close', () => {\n    try { unsub(); } catch { /* ignore */ }\n    const conns = activeStreams.get(id) || [];\n    const i = conns.indexOf(res);\n    if (i > -1) conns.splice(i, 1);\n    if (conns.length === 0) activeStreams.delete(id);\n  });\n});\n\n// GET /api/agent/vigilance/status -> Get eternal vigilance status with caching\nrouter.get('/vigilance/status', (req, res) => {\n  try {\n    // Cache key for vigilance status (short TTL since this is dynamic data)\n    const cacheKey = 'vigilance:status';\n\n    // Check cache first (TTL: 30 seconds)\n    const cachedStatus = cache.get(cacheKey);\n    if (cachedStatus) {\n      return res.json(cachedStatus);\n    }\n\n    const status = kernel.getVigilanceStatus();\n\n    // Cache result for 30 seconds\n    cache.set(cacheKey, status, 30000);\n\n    return res.json(status);\n  } catch (err) {\n    console.error('Error getting vigilance status', err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// POST /api/agent/vigilance/report -> Generate eternal vigilance report\nrouter.post('/vigilance/report', async (req, res) => {\n  try {\n    const status = kernel.getVigilanceStatus();\n    const reportContent = `# ETERNAL_VIGILANCE_REPORT\n\n## Resumen de la Vigilia Eterna\nSistema Praevisio AI operando en modo de Vigilia Eterna desde ${new Date().toISOString()}\n\n## Estado de los Flujos Perpetuos\n- **Auto-Preservación**: ${status.flows.autoPreservation.active ? 'Activo' : 'Inactivo'}\n  - Última ejecución: ${status.flows.autoPreservation.lastRun || 'Nunca'}\n- **Conocimiento**: ${status.flows.knowledge.active ? 'Activo' : 'Inactivo'}\n  - Última ejecución: ${status.flows.knowledge.lastRun || 'Nunca'}\n- **Profecía**: ${status.flows.prophecy.active ? 'Activo' : 'Inactivo'}\n  - Última ejecución: ${status.flows.prophecy.lastRun || 'Nunca'}\n\n## Índices de Riesgo Actuales\n${Object.entries(status.riskIndices).map(([country, data]) =>\n  `- **${country}**: ${data.riskScore.toFixed(1)}/10 (${data.level})`\n).join('\\n')}\n\n## Registro de Actividad (${status.activityFeed.length} entradas)\n${status.activityFeed.map(entry =>\n  `- [${entry.timestamp}] ${entry.flow}: ${entry.message}`\n).join('\\n')}\n\n## Conclusión\nLa Vigilia Eterna está operativa. El sistema Aion mantiene la conciencia perpetua y la auto-evolución.\n\nGenerado por Praevisio AI - ${new Date().toISOString()}\n`;\n\n    const fs = await import('fs');\n    const path = await import('path');\n    const reportPath = path.resolve(process.cwd(), 'ETERNAL_VIGILANCE_REPORT.md');\n    fs.writeFileSync(reportPath, reportContent);\n\n    return res.json({ reportPath, message: 'Reporte generado exitosamente' });\n  } catch (err) {\n    console.error('Error generating vigilance report', err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\nexport default router;"],"mappings":";;;;;;AAAA,SAAAA,SAAA;EAAA,MAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,QAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,QAAA;EAAA,MAAAH,IAAA,GAAAE,OAAA;EAAAC,OAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,IAAAI,YAAA,GAAAC,uBAAA,CAAAH,OAAA;AAEA,IAAAI,SAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAN,sBAAA,CAAAC,OAAA;AAAgC,SAAAG,wBAAAG,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAL,uBAAA,YAAAA,CAAAG,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,gBAAAP,CAAA,IAAAD,CAAA,gBAAAC,CAAA,OAAAa,cAAA,CAAAC,IAAA,CAAAf,CAAA,EAAAC,CAAA,OAAAM,CAAA,IAAAD,CAAA,GAAAU,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAlB,CAAA,EAAAC,CAAA,OAAAM,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAP,CAAA,EAAAM,CAAA,IAAAC,CAAA,CAAAP,CAAA,IAAAD,CAAA,CAAAC,CAAA,WAAAO,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAAA,SAAAR,uBAAAO,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAK,UAAA,GAAAL,CAAA,KAAAU,OAAA,EAAAV,CAAA;AAFhC,MAAMmB,MAAM,GAAGvB,YAAY,CAACuB,MAAM,IAAKvB,YAAY,CAACc,OAAO,IAAId,YAAY,CAACc,OAAO,CAACS,MAAO,IAAIvB,YAAY;AAI3G,MAAMwB,MAAM,GAAGC,kBAAO,CAACC,MAAM,CAAC,CAAC;;AAE/B;AACA,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAE/B;AACAJ,MAAM,CAACK,IAAI,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,IAAI;IACF,MAAM;MAAEC;IAAgB,CAAC,GAAGF,GAAG,CAACG,IAAI;IACpC,IAAI,CAACD,eAAe,EAAE,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA8B,CAAC,CAAC;IAE3F,MAAMC,SAAS,GAAG,IAAAC,gBAAM,EAAC,CAAC;;IAE1B;IACAf,MAAM,CAACgB,YAAY,CAACF,SAAS,EAAEL,eAAe,EAAGQ,GAAG,IAAK;MACvD,MAAMC,KAAK,GAAGd,aAAa,CAACX,GAAG,CAACqB,SAAS,CAAC,IAAI,EAAE;MAChDI,KAAK,CAACC,OAAO,CAAEC,CAAC,IAAK;QACnB,IAAI;UACFA,CAAC,CAACC,KAAK,CAAC,SAASC,IAAI,CAACC,SAAS,CAACN,GAAG,CAAC,MAAM,CAAC;QAC7C,CAAC,CAAC,MAAM;UACN;QAAA;MAEJ,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAOT,GAAG,CAACI,IAAI,CAAC;MAAEE;IAAU,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOU,GAAG,EAAE;IACZC,OAAO,CAACZ,KAAK,CAAC,wBAAwB,EAAEW,GAAG,CAAC;IAC5C,OAAOhB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,CAAC;EACjE;AACF,CAAC,CAAC;;AAEF;AACAZ,MAAM,CAACK,IAAI,CAAC,sBAAsB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtD,IAAI;IACF,MAAMC,eAAe,GAAG;MACtBiB,EAAE,EAAE,eAAe;MACnBC,KAAK,EAAE,oCAAoC;MAC3CC,WAAW,EAAE,0GAA0G;MACvHC,UAAU,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAa;IACrD,CAAC;IACD,MAAMjB,SAAS,GAAG,IAAAC,gBAAM,EAAC,CAAC;IAC1Bf,MAAM,CAACgB,YAAY,CAACF,SAAS,EAAEL,eAAe,EAAGQ,GAAG,IAAK;MACvD,MAAMC,KAAK,GAAGd,aAAa,CAACX,GAAG,CAACqB,SAAS,CAAC,IAAI,EAAE;MAChDI,KAAK,CAACC,OAAO,CAAEC,CAAC,IAAK;QACnB,IAAI;UAAEA,CAAC,CAACC,KAAK,CAAC,SAASC,IAAI,CAACC,SAAS,CAACN,GAAG,CAAC,MAAM,CAAC;QAAE,CAAC,CAAC,MAAM,CAAE;MAC/D,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOT,GAAG,CAACI,IAAI,CAAC;MAAEE;IAAU,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOU,GAAG,EAAE;IACZC,OAAO,CAACZ,KAAK,CAAC,8BAA8B,EAAEW,GAAG,CAAC;IAClD,OAAOhB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,CAAC;EACjE;AACF,CAAC,CAAC;;AAEF;AACAZ,MAAM,CAACR,GAAG,CAAC,qBAAqB,EAAE,CAACc,GAAG,EAAEC,GAAG,KAAK;EAC9C,MAAM;IAAEkB;EAAG,CAAC,GAAGnB,GAAG,CAACyB,MAAM;EAEzBxB,GAAG,CAACyB,SAAS,CAAC,GAAG,EAAE;IACjB,cAAc,EAAE,mBAAmB;IACnC,eAAe,EAAE,UAAU;IAC3BC,UAAU,EAAE,YAAY;IACxB,6BAA6B,EAAE;EACjC,CAAC,CAAC;EAEF,IAAI,CAAC9B,aAAa,CAACZ,GAAG,CAACkC,EAAE,CAAC,EAAEtB,aAAa,CAACV,GAAG,CAACgC,EAAE,EAAE,EAAE,CAAC;EACrDtB,aAAa,CAACX,GAAG,CAACiC,EAAE,CAAC,CAACS,IAAI,CAAC3B,GAAG,CAAC;;EAE/B;EACA,MAAM4B,OAAO,GAAGpC,MAAM,CAACqC,cAAc,CAACX,EAAE,CAAC,IAAI;IAAEY,IAAI,EAAE,EAAE;IAAE3B,MAAM,EAAE;EAAY,CAAC;EAC9E,CAACyB,OAAO,CAACE,IAAI,IAAI,EAAE,EAAEnB,OAAO,CAAEoB,CAAC,IAAK;IAClC,IAAI;MAAE/B,GAAG,CAACa,KAAK,CAAC,SAASC,IAAI,CAACC,SAAS,CAACgB,CAAC,CAAC,MAAM,CAAC;IAAE,CAAC,CAAC,MAAM,CAAE;EAC/D,CAAC,CAAC;;EAEF;EACA,MAAMC,KAAK,GAAG,IAAAC,mBAAS,EAACf,EAAE,EAAGgB,EAAE,IAAK;IAClC,IAAI;MAAElC,GAAG,CAACa,KAAK,CAAC,SAASC,IAAI,CAACC,SAAS,CAACmB,EAAE,CAAC,MAAM,CAAC;IAAE,CAAC,CAAC,MAAM,CAAE;EAChE,CAAC,CAAC;;EAEF;EACAnC,GAAG,CAACoC,EAAE,CAAC,OAAO,EAAE,MAAM;IACpB,IAAI;MAAEH,KAAK,CAAC,CAAC;IAAE,CAAC,CAAC,MAAM,CAAE;IACzB,MAAMtB,KAAK,GAAGd,aAAa,CAACX,GAAG,CAACiC,EAAE,CAAC,IAAI,EAAE;IACzC,MAAMtC,CAAC,GAAG8B,KAAK,CAAC0B,OAAO,CAACpC,GAAG,CAAC;IAC5B,IAAIpB,CAAC,GAAG,CAAC,CAAC,EAAE8B,KAAK,CAAC2B,MAAM,CAACzD,CAAC,EAAE,CAAC,CAAC;IAC9B,IAAI8B,KAAK,CAAC4B,MAAM,KAAK,CAAC,EAAE1C,aAAa,CAAC2C,MAAM,CAACrB,EAAE,CAAC;EAClD,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAzB,MAAM,CAACR,GAAG,CAAC,mBAAmB,EAAE,CAACc,GAAG,EAAEC,GAAG,KAAK;EAC5C,IAAI;IACF;IACA,MAAMwC,QAAQ,GAAG,kBAAkB;;IAEnC;IACA,MAAMC,YAAY,GAAGC,cAAK,CAACzD,GAAG,CAACuD,QAAQ,CAAC;IACxC,IAAIC,YAAY,EAAE;MAChB,OAAOzC,GAAG,CAACI,IAAI,CAACqC,YAAY,CAAC;IAC/B;IAEA,MAAMtC,MAAM,GAAGX,MAAM,CAACmD,kBAAkB,CAAC,CAAC;;IAE1C;IACAD,cAAK,CAACxD,GAAG,CAACsD,QAAQ,EAAErC,MAAM,EAAE,KAAK,CAAC;IAElC,OAAOH,GAAG,CAACI,IAAI,CAACD,MAAM,CAAC;EACzB,CAAC,CAAC,OAAOa,GAAG,EAAE;IACZC,OAAO,CAACZ,KAAK,CAAC,gCAAgC,EAAEW,GAAG,CAAC;IACpD,OAAOhB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,CAAC;EACjE;AACF,CAAC,CAAC;;AAEF;AACAZ,MAAM,CAACK,IAAI,CAAC,mBAAmB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnD,IAAI;IACF,MAAMG,MAAM,GAAGX,MAAM,CAACmD,kBAAkB,CAAC,CAAC;IAC1C,MAAMC,aAAa,GAAG;AAC1B;AACA;AACA,gEAAgE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AACxF;AACA;AACA,2BAA2B3C,MAAM,CAAC4C,KAAK,CAACC,gBAAgB,CAACC,MAAM,GAAG,QAAQ,GAAG,UAAU;AACvF,wBAAwB9C,MAAM,CAAC4C,KAAK,CAACC,gBAAgB,CAACE,OAAO,IAAI,OAAO;AACxE,sBAAsB/C,MAAM,CAAC4C,KAAK,CAACI,SAAS,CAACF,MAAM,GAAG,QAAQ,GAAG,UAAU;AAC3E,wBAAwB9C,MAAM,CAAC4C,KAAK,CAACI,SAAS,CAACD,OAAO,IAAI,OAAO;AACjE,kBAAkB/C,MAAM,CAAC4C,KAAK,CAACK,QAAQ,CAACH,MAAM,GAAG,QAAQ,GAAG,UAAU;AACtE,wBAAwB9C,MAAM,CAAC4C,KAAK,CAACK,QAAQ,CAACF,OAAO,IAAI,OAAO;AAChE;AACA;AACA,EAAE7D,MAAM,CAACgE,OAAO,CAAClD,MAAM,CAACmD,WAAW,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,OAAO,EAAE3F,IAAI,CAAC,KACvD,OAAO2F,OAAO,OAAO3F,IAAI,CAAC4F,SAAS,CAACC,OAAO,CAAC,CAAC,CAAC,QAAQ7F,IAAI,CAAC8F,KAAK,GAClE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AACZ;AACA,4BAA4BzD,MAAM,CAAC0D,YAAY,CAACvB,MAAM;AACtD,EAAEnC,MAAM,CAAC0D,YAAY,CAACN,GAAG,CAACO,KAAK,IAC7B,MAAMA,KAAK,CAACC,SAAS,KAAKD,KAAK,CAACE,IAAI,KAAKF,KAAK,CAACG,OAAO,EACxD,CAAC,CAACL,IAAI,CAAC,IAAI,CAAC;AACZ;AACA;AACA;AACA;AACA,8BAA8B,IAAIf,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AACtD,CAAC;IAEG,MAAMoB,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC;IAC7B,MAAMC,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC;IACjC,MAAMC,UAAU,GAAGD,IAAI,CAACE,OAAO,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAE,6BAA6B,CAAC;IAC7EL,EAAE,CAACM,aAAa,CAACJ,UAAU,EAAExB,aAAa,CAAC;IAE3C,OAAO5C,GAAG,CAACI,IAAI,CAAC;MAAEgE,UAAU;MAAEH,OAAO,EAAE;IAAgC,CAAC,CAAC;EAC3E,CAAC,CAAC,OAAOjD,GAAG,EAAE;IACZC,OAAO,CAACZ,KAAK,CAAC,mCAAmC,EAAEW,GAAG,CAAC;IACvD,OAAOhB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,CAAC;EACjE;AACF,CAAC,CAAC;AAAC,IAAAoE,QAAA,GAAAC,OAAA,CAAA3F,OAAA,GAEYU,MAAM","ignoreList":[]}