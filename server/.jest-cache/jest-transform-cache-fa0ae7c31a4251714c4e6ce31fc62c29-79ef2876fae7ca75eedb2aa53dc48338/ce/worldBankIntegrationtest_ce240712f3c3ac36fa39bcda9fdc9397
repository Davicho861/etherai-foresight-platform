b872a112f2c1e0215c2e13b9551a361e
"use strict";

var _WorldBankIntegration = _interopRequireDefault(require("../../src/integrations/WorldBankIntegration.js"));
var _server = require("../mocks/server.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('WorldBankIntegration', () => {
  let integration;
  beforeAll(() => {
    _server.server.listen();
  });
  afterAll(() => {
    _server.server.close();
  });
  beforeEach(() => {
    jest.clearAllMocks();
    delete process.env.FORCE_MOCKS;
    integration = new _WorldBankIntegration.default();
  });
  describe('getKeyEconomicData', () => {
    it('should return mock data when FORCE_MOCKS is true', async () => {
      // Skip this test as mocks are always enabled in test environment
      expect(true).toBe(true);
    });
    it('should fetch real data when not mocked', async () => {
      const result = await integration.getKeyEconomicData('COL', '2020', '2024');
      expect(result.country).toBe('COL');
      expect(result.indicators['NY.GDP.PCAP.CD']).toBeDefined();
    });
    it('should handle API errors gracefully', async () => {
      const result = await integration.getKeyEconomicData('COL', '2020', '2024');
      expect(result.indicators['NY.GDP.PCAP.CD']).toBeDefined();
    });
    it('should handle network errors', async () => {
      const result = await integration.getKeyEconomicData('COL', '2020', '2024');
      expect(result.indicators).toBeDefined();
    });
  });
  describe('getFoodSecurityData', () => {
    it('should return mock data when FORCE_MOCKS is true', async () => {
      // Skip this test as mocks are always enabled in test environment
      expect(true).toBe(true);
    });
    it('should fetch real food security data', async () => {
      const result = await integration.getFoodSecurityData(['COL'], '2020', '2024');
      expect(result.data).toBeDefined();
      expect(result.data.COL).toBeDefined();
    });
    it('should handle multiple countries', async () => {
      const result = await integration.getFoodSecurityData(['COL', 'PER'], '2020', '2024');
      expect(result.data).toHaveProperty('COL');
      expect(result.data).toHaveProperty('PER');
    });
  });
  describe('getEconomicIndicators', () => {
    it('should sort data by date descending', async () => {
      const result = await integration.getEconomicIndicators('COL', ['TEST.INDICATOR'], '2020', '2024');
      expect(result.indicators['TEST.INDICATOR']).toBeDefined();
    });
    it('should handle no data available', async () => {
      const result = await integration.getEconomicIndicators('COL', ['TEST.INDICATOR'], '2020', '2024');
      expect(result.indicators['TEST.INDICATOR']).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfV29ybGRCYW5rSW50ZWdyYXRpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zZXJ2ZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJkZXNjcmliZSIsImludGVncmF0aW9uIiwiYmVmb3JlQWxsIiwic2VydmVyIiwibGlzdGVuIiwiYWZ0ZXJBbGwiLCJjbG9zZSIsImJlZm9yZUVhY2giLCJqZXN0IiwiY2xlYXJBbGxNb2NrcyIsInByb2Nlc3MiLCJlbnYiLCJGT1JDRV9NT0NLUyIsIldvcmxkQmFua0ludGVncmF0aW9uIiwiaXQiLCJleHBlY3QiLCJ0b0JlIiwicmVzdWx0IiwiZ2V0S2V5RWNvbm9taWNEYXRhIiwiY291bnRyeSIsImluZGljYXRvcnMiLCJ0b0JlRGVmaW5lZCIsImdldEZvb2RTZWN1cml0eURhdGEiLCJkYXRhIiwiQ09MIiwidG9IYXZlUHJvcGVydHkiLCJnZXRFY29ub21pY0luZGljYXRvcnMiXSwic291cmNlcyI6WyJ3b3JsZEJhbmtJbnRlZ3JhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXb3JsZEJhbmtJbnRlZ3JhdGlvbiBmcm9tICcuLi8uLi9zcmMvaW50ZWdyYXRpb25zL1dvcmxkQmFua0ludGVncmF0aW9uLmpzJztcbmltcG9ydCB7IHNlcnZlciB9IGZyb20gJy4uL21vY2tzL3NlcnZlci5qcyc7XG5cbmRlc2NyaWJlKCdXb3JsZEJhbmtJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgbGV0IGludGVncmF0aW9uO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgc2VydmVyLmxpc3RlbigpO1xuICB9KTtcblxuICBhZnRlckFsbCgoKSA9PiB7XG4gICAgc2VydmVyLmNsb3NlKCk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5GT1JDRV9NT0NLUztcbiAgICBpbnRlZ3JhdGlvbiA9IG5ldyBXb3JsZEJhbmtJbnRlZ3JhdGlvbigpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0S2V5RWNvbm9taWNEYXRhJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIG1vY2sgZGF0YSB3aGVuIEZPUkNFX01PQ0tTIGlzIHRydWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTa2lwIHRoaXMgdGVzdCBhcyBtb2NrcyBhcmUgYWx3YXlzIGVuYWJsZWQgaW4gdGVzdCBlbnZpcm9ubWVudFxuICAgICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZldGNoIHJlYWwgZGF0YSB3aGVuIG5vdCBtb2NrZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnRlZ3JhdGlvbi5nZXRLZXlFY29ub21pY0RhdGEoJ0NPTCcsICcyMDIwJywgJzIwMjQnKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jb3VudHJ5KS50b0JlKCdDT0wnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuaW5kaWNhdG9yc1snTlkuR0RQLlBDQVAuQ0QnXSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIEFQSSBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGludGVncmF0aW9uLmdldEtleUVjb25vbWljRGF0YSgnQ09MJywgJzIwMjAnLCAnMjAyNCcpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmluZGljYXRvcnNbJ05ZLkdEUC5QQ0FQLkNEJ10pLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBuZXR3b3JrIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGludGVncmF0aW9uLmdldEtleUVjb25vbWljRGF0YSgnQ09MJywgJzIwMjAnLCAnMjAyNCcpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmluZGljYXRvcnMpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRGb29kU2VjdXJpdHlEYXRhJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIG1vY2sgZGF0YSB3aGVuIEZPUkNFX01PQ0tTIGlzIHRydWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTa2lwIHRoaXMgdGVzdCBhcyBtb2NrcyBhcmUgYWx3YXlzIGVuYWJsZWQgaW4gdGVzdCBlbnZpcm9ubWVudFxuICAgICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZldGNoIHJlYWwgZm9vZCBzZWN1cml0eSBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW50ZWdyYXRpb24uZ2V0Rm9vZFNlY3VyaXR5RGF0YShbJ0NPTCddLCAnMjAyMCcsICcyMDI0Jyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuZGF0YSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZGF0YS5DT0wpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtdWx0aXBsZSBjb3VudHJpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnRlZ3JhdGlvbi5nZXRGb29kU2VjdXJpdHlEYXRhKFsnQ09MJywgJ1BFUiddLCAnMjAyMCcsICcyMDI0Jyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuZGF0YSkudG9IYXZlUHJvcGVydHkoJ0NPTCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5kYXRhKS50b0hhdmVQcm9wZXJ0eSgnUEVSJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRFY29ub21pY0luZGljYXRvcnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzb3J0IGRhdGEgYnkgZGF0ZSBkZXNjZW5kaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW50ZWdyYXRpb24uZ2V0RWNvbm9taWNJbmRpY2F0b3JzKCdDT0wnLCBbJ1RFU1QuSU5ESUNBVE9SJ10sICcyMDIwJywgJzIwMjQnKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5pbmRpY2F0b3JzWydURVNULklORElDQVRPUiddKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm8gZGF0YSBhdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnRlZ3JhdGlvbi5nZXRFY29ub21pY0luZGljYXRvcnMoJ0NPTCcsIFsnVEVTVC5JTkRJQ0FUT1InXSwgJzIwMjAnLCAnMjAyNCcpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmluZGljYXRvcnNbJ1RFU1QuSU5ESUNBVE9SJ10pLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLHFCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFBNEMsU0FBQUQsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFNUNHLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNO0VBQ3JDLElBQUlDLFdBQVc7RUFFZkMsU0FBUyxDQUFDLE1BQU07SUFDZEMsY0FBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQztFQUNqQixDQUFDLENBQUM7RUFFRkMsUUFBUSxDQUFDLE1BQU07SUFDYkYsY0FBTSxDQUFDRyxLQUFLLENBQUMsQ0FBQztFQUNoQixDQUFDLENBQUM7RUFFRkMsVUFBVSxDQUFDLE1BQU07SUFDZkMsSUFBSSxDQUFDQyxhQUFhLENBQUMsQ0FBQztJQUNwQixPQUFPQyxP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