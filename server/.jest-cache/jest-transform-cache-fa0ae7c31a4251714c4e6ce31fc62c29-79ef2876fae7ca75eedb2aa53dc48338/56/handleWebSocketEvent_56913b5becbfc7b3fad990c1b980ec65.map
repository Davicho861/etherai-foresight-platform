{"version":3,"names":["handleWebSocketEvent_exports","__export","handleWebSocketEvent","module","exports","__toCommonJS","import_webSocketInterceptor","require","import_onUnhandledRequest","import_isHandlerKind","options","webSocketInterceptor","on","connection","handlers","getHandlers","filter","isHandlerKind","length","onMockedConnection","Promise","all","map","handler","run","request","Request","client","url","headers","upgrade","onUnhandledRequest","getUnhandledRequestStrategy","catch","error","errorEvent","Event","Object","defineProperty","enumerable","configurable","value","socket","dispatchEvent","onPassthroughConnection","server","connect"],"sources":["../../../src/core/ws/handleWebSocketEvent.ts"],"sourcesContent":["import type { WebSocketConnectionData } from '@mswjs/interceptors/WebSocket'\nimport { RequestHandler } from '../handlers/RequestHandler'\nimport { WebSocketHandler } from '../handlers/WebSocketHandler'\nimport { webSocketInterceptor } from './webSocketInterceptor'\nimport {\n  onUnhandledRequest,\n  UnhandledRequestStrategy,\n} from '../utils/request/onUnhandledRequest'\nimport { isHandlerKind } from '../utils/internal/isHandlerKind'\n\ninterface HandleWebSocketEventOptions {\n  getUnhandledRequestStrategy: () => UnhandledRequestStrategy\n  getHandlers: () => Array<RequestHandler | WebSocketHandler>\n  onMockedConnection: (connection: WebSocketConnectionData) => void\n  onPassthroughConnection: (onnection: WebSocketConnectionData) => void\n}\n\nexport function handleWebSocketEvent(options: HandleWebSocketEventOptions) {\n  webSocketInterceptor.on('connection', async (connection) => {\n    const handlers = options.getHandlers().filter(isHandlerKind('EventHandler'))\n\n    // Ignore this connection if the user hasn't defined any handlers.\n    if (handlers.length > 0) {\n      options?.onMockedConnection(connection)\n\n      await Promise.all(\n        handlers.map((handler) => {\n          // Iterate over the handlers and forward the connection\n          // event to WebSocket event handlers. This is equivalent\n          // to dispatching that event onto multiple listeners.\n          return handler.run(connection)\n        }),\n      )\n\n      return\n    }\n\n    // Construct a request representing this WebSocket connection.\n    const request = new Request(connection.client.url, {\n      headers: {\n        upgrade: 'websocket',\n        connection: 'upgrade',\n      },\n    })\n    await onUnhandledRequest(\n      request,\n      options.getUnhandledRequestStrategy(),\n    ).catch((error) => {\n      const errorEvent = new Event('error')\n      Object.defineProperty(errorEvent, 'cause', {\n        enumerable: true,\n        configurable: false,\n        value: error,\n      })\n      connection.client.socket.dispatchEvent(errorEvent)\n    })\n\n    options?.onPassthroughConnection(connection)\n\n    // If none of the \"ws\" handlers matched,\n    // establish the WebSocket connection as-is.\n    connection.server.connect()\n  })\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,4BAAA;AAAAC,QAAA,CAAAD,4BAAA;EAAAE,oBAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,4BAAA;AAGA,IAAAM,2BAAA,GAAqCC,OAAA;AACrC,IAAAC,yBAAA,GAGOD,OAAA;AACP,IAAAE,oBAAA,GAA8BF,OAAA;AASvB,SAASL,qBAAqBQ,OAAA,EAAsC;EACzEJ,2BAAA,CAAAK,oBAAA,CAAqBC,EAAA,CAAG,cAAc,MAAOC,UAAA,IAAe;IAC1D,MAAMC,QAAA,GAAWJ,OAAA,CAAQK,WAAA,CAAY,EAAEC,MAAA,KAAOP,oBAAA,CAAAQ,aAAA,EAAc,cAAc,CAAC;IAG3E,IAAIH,QAAA,CAASI,MAAA,GAAS,GAAG;MACvBR,OAAA,EAASS,kBAAA,CAAmBN,UAAU;MAEtC,MAAMO,OAAA,CAAQC,GAAA,CACZP,QAAA,CAASQ,GAAA,CAAKC,OAAA,IAAY;QAIxB,OAAOA,OAAA,CAAQC,GAAA,CAAIX,UAAU;MAC/B,CAAC,CACH;MAEA;IACF;IAGA,MAAMY,OAAA,GAAU,IAAIC,OAAA,CAAQb,UAAA,CAAWc,MAAA,CAAOC,GAAA,EAAK;MACjDC,OAAA,EAAS;QACPC,OAAA,EAAS;QACTjB,UAAA,EAAY;MACd;IACF,CAAC;IACD,UAAML,yBAAA,CAAAuB,kBAAA,EACJN,OAAA,EACAf,OAAA,CAAQsB,2BAAA,CAA4B,CACtC,EAAEC,KAAA,CAAOC,KAAA,IAAU;MACjB,MAAMC,UAAA,GAAa,IAAIC,KAAA,CAAM,OAAO;MACpCC,MAAA,CAAOC,cAAA,CAAeH,UAAA,EAAY,SAAS;QACzCI,UAAA,EAAY;QACZC,YAAA,EAAc;QACdC,KAAA,EAAOP;MACT,CAAC;MACDrB,UAAA,CAAWc,MAAA,CAAOe,MAAA,CAAOC,aAAA,CAAcR,UAAU;IACnD,CAAC;IAEDzB,OAAA,EAASkC,uBAAA,CAAwB/B,UAAU;IAI3CA,UAAA,CAAWgC,MAAA,CAAOC,OAAA,CAAQ;EAC5B,CAAC;AACH","ignoreList":[]}