{"version":3,"names":["handleRequest_exports","__export","handleRequest","module","exports","__toCommonJS","import_until_async","require","import_executeHandlers","import_onUnhandledRequest","import_storeResponseCookies","request","requestId","handlers","options","emitter","handleRequestOptions","emit","headers","get","includes","onPassthroughResponse","lookupError","lookupResult","until","executeHandlers","resolutionContext","error","onUnhandledRequest","response","status","storeResponseCookies","requiredLookupResult","onMockedResponse"],"sources":["../../../src/core/utils/handleRequest.ts"],"sourcesContent":["import { until } from 'until-async'\nimport { Emitter } from 'strict-event-emitter'\nimport { LifeCycleEventsMap, SharedOptions } from '../sharedOptions'\nimport { RequiredDeep } from '../typeUtils'\nimport type { RequestHandler } from '../handlers/RequestHandler'\nimport { HandlersExecutionResult, executeHandlers } from './executeHandlers'\nimport { onUnhandledRequest } from './request/onUnhandledRequest'\nimport { storeResponseCookies } from './request/storeResponseCookies'\n\nexport interface HandleRequestOptions {\n  /**\n   * `resolutionContext` is not part of the general public api\n   * but is exposed to aid in creating extensions like\n   * `@mswjs/http-middleware`.\n   */\n  resolutionContext?: {\n    /**\n     * A base url to use when resolving relative urls.\n     * @note This is primarily used by the `@mswjs/http-middleware`\n     * to resolve relative urls in the context of the running server\n     */\n    baseUrl?: string\n  }\n\n  /**\n   * Invoked whenever a request is performed as-is.\n   */\n  onPassthroughResponse?(request: Request): void\n\n  /**\n   * Invoked when the mocked response is ready to be sent.\n   */\n  onMockedResponse?(\n    response: Response,\n    handler: RequiredDeep<HandlersExecutionResult>,\n  ): void\n}\n\nexport async function handleRequest(\n  request: Request,\n  requestId: string,\n  handlers: Array<RequestHandler>,\n  options: RequiredDeep<SharedOptions>,\n  emitter: Emitter<LifeCycleEventsMap>,\n  handleRequestOptions?: HandleRequestOptions,\n): Promise<Response | undefined> {\n  emitter.emit('request:start', { request, requestId })\n\n  // Perform requests wrapped in \"bypass()\" as-is.\n  if (request.headers.get('accept')?.includes('msw/passthrough')) {\n    emitter.emit('request:end', { request, requestId })\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // Resolve a mocked response from the list of request handlers.\n  const [lookupError, lookupResult] = await until(() => {\n    return executeHandlers({\n      request,\n      requestId,\n      handlers,\n      resolutionContext: handleRequestOptions?.resolutionContext,\n    })\n  })\n\n  if (lookupError) {\n    // Allow developers to react to unhandled exceptions in request handlers.\n    emitter.emit('unhandledException', {\n      error: lookupError,\n      request,\n      requestId,\n    })\n    throw lookupError\n  }\n\n  // If the handler lookup returned nothing, no request handler was found\n  // matching this request. Report the request as unhandled.\n  if (!lookupResult) {\n    await onUnhandledRequest(request, options.onUnhandledRequest)\n    emitter.emit('request:unhandled', { request, requestId })\n    emitter.emit('request:end', { request, requestId })\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  const { response } = lookupResult\n\n  // When the handled request returned no mocked response, warn the developer,\n  // as it may be an oversight on their part. Perform the request as-is.\n  if (!response) {\n    emitter.emit('request:end', { request, requestId })\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // Perform the request as-is when the developer explicitly returned \"req.passthrough()\".\n  // This produces no warning as the request was handled.\n  if (\n    response.status === 302 &&\n    response.headers.get('x-msw-intention') === 'passthrough'\n  ) {\n    emitter.emit('request:end', { request, requestId })\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // Store all the received response cookies in the cookie jar.\n  await storeResponseCookies(request, response)\n\n  emitter.emit('request:match', { request, requestId })\n\n  const requiredLookupResult =\n    lookupResult as RequiredDeep<HandlersExecutionResult>\n\n  handleRequestOptions?.onMockedResponse?.(response, requiredLookupResult)\n\n  emitter.emit('request:end', { request, requestId })\n\n  return response\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,qBAAA;AAAAC,QAAA,CAAAD,qBAAA;EAAAE,aAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,qBAAA;AAAA,IAAAM,kBAAA,GAAsBC,OAAA;AAKtB,IAAAC,sBAAA,GAAyDD,OAAA;AACzD,IAAAE,yBAAA,GAAmCF,OAAA;AACnC,IAAAG,2BAAA,GAAqCH,OAAA;AA+BrC,eAAsBL,cACpBS,OAAA,EACAC,SAAA,EACAC,QAAA,EACAC,OAAA,EACAC,OAAA,EACAC,oBAAA,EAC+B;EAC/BD,OAAA,CAAQE,IAAA,CAAK,iBAAiB;IAAEN,OAAA;IAASC;EAAU,CAAC;EAGpD,IAAID,OAAA,CAAQO,OAAA,CAAQC,GAAA,CAAI,QAAQ,GAAGC,QAAA,CAAS,iBAAiB,GAAG;IAC9DL,OAAA,CAAQE,IAAA,CAAK,eAAe;MAAEN,OAAA;MAASC;IAAU,CAAC;IAClDI,oBAAA,EAAsBK,qBAAA,GAAwBV,OAAO;IACrD;EACF;EAGA,MAAM,CAACW,WAAA,EAAaC,YAAY,IAAI,UAAMjB,kBAAA,CAAAkB,KAAA,EAAM,MAAM;IACpD,WAAOhB,sBAAA,CAAAiB,eAAA,EAAgB;MACrBd,OAAA;MACAC,SAAA;MACAC,QAAA;MACAa,iBAAA,EAAmBV,oBAAA,EAAsBU;IAC3C,CAAC;EACH,CAAC;EAED,IAAIJ,WAAA,EAAa;IAEfP,OAAA,CAAQE,IAAA,CAAK,sBAAsB;MACjCU,KAAA,EAAOL,WAAA;MACPX,OAAA;MACAC;IACF,CAAC;IACD,MAAMU,WAAA;EACR;EAIA,IAAI,CAACC,YAAA,EAAc;IACjB,UAAMd,yBAAA,CAAAmB,kBAAA,EAAmBjB,OAAA,EAASG,OAAA,CAAQc,kBAAkB;IAC5Db,OAAA,CAAQE,IAAA,CAAK,qBAAqB;MAAEN,OAAA;MAASC;IAAU,CAAC;IACxDG,OAAA,CAAQE,IAAA,CAAK,eAAe;MAAEN,OAAA;MAASC;IAAU,CAAC;IAClDI,oBAAA,EAAsBK,qBAAA,GAAwBV,OAAO;IACrD;EACF;EAEA,MAAM;IAAEkB;EAAS,IAAIN,YAAA;EAIrB,IAAI,CAACM,QAAA,EAAU;IACbd,OAAA,CAAQE,IAAA,CAAK,eAAe;MAAEN,OAAA;MAASC;IAAU,CAAC;IAClDI,oBAAA,EAAsBK,qBAAA,GAAwBV,OAAO;IACrD;EACF;EAIA,IACEkB,QAAA,CAASC,MAAA,KAAW,OACpBD,QAAA,CAASX,OAAA,CAAQC,GAAA,CAAI,iBAAiB,MAAM,eAC5C;IACAJ,OAAA,CAAQE,IAAA,CAAK,eAAe;MAAEN,OAAA;MAASC;IAAU,CAAC;IAClDI,oBAAA,EAAsBK,qBAAA,GAAwBV,OAAO;IACrD;EACF;EAGA,UAAMD,2BAAA,CAAAqB,oBAAA,EAAqBpB,OAAA,EAASkB,QAAQ;EAE5Cd,OAAA,CAAQE,IAAA,CAAK,iBAAiB;IAAEN,OAAA;IAASC;EAAU,CAAC;EAEpD,MAAMoB,oBAAA,GACJT,YAAA;EAEFP,oBAAA,EAAsBiB,gBAAA,GAAmBJ,QAAA,EAAUG,oBAAoB;EAEvEjB,OAAA,CAAQE,IAAA,CAAK,eAAe;IAAEN,OAAA;IAASC;EAAU,CAAC;EAElD,OAAOiB,QAAA;AACT","ignoreList":[]}