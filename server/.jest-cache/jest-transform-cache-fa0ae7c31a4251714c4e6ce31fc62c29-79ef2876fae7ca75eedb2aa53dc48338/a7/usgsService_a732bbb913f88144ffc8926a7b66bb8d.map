{"version":3,"names":["_SeismicIntegration","require","cov_47pjnniy8","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","getSeismicActivity","process","env","NATIVE_DEV_MODE","MOCK_PORT","USGS_MOCK_PORT","resp","fetch","ok","body","json","transformSeismicData","console","warn","status","err","message","rawData","getSeismicData","liveErr","String","error","getMockSeismicData","exports","mockEvents","id","magnitude","place","time","Date","now","coordinates","tsunami","significance","url","events","summary","totalEvents","length","maxMagnitude","Math","max","map","e","lastUpdated","toISOString","source","isMock","note","features","feature","properties","mag","geometry","sig","metadata","generated"],"sources":["usgsService.js"],"sourcesContent":["import { getSeismicData } from './SeismicIntegration.js';\n\n/**\n * @fileoverview Service for fetching USGS seismic data, integrated with real API.\n * Fetches seismic activity data from USGS API for global monitoring.\n */\n\n/**\n * Fetches the global seismic activity data.\n * Uses the SeismicIntegration for real-time data from USGS.\n * @returns {Promise<object>} A promise that resolves to the seismic activity data.\n */\nexport const getSeismicActivity = async () => {\n  try {\n\n    // 2) If running in native dev mode, try to use a local mock server but fail gracefully\n    if (process.env.NATIVE_DEV_MODE === 'true') {\n      const MOCK_PORT = process.env.USGS_MOCK_PORT || 4011;\n      try {\n        const resp = await fetch(`http://localhost:${MOCK_PORT}/usgs/significant_day.geojson`);\n        if (resp.ok) {\n          const body = await resp.json();\n          return transformSeismicData(body);\n        }\n        console.warn(`USGS mock returned non-ok status ${resp.status} - falling back`);\n      } catch (err) {\n        // Common in developer machines if the local mock isn't running (ECONNREFUSED)\n        console.warn(`Local USGS mock fetch failed (port ${MOCK_PORT}):`, err && err.message ? err.message : err);\n        // continue to attempt live fetch below\n      }\n    }\n\n    // 3) Try the live USGS integration (may fail in networks with no egress)\n    try {\n      const rawData = await getSeismicData();\n      return transformSeismicData(rawData);\n    } catch (liveErr) {\n      const message = liveErr && liveErr.message ? liveErr.message : String(liveErr);\n      console.error('Live USGS fetch failed:', message);\n\n      // Fallback to high-fidelity mock data\n      return getMockSeismicData();\n    }\n  } catch (error) {\n    console.error('Unexpected error in getSeismicActivity:', error);\n    // Fallback to high-fidelity mock data\n    return getMockSeismicData();\n  }\n};\n\n/**\n * Transforms raw USGS GeoJSON data into our standardized format.\n * @param {object} rawData - Raw GeoJSON data from USGS\n * @returns {object} Transformed seismic data\n */\n/**\n * Returns high-fidelity mock seismic data when API is unavailable\n * @returns {object} Mock seismic data in the same format as real data\n */\nfunction getMockSeismicData() {\n  const mockEvents = [\n    {\n      id: 'mock-1',\n      magnitude: 4.5,\n      place: 'Mock Seismic Region - Test Location',\n      time: Date.now(),\n      coordinates: [-74.2973, 4.5709, 10],\n      tsunami: 0,\n      significance: 50,\n      url: 'https://example.com/mock-earthquake-1'\n    },\n    {\n      id: 'mock-2',\n      magnitude: 3.2,\n      place: 'Another Mock Location',\n      time: Date.now() - 3600000, // 1 hour ago\n      coordinates: [-75.0, -10.0, 15],\n      tsunami: 0,\n      significance: 25,\n      url: 'https://example.com/mock-earthquake-2'\n    }\n  ];\n\n  return {\n    events: mockEvents,\n    summary: {\n      totalEvents: mockEvents.length,\n      maxMagnitude: Math.max(...mockEvents.map(e => e.magnitude)),\n      lastUpdated: new Date().toISOString(),\n      source: 'High-Fidelity Mock Data - USGS API Unavailable'\n    },\n    isMock: true,\n    note: 'Real-time seismic data simulation - API unavailable'\n  };\n}\n\nfunction transformSeismicData(rawData) {\n  if (!rawData || !rawData.features) {\n    return {\n      events: [],\n      summary: {\n        totalEvents: 0,\n        maxMagnitude: 0,\n        lastUpdated: new Date().toISOString(),\n        source: \"USGS API\"\n      }\n    };\n  }\n\n  const events = rawData.features.map(feature => ({\n    id: feature.id,\n    magnitude: feature.properties.mag,\n    place: feature.properties.place,\n    time: feature.properties.time,\n    coordinates: feature.geometry.coordinates,\n    tsunami: feature.properties.tsunami,\n    significance: feature.properties.sig,\n    url: feature.properties.url\n  }));\n\n  const maxMagnitude = events.length > 0 ? Math.max(...events.map(e => e.magnitude)) : 0;\n\n  return {\n    events,\n    summary: {\n      totalEvents: events.length,\n      maxMagnitude,\n      lastUpdated: rawData.metadata?.generated || new Date().toISOString(),\n      source: \"USGS Earthquake Hazards Program\"\n    }\n  };\n}"],"mappings":";;;;;;;AAAA;AAAA;AAAAA,mBAAA,GAAAC,OAAA;AAAyD;AAAA,SAAAC,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA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","ignoreList":[]}