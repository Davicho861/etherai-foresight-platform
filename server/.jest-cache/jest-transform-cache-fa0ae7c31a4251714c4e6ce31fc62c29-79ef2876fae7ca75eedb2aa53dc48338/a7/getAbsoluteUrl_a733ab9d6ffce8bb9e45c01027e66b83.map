{"version":3,"names":["getAbsoluteUrl_exports","__export","getAbsoluteUrl","module","exports","__toCommonJS","import_isAbsoluteUrl","require","path","baseUrl","isAbsoluteUrl","startsWith","origin","location","href","decodeURI","URL","encodeURI"],"sources":["../../../../src/core/utils/url/getAbsoluteUrl.ts"],"sourcesContent":["import { isAbsoluteUrl } from './isAbsoluteUrl'\n\n/**\n * Returns an absolute URL based on the given path.\n */\nexport function getAbsoluteUrl(path: string, baseUrl?: string): string {\n  // already absolute URL\n  if (isAbsoluteUrl(path)) {\n    return path\n  }\n\n  // Ignore path with pattern start with *\n  if (path.startsWith('*')) {\n    return path\n  }\n\n  // Resolve a relative request URL against a given custom \"baseUrl\"\n  // or the document baseURI (in the case of browser/browser-like environments).\n  const origin = baseUrl || (typeof location !== 'undefined' && location.href)\n\n  return origin\n    ? // Encode and decode the path to preserve escaped characters.\n      decodeURI(new URL(encodeURI(path), origin).href)\n    : path\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,sBAAA;AAAAC,QAAA,CAAAD,sBAAA;EAAAE,cAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,sBAAA;AAAA,IAAAM,oBAAA,GAA8BC,OAAA;AAKvB,SAASL,eAAeM,IAAA,EAAcC,OAAA,EAA0B;EAErE,QAAIH,oBAAA,CAAAI,aAAA,EAAcF,IAAI,GAAG;IACvB,OAAOA,IAAA;EACT;EAGA,IAAIA,IAAA,CAAKG,UAAA,CAAW,GAAG,GAAG;IACxB,OAAOH,IAAA;EACT;EAIA,MAAMI,MAAA,GAASH,OAAA,IAAY,OAAOI,QAAA,KAAa,eAAeA,QAAA,CAASC,IAAA;EAEvE,OAAOF,MAAA;EAAA;EAEHG,SAAA,CAAU,IAAIC,GAAA,CAAIC,SAAA,CAAUT,IAAI,GAAGI,MAAM,EAAEE,IAAI,IAC/CN,IAAA;AACN","ignoreList":[]}