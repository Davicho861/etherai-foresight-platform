ee269b8fd89ea6c4fa604a305535ace6
"use strict";

var _server = require("../mocks/server.js");
var _supertest = _interopRequireDefault(require("supertest"));
var _express = _interopRequireDefault(require("express"));
var _foodResilience = _interopRequireDefault(require("../../src/routes/food-resilience.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Atenea's Wisdom: The old, chaotic mocks are banished.
// We now rely on Hefesto's global, deterministic fetch mock.
// No direct mocking of integration modules is needed.

describe('Food Resilience Routes', () => {
  let app;
  beforeAll(() => {
    _server.server.listen();
    // No long timeouts needed. The Oracle (and mocks) are instantaneous.
  });
  afterAll(() => {
    _server.server.close();
  });
  beforeEach(() => {
    // Create express app with the router
    app = (0, _express.default)();
    app.use(_express.default.json());
    app.use('/api/food-resilience', _foodResilience.default);
  });
  describe('GET /api/food-resilience/prices', () => {
    it('should return food prices for all products', async () => {
      const response = await (0, _supertest.default)(app).get('/api/food-resilience/prices');
      expect(response.status).toBe(200);
      expect(response.body.country).toBe('Peru');
      expect(response.body.prices).toHaveLength(4);
      expect(response.body.summary.averageVolatility).toBeDefined();
    });
  });
  describe('GET /api/food-resilience/supply-chain', () => {
    it('should return optimized supply chain routes', async () => {
      const response = await (0, _supertest.default)(app).get('/api/food-resilience/supply-chain');
      expect(response.status).toBe(200);
      expect(response.body.country).toBe('Peru');
      expect(response.body.routes).toHaveLength(4);
      expect(response.body.optimization.recommendedRoutes).toBeDefined();
    });
  });
  describe('POST /api/food-resilience/predict', () => {
    it('should generate price prediction for valid product', async () => {
      const response = await (0, _supertest.default)(app).post('/api/food-resilience/predict').send({
        product: 'rice',
        timeframe: '30_days'
      });
      expect(response.status).toBe(200);
      expect(response.body.product).toBe('rice');
      expect(response.body.predictedPrice).toBeDefined();
      expect(response.body.confidence).toBeDefined();
    });
    it('should return 400 for invalid product', async () => {
      const response = await (0, _supertest.default)(app).post('/api/food-resilience/predict').send({
        product: '',
        timeframe: '30_days'
      });
      expect(response.status).toBe(400);
      expect(response.body.error).toBe('invalid_product');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2VydmVyIiwicmVxdWlyZSIsIl9zdXBlcnRlc3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2V4cHJlc3MiLCJfZm9vZFJlc2lsaWVuY2UiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJkZXNjcmliZSIsImFwcCIsImJlZm9yZUFsbCIsInNlcnZlciIsImxpc3RlbiIsImFmdGVyQWxsIiwiY2xvc2UiLCJiZWZvcmVFYWNoIiwiZXhwcmVzcyIsInVzZSIsImpzb24iLCJmb29kUmVzaWxpZW5jZVJvdXRlciIsIml0IiwicmVzcG9uc2UiLCJyZXF1ZXN0IiwiZ2V0IiwiZXhwZWN0Iiwic3RhdHVzIiwidG9CZSIsImJvZHkiLCJjb3VudHJ5IiwicHJpY2VzIiwidG9IYXZlTGVuZ3RoIiwic3VtbWFyeSIsImF2ZXJhZ2VWb2xhdGlsaXR5IiwidG9CZURlZmluZWQiLCJyb3V0ZXMiLCJvcHRpbWl6YXRpb24iLCJyZWNvbW1lbmRlZFJvdXRlcyIsInBvc3QiLCJzZW5kIiwicHJvZHVjdCIsInRpbWVmcmFtZSIsInByZWRpY3RlZFByaWNlIiwiY29uZmlkZW5jZSIsImVycm9yIl0sInNvdXJjZXMiOlsiZm9vZC1yZXNpbGllbmNlLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VydmVyIH0gZnJvbSAnLi4vbW9ja3Mvc2VydmVyLmpzJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3N1cGVydGVzdCc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBmb29kUmVzaWxpZW5jZVJvdXRlciBmcm9tICcuLi8uLi9zcmMvcm91dGVzL2Zvb2QtcmVzaWxpZW5jZS5qcyc7XG5cbi8vIEF0ZW5lYSdzIFdpc2RvbTogVGhlIG9sZCwgY2hhb3RpYyBtb2NrcyBhcmUgYmFuaXNoZWQuXG4vLyBXZSBub3cgcmVseSBvbiBIZWZlc3RvJ3MgZ2xvYmFsLCBkZXRlcm1pbmlzdGljIGZldGNoIG1vY2suXG4vLyBObyBkaXJlY3QgbW9ja2luZyBvZiBpbnRlZ3JhdGlvbiBtb2R1bGVzIGlzIG5lZWRlZC5cblxuZGVzY3JpYmUoJ0Zvb2QgUmVzaWxpZW5jZSBSb3V0ZXMnLCAoKSA9PiB7XG4gIGxldCBhcHA7XG5cbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBzZXJ2ZXIubGlzdGVuKCk7XG4gICAgLy8gTm8gbG9uZyB0aW1lb3V0cyBuZWVkZWQuIFRoZSBPcmFjbGUgKGFuZCBtb2NrcykgYXJlIGluc3RhbnRhbmVvdXMuXG4gIH0pO1xuXG4gIGFmdGVyQWxsKCgpID0+IHtcbiAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gQ3JlYXRlIGV4cHJlc3MgYXBwIHdpdGggdGhlIHJvdXRlclxuICAgIGFwcCA9IGV4cHJlc3MoKTtcbiAgICBhcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbiAgICBhcHAudXNlKCcvYXBpL2Zvb2QtcmVzaWxpZW5jZScsIGZvb2RSZXNpbGllbmNlUm91dGVyKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL2Zvb2QtcmVzaWxpZW5jZS9wcmljZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZm9vZCBwcmljZXMgZm9yIGFsbCBwcm9kdWN0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL2FwaS9mb29kLXJlc2lsaWVuY2UvcHJpY2VzJyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmNvdW50cnkpLnRvQmUoJ1BlcnUnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnByaWNlcykudG9IYXZlTGVuZ3RoKDQpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VtbWFyeS5hdmVyYWdlVm9sYXRpbGl0eSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL2Zvb2QtcmVzaWxpZW5jZS9zdXBwbHktY2hhaW4nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gb3B0aW1pemVkIHN1cHBseSBjaGFpbiByb3V0ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvZm9vZC1yZXNpbGllbmNlL3N1cHBseS1jaGFpbicpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5jb3VudHJ5KS50b0JlKCdQZXJ1Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5yb3V0ZXMpLnRvSGF2ZUxlbmd0aCg0KTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm9wdGltaXphdGlvbi5yZWNvbW1lbmRlZFJvdXRlcykudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BPU1QgL2FwaS9mb29kLXJlc2lsaWVuY2UvcHJlZGljdCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIHByaWNlIHByZWRpY3Rpb24gZm9yIHZhbGlkIHByb2R1Y3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9mb29kLXJlc2lsaWVuY2UvcHJlZGljdCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdDogJ3JpY2UnLCB0aW1lZnJhbWU6ICczMF9kYXlzJyB9KTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkucHJvZHVjdCkudG9CZSgncmljZScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkucHJlZGljdGVkUHJpY2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5jb25maWRlbmNlKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gNDAwIGZvciBpbnZhbGlkIHByb2R1Y3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9mb29kLXJlc2lsaWVuY2UvcHJlZGljdCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdDogJycsIHRpbWVmcmFtZTogJzMwX2RheXMnIH0pO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDQwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvcikudG9CZSgnaW52YWxpZF9wcm9kdWN0Jyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE9BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFJLGVBQUEsR0FBQUYsc0JBQUEsQ0FBQUYsT0FBQTtBQUF1RSxTQUFBRSx1QkFBQUcsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUV2RTtBQUNBO0FBQ0E7O0FBRUFHLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxNQUFNO0VBQ3ZDLElBQUlDLEdBQUc7RUFFUEMsU0FBUyxDQUFDLE1BQU07SUFDZEMsY0FBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQztJQUNmO0VBQ0YsQ0FBQyxDQUFDO0VBRUZDLFFBQVEsQ0FBQyxNQUFNO0lBQ2JGLGNBQU0sQ0FBQ0csS0FBSyxDQUFDLENBQUM7RUFDaEIsQ0FBQyxDQUFDO0VBRUZDLFVBQVUsQ0FBQyxNQUFNO0lBQ2Y7SUFDQU4sR0FBRyxHQUFHLElBQUFPLGdCQUFPLEVBQUMsQ0FBQztJQUNmUCxHQUFHLENBQUNRLEdBQUcsQ0FBQ0QsZ0JBQU8sQ0FBQ0UsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN2QlQsR0FBRyxDQUFDUSxHQUFHLENBQUMsc0JBQXNCLEVBQUVFLHVCQUFvQixDQUFDO0VBQ3ZELENBQUMsQ0FBQztFQUVGWCxRQUFRLENBQUMsaUNBQWlDLEVBQUUsTUFBTTtJQUNoRFksRUFBRSxDQUFDLDRDQUE0QyxFQUFFLFlBQVk7TUFDM0QsTUFBTUMsUUFBUSxHQUFHLE1BQU0sSUFBQUMsa0JBQU8sRUFBQ2IsR0FBRyxDQUFDLENBQUNjLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQztNQUV0RUMsTUFBTSxDQUFDSCxRQUFRLENBQUNJLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDO01BQ2pDRixNQUFNLENBQUNILFFBQVEsQ0FBQ00sSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQztNQUMxQ0YsTUFBTSxDQUFDSCxRQUFRLENBQUNNLElBQUksQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLFlBQVksQ0FBQyxDQUFDLENBQUM7TUFDNUNOLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDTSxJQUFJLENBQUNJLE9BQU8sQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7SUFDL0QsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZ6QixRQUFRLENBQUMsdUNBQXVDLEVBQUUsTUFBTTtJQUN0RFksRUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQVk7TUFDNUQsTUFBTUMsUUFBUSxHQUFHLE1BQU0sSUFBQUMsa0JBQU8sRUFBQ2IsR0FBRyxDQUFDLENBQUNjLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQztNQUU1RUMsTUFBTSxDQUFDSCxRQUFRLENBQUNJLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDO01BQ2pDRixNQUFNLENBQUNILFFBQVEsQ0FBQ00sSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQztNQUMxQ0YsTUFBTSxDQUFDSCxRQUFRLENBQUNNLElBQUksQ0FBQ08sTUFBTSxDQUFDLENBQUNKLFlBQVksQ0FBQyxDQUFDLENBQUM7TUFDNUNOLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDTSxJQUFJLENBQUNRLFlBQVksQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQ0gsV0FBVyxDQUFDLENBQUM7SUFDcEUsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZ6QixRQUFRLENBQUMsbUNBQW1DLEVBQUUsTUFBTTtJQUNsRFksRUFBRSxDQUFDLG9EQUFvRCxFQUFFLFlBQVk7TUFDbkUsTUFBTUMsUUFBUSxHQUFHLE1BQU0sSUFBQUMsa0JBQU8sRUFBQ2IsR0FBRyxDQUFDLENBQ2hDNEIsSUFBSSxDQUFDLDhCQUE4QixDQUFDLENBQ3BDQyxJQUFJLENBQUM7UUFBRUMsT0FBTyxFQUFFLE1BQU07UUFBRUMsU0FBUyxFQUFFO01BQVUsQ0FBQyxDQUFDO01BRWxEaEIsTUFBTSxDQUFDSCxRQUFRLENBQUNJLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDO01BQ2pDRixNQUFNLENBQUNILFFBQVEsQ0FBQ00sSUFBSSxDQUFDWSxPQUFPLENBQUMsQ0FBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQztNQUMxQ0YsTUFBTSxDQUFDSCxRQUFRLENBQUNNLElBQUksQ0FBQ2MsY0FBYyxDQUFDLENBQUNSLFdBQVcsQ0FBQyxDQUFDO01BQ2xEVCxNQUFNLENBQUNILFFBQVEsQ0FBQ00sSUFBSSxDQUFDZSxVQUFVLENBQUMsQ0FBQ1QsV0FBVyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDO0lBRUZiLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxZQUFZO01BQ3RELE1BQU1DLFFBQVEsR0FBRyxNQUFNLElBQUFDLGtCQUFPLEVBQUNiLEdBQUcsQ0FBQyxDQUNoQzRCLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUNwQ0MsSUFBSSxDQUFDO1FBQUVDLE9BQU8sRUFBRSxFQUFFO1FBQUVDLFNBQVMsRUFBRTtNQUFVLENBQUMsQ0FBQztNQUU5Q2hCLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDSSxNQUFNLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQztNQUNqQ0YsTUFBTSxDQUFDSCxRQUFRLENBQUNNLElBQUksQ0FBQ2dCLEtBQUssQ0FBQyxDQUFDakIsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ3JELENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==