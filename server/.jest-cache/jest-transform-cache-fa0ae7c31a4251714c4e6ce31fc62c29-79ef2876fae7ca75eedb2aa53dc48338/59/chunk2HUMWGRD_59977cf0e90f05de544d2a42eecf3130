a4836d265562ef523ba810b0a8821b67
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
}); // src/utils/emitAsync.ts
async function emitAsync(emitter, eventName, ...data) {
  const listeners = emitter.listeners(eventName);
  if (listeners.length === 0) {
    return;
  }
  for (const listener of listeners) {
    await listener.apply(emitter, data);
  }
}

// src/utils/hasConfigurableGlobal.ts
function hasConfigurableGlobal(propertyName) {
  const descriptor = Object.getOwnPropertyDescriptor(globalThis, propertyName);
  if (typeof descriptor === "undefined") {
    return false;
  }
  if (typeof descriptor.get === "function" && typeof descriptor.get() === "undefined") {
    return false;
  }
  if (typeof descriptor.get === "undefined" && descriptor.value == null) {
    return false;
  }
  if (typeof descriptor.set === "undefined" && !descriptor.configurable) {
    console.error(`[MSW] Failed to apply interceptor: the global \`${propertyName}\` property is non-configurable. This is likely an issue with your environment. If you are using a framework, please open an issue about this in their repository.`);
    return false;
  }
  return true;
}
exports.emitAsync = emitAsync;
exports.hasConfigurableGlobal = hasConfigurableGlobal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlbWl0QXN5bmMiLCJlbWl0dGVyIiwiZXZlbnROYW1lIiwiZGF0YSIsImxpc3RlbmVycyIsImxlbmd0aCIsImxpc3RlbmVyIiwiYXBwbHkiLCJoYXNDb25maWd1cmFibGVHbG9iYWwiLCJwcm9wZXJ0eU5hbWUiLCJkZXNjcmlwdG9yIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2xvYmFsVGhpcyIsImdldCIsInZhbHVlIiwic2V0IiwiY29uZmlndXJhYmxlIiwiY29uc29sZSIsImVycm9yIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2VtaXRBc3luYy50cyIsIi4uLy4uL3NyYy91dGlscy9oYXNDb25maWd1cmFibGVHbG9iYWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1pdHRlciwgRXZlbnRNYXAgfSBmcm9tICdzdHJpY3QtZXZlbnQtZW1pdHRlcidcblxuLyoqXG4gKiBFbWl0cyBhbiBldmVudCBvbiB0aGUgZ2l2ZW4gZW1pdHRlciBidXQgZXhlY3V0ZXNcbiAqIHRoZSBsaXN0ZW5lcnMgc2VxdWVudGlhbGx5LiBUaGlzIGFjY291bnRzIGZvciBhc3luY2hyb25vdXNcbiAqIGxpc3RlbmVycyAoZS5nLiB0aG9zZSBoYXZpbmcgXCJzbGVlcFwiIGFuZCBoYW5kbGluZyB0aGUgcmVxdWVzdCkuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbWl0QXN5bmM8XG4gIEV2ZW50cyBleHRlbmRzIEV2ZW50TWFwLFxuICBFdmVudE5hbWUgZXh0ZW5kcyBrZXlvZiBFdmVudHNcbj4oXG4gIGVtaXR0ZXI6IEVtaXR0ZXI8RXZlbnRzPixcbiAgZXZlbnROYW1lOiBFdmVudE5hbWUsXG4gIC4uLmRhdGE6IEV2ZW50c1tFdmVudE5hbWVdXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgbGlzdGVuZXJzID0gZW1pdHRlci5saXN0ZW5lcnMoZXZlbnROYW1lKVxuXG4gIGlmIChsaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIGxpc3RlbmVycykge1xuICAgIGF3YWl0IGxpc3RlbmVyLmFwcGx5KGVtaXR0ZXIsIGRhdGEpXG4gIH1cbn1cbiIsIi8qKlxuICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBnaXZlbiBnbG9iYWwgcHJvcGVydHlcbiAqIGlzIGRlZmluZWQgYW5kIGlzIGNvbmZpZ3VyYWJsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0NvbmZpZ3VyYWJsZUdsb2JhbChwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWxUaGlzLCBwcm9wZXJ0eU5hbWUpXG5cbiAgLy8gVGhlIHByb3BlcnR5IGlzIG5vdCBzZXQgYXQgYWxsLlxuICBpZiAodHlwZW9mIGRlc2NyaXB0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUaGUgcHJvcGVydHkgaXMgc2V0IHRvIGEgZ2V0dGVyIHRoYXQgcmV0dXJucyB1bmRlZmluZWQuXG4gIGlmIChcbiAgICB0eXBlb2YgZGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgZGVzY3JpcHRvci5nZXQoKSA9PT0gJ3VuZGVmaW5lZCdcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUaGUgcHJvcGVydHkgaXMgc2V0IHRvIGEgdmFsdWUgZXF1YWwgdG8gdW5kZWZpbmVkLlxuICBpZiAodHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSAndW5kZWZpbmVkJyAmJiBkZXNjcmlwdG9yLnZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGVzY3JpcHRvci5zZXQgPT09ICd1bmRlZmluZWQnICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgW01TV10gRmFpbGVkIHRvIGFwcGx5IGludGVyY2VwdG9yOiB0aGUgZ2xvYmFsIFxcYCR7cHJvcGVydHlOYW1lfVxcYCBwcm9wZXJ0eSBpcyBub24tY29uZmlndXJhYmxlLiBUaGlzIGlzIGxpa2VseSBhbiBpc3N1ZSB3aXRoIHlvdXIgZW52aXJvbm1lbnQuIElmIHlvdSBhcmUgdXNpbmcgYSBmcmFtZXdvcmssIHBsZWFzZSBvcGVuIGFuIGlzc3VlIGFib3V0IHRoaXMgaW4gdGhlaXIgcmVwb3NpdG9yeS5gXG4gICAgKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFPQSxlQUFzQkEsVUFJcEJDLE9BQUEsRUFDQUMsU0FBQSxLQUNHQyxJQUFBLEVBQ1k7RUFDZixNQUFNQyxTQUFBLEdBQVlILE9BQUEsQ0FBUUcsU0FBQSxDQUFVRixTQUFTO0VBRTdDLElBQUlFLFNBQUEsQ0FBVUMsTUFBQSxLQUFXLEdBQUc7SUFDMUI7RUFDRjtFQUVBLFdBQVdDLFFBQUEsSUFBWUYsU0FBQSxFQUFXO0lBQ2hDLE1BQU1FLFFBQUEsQ0FBU0MsS0FBQSxDQUFNTixPQUFBLEVBQVNFLElBQUk7RUFDcEM7QUFDRjs7O0FDcEJPLFNBQVNLLHNCQUFzQkMsWUFBQSxFQUErQjtFQUNuRSxNQUFNQyxVQUFBLEdBQWFDLE1BQUEsQ0FBT0Msd0JBQUEsQ0FBeUJDLFVBQUEsRUFBWUosWUFBWTtFQUczRSxJQUFJLE9BQU9DLFVBQUEsS0FBZSxhQUFhO0lBQ3JDLE9BQU87RUFDVDtFQUdBLElBQ0UsT0FBT0EsVUFBQSxDQUFXSSxHQUFBLEtBQVEsY0FDMUIsT0FBT0osVUFBQSxDQUFXSSxHQUFBLENBQUksTUFBTSxhQUM1QjtJQUNBLE9BQU87RUFDVDtFQUdBLElBQUksT0FBT0osVUFBQSxDQUFXSSxHQUFBLEtBQVEsZUFBZUosVUFBQSxDQUFXSyxLQUFBLElBQVMsTUFBTTtJQUNyRSxPQUFPO0VBQ1Q7RUFFQSxJQUFJLE9BQU9MLFVBQUEsQ0FBV00sR0FBQSxLQUFRLGVBQWUsQ0FBQ04sVUFBQSxDQUFXTyxZQUFBLEVBQWM7SUFDckVDLE9BQUEsQ0FBUUMsS0FBQSxDQUNOLG1EQUFtRFYsWUFBQSxvS0FDckQ7SUFDQSxPQUFPO0VBQ1Q7RUFFQSxPQUFPO0FBQ1QiLCJpZ25vcmVMaXN0IjpbXX0=