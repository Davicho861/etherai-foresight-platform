{"version":3,"names":["_axios","data","_interopRequireDefault","require","e","__esModule","default","fetchRecentTemperature","lat","lon","native","process","env","NATIVE_DEV_MODE","openMeteoMockPort","OPEN_METEO_MOCK_PORT","base","TEST_MODE","url","response","axios","get","timeout","current","current_weather","hourly","humidityArr","relative_humidity_2m","precipitationArr","precipitation_probability","temperature","humidity","Array","isArray","length","weather_code","weathercode","wind_speed","windspeed","error","console","message","Math","random","floor","isMock","source","note","fetchClimatePrediction","days","daily","mockDaily","i","push","time","Date","now","toISOString","slice","temperature_2m_max","temperature_2m_min","precipitation_sum"],"sources":["open-meteo.mock.js"],"sourcesContent":[" \nimport axios from 'axios';\n\n// Wrapper for Open-Meteo calls that respects TEST_MODE and returns a normalized shape\nexport async function fetchRecentTemperature(lat, lon) {\n\n  try {\n    const native = process.env.NATIVE_DEV_MODE === 'true';\n    const openMeteoMockPort = process.env.OPEN_METEO_MOCK_PORT || 4030;\n    const base = native\n      ? `http://localhost:${openMeteoMockPort}/v1/forecast`\n      : (process.env.TEST_MODE === 'true' ? 'http://mock-api-server:3001/open-meteo' : 'https://api.open-meteo.com/v1/forecast');\n    const url = `${base}?latitude=${lat}&longitude=${lon}&current_weather=true&hourly=temperature_2m,relative_humidity_2m,precipitation_probability&timezone=auto`;\n    const response = await axios.get(url, { timeout: 10000 });\n    const data = response.data || {};\n\n    // Defensive access: prefer current_weather and hourly arrays when present\n    const current = data.current_weather || {};\n    const hourly = data.hourly || {};\n    const humidityArr = hourly.relative_humidity_2m || [];\n    const precipitationArr = hourly.precipitation_probability || [];\n\n    return {\n      temperature: current.temperature ?? null,\n      humidity: Array.isArray(humidityArr) && humidityArr.length ? humidityArr[0] : null,\n      precipitation_probability: Array.isArray(precipitationArr) && precipitationArr.length ? precipitationArr[0] : null,\n      weather_code: current.weathercode ?? null,\n      wind_speed: current.windspeed ?? null\n    };\n  } catch (error) {\n    console.error('Error fetching from Open Meteo:', error && error.message ? error.message : error);\n    // Return high-fidelity mock data instead of error\n    return {\n      temperature: 24.5 + Math.random() * 5, // Random temp between 24.5-29.5\n      humidity: 60 + Math.random() * 20, // Random humidity between 60-80\n      precipitation_probability: Math.random() * 30, // Random precipitation 0-30%\n      weather_code: Math.floor(Math.random() * 4), // Random weather code 0-3\n      wind_speed: 2 + Math.random() * 4, // Random wind speed 2-6\n      isMock: true,\n      source: 'high-fidelity-mock',\n      note: 'Open-Meteo API unavailable - using realistic mock data'\n    };\n  }\n}\n\nexport async function fetchClimatePrediction(lat, lon, days = 7) {\n\n  try {\n    const native = process.env.NATIVE_DEV_MODE === 'true';\n    const openMeteoMockPort = process.env.OPEN_METEO_MOCK_PORT || 4030;\n    const base = native\n      ? `http://localhost:${openMeteoMockPort}/v1/forecast`\n      : (process.env.TEST_MODE === 'true' ? 'http://mock-api-server:3001/open-meteo' : 'https://api.open-meteo.com/v1/forecast');\n    const url = `${base}?latitude=${lat}&longitude=${lon}&daily=temperature_2m_max,temperature_2m_min,precipitation_sum,weathercode&timezone=auto&forecast_days=${days}`;\n    const response = await axios.get(url, { timeout: 15000 });\n    return (response.data && response.data.daily) ? response.data.daily : null;\n  } catch (error) {\n    console.error('Error fetching climate prediction:', error && error.message ? error.message : error);\n    // Return high-fidelity mock data instead of error\n    const mockDaily = [];\n    for (let i = 0; i < days; i++) {\n      mockDaily.push({\n        time: new Date(Date.now() + i * 24 * 3600 * 1000).toISOString().slice(0, 10),\n        temperature_2m_max: 25 + Math.random() * 5, // 25-30°C\n        temperature_2m_min: 15 + Math.random() * 5, // 15-20°C\n        precipitation_sum: Math.random() * 10, // 0-10mm\n        weathercode: Math.floor(Math.random() * 4) // 0-3\n      });\n    }\n    return {\n      ...mockDaily,\n      isMock: true,\n      source: 'high-fidelity-mock',\n      note: 'Open-Meteo API unavailable - using realistic climate prediction mock data'\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}