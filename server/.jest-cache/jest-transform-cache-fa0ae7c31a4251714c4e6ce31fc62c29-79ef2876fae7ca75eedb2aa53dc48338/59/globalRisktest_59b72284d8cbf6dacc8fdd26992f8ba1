844b6b0172eb853b8c61744ea0cadf15
"use strict";

// Mock the service layer
_getJestObj().mock('../../src/services/worldBankService.js');
_getJestObj().mock('../../src/services/climateService.js');
_getJestObj().mock('../../src/services/communityResilienceService.js');
var _server = require("../mocks/server.js");
function _supertest() {
  const data = _interopRequireDefault(require("supertest"));
  _supertest = function () {
    return data;
  };
  return data;
}
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
var _globalRiskRoutes = _interopRequireDefault(require("../../src/routes/globalRiskRoutes.js"));
var _worldBankService = require("../../src/services/worldBankService.js");
var _climateService = require("../../src/services/climateService.js");
var _communityResilienceService = require("../../src/services/communityResilienceService.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const app = (0, _express().default)();
app.use(_express().default.json());
app.use('/api/global-risk', _globalRiskRoutes.default);
describe('Global Risk Routes', () => {
  beforeAll(() => {
    _server.server.listen();
  });
  afterAll(() => {
    _server.server.close();
  });
  describe('GET /api/global-risk/food-security', () => {
    it('should return a 200 OK status and the food security data for LATAM countries', async () => {
      const mockData = {
        countries: ['COL', 'PER', 'ARG'],
        year: 2024,
        source: "World Bank API - SN.ITK.DEFC.ZS",
        data: {
          COL: {
            value: 5.2,
            year: '2024',
            country: 'Colombia'
          },
          PER: {
            value: 7.1,
            year: '2024',
            country: 'Peru'
          },
          ARG: {
            value: 4.8,
            year: '2024',
            country: 'Argentina'
          }
        },
        globalAverage: 5.7
      };
      _worldBankService.getFoodSecurityIndex.mockResolvedValue(mockData);
      const response = await (0, _supertest().default)(app).get('/api/global-risk/food-security');
      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.source).toBe('Praevisio-Aion-Simulated-WorldBank');
      expect(response.body.data).toEqual(mockData);
      expect(_worldBankService.getFoodSecurityIndex).toHaveBeenCalledTimes(1);
    });
    it('should handle errors and return a 500 status', async () => {
      const errorMessage = 'Failed to fetch data';
      _worldBankService.getFoodSecurityIndex.mockRejectedValue(new Error(errorMessage));
      const response = await (0, _supertest().default)(app).get('/api/global-risk/food-security');
      expect(response.status).toBe(500);
      expect(response.body.success).toBe(false);
      expect(response.body.message).toContain('Could not retrieve food security data.');
    });
  });
  describe('GET /api/global-risk/climate-extremes', () => {
    it('should return a 200 OK status and the climate extremes data for LATAM countries', async () => {
      const mockData = [{
        country: 'Colombia',
        countryCode: 'COL',
        avgMaxTemp: 28.5,
        avgMinTemp: 18.2,
        totalPrecipitation: 150.3,
        avgHumidity: 75.2,
        extremeEvents: 3,
        riskLevel: 'medium',
        period: 'Last 30 days',
        timestamp: '2025-10-10T18:00:00.000Z'
      }, {
        country: 'Peru',
        countryCode: 'PER',
        avgMaxTemp: 25.8,
        avgMinTemp: 15.6,
        totalPrecipitation: 85.7,
        avgHumidity: 68.9,
        extremeEvents: 2,
        riskLevel: 'low',
        period: 'Last 30 days',
        timestamp: '2025-10-10T18:00:00.000Z'
      }];
      _climateService.getClimateExtremesIndex.mockResolvedValue(mockData);
      const response = await (0, _supertest().default)(app).get('/api/global-risk/climate-extremes');
      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.source).toBe('Praevisio-Aion-NASA-POWER-Integration');
      expect(response.body.data).toEqual(mockData);
      expect(_climateService.getClimateExtremesIndex).toHaveBeenCalledTimes(1);
    });
    it('should handle errors and return a 500 status', async () => {
      const errorMessage = 'Failed to fetch climate data';
      _climateService.getClimateExtremesIndex.mockRejectedValue(new Error(errorMessage));
      const response = await (0, _supertest().default)(app).get('/api/global-risk/climate-extremes');
      expect(response.status).toBe(500);
      expect(response.body.success).toBe(false);
      expect(response.body.message).toContain('Could not retrieve climate extremes data.');
    });
  });
});
describe('GET /api/global-risk/community-resilience', () => {
  it('should return a 200 OK status and the community resilience data for LATAM countries', async () => {
    const mockData = {
      timestamp: '2025-10-11T19:00:00.000Z',
      resilienceAnalysis: {
        COL: {
          socialEvents: 5,
          resilienceScore: 65,
          recommendations: ['Community programs']
        },
        PER: {
          socialEvents: 3,
          resilienceScore: 70,
          recommendations: ['Education initiatives']
        },
        ARG: {
          socialEvents: 7,
          resilienceScore: 55,
          recommendations: ['Social services']
        }
      },
      globalResilienceAssessment: {
        averageResilience: 63.3,
        lowResilienceCountries: ['ARG'],
        assessment: 'Moderate community resilience with some vulnerabilities',
        globalRecommendations: ['Strengthen social networks', 'Improve access to resources']
      },
      source: 'CommunityResilienceAgent'
    };
    _communityResilienceService.getCommunityResilienceIndex.mockResolvedValue(mockData);
    const response = await (0, _supertest().default)(app).get('/api/global-risk/community-resilience');
    expect(response.status).toBe(200);
    expect(response.body.success).toBe(true);
    expect(response.body.source).toBe('Praevisio-Aion-CommunityResilienceAgent');
    expect(response.body.data).toEqual(mockData);
    expect(_communityResilienceService.getCommunityResilienceIndex).toHaveBeenCalledWith(['COL', 'PER', 'ARG'], 30);
  });
  it('should accept custom countries and days parameters', async () => {
    const mockData = {
      timestamp: '2025-10-11T19:00:00.000Z',
      resilienceAnalysis: {
        COL: {
          socialEvents: 5,
          resilienceScore: 65,
          recommendations: ['Community programs']
        }
      },
      globalResilienceAssessment: {
        averageResilience: 65,
        lowResilienceCountries: [],
        assessment: 'Good community resilience',
        globalRecommendations: ['Continue monitoring']
      },
      source: 'CommunityResilienceAgent'
    };
    _communityResilienceService.getCommunityResilienceIndex.mockResolvedValue(mockData);
    const response = await (0, _supertest().default)(app).get('/api/global-risk/community-resilience?countries=COL&days=60');
    expect(response.status).toBe(200);
    expect(_communityResilienceService.getCommunityResilienceIndex).toHaveBeenCalledWith(['COL'], 60);
  });
  it('should handle errors and return a 500 status', async () => {
    const errorMessage = 'Failed to fetch community resilience data';
    _communityResilienceService.getCommunityResilienceIndex.mockRejectedValue(new Error(errorMessage));
    const response = await (0, _supertest().default)(app).get('/api/global-risk/community-resilience');
    expect(response.status).toBe(500);
    expect(response.body.success).toBe(false);
    expect(response.body.message).toContain('Could not retrieve community resilience data.');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,