8599012a5644eeaf6b63214545628729
"use strict";

var _server = require("../mocks/server.js");
describe('worldBankService', () => {
  beforeAll(() => {
    _server.server.listen();
  });
  afterAll(() => {
    _server.server.close();
  });
  afterEach(() => {
    jest.resetModules();
    jest.restoreAllMocks();
  });
  test('returns transformed data from serverless endpoint', async () => {
    // Ensure integration throws so the serverless endpoint path is used
    jest.doMock('../../src/integrations/WorldBankIntegration.js', () => {
      return jest.fn().mockImplementation(() => ({
        getFoodSecurityData: jest.fn().mockRejectedValue(new Error('integration unavailable'))
      }));
    });

    // Mock fetch to return a serverless endpoint shape
    global.fetch = jest.fn().mockResolvedValue({
      ok: true,
      json: async () => ({
        data: [{
          countryCode: 'COL',
          value: 5.2,
          year: '2024',
          country: 'Colombia'
        }, {
          countryCode: 'PER',
          value: 7.1,
          year: '2024',
          country: 'Peru'
        }],
        summary: {
          averageValue: 6.15
        }
      })
    });
    const {
      getFoodSecurityIndex
    } = require('../../src/services/worldBankService');
    const res = await getFoodSecurityIndex();
    expect(res).toBeDefined();
    expect(res.countries).toEqual(['COL', 'PER']);
    expect(res.data.COL.value).toBeCloseTo(5.2);
    expect(res.globalAverage).toBeCloseTo(6.15);
  });
  test('falls back to mock data on fetch error', async () => {
    // Mock integration to throw so function reaches fetch path
    jest.doMock('../../src/integrations/WorldBankIntegration.js', () => {
      return jest.fn().mockImplementation(() => ({
        getFoodSecurityData: jest.fn().mockRejectedValue(new Error('nope'))
      }));
    });
    global.fetch = jest.fn().mockResolvedValue({
      ok: false,
      status: 500
    });
    const {
      getFoodSecurityIndex
    } = require('../../src/services/worldBankService');
    const res = await getFoodSecurityIndex();
    expect(res.source).toMatch(/Fallback Mock Data/);
    expect(res.data.COL).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2VydmVyIiwicmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwic2VydmVyIiwibGlzdGVuIiwiYWZ0ZXJBbGwiLCJjbG9zZSIsImFmdGVyRWFjaCIsImplc3QiLCJyZXNldE1vZHVsZXMiLCJyZXN0b3JlQWxsTW9ja3MiLCJ0ZXN0IiwiZG9Nb2NrIiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJnZXRGb29kU2VjdXJpdHlEYXRhIiwibW9ja1JlamVjdGVkVmFsdWUiLCJFcnJvciIsImdsb2JhbCIsImZldGNoIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJvayIsImpzb24iLCJkYXRhIiwiY291bnRyeUNvZGUiLCJ2YWx1ZSIsInllYXIiLCJjb3VudHJ5Iiwic3VtbWFyeSIsImF2ZXJhZ2VWYWx1ZSIsImdldEZvb2RTZWN1cml0eUluZGV4IiwicmVzIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJjb3VudHJpZXMiLCJ0b0VxdWFsIiwiQ09MIiwidG9CZUNsb3NlVG8iLCJnbG9iYWxBdmVyYWdlIiwic3RhdHVzIiwic291cmNlIiwidG9NYXRjaCJdLCJzb3VyY2VzIjpbIndvcmxkQmFua1NlcnZpY2UudW5pdC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlcnZlciB9IGZyb20gJy4uL21vY2tzL3NlcnZlci5qcyc7XG5cbmRlc2NyaWJlKCd3b3JsZEJhbmtTZXJ2aWNlJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIHNlcnZlci5saXN0ZW4oKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIHNlcnZlci5jbG9zZSgpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRNb2R1bGVzKCk7XG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgdGVzdCgncmV0dXJucyB0cmFuc2Zvcm1lZCBkYXRhIGZyb20gc2VydmVybGVzcyBlbmRwb2ludCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBFbnN1cmUgaW50ZWdyYXRpb24gdGhyb3dzIHNvIHRoZSBzZXJ2ZXJsZXNzIGVuZHBvaW50IHBhdGggaXMgdXNlZFxuICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9zcmMvaW50ZWdyYXRpb25zL1dvcmxkQmFua0ludGVncmF0aW9uLmpzJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgZ2V0Rm9vZFNlY3VyaXR5RGF0YTogamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignaW50ZWdyYXRpb24gdW5hdmFpbGFibGUnKSlcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIC8vIE1vY2sgZmV0Y2ggdG8gcmV0dXJuIGEgc2VydmVybGVzcyBlbmRwb2ludCBzaGFwZVxuICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBvazogdHJ1ZSxcbiAgICAgIGpzb246IGFzeW5jICgpID0+ICh7XG4gICAgICAgIGRhdGE6IFtcbiAgICAgICAgICB7IGNvdW50cnlDb2RlOiAnQ09MJywgdmFsdWU6IDUuMiwgeWVhcjogJzIwMjQnLCBjb3VudHJ5OiAnQ29sb21iaWEnIH0sXG4gICAgICAgICAgeyBjb3VudHJ5Q29kZTogJ1BFUicsIHZhbHVlOiA3LjEsIHllYXI6ICcyMDI0JywgY291bnRyeTogJ1BlcnUnIH1cbiAgICAgICAgXSxcbiAgICAgICAgc3VtbWFyeTogeyBhdmVyYWdlVmFsdWU6IDYuMTUgfVxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgZ2V0Rm9vZFNlY3VyaXR5SW5kZXggfSA9IHJlcXVpcmUoJy4uLy4uL3NyYy9zZXJ2aWNlcy93b3JsZEJhbmtTZXJ2aWNlJyk7XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRGb29kU2VjdXJpdHlJbmRleCgpO1xuXG4gICAgZXhwZWN0KHJlcykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzLmNvdW50cmllcykudG9FcXVhbChbJ0NPTCcsICdQRVInXSk7XG4gICAgZXhwZWN0KHJlcy5kYXRhLkNPTC52YWx1ZSkudG9CZUNsb3NlVG8oNS4yKTtcbiAgICBleHBlY3QocmVzLmdsb2JhbEF2ZXJhZ2UpLnRvQmVDbG9zZVRvKDYuMTUpO1xuICB9KTtcblxuICB0ZXN0KCdmYWxscyBiYWNrIHRvIG1vY2sgZGF0YSBvbiBmZXRjaCBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgICAvLyBNb2NrIGludGVncmF0aW9uIHRvIHRocm93IHNvIGZ1bmN0aW9uIHJlYWNoZXMgZmV0Y2ggcGF0aFxuICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9zcmMvaW50ZWdyYXRpb25zL1dvcmxkQmFua0ludGVncmF0aW9uLmpzJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgZ2V0Rm9vZFNlY3VyaXR5RGF0YTogamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignbm9wZScpKVxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgZ2xvYmFsLmZldGNoID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgb2s6IGZhbHNlLCBzdGF0dXM6IDUwMCB9KTtcblxuICAgIGNvbnN0IHsgZ2V0Rm9vZFNlY3VyaXR5SW5kZXggfSA9IHJlcXVpcmUoJy4uLy4uL3NyYy9zZXJ2aWNlcy93b3JsZEJhbmtTZXJ2aWNlJyk7XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRGb29kU2VjdXJpdHlJbmRleCgpO1xuICAgIGV4cGVjdChyZXMuc291cmNlKS50b01hdGNoKC9GYWxsYmFjayBNb2NrIERhdGEvKTtcbiAgICBleHBlY3QocmVzLmRhdGEuQ09MKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE9BQUEsR0FBQUMsT0FBQTtBQUVBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNqQ0MsU0FBUyxDQUFDLE1BQU07SUFDZEMsY0FBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQztFQUNqQixDQUFDLENBQUM7RUFFRkMsUUFBUSxDQUFDLE1BQU07SUFDYkYsY0FBTSxDQUFDRyxLQUFLLENBQUMsQ0FBQztFQUNoQixDQUFDLENBQUM7RUFFRkMsU0FBUyxDQUFDLE1BQU07SUFDZEMsSUFBSSxDQUFDQyxZQUFZLENBQUMsQ0FBQztJQUNuQkQsSUFBSSxDQUFDRSxlQUFlLENBQUMsQ0FBQztFQUN4QixDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLFlBQVk7SUFDcEU7SUFDQUgsSUFBSSxDQUFDSSxNQUFNLENBQUMsZ0RBQWdELEVBQUUsTUFBTTtNQUNsRSxPQUFPSixJQUFJLENBQUNLLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGtCQUFrQixDQUFDLE9BQU87UUFDekNDLG1CQUFtQixFQUFFUCxJQUFJLENBQUNLLEVBQUUsQ0FBQyxDQUFDLENBQUNHLGlCQUFpQixDQUFDLElBQUlDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQztNQUN2RixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQzs7SUFFRjtJQUNBQyxNQUFNLENBQUNDLEtBQUssR0FBR1gsSUFBSSxDQUFDSyxFQUFFLENBQUMsQ0FBQyxDQUFDTyxpQkFBaUIsQ0FBQztNQUN6Q0MsRUFBRSxFQUFFLElBQUk7TUFDUkMsSUFBSSxFQUFFLE1BQUFBLENBQUEsTUFBYTtRQUNqQkMsSUFBSSxFQUFFLENBQ0o7VUFBRUMsV0FBVyxFQUFFLEtBQUs7VUFBRUMsS0FBSyxFQUFFLEdBQUc7VUFBRUMsSUFBSSxFQUFFLE1BQU07VUFBRUMsT0FBTyxFQUFFO1FBQVcsQ0FBQyxFQUNyRTtVQUFFSCxXQUFXLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUUsR0FBRztVQUFFQyxJQUFJLEVBQUUsTUFBTTtVQUFFQyxPQUFPLEVBQUU7UUFBTyxDQUFDLENBQ2xFO1FBQ0RDLE9BQU8sRUFBRTtVQUFFQyxZQUFZLEVBQUU7UUFBSztNQUNoQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTTtNQUFFQztJQUFxQixDQUFDLEdBQUc5QixPQUFPLENBQUMscUNBQXFDLENBQUM7SUFFL0UsTUFBTStCLEdBQUcsR0FBRyxNQUFNRCxvQkFBb0IsQ0FBQyxDQUFDO0lBRXhDRSxNQUFNLENBQUNELEdBQUcsQ0FBQyxDQUFDRSxXQUFXLENBQUMsQ0FBQztJQUN6QkQsTUFBTSxDQUFDRCxHQUFHLENBQUNHLFNBQVMsQ0FBQyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0NILE1BQU0sQ0FBQ0QsR0FBRyxDQUFDUixJQUFJLENBQUNhLEdBQUcsQ0FBQ1gsS0FBSyxDQUFDLENBQUNZLFdBQVcsQ0FBQyxHQUFHLENBQUM7SUFDM0NMLE1BQU0sQ0FBQ0QsR0FBRyxDQUFDTyxhQUFhLENBQUMsQ0FBQ0QsV0FBVyxDQUFDLElBQUksQ0FBQztFQUM3QyxDQUFDLENBQUM7RUFFRjFCLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxZQUFZO0lBQ3pEO0lBQ0FILElBQUksQ0FBQ0ksTUFBTSxDQUFDLGdEQUFnRCxFQUFFLE1BQU07TUFDbEUsT0FBT0osSUFBSSxDQUFDSyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxrQkFBa0IsQ0FBQyxPQUFPO1FBQ3pDQyxtQkFBbUIsRUFBRVAsSUFBSSxDQUFDSyxFQUFFLENBQUMsQ0FBQyxDQUFDRyxpQkFBaUIsQ0FBQyxJQUFJQyxLQUFLLENBQUMsTUFBTSxDQUFDO01BQ3BFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUZDLE1BQU0sQ0FBQ0MsS0FBSyxHQUFHWCxJQUFJLENBQUNLLEVBQUUsQ0FBQyxDQUFDLENBQUNPLGlCQUFpQixDQUFDO01BQUVDLEVBQUUsRUFBRSxLQUFLO01BQUVrQixNQUFNLEVBQUU7SUFBSSxDQUFDLENBQUM7SUFFdEUsTUFBTTtNQUFFVDtJQUFxQixDQUFDLEdBQUc5QixPQUFPLENBQUMscUNBQXFDLENBQUM7SUFFL0UsTUFBTStCLEdBQUcsR0FBRyxNQUFNRCxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3hDRSxNQUFNLENBQUNELEdBQUcsQ0FBQ1MsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztJQUNoRFQsTUFBTSxDQUFDRCxHQUFHLENBQUNSLElBQUksQ0FBQ2EsR0FBRyxDQUFDLENBQUNILFdBQVcsQ0FBQyxDQUFDO0VBQ3BDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==