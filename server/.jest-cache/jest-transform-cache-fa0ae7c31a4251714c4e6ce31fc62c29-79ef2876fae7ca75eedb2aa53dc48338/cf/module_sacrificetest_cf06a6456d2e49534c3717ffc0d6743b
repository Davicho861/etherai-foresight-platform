9ff10976c459074e6abd16ce5ed87477
"use strict";

const express = require('express');
const request = require('supertest');
describe('routes module and sacrifice', () => {
  beforeEach(() => {
    jest.resetModules();
  });
  test('GET /colombia/overview returns mock data', async () => {
    const router = require('../../src/routes/module.js').default || require('../../src/routes/module.js');
    const app = express();
    app.use('/api/module', router);
    const res = await request(app).get('/api/module/colombia/overview');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('country', 'Colombia');
    expect(res.body).toHaveProperty('data');
  });
  test('GET /run returns blocked true when oracle predicts high probability', async () => {
    const mockPrediction = {
      probability: 0.9,
      reason: 'high risk'
    };
    jest.doMock('../../src/oracle.js', () => {
      return jest.fn().mockImplementation(() => ({
        predictFailure: jest.fn().mockResolvedValue(mockPrediction)
      }));
    });
    const router = require('../../src/routes/sacrifice.js').default || require('../../src/routes/sacrifice.js');
    const app = express();
    app.use('/api/sacrifice', router);
    const res = await request(app).get('/api/sacrifice/run');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('blocked', true);
    expect(res.body).toHaveProperty('prediction');
  });
  test('GET /run returns blocked false when oracle predicts low probability', async () => {
    const mockPrediction = {
      probability: 0.1,
      reason: 'low risk'
    };
    jest.doMock('../../src/oracle.js', () => {
      return jest.fn().mockImplementation(() => ({
        predictFailure: jest.fn().mockResolvedValue(mockPrediction)
      }));
    });
    const router = require('../../src/routes/sacrifice.js').default || require('../../src/routes/sacrifice.js');
    const app = express();
    app.use('/api/sacrifice', router);
    const res = await request(app).get('/api/sacrifice/run');
    expect(res.status).toBe(200);
    expect(res.body).toHaveProperty('blocked', false);
    expect(res.body).toHaveProperty('prediction');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInJlcXVlc3QiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJqZXN0IiwicmVzZXRNb2R1bGVzIiwidGVzdCIsInJvdXRlciIsImRlZmF1bHQiLCJhcHAiLCJ1c2UiLCJyZXMiLCJnZXQiLCJleHBlY3QiLCJzdGF0dXMiLCJ0b0JlIiwiYm9keSIsInRvSGF2ZVByb3BlcnR5IiwibW9ja1ByZWRpY3Rpb24iLCJwcm9iYWJpbGl0eSIsInJlYXNvbiIsImRvTW9jayIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicHJlZGljdEZhaWx1cmUiLCJtb2NrUmVzb2x2ZWRWYWx1ZSJdLCJzb3VyY2VzIjpbIm1vZHVsZV9zYWNyaWZpY2UudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpXG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0JylcblxuZGVzY3JpYmUoJ3JvdXRlcyBtb2R1bGUgYW5kIHNhY3JpZmljZScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXNldE1vZHVsZXMoKVxuICB9KVxuXG4gIHRlc3QoJ0dFVCAvY29sb21iaWEvb3ZlcnZpZXcgcmV0dXJucyBtb2NrIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgcm91dGVyID0gcmVxdWlyZSgnLi4vLi4vc3JjL3JvdXRlcy9tb2R1bGUuanMnKS5kZWZhdWx0IHx8IHJlcXVpcmUoJy4uLy4uL3NyYy9yb3V0ZXMvbW9kdWxlLmpzJylcbiAgICBjb25zdCBhcHAgPSBleHByZXNzKClcbiAgICBhcHAudXNlKCcvYXBpL21vZHVsZScsIHJvdXRlcilcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvbW9kdWxlL2NvbG9tYmlhL292ZXJ2aWV3JylcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApXG4gICAgZXhwZWN0KHJlcy5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnY291bnRyeScsICdDb2xvbWJpYScpXG4gICAgZXhwZWN0KHJlcy5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnZGF0YScpXG4gIH0pXG5cbiAgdGVzdCgnR0VUIC9ydW4gcmV0dXJucyBibG9ja2VkIHRydWUgd2hlbiBvcmFjbGUgcHJlZGljdHMgaGlnaCBwcm9iYWJpbGl0eScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrUHJlZGljdGlvbiA9IHsgcHJvYmFiaWxpdHk6IDAuOSwgcmVhc29uOiAnaGlnaCByaXNrJyB9XG4gICAgamVzdC5kb01vY2soJy4uLy4uL3NyYy9vcmFjbGUuanMnLCAoKSA9PiB7XG4gICAgICByZXR1cm4gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICBwcmVkaWN0RmFpbHVyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcmVkaWN0aW9uKVxuICAgICAgfSkpXG4gICAgfSlcblxuICAgIGNvbnN0IHJvdXRlciA9IHJlcXVpcmUoJy4uLy4uL3NyYy9yb3V0ZXMvc2FjcmlmaWNlLmpzJykuZGVmYXVsdCB8fCByZXF1aXJlKCcuLi8uLi9zcmMvcm91dGVzL3NhY3JpZmljZS5qcycpXG4gICAgY29uc3QgYXBwID0gZXhwcmVzcygpXG4gICAgYXBwLnVzZSgnL2FwaS9zYWNyaWZpY2UnLCByb3V0ZXIpXG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvYXBpL3NhY3JpZmljZS9ydW4nKVxuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMClcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdibG9ja2VkJywgdHJ1ZSlcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdwcmVkaWN0aW9uJylcbiAgfSlcblxuICB0ZXN0KCdHRVQgL3J1biByZXR1cm5zIGJsb2NrZWQgZmFsc2Ugd2hlbiBvcmFjbGUgcHJlZGljdHMgbG93IHByb2JhYmlsaXR5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tQcmVkaWN0aW9uID0geyBwcm9iYWJpbGl0eTogMC4xLCByZWFzb246ICdsb3cgcmlzaycgfVxuICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9zcmMvb3JhY2xlLmpzJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgcHJlZGljdEZhaWx1cmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUHJlZGljdGlvbilcbiAgICAgIH0pKVxuICAgIH0pXG5cbiAgICBjb25zdCByb3V0ZXIgPSByZXF1aXJlKCcuLi8uLi9zcmMvcm91dGVzL3NhY3JpZmljZS5qcycpLmRlZmF1bHQgfHwgcmVxdWlyZSgnLi4vLi4vc3JjL3JvdXRlcy9zYWNyaWZpY2UuanMnKVxuICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuICAgIGFwcC51c2UoJy9hcGkvc2FjcmlmaWNlJywgcm91dGVyKVxuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL2FwaS9zYWNyaWZpY2UvcnVuJylcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApXG4gICAgZXhwZWN0KHJlcy5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnYmxvY2tlZCcsIGZhbHNlKVxuICAgIGV4cGVjdChyZXMuYm9keSkudG9IYXZlUHJvcGVydHkoJ3ByZWRpY3Rpb24nKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsV0FBVyxDQUFDO0FBRXBDRSxRQUFRLENBQUMsNkJBQTZCLEVBQUUsTUFBTTtFQUM1Q0MsVUFBVSxDQUFDLE1BQU07SUFDZkMsSUFBSSxDQUFDQyxZQUFZLENBQUMsQ0FBQztFQUNyQixDQUFDLENBQUM7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