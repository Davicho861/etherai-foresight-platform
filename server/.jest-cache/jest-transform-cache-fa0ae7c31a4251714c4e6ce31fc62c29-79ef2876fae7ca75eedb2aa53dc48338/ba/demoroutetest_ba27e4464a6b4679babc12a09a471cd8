90e7d46cb7d77bcaeae9394d1ad5a755
"use strict";

var _server = require("../mocks/server.js");
const request = require('supertest');
const express = require('express');
describe('/api/demo routes', () => {
  beforeAll(() => {
    _server.server.listen({
      onUnhandledRequest: 'bypass'
    });
  });
  afterAll(() => {
    _server.server.close();
  });
  afterEach(() => {
    _server.server.resetHandlers();
    jest.resetModules();
    jest.restoreAllMocks();
    delete process.env.FORCE_MOCKS;
  });
  test('GET /full-state returns aggregated structure', async () => {
    await jest.isolateModulesAsync(async () => {
      // Mock prisma.moduleData.findMany to return some historical entries
      jest.doMock('../../src/prisma.js', () => ({
        moduleData: {
          findMany: jest.fn().mockResolvedValue([{
            timestamp: new Date('2025-04-01'),
            value: 90
          }, {
            timestamp: new Date('2025-05-01'),
            value: 92
          }, {
            timestamp: new Date('2025-06-01'),
            value: 91
          }])
        }
      }));
      const demoRouter = require('../../src/routes/demo.js');
      let router = demoRouter;
      if (router && router.default) router = router.default;
      const app = express();
      app.use('/api/demo', router);
      const res = await request(app).get('/api/demo/full-state').set('Host', 'localhost');
      expect(res.statusCode).toBe(200);
      expect(res.body.kpis).toBeDefined();
      expect(Array.isArray(res.body.countries)).toBe(true);
      expect(res.body.countries.length).toBeGreaterThan(0);
      expect(Array.isArray(res.body.chartData)).toBe(true);
    });
  });
  test('GET /mission-replays returns items from fallback when no chroma client', async () => {
    await jest.isolateModulesAsync(async () => {
      // Mock getChromaClient to return null so code reads local file
      jest.doMock('../../src/database.js', () => ({
        getChromaClient: jest.fn(() => null)
      }));

      // Mock fs/promises access and readFile
      jest.doMock('fs/promises', () => ({
        access: jest.fn().mockResolvedValue(true),
        readFile: jest.fn().mockResolvedValue(JSON.stringify({
          id: 'x'
        }) + '\n')
      }));
      const demoRouter = require('../../src/routes/demo.js');
      let router = demoRouter;
      if (router && router.default) router = router.default;
      const app = express();
      app.use('/api/demo', router);
      const res = await request(app).get('/api/demo/mission-replays').set('Host', 'localhost');
      expect(res.statusCode).toBe(200);
      expect(Array.isArray(res.body.taskReplays)).toBe(true);
      expect(res.body.taskReplays.length).toBeGreaterThanOrEqual(1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,