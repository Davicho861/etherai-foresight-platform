{"version":3,"names":["parseGraphQLRequest_exports","__export","parseDocumentNode","parseGraphQLRequest","module","exports","__toCommonJS","import_toPublicUrl","require","import_devUtils","import_jsonParse","import_parseMultipartData","node","operationDef","definitions","find","definition","kind","operationType","operation","operationName","name","value","parseQuery","query","parse","ast","error","extractMultipartVariables","variables","map","files","operations","key","pathArray","Object","entries","Error","dotPath","lastPath","reversedPaths","split","reverse","paths","target","path","getGraphQLInput","request","method","url","URL","searchParams","get","jsonParse","requestClone","clone","headers","includes","responseJson","parseMultipartData","text","parsedOperations","parsedMap","requestJson","json","catch","input","parsedResult","requestPublicUrl","toPublicUrl","devUtils","formatMessage","message"],"sources":["../../../../src/core/utils/internal/parseGraphQLRequest.ts"],"sourcesContent":["import type {\n  DocumentNode,\n  OperationDefinitionNode,\n  OperationTypeNode,\n} from 'graphql'\nimport type { GraphQLVariables } from '../../handlers/GraphQLHandler'\nimport { toPublicUrl } from '../request/toPublicUrl'\nimport { devUtils } from './devUtils'\nimport { jsonParse } from './jsonParse'\nimport { parseMultipartData } from './parseMultipartData'\n\ninterface GraphQLInput {\n  query: string | null\n  variables?: GraphQLVariables\n}\n\nexport interface ParsedGraphQLQuery {\n  operationType: OperationTypeNode\n  operationName?: string\n}\n\nexport type ParsedGraphQLRequest<\n  VariablesType extends GraphQLVariables = GraphQLVariables,\n> =\n  | (ParsedGraphQLQuery & {\n      query: string\n      variables?: VariablesType\n    })\n  | undefined\n\nexport function parseDocumentNode(node: DocumentNode): ParsedGraphQLQuery {\n  const operationDef = node.definitions.find((definition) => {\n    return definition.kind === 'OperationDefinition'\n  }) as OperationDefinitionNode\n\n  return {\n    operationType: operationDef?.operation,\n    operationName: operationDef?.name?.value,\n  }\n}\n\nasync function parseQuery(query: string): Promise<ParsedGraphQLQuery | Error> {\n  /**\n   * @note Use `require` to get the \"graphql\" module here.\n   * It has to be scoped to this function because this module leaks to the\n   * root export. It has to be `require` because tools like Jest have trouble\n   * handling dynamic imports. It gets replaced with a dynamic import on build time.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  const { parse } = require('graphql')\n\n  try {\n    const ast = parse(query)\n    return parseDocumentNode(ast)\n  } catch (error) {\n    return error as Error\n  }\n}\n\nexport type GraphQLParsedOperationsMap = Record<string, string[]>\nexport type GraphQLMultipartRequestBody = {\n  operations: string\n  map?: string\n} & {\n  [fileName: string]: File\n}\n\nfunction extractMultipartVariables<VariablesType extends GraphQLVariables>(\n  variables: VariablesType,\n  map: GraphQLParsedOperationsMap,\n  files: Record<string, File>,\n) {\n  const operations = { variables }\n\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`)\n    }\n\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split('.').reverse()\n      const paths = reversedPaths.reverse()\n      let target: Record<string, any> = operations\n\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`)\n        }\n\n        target = target[path]\n      }\n\n      target[lastPath] = files[key]\n    }\n  }\n\n  return operations.variables\n}\n\nasync function getGraphQLInput(request: Request): Promise<GraphQLInput | null> {\n  switch (request.method) {\n    case 'GET': {\n      const url = new URL(request.url)\n      const query = url.searchParams.get('query')\n      const variables = url.searchParams.get('variables') || ''\n\n      return {\n        query,\n        variables: jsonParse(variables),\n      }\n    }\n\n    case 'POST': {\n      // Clone the request so we could read its body without locking\n      // the body stream to the downward consumers.\n      const requestClone = request.clone()\n\n      // Handle multipart body GraphQL operations.\n      if (\n        request.headers.get('content-type')?.includes('multipart/form-data')\n      ) {\n        const responseJson = parseMultipartData<GraphQLMultipartRequestBody>(\n          await requestClone.text(),\n          request.headers,\n        )\n\n        if (!responseJson) {\n          return null\n        }\n\n        const { operations, map, ...files } = responseJson\n        const parsedOperations =\n          jsonParse<{ query?: string; variables?: GraphQLVariables }>(\n            operations,\n          ) || {}\n\n        if (!parsedOperations.query) {\n          return null\n        }\n\n        const parsedMap = jsonParse<GraphQLParsedOperationsMap>(map || '') || {}\n        const variables = parsedOperations.variables\n          ? extractMultipartVariables(\n              parsedOperations.variables,\n              parsedMap,\n              files,\n            )\n          : {}\n\n        return {\n          query: parsedOperations.query,\n          variables,\n        }\n      }\n\n      // Handle plain POST GraphQL operations.\n      const requestJson: {\n        query: string\n        variables?: GraphQLVariables\n        operations?: any /** @todo Annotate this */\n      } = await requestClone.json().catch(() => null)\n\n      if (requestJson?.query) {\n        const { query, variables } = requestJson\n\n        return {\n          query,\n          variables,\n        }\n      }\n      return null\n    }\n\n    default:\n      return null\n  }\n}\n\n/**\n * Determines if a given request can be considered a GraphQL request.\n * Does not parse the query and does not guarantee its validity.\n */\nexport async function parseGraphQLRequest(\n  request: Request,\n): Promise<ParsedGraphQLRequest> {\n  const input = await getGraphQLInput(request)\n\n  if (!input || !input.query) {\n    return\n  }\n\n  const { query, variables } = input\n  const parsedResult = await parseQuery(query)\n\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = toPublicUrl(request.url)\n\n    throw new Error(\n      devUtils.formatMessage(\n        'Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s',\n        request.method,\n        requestPublicUrl,\n        parsedResult.message,\n      ),\n    )\n  }\n\n  return {\n    query: input.query,\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables,\n  }\n}\n"],"mappings":"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","ignoreList":[]}