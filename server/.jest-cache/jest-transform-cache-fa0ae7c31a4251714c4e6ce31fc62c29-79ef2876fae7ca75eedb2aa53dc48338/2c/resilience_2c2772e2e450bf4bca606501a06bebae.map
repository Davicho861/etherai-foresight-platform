{"version":3,"names":["cov_2piixth3qh","actualCoverage","CircuitBreaker","constructor","failureThreshold","b","recoveryTimeout","f","s","failureCount","lastFailureTime","state","execute","fn","Date","now","Error","result","onSuccess","error","onFailure","exports","retryWithBackoff","maxRetries","baseDelay","maxDelay","lastError","attempt","delay","Math","min","pow","jitter","random","totalDelay","console","log","toFixed","message","Promise","resolve","setTimeout","fetchWithTimeout","url","options","timeout","controller","AbortController","timeoutId","timeoutPromise","_","reject","abort","e","defaultHeaders","mergedOptions","headers","signal","response","race","fetch","clearTimeout","name","isJsonResponse","contentType","get","includes"],"sources":["resilience.js"],"sourcesContent":["/**\n * Utilidades de resiliencia para APIs externas\n * Incluye retry logic, circuit breaker y timeouts\n */\n\nclass CircuitBreaker {\n  constructor(failureThreshold = 3, recoveryTimeout = 60000) {\n    this.failureThreshold = failureThreshold;\n    this.recoveryTimeout = recoveryTimeout;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN\n  }\n\n  async execute(fn) {\n    if (this.state === 'OPEN') {\n      if (Date.now() - this.lastFailureTime > this.recoveryTimeout) {\n        this.state = 'HALF_OPEN';\n      } else {\n        throw new Error('Circuit breaker is OPEN');\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  onSuccess() {\n    this.failureCount = 0;\n    this.state = 'CLOSED';\n  }\n\n  onFailure() {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n    if (this.failureCount >= this.failureThreshold) {\n      this.state = 'OPEN';\n    }\n  }\n}\n\nasync function retryWithBackoff(fn, maxRetries = 3, baseDelay = 1000, maxDelay = 10000) {\n  let lastError;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n\n      if (attempt === maxRetries) {\n        break;\n      }\n\n      // Exponential backoff with jitter\n      const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n      const jitter = Math.random() * 0.1 * delay;\n      const totalDelay = delay + jitter;\n\n      console.log(`Retry attempt ${attempt + 1}/${maxRetries} after ${totalDelay.toFixed(0)}ms: ${error.message}`);\n      await new Promise(resolve => setTimeout(resolve, totalDelay));\n    }\n  }\n\n  throw lastError;\n}\n\nasync function fetchWithTimeout(url, options = {}, timeout = 10000) {\n  const controller = new AbortController();\n\n  // Create a timeout promise that rejects after `timeout` ms.\n  // We still call controller.abort() to keep behavior when real fetch supports it,\n  // but also race the fetch against this timeout so mocked fetches that ignore\n  // the signal don't hang the test.\n  let timeoutId;\n  const timeoutPromise = new Promise((_, reject) => {\n    timeoutId = setTimeout(() => {\n      try { controller.abort(); } catch (e) {}\n      reject(new Error(`Request timeout after ${timeout}ms`));\n    }, timeout);\n  });\n\n  try {\n    // Provide conservative default headers to reduce chance of being blocked by upstream providers\n    const defaultHeaders = {\n      'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)',\n      'Accept': 'application/json, text/plain, */*'\n    };\n    const mergedOptions = { ...options, headers: { ...(options.headers || {}), ...defaultHeaders }, signal: controller.signal };\n    const response = await Promise.race([\n      fetch(url, mergedOptions),\n      timeoutPromise\n    ]);\n\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    // If the fetch was aborted and produced an AbortError, normalize the message\n    if (error && error.name === 'AbortError') {\n      throw new Error(`Request timeout after ${timeout}ms`);\n    }\n    throw error;\n  }\n}\n\nfunction isJsonResponse(response) {\n  const contentType = response.headers.get('content-type');\n  return !!(contentType && contentType.includes('application/json'));\n}\n\nexport { CircuitBreaker, retryWithBackoff, fetchWithTimeout, isJsonResponse };"],"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","ignoreList":[]}