4d2a247f4fab1718c19efe0dbb2e4c9f
"use strict";

process.env.FORCE_MOCKS = 'true';
process.env.NODE_ENV = 'test';
const cache = require('../../src/cache.js');
const {
  runProphecyCycle,
  getRiskIndices
} = require('../../src/services/predictionEngine.js');
describe('predictionEngine - runProphecyCycle with FORCE_MOCKS', () => {
  beforeEach(() => {
    jest.resetModules();
    // clear the cache singleton
    cache.default.clear();
  });
  test('updates famine, geophysical, supply chain, climate indices and ethical assessment', async () => {
    process.env.FORCE_MOCKS = 'true';
    const before = getRiskIndices();
    expect(before.multiDomainRiskIndex.value).toBeNull();
    await runProphecyCycle();
    const after = getRiskIndices();
    expect(after.multiDomainRiskIndex.value).not.toBeNull();
    expect(after.riskIndices.famineRisk.value).not.toBeNull();
    expect(after.riskIndices.geophysicalRisk.value).not.toBeNull();
    expect(after.riskIndices.supplyChainRisk.value).not.toBeNull();
    expect(after.riskIndices.climateExtremesRisk.value).not.toBeNull();
    expect(after.ethicalAssessment).toBeDefined();
    expect(after.lastUpdated).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwcm9jZXNzIiwiZW52IiwiRk9SQ0VfTU9DS1MiLCJOT0RFX0VOViIsImNhY2hlIiwicmVxdWlyZSIsInJ1blByb3BoZWN5Q3ljbGUiLCJnZXRSaXNrSW5kaWNlcyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImplc3QiLCJyZXNldE1vZHVsZXMiLCJkZWZhdWx0IiwiY2xlYXIiLCJ0ZXN0IiwiYmVmb3JlIiwiZXhwZWN0IiwibXVsdGlEb21haW5SaXNrSW5kZXgiLCJ2YWx1ZSIsInRvQmVOdWxsIiwiYWZ0ZXIiLCJub3QiLCJyaXNrSW5kaWNlcyIsImZhbWluZVJpc2siLCJnZW9waHlzaWNhbFJpc2siLCJzdXBwbHlDaGFpblJpc2siLCJjbGltYXRlRXh0cmVtZXNSaXNrIiwiZXRoaWNhbEFzc2Vzc21lbnQiLCJ0b0JlRGVmaW5lZCIsImxhc3RVcGRhdGVkIl0sInNvdXJjZXMiOlsicHJlZGljdGlvbkVuZ2luZS51bml0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsicHJvY2Vzcy5lbnYuRk9SQ0VfTU9DS1MgPSAndHJ1ZSc7XG5wcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcblxuY29uc3QgY2FjaGUgPSByZXF1aXJlKCcuLi8uLi9zcmMvY2FjaGUuanMnKTtcblxuY29uc3QgeyBydW5Qcm9waGVjeUN5Y2xlLCBnZXRSaXNrSW5kaWNlcyB9ID0gcmVxdWlyZSgnLi4vLi4vc3JjL3NlcnZpY2VzL3ByZWRpY3Rpb25FbmdpbmUuanMnKTtcblxuZGVzY3JpYmUoJ3ByZWRpY3Rpb25FbmdpbmUgLSBydW5Qcm9waGVjeUN5Y2xlIHdpdGggRk9SQ0VfTU9DS1MnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRNb2R1bGVzKCk7XG4gICAgLy8gY2xlYXIgdGhlIGNhY2hlIHNpbmdsZXRvblxuICAgIGNhY2hlLmRlZmF1bHQuY2xlYXIoKTtcbiAgfSk7XG5cbiAgdGVzdCgndXBkYXRlcyBmYW1pbmUsIGdlb3BoeXNpY2FsLCBzdXBwbHkgY2hhaW4sIGNsaW1hdGUgaW5kaWNlcyBhbmQgZXRoaWNhbCBhc3Nlc3NtZW50JywgYXN5bmMgKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LkZPUkNFX01PQ0tTID0gJ3RydWUnO1xuICAgIGNvbnN0IGJlZm9yZSA9IGdldFJpc2tJbmRpY2VzKCk7XG4gICAgZXhwZWN0KGJlZm9yZS5tdWx0aURvbWFpblJpc2tJbmRleC52YWx1ZSkudG9CZU51bGwoKTtcblxuICAgIGF3YWl0IHJ1blByb3BoZWN5Q3ljbGUoKTtcblxuICAgIGNvbnN0IGFmdGVyID0gZ2V0Umlza0luZGljZXMoKTtcbiAgICBleHBlY3QoYWZ0ZXIubXVsdGlEb21haW5SaXNrSW5kZXgudmFsdWUpLm5vdC50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChhZnRlci5yaXNrSW5kaWNlcy5mYW1pbmVSaXNrLnZhbHVlKS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QoYWZ0ZXIucmlza0luZGljZXMuZ2VvcGh5c2ljYWxSaXNrLnZhbHVlKS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QoYWZ0ZXIucmlza0luZGljZXMuc3VwcGx5Q2hhaW5SaXNrLnZhbHVlKS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QoYWZ0ZXIucmlza0luZGljZXMuY2xpbWF0ZUV4dHJlbWVzUmlzay52YWx1ZSkubm90LnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KGFmdGVyLmV0aGljYWxBc3Nlc3NtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChhZnRlci5sYXN0VXBkYXRlZCkudG9CZURlZmluZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFdBQVcsR0FBRyxNQUFNO0FBQ2hDRixPQUFPLENBQUNDLEdBQUcsQ0FBQ0UsUUFBUSxHQUFHLE1BQU07QUFFN0IsTUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFFM0MsTUFBTTtFQUFFQyxnQkFBZ0I7RUFBRUM7QUFBZSxDQUFDLEdBQUdGLE9BQU8sQ0FBQyx3Q0FBd0MsQ0FBQztBQUU5RkcsUUFBUSxDQUFDLHNEQUFzRCxFQUFFLE1BQU07RUFDckVDLFVBQVUsQ0FBQyxNQUFNO0lBQ2ZDLElBQUksQ0FBQ0MsWUFBWSxDQUFDLENBQUM7SUFDbkI7SUFDQVAsS0FBSyxDQUFDUSxPQUFPLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ3ZCLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsbUZBQW1GLEVBQUUsWUFBWTtJQUNwR2QsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFdBQVcsR0FBRyxNQUFNO0lBQ2hDLE1BQU1hLE1BQU0sR0FBR1IsY0FBYyxDQUFDLENBQUM7SUFDL0JTLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxvQkFBb0IsQ0FBQ0MsS0FBSyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxDQUFDO0lBRXBELE1BQU1iLGdCQUFnQixDQUFDLENBQUM7SUFFeEIsTUFBTWMsS0FBSyxHQUFHYixjQUFjLENBQUMsQ0FBQztJQUM5QlMsTUFBTSxDQUFDSSxLQUFLLENBQUNILG9CQUFvQixDQUFDQyxLQUFLLENBQUMsQ0FBQ0csR0FBRyxDQUFDRixRQUFRLENBQUMsQ0FBQztJQUN2REgsTUFBTSxDQUFDSSxLQUFLLENBQUNFLFdBQVcsQ0FBQ0MsVUFBVSxDQUFDTCxLQUFLLENBQUMsQ0FBQ0csR0FBRyxDQUFDRixRQUFRLENBQUMsQ0FBQztJQUN6REgsTUFBTSxDQUFDSSxLQUFLLENBQUNFLFdBQVcsQ0FBQ0UsZUFBZSxDQUFDTixLQUFLLENBQUMsQ0FBQ0csR0FBRyxDQUFDRixRQUFRLENBQUMsQ0FBQztJQUM5REgsTUFBTSxDQUFDSSxLQUFLLENBQUNFLFdBQVcsQ0FBQ0csZUFBZSxDQUFDUCxLQUFLLENBQUMsQ0FBQ0csR0FBRyxDQUFDRixRQUFRLENBQUMsQ0FBQztJQUM5REgsTUFBTSxDQUFDSSxLQUFLLENBQUNFLFdBQVcsQ0FBQ0ksbUJBQW1CLENBQUNSLEtBQUssQ0FBQyxDQUFDRyxHQUFHLENBQUNGLFFBQVEsQ0FBQyxDQUFDO0lBQ2xFSCxNQUFNLENBQUNJLEtBQUssQ0FBQ08saUJBQWlCLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7SUFDN0NaLE1BQU0sQ0FBQ0ksS0FBSyxDQUFDUyxXQUFXLENBQUMsQ0FBQ0QsV0FBVyxDQUFDLENBQUM7RUFDekMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119