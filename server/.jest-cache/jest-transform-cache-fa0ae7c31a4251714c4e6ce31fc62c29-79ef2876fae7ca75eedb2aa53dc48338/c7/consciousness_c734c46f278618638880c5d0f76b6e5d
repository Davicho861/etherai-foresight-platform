9610491de9e1f44c83806e82b6d2fbb1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
var _database = require("../database.js");
function _promises() {
  const data = _interopRequireDefault(require("fs/promises"));
  _promises = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const router = _express().default.Router();

// GET /api/consciousness
router.get('/', async (req, res) => {
  try {
    const client = (0, _database.getChromaClient)();
    const clientUsable = client && typeof client.getOrCreateCollection === 'function' && !client.mock;
    if (clientUsable) {
      const collection = await client.getOrCreateCollection({
        name: 'failure_patterns'
      });
      const all = await collection.get();
      const docs = (all || {}).documents || [];
      const metadatas = (all || {}).metadatas || [];
      const ids = (all || {}).ids || [];
      const result = ids.map((id, i) => ({
        id,
        error: docs[i],
        metadata: metadatas[i]
      }));
      return res.json({
        source: 'chroma',
        items: result
      });
    }

    // Fallback: read local JSONL
    const p = _path().default.join(process.cwd(), 'server', 'data', 'failure_patterns.jsonl');
    const exists = await _promises().default.access(p).then(() => true).catch(() => false);
    if (!exists) return res.json({
      source: 'local',
      items: []
    });
    const txt = await _promises().default.readFile(p, 'utf8');
    const lines = txt.split('\n').filter(Boolean);
    const items = lines.map(l => {
      try {
        return JSON.parse(l);
      } catch {
        return {
          raw: l
        };
      }
    });
    return res.json({
      source: 'local',
      items
    });
  } catch (e) {
    console.error('consciousness route error', e);
    return res.status(500).json({
      error: 'Internal server error'
    });
  }
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kYXRhYmFzZSIsIl9wcm9taXNlcyIsIl9wYXRoIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwicm91dGVyIiwiZXhwcmVzcyIsIlJvdXRlciIsImdldCIsInJlcSIsInJlcyIsImNsaWVudCIsImdldENocm9tYUNsaWVudCIsImNsaWVudFVzYWJsZSIsImdldE9yQ3JlYXRlQ29sbGVjdGlvbiIsIm1vY2siLCJjb2xsZWN0aW9uIiwibmFtZSIsImFsbCIsImRvY3MiLCJkb2N1bWVudHMiLCJtZXRhZGF0YXMiLCJpZHMiLCJyZXN1bHQiLCJtYXAiLCJpZCIsImkiLCJlcnJvciIsIm1ldGFkYXRhIiwianNvbiIsInNvdXJjZSIsIml0ZW1zIiwicCIsInBhdGgiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsImV4aXN0cyIsImZzIiwiYWNjZXNzIiwidGhlbiIsImNhdGNoIiwidHh0IiwicmVhZEZpbGUiLCJsaW5lcyIsInNwbGl0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImwiLCJKU09OIiwicGFyc2UiLCJyYXciLCJjb25zb2xlIiwic3RhdHVzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiY29uc2Npb3VzbmVzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IGdldENocm9tYUNsaWVudCB9IGZyb20gJy4uL2RhdGFiYXNlLmpzJztcbmltcG9ydCBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuLy8gR0VUIC9hcGkvY29uc2Npb3VzbmVzc1xucm91dGVyLmdldCgnLycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNsaWVudCA9IGdldENocm9tYUNsaWVudCgpO1xuICAgIGNvbnN0IGNsaWVudFVzYWJsZSA9IGNsaWVudCAmJiB0eXBlb2YgY2xpZW50LmdldE9yQ3JlYXRlQ29sbGVjdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJiAhY2xpZW50Lm1vY2s7XG4gICAgaWYgKGNsaWVudFVzYWJsZSkge1xuICAgICAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IGNsaWVudC5nZXRPckNyZWF0ZUNvbGxlY3Rpb24oeyBuYW1lOiAnZmFpbHVyZV9wYXR0ZXJucycgfSk7XG4gICAgICBjb25zdCBhbGwgPSBhd2FpdCBjb2xsZWN0aW9uLmdldCgpO1xuICAgICAgY29uc3QgZG9jcyA9IChhbGwgfHwge30pLmRvY3VtZW50cyB8fCBbXTtcbiAgICAgIGNvbnN0IG1ldGFkYXRhcyA9IChhbGwgfHwge30pLm1ldGFkYXRhcyB8fCBbXTtcbiAgICAgIGNvbnN0IGlkcyA9IChhbGwgfHwge30pLmlkcyB8fCBbXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGlkcy5tYXAoKGlkLCBpKSA9PiAoeyBpZCwgZXJyb3I6IGRvY3NbaV0sIG1ldGFkYXRhOiBtZXRhZGF0YXNbaV0gfSkpO1xuICAgICAgcmV0dXJuIHJlcy5qc29uKHsgc291cmNlOiAnY2hyb21hJywgaXRlbXM6IHJlc3VsdCB9KTtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjazogcmVhZCBsb2NhbCBKU09OTFxuICAgIGNvbnN0IHAgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3NlcnZlcicsICdkYXRhJywgJ2ZhaWx1cmVfcGF0dGVybnMuanNvbmwnKTtcbiAgICBjb25zdCBleGlzdHMgPSBhd2FpdCBmcy5hY2Nlc3MocCkudGhlbigoKSA9PiB0cnVlKS5jYXRjaCgoKSA9PiBmYWxzZSk7XG4gICAgaWYgKCFleGlzdHMpIHJldHVybiByZXMuanNvbih7IHNvdXJjZTogJ2xvY2FsJywgaXRlbXM6IFtdIH0pO1xuICAgIGNvbnN0IHR4dCA9IGF3YWl0IGZzLnJlYWRGaWxlKHAsICd1dGY4Jyk7XG4gICAgY29uc3QgbGluZXMgPSB0eHQuc3BsaXQoJ1xcbicpLmZpbHRlcihCb29sZWFuKTtcbiAgICBjb25zdCBpdGVtcyA9IGxpbmVzLm1hcChsID0+IHsgdHJ5IHsgcmV0dXJuIEpTT04ucGFyc2UobCk7IH0gY2F0Y2ggeyByZXR1cm4geyByYXc6IGwgfTsgfSB9KTtcbiAgICByZXR1cm4gcmVzLmpzb24oeyBzb3VyY2U6ICdsb2NhbCcsIGl0ZW1zIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcignY29uc2Npb3VzbmVzcyByb3V0ZSBlcnJvcicsIGUpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBQUEsU0FBQTtFQUFBLE1BQUFDLElBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtFQUFBSCxRQUFBLFlBQUFBLENBQUE7SUFBQSxPQUFBQyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFDQSxJQUFBRyxTQUFBLEdBQUFELE9BQUE7QUFDQSxTQUFBRSxVQUFBO0VBQUEsTUFBQUosSUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0VBQUFFLFNBQUEsWUFBQUEsQ0FBQTtJQUFBLE9BQUFKLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUNBLFNBQUFLLE1BQUE7RUFBQSxNQUFBTCxJQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7RUFBQUcsS0FBQSxZQUFBQSxDQUFBO0lBQUEsT0FBQUwsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBQXdCLFNBQUFDLHVCQUFBSyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRXhCLE1BQU1HLE1BQU0sR0FBR0Msa0JBQU8sQ0FB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