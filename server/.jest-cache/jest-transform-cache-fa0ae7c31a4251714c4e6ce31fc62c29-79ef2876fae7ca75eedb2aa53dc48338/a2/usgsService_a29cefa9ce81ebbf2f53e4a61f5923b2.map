{"version":3,"names":["_SeismicIntegration","require","getSeismicActivity","process","env","NATIVE_DEV_MODE","MOCK_PORT","USGS_MOCK_PORT","resp","fetch","ok","body","json","transformSeismicData","console","warn","status","err","message","rawData","getSeismicData","liveErr","String","error","getMockSeismicData","exports","mockEvents","id","magnitude","place","time","Date","now","coordinates","tsunami","significance","url","events","summary","totalEvents","length","maxMagnitude","Math","max","map","e","lastUpdated","toISOString","source","isMock","note","features","feature","properties","mag","geometry","sig","metadata","generated"],"sources":["usgsService.js"],"sourcesContent":["import { getSeismicData } from './SeismicIntegration.js';\n\n/**\n * @fileoverview Service for fetching USGS seismic data, integrated with real API.\n * Fetches seismic activity data from USGS API for global monitoring.\n */\n\n/**\n * Fetches the global seismic activity data.\n * Uses the SeismicIntegration for real-time data from USGS.\n * @returns {Promise<object>} A promise that resolves to the seismic activity data.\n */\nexport const getSeismicActivity = async () => {\n  try {\n\n    // 2) If running in native dev mode, try to use a local mock server but fail gracefully\n    if (process.env.NATIVE_DEV_MODE === 'true') {\n      const MOCK_PORT = process.env.USGS_MOCK_PORT || 4011;\n      try {\n        const resp = await fetch(`http://localhost:${MOCK_PORT}/usgs/significant_day.geojson`);\n        if (resp.ok) {\n          const body = await resp.json();\n          return transformSeismicData(body);\n        }\n        console.warn(`USGS mock returned non-ok status ${resp.status} - falling back`);\n      } catch (err) {\n        // Common in developer machines if the local mock isn't running (ECONNREFUSED)\n        console.warn(`Local USGS mock fetch failed (port ${MOCK_PORT}):`, err && err.message ? err.message : err);\n        // continue to attempt live fetch below\n      }\n    }\n\n    // 3) Try the live USGS integration (may fail in networks with no egress)\n    try {\n      const rawData = await getSeismicData();\n      return transformSeismicData(rawData);\n    } catch (liveErr) {\n      const message = liveErr && liveErr.message ? liveErr.message : String(liveErr);\n      console.error('Live USGS fetch failed:', message);\n\n      // Fallback to high-fidelity mock data\n      return getMockSeismicData();\n    }\n  } catch (error) {\n    console.error('Unexpected error in getSeismicActivity:', error);\n    // Fallback to high-fidelity mock data\n    return getMockSeismicData();\n  }\n};\n\n/**\n * Transforms raw USGS GeoJSON data into our standardized format.\n * @param {object} rawData - Raw GeoJSON data from USGS\n * @returns {object} Transformed seismic data\n */\n/**\n * Returns high-fidelity mock seismic data when API is unavailable\n * @returns {object} Mock seismic data in the same format as real data\n */\nfunction getMockSeismicData() {\n  const mockEvents = [\n    {\n      id: 'mock-1',\n      magnitude: 4.5,\n      place: 'Mock Seismic Region - Test Location',\n      time: Date.now(),\n      coordinates: [-74.2973, 4.5709, 10],\n      tsunami: 0,\n      significance: 50,\n      url: 'https://example.com/mock-earthquake-1'\n    },\n    {\n      id: 'mock-2',\n      magnitude: 3.2,\n      place: 'Another Mock Location',\n      time: Date.now() - 3600000, // 1 hour ago\n      coordinates: [-75.0, -10.0, 15],\n      tsunami: 0,\n      significance: 25,\n      url: 'https://example.com/mock-earthquake-2'\n    }\n  ];\n\n  return {\n    events: mockEvents,\n    summary: {\n      totalEvents: mockEvents.length,\n      maxMagnitude: Math.max(...mockEvents.map(e => e.magnitude)),\n      lastUpdated: new Date().toISOString(),\n      source: 'High-Fidelity Mock Data - USGS API Unavailable'\n    },\n    isMock: true,\n    note: 'Real-time seismic data simulation - API unavailable'\n  };\n}\n\nfunction transformSeismicData(rawData) {\n  if (!rawData || !rawData.features) {\n    return {\n      events: [],\n      summary: {\n        totalEvents: 0,\n        maxMagnitude: 0,\n        lastUpdated: new Date().toISOString(),\n        source: \"USGS API\"\n      }\n    };\n  }\n\n  const events = rawData.features.map(feature => ({\n    id: feature.id,\n    magnitude: feature.properties.mag,\n    place: feature.properties.place,\n    time: feature.properties.time,\n    coordinates: feature.geometry.coordinates,\n    tsunami: feature.properties.tsunami,\n    significance: feature.properties.sig,\n    url: feature.properties.url\n  }));\n\n  const maxMagnitude = events.length > 0 ? Math.max(...events.map(e => e.magnitude)) : 0;\n\n  return {\n    events,\n    summary: {\n      totalEvents: events.length,\n      maxMagnitude,\n      lastUpdated: rawData.metadata?.generated || new Date().toISOString(),\n      source: \"USGS Earthquake Hazards Program\"\n    }\n  };\n}"],"mappings":";;;;;;AAAA,IAAAA,mBAAA,GAAAC,OAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IAEF;IACA,IAAIC,OAAO,CAACC,GAAG,CAACC,eAAe,KAAK,MAAM,EAAE;MAC1C,MAAMC,SAAS,GAAGH,OAAO,CAACC,GAAG,CAACG,cAAc,IAAI,IAAI;MACpD,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,oBAAoBH,SAAS,+BAA+B,CAAC;QACtF,IAAIE,IAAI,CAACE,EAAE,EAAE;UACX,MAAMC,IAAI,GAAG,MAAMH,IAAI,CAACI,IAAI,CAAC,CAAC;UAC9B,OAAOC,oBAAoB,CAACF,IAAI,CAAC;QACnC;QACAG,OAAO,CAACC,IAAI,CAAC,oCAAoCP,IAAI,CAACQ,MAAM,iBAAiB,CAAC;MAChF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ;QACAH,OAAO,CAACC,IAAI,CAAC,sCAAsCT,SAAS,IAAI,EAAEW,GAAG,IAAIA,GAAG,CAACC,OAAO,GAAGD,GAAG,CAACC,OAAO,GAAGD,GAAG,CAAC;QACzG;MACF;IACF;;IAEA;IACA,IAAI;MACF,MAAME,OAAO,GAAG,MAAM,IAAAC,kCAAc,EAAC,CAAC;MACtC,OAAOP,oBAAoB,CAACM,OAAO,CAAC;IACtC,CAAC,CAAC,OAAOE,OAAO,EAAE;MAChB,MAAMH,OAAO,GAAGG,OAAO,IAAIA,OAAO,CAACH,OAAO,GAAGG,OAAO,CAACH,OAAO,GAAGI,MAAM,CAACD,OAAO,CAAC;MAC9EP,OAAO,CAACS,KAAK,CAAC,yBAAyB,EAAEL,OAAO,CAAC;;MAEjD;MACA,OAAOM,kBAAkB,CAAC,CAAC;IAC7B;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D;IACA,OAAOC,kBAAkB,CAAC,CAAC;EAC7B;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHAC,OAAA,CAAAvB,kBAAA,GAAAA,kBAAA;AAIA,SAASsB,kBAAkBA,CAAA,EAAG;EAC5B,MAAME,UAAU,GAAG,CACjB;IACEC,EAAE,EAAE,QAAQ;IACZC,SAAS,EAAE,GAAG;IACdC,KAAK,EAAE,qCAAqC;IAC5CC,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;IAChBC,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC;IACnCC,OAAO,EAAE,CAAC;IACVC,YAAY,EAAE,EAAE;IAChBC,GAAG,EAAE;EACP,CAAC,EACD;IACET,EAAE,EAAE,QAAQ;IACZC,SAAS,EAAE,GAAG;IACdC,KAAK,EAAE,uBAAuB;IAC9BC,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,OAAO;IAAE;IAC5BC,WAAW,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;IAC/BC,OAAO,EAAE,CAAC;IACVC,YAAY,EAAE,EAAE;IAChBC,GAAG,EAAE;EACP,CAAC,CACF;EAED,OAAO;IACLC,MAAM,EAAEX,UAAU;IAClBY,OAAO,EAAE;MACPC,WAAW,EAAEb,UAAU,CAACc,MAAM;MAC9BC,YAAY,EAAEC,IAAI,CAACC,GAAG,CAAC,GAAGjB,UAAU,CAACkB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACjB,SAAS,CAAC,CAAC;MAC3DkB,WAAW,EAAE,IAAIf,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC;MACrCC,MAAM,EAAE;IACV,CAAC;IACDC,MAAM,EAAE,IAAI;IACZC,IAAI,EAAE;EACR,CAAC;AACH;AAEA,SAASrC,oBAAoBA,CAACM,OAAO,EAAE;EACrC,IAAI,CAACA,OAAO,IAAI,CAACA,OAAO,CAACgC,QAAQ,EAAE;IACjC,OAAO;MACLd,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;QACPC,WAAW,EAAE,CAAC;QACdE,YAAY,EAAE,CAAC;QACfK,WAAW,EAAE,IAAIf,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC;QACrCC,MAAM,EAAE;MACV;IACF,CAAC;EACH;EAEA,MAAMX,MAAM,GAAGlB,OAAO,CAACgC,QAAQ,CAACP,GAAG,CAACQ,OAAO,KAAK;IAC9CzB,EAAE,EAAEyB,OAAO,CAACzB,EAAE;IACdC,SAAS,EAAEwB,OAAO,CAACC,UAAU,CAACC,GAAG;IACjCzB,KAAK,EAAEuB,OAAO,CAACC,UAAU,CAACxB,KAAK;IAC/BC,IAAI,EAAEsB,OAAO,CAACC,UAAU,CAACvB,IAAI;IAC7BG,WAAW,EAAEmB,OAAO,CAACG,QAAQ,CAACtB,WAAW;IACzCC,OAAO,EAAEkB,OAAO,CAACC,UAAU,CAACnB,OAAO;IACnCC,YAAY,EAAEiB,OAAO,CAACC,UAAU,CAACG,GAAG;IACpCpB,GAAG,EAAEgB,OAAO,CAACC,UAAU,CAACjB;EAC1B,CAAC,CAAC,CAAC;EAEH,MAAMK,YAAY,GAAGJ,MAAM,CAACG,MAAM,GAAG,CAAC,GAAGE,IAAI,CAACC,GAAG,CAAC,GAAGN,MAAM,CAACO,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACjB,SAAS,CAAC,CAAC,GAAG,CAAC;EAEtF,OAAO;IACLS,MAAM;IACNC,OAAO,EAAE;MACPC,WAAW,EAAEF,MAAM,CAACG,MAAM;MAC1BC,YAAY;MACZK,WAAW,EAAE3B,OAAO,CAACsC,QAAQ,EAAEC,SAAS,IAAI,IAAI3B,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC;MACpEC,MAAM,EAAE;IACV;EACF,CAAC;AACH","ignoreList":[]}