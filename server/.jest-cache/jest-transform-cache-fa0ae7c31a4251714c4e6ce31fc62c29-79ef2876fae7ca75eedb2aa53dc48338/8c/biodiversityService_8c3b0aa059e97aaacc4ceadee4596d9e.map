{"version":3,"names":["_BiodiversityIntegration","_interopRequireDefault","require","e","__esModule","default","BiodiversityService","constructor","biodiversityIntegration","BiodiversityIntegration","getBiodiversityRiskIndex","regions","biodiversityData","getBiodiversityData","threatData","getSpeciesThreatData","console","warn","totalSpecies","globalSummary","totalThreatened","threatPercentage","totalThreats","Object","values","threatCategories","reduce","sum","category","count","majorThreats","habitatLoss","climateChange","pollution","majorThreatPercentage","riskIndex","Math","min","max","round","error","getBiodiversityAnalysis","timestamp","Date","toISOString","analysis","totalRegions","length","globalThreatPercentage","majorThreatCategories","entries","sort","a","b","slice","map","data","riskAssessment","_assessRiskLevel","source","message","_default","exports"],"sources":["biodiversityService.js"],"sourcesContent":["import BiodiversityIntegration from '../integrations/BiodiversityIntegration.js';\n\n/**\n * Service for calculating biodiversity risk index\n * Analyzes global biodiversity data to determine environmental risk levels\n */\nclass BiodiversityService {\n  constructor() {\n    this.biodiversityIntegration = new BiodiversityIntegration();\n  }\n\n  /**\n   * Calculates biodiversity risk index based on species threat data and regional biodiversity metrics\n   * @param {Array<string>} regions - Array of regions to analyze (default: major continents)\n   * @returns {Promise<number>} Risk index between 0-100 (0 = low risk, 100 = high risk)\n   */\n  async getBiodiversityRiskIndex(regions = ['americas', 'africa', 'asia', 'europe', 'oceania']) {\n    try {\n      const biodiversityData = await this.biodiversityIntegration.getBiodiversityData(regions);\n      const threatData = await this.biodiversityIntegration.getSpeciesThreatData();\n\n      if (!biodiversityData || !threatData) {\n        console.warn('No biodiversity data available, returning default risk index');\n        return 30; // Default moderate risk\n      }\n\n      // Calculate threat percentage across all regions\n      const totalSpecies = biodiversityData.globalSummary.totalSpecies;\n      const totalThreatened = biodiversityData.globalSummary.totalThreatened;\n      const threatPercentage = totalSpecies > 0 ? (totalThreatened / totalSpecies) * 100 : 0;\n\n      // Calculate threat distribution from threat categories\n      const totalThreats = Object.values(threatData.threatCategories).reduce((sum, category) => sum + category.count, 0);\n      const majorThreats = threatData.threatCategories.habitatLoss.count +\n                          threatData.threatCategories.climateChange.count +\n                          threatData.threatCategories.pollution.count;\n\n      const majorThreatPercentage = totalThreats > 0 ? (majorThreats / totalThreats) * 100 : 0;\n\n      // Combine metrics for risk assessment\n      // Base risk from species threat level\n      let riskIndex = threatPercentage * 0.6; // 60% weight on species threat\n\n      // Additional risk from major threat categories\n      riskIndex += (majorThreatPercentage / 100) * 40; // 40% weight on major threats\n\n      // Normalize to 0-100 scale with some baseline\n      riskIndex = Math.min(Math.max(riskIndex + 10, 0), 100); // Add 10 for baseline environmental concern\n\n      return Math.round(riskIndex);\n\n    } catch (error) {\n      console.error('Error calculating biodiversity risk index:', error);\n      return 30; // Return moderate risk as fallback\n    }\n  }\n\n  /**\n   * Gets detailed biodiversity analysis\n   * @param {Array<string>} regions - Array of regions to analyze\n   * @returns {Promise<object>} Detailed biodiversity analysis\n   */\n  async getBiodiversityAnalysis(regions = ['americas', 'africa', 'asia', 'europe', 'oceania']) {\n    try {\n      const biodiversityData = await this.biodiversityIntegration.getBiodiversityData(regions);\n      const threatData = await this.biodiversityIntegration.getSpeciesThreatData();\n\n      const riskIndex = await this.getBiodiversityRiskIndex(regions);\n\n      return {\n        timestamp: new Date().toISOString(),\n        riskIndex: riskIndex,\n        biodiversityData: biodiversityData,\n        threatData: threatData,\n        analysis: {\n          totalRegions: regions.length,\n          globalThreatPercentage: biodiversityData.globalSummary.totalSpecies > 0 ?\n            (biodiversityData.globalSummary.totalThreatened / biodiversityData.globalSummary.totalSpecies) * 100 : 0,\n          majorThreatCategories: Object.entries(threatData.threatCategories)\n            .sort(([,a], [,b]) => b.count - a.count)\n            .slice(0, 3)\n            .map(([category, data]) => ({ category, count: data.count })),\n          riskAssessment: this._assessRiskLevel(riskIndex)\n        },\n        source: 'BiodiversityService'\n      };\n    } catch (error) {\n      console.error('Error in biodiversity analysis:', error);\n      return {\n        timestamp: new Date().toISOString(),\n        riskIndex: 30,\n        biodiversityData: null,\n        threatData: null,\n        analysis: {\n          totalRegions: 0,\n          globalThreatPercentage: 0,\n          majorThreatCategories: [],\n          riskAssessment: 'Moderate'\n        },\n        source: 'BiodiversityService - Error Fallback',\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Assesses risk level based on biodiversity risk index\n   * @param {number} riskIndex - The calculated biodiversity risk index\n   * @returns {string} Risk level description\n   */\n  _assessRiskLevel(riskIndex) {\n    if (riskIndex >= 70) return 'Critical';\n    if (riskIndex >= 50) return 'High';\n    if (riskIndex >= 30) return 'Moderate';\n    return 'Low';\n  }\n}\n\nexport default BiodiversityService;"],"mappings":"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","ignoreList":[]}