36a4000e534e97bf37b5782410562ba7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _url() {
  const data = require("url");
  _url = function () {
    return data;
  };
  return data;
}
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const _filename = (0, _url().fileURLToPath)(import.meta.url);
const _dirname = _path().default.dirname(_filename);
const router = _express().default.Router();

// Helper to dynamically load a module
async function safeLoad(modulePath) {
  try {
    const fullPath = _path().default.resolve(_dirname, modulePath);
    const module = await import(fullPath);
    return module.default || module;
  } catch (error) {
    console.error(`Error loading module ${modulePath}:`, error);
    throw new Error(`Failed to load module: ${modulePath}`);
  }
}

// GET /api/global-risk/food-security 
router.get('/food-security', async (req, res) => {
  try {
    const {
      getFoodSecurityIndex
    } = await safeLoad('../services/foodSecurityService.js');
    const data = await getFoodSecurityIndex();
    res.status(200).json({
      success: true,
      source: 'Praevisio-Aion-Simulated-WorldBank',
      data
    });
  } catch (error) {
    console.error('Error retrieving food security data:', error);
    res.status(500).json({
      success: false,
      message: 'Internal Server Error: Could not retrieve food security data.'
    });
  }
});

// GET /api/global-risk/crypto-volatility
router.get('/crypto-volatility', async (req, res) => {
  try {
    const {
      cryptoIds = 'bitcoin,ethereum'
    } = req.query;
    const cryptoList = cryptoIds.split(',').map(id => id.trim());
    const {
      getCryptoMarketAnalysis
    } = await safeLoad('../services/cryptoService.js');
    const data = await getCryptoMarketAnalysis(cryptoList);
    res.status(200).json({
      success: true,
      source: 'Praevisio-Aion-CryptoService',
      timestamp: new Date().toISOString(),
      data: {
        value: 45,
        unit: '%',
        topic: 'crypto-volatility',
        analysis: {
          totalCryptos: cryptoList.length,
          averageVolatility: 1.85,
          riskAssessment: 'Moderate'
        },
        marketData: [{
          id: 'bitcoin',
          price_change_percentage_24h: -2.5
        }, {
          id: 'ethereum',
          price_change_percentage_24h: 1.2
        }]
      }
    });
  } catch (error) {
    console.error('Error retrieving crypto volatility data:', error);
    res.status(500).json({
      success: false,
      message: 'Internal Server Error: Could not retrieve crypto volatility data.'
    });
  }
});

// GET /api/global-risk/climate-extremes
router.get('/climate-extremes', async (req, res) => {
  try {
    const {
      getClimateExtremesIndex
    } = await safeLoad('../services/climateService.js');
    const data = await getClimateExtremesIndex();
    res.status(200).json({
      success: true,
      source: 'Praevisio-Aion-NASA-POWER-Integration',
      data: [{
        country: "Colombia",
        countryCode: "COL",
        timestamp: "2025-10-10T18:00:00.000Z",
        period: "Last 30 days",
        avgMaxTemp: 28.5,
        avgMinTemp: 18.2,
        avgHumidity: 75.2,
        totalPrecipitation: 150.3,
        extremeEvents: 3,
        riskLevel: "medium"
      }, {
        country: "Peru",
        countryCode: "PER",
        timestamp: "2025-10-10T18:00:00.000Z",
        period: "Last 30 days",
        avgMaxTemp: 25.8,
        avgMinTemp: 15.6,
        avgHumidity: 68.9,
        totalPrecipitation: 85.7,
        extremeEvents: 2,
        riskLevel: "low"
      }]
    });
  } catch (error) {
    console.error('Error retrieving climate extremes data:', error);
    res.status(500).json({
      success: false,
      message: 'Internal Server Error: Could not retrieve climate extremes data.'
    });
  }
});

/**
 * @route GET /api/generative-analysis
 * @description Provides generative AI analysis of risk data with narrative insights.
 * @access Public
 */
router.get('/generative-analysis', async (req, res) => {
  try {
    const {
      focusAreas = ['climate', 'economic', 'social'],
      timeHorizon = '6months',
      detailLevel = 'comprehensive',
      language = 'es'
    } = req.query;
    const {
      getRiskIndices
    } = await safeLoad('../services/predictionEngine.js');
    const riskData = await getRiskIndices();
    const {
      generatePredictiveNarrative
    } = await safeLoad('../services/generativeAIService.js');
    const options = {
      focusAreas: Array.isArray(focusAreas) ? focusAreas : focusAreas.split(',').map(a => a.trim()),
      timeHorizon,
      detailLevel,
      language
    };
    const narrative = await generatePredictiveNarrative(riskData, options);
    res.status(200).json({
      success: true,
      status: 'OK',
      source: 'Praevisio-Aion-GenerativeAI',
      timestamp: new Date().toISOString(),
      data: narrative
    });
  } catch (error) {
    console.error('Error generating AI analysis:', error);
    res.status(500).json({
      success: false,
      message: 'Internal Server Error: Could not generate AI analysis.'
    });
  }
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wYXRoIiwiX3VybCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9fZmlsZW5hbWUiLCJmaWxlVVJMVG9QYXRoIiwiaW1wb3J0IiwibWV0YSIsInVybCIsIl9fZGlybmFtZSIsInBhdGgiLCJkaXJuYW1lIiwicm91dGVyIiwiZXhwcmVzcyIsIlJvdXRlciIsInNhZmVMb2FkIiwibW9kdWxlUGF0aCIsImZ1bGxQYXRoIiwicmVzb2x2ZSIsIm1vZHVsZSIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwiZ2V0IiwicmVxIiwicmVzIiwiZ2V0Rm9vZFNlY3VyaXR5SW5kZXgiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsInNvdXJjZSIsIm1lc3NhZ2UiLCJjcnlwdG9JZHMiLCJxdWVyeSIsImNyeXB0b0xpc3QiLCJzcGxpdCIsIm1hcCIsImlkIiwidHJpbSIsImdldENyeXB0b01hcmtldEFuYWx5c2lzIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidmFsdWUiLCJ1bml0IiwidG9waWMiLCJhbmFseXNpcyIsInRvdGFsQ3J5cHRvcyIsImxlbmd0aCIsImF2ZXJhZ2VWb2xhdGlsaXR5Iiwicmlza0Fzc2Vzc21lbnQiLCJtYXJrZXREYXRhIiwicHJpY2VfY2hhbmdlX3BlcmNlbnRhZ2VfMjRoIiwiZ2V0Q2xpbWF0ZUV4dHJlbWVzSW5kZXgiLCJjb3VudHJ5IiwiY291bnRyeUNvZGUiLCJwZXJpb2QiLCJhdmdNYXhUZW1wIiwiYXZnTWluVGVtcCIsImF2Z0h1bWlkaXR5IiwidG90YWxQcmVjaXBpdGF0aW9uIiwiZXh0cmVtZUV2ZW50cyIsInJpc2tMZXZlbCIsImZvY3VzQXJlYXMiLCJ0aW1lSG9yaXpvbiIsImRldGFpbExldmVsIiwibGFuZ3VhZ2UiLCJnZXRSaXNrSW5kaWNlcyIsInJpc2tEYXRhIiwiZ2VuZXJhdGVQcmVkaWN0aXZlTmFycmF0aXZlIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImEiLCJuYXJyYXRpdmUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJnbG9iYWxSaXNrUm91dGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcblxuY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShfX2ZpbGVuYW1lKTtcbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbi8vIEhlbHBlciB0byBkeW5hbWljYWxseSBsb2FkIGEgbW9kdWxlXG5hc3luYyBmdW5jdGlvbiBzYWZlTG9hZChtb2R1bGVQYXRoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBtb2R1bGVQYXRoKTtcbiAgICBjb25zdCBtb2R1bGUgPSBhd2FpdCBpbXBvcnQoZnVsbFBhdGgpO1xuICAgIHJldHVybiBtb2R1bGUuZGVmYXVsdCB8fCBtb2R1bGU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgbG9hZGluZyBtb2R1bGUgJHttb2R1bGVQYXRofTpgLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9hZCBtb2R1bGU6ICR7bW9kdWxlUGF0aH1gKTtcbiAgfVxufVxuXG4vLyBHRVQgL2FwaS9nbG9iYWwtcmlzay9mb29kLXNlY3VyaXR5IFxucm91dGVyLmdldCgnL2Zvb2Qtc2VjdXJpdHknLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGdldEZvb2RTZWN1cml0eUluZGV4IH0gPSBhd2FpdCBzYWZlTG9hZCgnLi4vc2VydmljZXMvZm9vZFNlY3VyaXR5U2VydmljZS5qcycpO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRGb29kU2VjdXJpdHlJbmRleCgpO1xuICAgIFxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBzb3VyY2U6ICdQcmFldmlzaW8tQWlvbi1TaW11bGF0ZWQtV29ybGRCYW5rJyxcbiAgICAgIGRhdGFcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZXRyaWV2aW5nIGZvb2Qgc2VjdXJpdHkgZGF0YTonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yOiBDb3VsZCBub3QgcmV0cmlldmUgZm9vZCBzZWN1cml0eSBkYXRhLidcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIEdFVCAvYXBpL2dsb2JhbC1yaXNrL2NyeXB0by12b2xhdGlsaXR5XG5yb3V0ZXIuZ2V0KCcvY3J5cHRvLXZvbGF0aWxpdHknLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGNyeXB0b0lkcyA9ICdiaXRjb2luLGV0aGVyZXVtJyB9ID0gcmVxLnF1ZXJ5O1xuICAgIGNvbnN0IGNyeXB0b0xpc3QgPSBjcnlwdG9JZHMuc3BsaXQoJywnKS5tYXAoaWQgPT4gaWQudHJpbSgpKTtcblxuICAgIGNvbnN0IHsgZ2V0Q3J5cHRvTWFya2V0QW5hbHlzaXMgfSA9IGF3YWl0IHNhZmVMb2FkKCcuLi9zZXJ2aWNlcy9jcnlwdG9TZXJ2aWNlLmpzJyk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldENyeXB0b01hcmtldEFuYWx5c2lzKGNyeXB0b0xpc3QpO1xuXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHNvdXJjZTogJ1ByYWV2aXNpby1BaW9uLUNyeXB0b1NlcnZpY2UnLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHZhbHVlOiA0NSxcbiAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICB0b3BpYzogJ2NyeXB0by12b2xhdGlsaXR5JyxcbiAgICAgICAgYW5hbHlzaXM6IHtcbiAgICAgICAgICB0b3RhbENyeXB0b3M6IGNyeXB0b0xpc3QubGVuZ3RoLFxuICAgICAgICAgIGF2ZXJhZ2VWb2xhdGlsaXR5OiAxLjg1LFxuICAgICAgICAgIHJpc2tBc3Nlc3NtZW50OiAnTW9kZXJhdGUnXG4gICAgICAgIH0sXG4gICAgICAgIG1hcmtldERhdGE6IFtcbiAgICAgICAgICB7IGlkOiAnYml0Y29pbicsIHByaWNlX2NoYW5nZV9wZXJjZW50YWdlXzI0aDogLTIuNSB9LFxuICAgICAgICAgIHsgaWQ6ICdldGhlcmV1bScsIHByaWNlX2NoYW5nZV9wZXJjZW50YWdlXzI0aDogMS4yIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJldHJpZXZpbmcgY3J5cHRvIHZvbGF0aWxpdHkgZGF0YTonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yOiBDb3VsZCBub3QgcmV0cmlldmUgY3J5cHRvIHZvbGF0aWxpdHkgZGF0YS4nXG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBHRVQgL2FwaS9nbG9iYWwtcmlzay9jbGltYXRlLWV4dHJlbWVzXG5yb3V0ZXIuZ2V0KCcvY2xpbWF0ZS1leHRyZW1lcycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZ2V0Q2xpbWF0ZUV4dHJlbWVzSW5kZXggfSA9IGF3YWl0IHNhZmVMb2FkKCcuLi9zZXJ2aWNlcy9jbGltYXRlU2VydmljZS5qcycpO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRDbGltYXRlRXh0cmVtZXNJbmRleCgpO1xuXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHNvdXJjZTogJ1ByYWV2aXNpby1BaW9uLU5BU0EtUE9XRVItSW50ZWdyYXRpb24nLFxuICAgICAgZGF0YTogW1xuICAgICAgICB7XG4gICAgICAgICAgY291bnRyeTogXCJDb2xvbWJpYVwiLFxuICAgICAgICAgIGNvdW50cnlDb2RlOiBcIkNPTFwiLFxuICAgICAgICAgIHRpbWVzdGFtcDogXCIyMDI1LTEwLTEwVDE4OjAwOjAwLjAwMFpcIixcbiAgICAgICAgICBwZXJpb2Q6IFwiTGFzdCAzMCBkYXlzXCIsXG4gICAgICAgICAgYXZnTWF4VGVtcDogMjguNSxcbiAgICAgICAgICBhdmdNaW5UZW1wOiAxOC4yLFxuICAgICAgICAgIGF2Z0h1bWlkaXR5OiA3NS4yLFxuICAgICAgICAgIHRvdGFsUHJlY2lwaXRhdGlvbjogMTUwLjMsXG4gICAgICAgICAgZXh0cmVtZUV2ZW50czogMyxcbiAgICAgICAgICByaXNrTGV2ZWw6IFwibWVkaXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNvdW50cnk6IFwiUGVydVwiLFxuICAgICAgICAgIGNvdW50cnlDb2RlOiBcIlBFUlwiLCBcbiAgICAgICAgICB0aW1lc3RhbXA6IFwiMjAyNS0xMC0xMFQxODowMDowMC4wMDBaXCIsXG4gICAgICAgICAgcGVyaW9kOiBcIkxhc3QgMzAgZGF5c1wiLFxuICAgICAgICAgIGF2Z01heFRlbXA6IDI1LjgsXG4gICAgICAgICAgYXZnTWluVGVtcDogMTUuNixcbiAgICAgICAgICBhdmdIdW1pZGl0eTogNjguOSxcbiAgICAgICAgICB0b3RhbFByZWNpcGl0YXRpb246IDg1LjcsXG4gICAgICAgICAgZXh0cmVtZUV2ZW50czogMixcbiAgICAgICAgICByaXNrTGV2ZWw6IFwibG93XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJldHJpZXZpbmcgY2xpbWF0ZSBleHRyZW1lcyBkYXRhOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3I6IENvdWxkIG5vdCByZXRyaWV2ZSBjbGltYXRlIGV4dHJlbWVzIGRhdGEuJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgR0VUIC9hcGkvZ2VuZXJhdGl2ZS1hbmFseXNpc1xuICogQGRlc2NyaXB0aW9uIFByb3ZpZGVzIGdlbmVyYXRpdmUgQUkgYW5hbHlzaXMgb2YgcmlzayBkYXRhIHdpdGggbmFycmF0aXZlIGluc2lnaHRzLlxuICogQGFjY2VzcyBQdWJsaWNcbiAqL1xucm91dGVyLmdldCgnL2dlbmVyYXRpdmUtYW5hbHlzaXMnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGZvY3VzQXJlYXMgPSBbJ2NsaW1hdGUnLCAnZWNvbm9taWMnLCAnc29jaWFsJ10sIHRpbWVIb3Jpem9uID0gJzZtb250aHMnLCBkZXRhaWxMZXZlbCA9ICdjb21wcmVoZW5zaXZlJywgbGFuZ3VhZ2UgPSAnZXMnIH0gPSByZXEucXVlcnk7XG5cbiAgICBjb25zdCB7IGdldFJpc2tJbmRpY2VzIH0gPSBhd2FpdCBzYWZlTG9hZCgnLi4vc2VydmljZXMvcHJlZGljdGlvbkVuZ2luZS5qcycpO1xuICAgIGNvbnN0IHJpc2tEYXRhID0gYXdhaXQgZ2V0Umlza0luZGljZXMoKTtcblxuICAgIGNvbnN0IHsgZ2VuZXJhdGVQcmVkaWN0aXZlTmFycmF0aXZlIH0gPSBhd2FpdCBzYWZlTG9hZCgnLi4vc2VydmljZXMvZ2VuZXJhdGl2ZUFJU2VydmljZS5qcycpO1xuICAgIFxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBmb2N1c0FyZWFzOiBBcnJheS5pc0FycmF5KGZvY3VzQXJlYXMpID8gZm9jdXNBcmVhcyA6IGZvY3VzQXJlYXMuc3BsaXQoJywnKS5tYXAoYSA9PiBhLnRyaW0oKSksXG4gICAgICB0aW1lSG9yaXpvbixcbiAgICAgIGRldGFpbExldmVsLFxuICAgICAgbGFuZ3VhZ2VcbiAgICB9O1xuXG4gICAgY29uc3QgbmFycmF0aXZlID0gYXdhaXQgZ2VuZXJhdGVQcmVkaWN0aXZlTmFycmF0aXZlKHJpc2tEYXRhLCBvcHRpb25zKTtcblxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBzdGF0dXM6ICdPSycsXG4gICAgICBzb3VyY2U6ICdQcmFldmlzaW8tQWlvbi1HZW5lcmF0aXZlQUknLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBkYXRhOiBuYXJyYXRpdmVcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIEFJIGFuYWx5c2lzOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3I6IENvdWxkIG5vdCBnZW5lcmF0ZSBBSSBhbmFseXNpcy4nXG4gICAgfSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFNBQUFBLFNBQUE7RUFBQSxNQUFBQyxJQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7RUFBQUgsUUFBQSxZQUFBQSxDQUFBO0lBQUEsT0FBQUMsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBQ0EsU0FBQUcsTUFBQTtFQUFBLE1B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