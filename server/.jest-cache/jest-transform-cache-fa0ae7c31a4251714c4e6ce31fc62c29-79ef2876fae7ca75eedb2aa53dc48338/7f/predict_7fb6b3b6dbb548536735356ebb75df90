e77eb8bd8b72af9a5b7f7da7cf8cf93b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
var _cache = _interopRequireDefault(require("../cache.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const router = _express().default.Router();
function makeId(prefix = 'id') {
  return `${prefix}_${Math.random().toString(36).slice(2, 8)}`;
}
function computePrediction(country, parameters) {
  // simple weighted logic for demo purposes
  const {
    infectionRate = 0,
    protestIndex = 0,
    economicIndex = 0,
    temperature = 0
  } = parameters;
  const score = infectionRate * 0.5 + protestIndex * 0.3 + economicIndex * 0.15 + temperature * 0.05;
  let risk = 'low';
  if (score >= 70) risk = 'high';else if (score >= 30) risk = 'medium';
  const confidence = Math.max(0.5, Math.min(0.95, 1 - Math.abs(50 - score) / 100));
  const factors = [];
  const total = infectionRate + protestIndex + economicIndex + temperature || 1;
  if (infectionRate) factors.push({
    name: 'Infection rate',
    weight: +(infectionRate / total).toFixed(2),
    value: infectionRate
  });
  if (protestIndex) factors.push({
    name: 'Protest index',
    weight: +(protestIndex / total).toFixed(2),
    value: protestIndex
  });
  if (economicIndex) factors.push({
    name: 'Economic index',
    weight: +(economicIndex / total).toFixed(2),
    value: economicIndex
  });
  if (temperature) factors.push({
    name: 'Temperature',
    weight: +(temperature / total).toFixed(2),
    value: temperature
  });
  return {
    predictionId: makeId('pred'),
    country,
    risk,
    confidence: Number(confidence.toFixed(2)),
    factors,
    generatedAt: new Date().toISOString(),
    score: Math.round(score)
  };
}
router.post('/', (req, res) => {
  const {
    country,
    parameters
  } = req.body || {};
  if (!country || !parameters) {
    return res.status(400).json({
      error: 'country and parameters are required'
    });
  }

  // Create cache key based on prediction parameters
  const cacheKey = `prediction:${country}:${JSON.stringify(parameters)}`;

  // Check cache first (TTL: 10 minutes for predictions)
  const cachedResult = _cache.default.get(cacheKey);
  if (cachedResult) {
    return res.status(200).json(cachedResult);
  }
  const result = computePrediction(country, parameters);

  // Cache result for 10 minutes
  _cache.default.set(cacheKey, result, 600000);
  return res.status(200).json(result);
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jYWNoZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInJvdXRlciIsImV4cHJlc3MiLCJSb3V0ZXIiLCJtYWtlSWQiLCJwcmVmaXgiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsImNvbXB1dGVQcmVkaWN0aW9uIiwiY291bnRyeSIsInBhcmFtZXRlcnMiLCJpbmZlY3Rpb25SYXRlIiwicHJvdGVzdEluZGV4IiwiZWNvbm9taWNJbmRleCIsInRlbXBlcmF0dXJlIiwic2NvcmUiLCJyaXNrIiwiY29uZmlkZW5jZSIsIm1heCIsIm1pbiIsImFicyIsImZhY3RvcnMiLCJ0b3RhbCIsInB1c2giLCJuYW1lIiwid2VpZ2h0IiwidG9GaXhlZCIsInZhbHVlIiwicHJlZGljdGlvbklkIiwiTnVtYmVyIiwiZ2VuZXJhdGVkQXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyb3VuZCIsInBvc3QiLCJyZXEiLCJyZXMiLCJib2R5Iiwic3RhdHVzIiwianNvbiIsImVycm9yIiwiY2FjaGVLZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiY2FjaGVkUmVzdWx0IiwiY2FjaGUiLCJnZXQiLCJyZXN1bHQiLCJzZXQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJwcmVkaWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNhY2hlIGZyb20gJy4uL2NhY2hlLmpzJztcblxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuZnVuY3Rpb24gbWFrZUlkKHByZWZpeCA9ICdpZCcpIHtcbiAgcmV0dXJuIGAke3ByZWZpeH1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyLDgpfWA7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVQcmVkaWN0aW9uKGNvdW50cnksIHBhcmFtZXRlcnMpIHtcbiAgLy8gc2ltcGxlIHdlaWdodGVkIGxvZ2ljIGZvciBkZW1vIHB1cnBvc2VzXG4gIGNvbnN0IHsgaW5mZWN0aW9uUmF0ZSA9IDAsIHByb3Rlc3RJbmRleCA9IDAsIGVjb25vbWljSW5kZXggPSAwLCB0ZW1wZXJhdHVyZSA9IDAgfSA9IHBhcmFtZXRlcnM7XG4gIGNvbnN0IHNjb3JlID0gKGluZmVjdGlvblJhdGUgKiAwLjUpICsgKHByb3Rlc3RJbmRleCAqIDAuMykgKyAoZWNvbm9taWNJbmRleCAqIDAuMTUpICsgKHRlbXBlcmF0dXJlICogMC4wNSk7XG4gIGxldCByaXNrID0gJ2xvdyc7XG4gIGlmIChzY29yZSA+PSA3MCkgcmlzayA9ICdoaWdoJztcbiAgZWxzZSBpZiAoc2NvcmUgPj0gMzApIHJpc2sgPSAnbWVkaXVtJztcblxuICBjb25zdCBjb25maWRlbmNlID0gTWF0aC5tYXgoMC41LCBNYXRoLm1pbigwLjk1LCAxIC0gTWF0aC5hYnMoNTAgLSBzY29yZSkgLyAxMDApKTtcblxuICBjb25zdCBmYWN0b3JzID0gW107XG4gIGNvbnN0IHRvdGFsID0gaW5mZWN0aW9uUmF0ZSArIHByb3Rlc3RJbmRleCArIGVjb25vbWljSW5kZXggKyB0ZW1wZXJhdHVyZSB8fCAxO1xuICBpZiAoaW5mZWN0aW9uUmF0ZSkgZmFjdG9ycy5wdXNoKHsgbmFtZTogJ0luZmVjdGlvbiByYXRlJywgd2VpZ2h0OiArKGluZmVjdGlvblJhdGUvdG90YWwpLnRvRml4ZWQoMiksIHZhbHVlOiBpbmZlY3Rpb25SYXRlIH0pO1xuICBpZiAocHJvdGVzdEluZGV4KSBmYWN0b3JzLnB1c2goeyBuYW1lOiAnUHJvdGVzdCBpbmRleCcsIHdlaWdodDogKyhwcm90ZXN0SW5kZXgvdG90YWwpLnRvRml4ZWQoMiksIHZhbHVlOiBwcm90ZXN0SW5kZXggfSk7XG4gIGlmIChlY29ub21pY0luZGV4KSBmYWN0b3JzLnB1c2goeyBuYW1lOiAnRWNvbm9taWMgaW5kZXgnLCB3ZWlnaHQ6ICsoZWNvbm9taWNJbmRleC90b3RhbCkudG9GaXhlZCgyKSwgdmFsdWU6IGVjb25vbWljSW5kZXggfSk7XG4gIGlmICh0ZW1wZXJhdHVyZSkgZmFjdG9ycy5wdXNoKHsgbmFtZTogJ1RlbXBlcmF0dXJlJywgd2VpZ2h0OiArKHRlbXBlcmF0dXJlL3RvdGFsKS50b0ZpeGVkKDIpLCB2YWx1ZTogdGVtcGVyYXR1cmUgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcmVkaWN0aW9uSWQ6IG1ha2VJZCgncHJlZCcpLFxuICAgIGNvdW50cnksXG4gICAgcmlzayxcbiAgICBjb25maWRlbmNlOiBOdW1iZXIoY29uZmlkZW5jZS50b0ZpeGVkKDIpKSxcbiAgICBmYWN0b3JzLFxuICAgIGdlbmVyYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgc2NvcmU6IE1hdGgucm91bmQoc2NvcmUpXG4gIH07XG59XG5cbnJvdXRlci5wb3N0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHsgY291bnRyeSwgcGFyYW1ldGVycyB9ID0gcmVxLmJvZHkgfHwge307XG4gIGlmICghY291bnRyeSB8fCAhcGFyYW1ldGVycykge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnY291bnRyeSBhbmQgcGFyYW1ldGVycyBhcmUgcmVxdWlyZWQnIH0pO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGNhY2hlIGtleSBiYXNlZCBvbiBwcmVkaWN0aW9uIHBhcmFtZXRlcnNcbiAgY29uc3QgY2FjaGVLZXkgPSBgcHJlZGljdGlvbjoke2NvdW50cnl9OiR7SlNPTi5zdHJpbmdpZnkocGFyYW1ldGVycyl9YDtcblxuICAvLyBDaGVjayBjYWNoZSBmaXJzdCAoVFRMOiAxMCBtaW51dGVzIGZvciBwcmVkaWN0aW9ucylcbiAgY29uc3QgY2FjaGVkUmVzdWx0ID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKGNhY2hlZFJlc3VsdCkge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihjYWNoZWRSZXN1bHQpO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gY29tcHV0ZVByZWRpY3Rpb24oY291bnRyeSwgcGFyYW1ldGVycyk7XG5cbiAgLy8gQ2FjaGUgcmVzdWx0IGZvciAxMCBtaW51dGVzXG4gIGNhY2hlLnNldChjYWNoZUtleSwgcmVzdWx0LCA2MDAwMDApO1xuXG4gIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihyZXN1bHQpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBQUEsU0FBQTtFQUFBLE1BQUFDLElBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtFQUFBSCxRQUFBLFlBQUFBLENBQUE7SUFBQSxPQUFBQyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBZ0MsU0FBQUQsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFaEMsTUFBTUcsTUFBTSxHQUFHQyxrQkFBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQztBQUUvQixTQUFTQyxNQUFNQSxDQUFDQyxNQUFNLEdBQUcsSUFBSSxFQUFFO0VBQzdCLE9BQU8sR0FBR0EsTUFBTSxJQUFJQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRTtBQUM3RDtBQUVBLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLEVBQUU7RUFDOUM7RUFDQSxNQUFNO0lBQUVDLGFBQWEsR0FBRyxDQUFDO0lBQUVDLFlBQVksR0FBRyxDQUFDO0lBQUVDLGFBQWEsR0FBRyxDQUFDO0lBQUVDLFdBQVcsR0FBRztFQUFFLENBQUMsR0FBR0osVUFBVTtFQUM5RixNQUFNSyxLQUFLLEdBQUlKLGFBQWEsR0FB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