{"version":3,"names":["_express","_interopRequireDefault","require","_agents","e","__esModule","default","cov_ymow93z8m","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","_coverageSchema","coverage","actualCoverage","router","express","Router","get","req","res","countries","days","query","countriesArray","split","map","c","trim","toUpperCase","agent","MetatronAgent","result","run","parseInt","json","success","data","timestamp","Date","toISOString","error","console","message","status","analysis","reportContent","Object","entries","resilienceAnalysis","country","socialEvents","resilienceScore","toFixed","recommendations","join","period","startDate","endDate","globalResilienceAssessment","averageResilience","lowResilienceCountries","assessment","globalRecommendations","report","_default","exports"],"sources":["community-resilience.js"],"sourcesContent":["import express from 'express';\nimport MetatronAgent from '../agents.js';\n\nconst router = express.Router();\n\n// GET /api/community-resilience - Get community resilience analysis\nrouter.get('/', async (req, res) => {\n  try {\n    const { countries = 'COL,PER,ARG', days = 30 } = req.query;\n    const countriesArray = countries.split(',').map(c => c.trim().toUpperCase());\n\n    const agent = new MetatronAgent('CommunityResilienceAgent');\n    const result = await agent.run({ countries: countriesArray, days: parseInt(days) });\n\n    res.json({\n      success: true,\n      data: result,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('[CommunityResilience] Error:', error.message);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// GET /api/community-resilience/report - Generate and return resilience report\nrouter.get('/report', async (req, res) => {\n  try {\n    const { countries = 'COL,PER,ARG', days = 30 } = req.query;\n    const countriesArray = countries.split(',').map(c => c.trim().toUpperCase());\n\n    const agent = new MetatronAgent('CommunityResilienceAgent');\n    const analysis = await agent.run({ countries: countriesArray, days: parseInt(days) });\n\n    // Generate report content\n    const reportContent = `# COMMUNITY_RESILIENCE_REPORT.md\n\n## Análisis de Resiliencia Comunitaria en LATAM\n\n### Timestamp\n${new Date().toISOString()}\n\n### Análisis por País\n${Object.entries(analysis.resilienceAnalysis).map(([country, data]) => `#### ${country}\n- Eventos Sociales: ${data.socialEvents}\n- Puntaje de Resiliencia: ${data.resilienceScore.toFixed(1)}/100\n- Recomendaciones: ${data.recommendations.join(', ')}\n- Período: ${data.period.startDate} a ${data.period.endDate}\n`).join('\\n')}\n\n### Evaluación Global\n- Resiliencia Promedio: ${analysis.globalResilienceAssessment.averageResilience.toFixed(1)}/100\n- Países con Baja Resiliencia: ${analysis.globalResilienceAssessment.lowResilienceCountries}\n- Evaluación: ${analysis.globalResilienceAssessment.assessment}\n- Recomendaciones Globales: ${analysis.globalResilienceAssessment.globalRecommendations.join(', ')}\n\nGenerado por CommunityResilienceAgent - Praevisio AI\n`;\n\n    res.json({\n      success: true,\n      report: reportContent,\n      data: analysis,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('[CommunityResilience Report] Error:', error.message);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\nexport default router;"],"mappings":"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","ignoreList":[]}