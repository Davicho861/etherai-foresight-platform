23d76f25d2b5fb82640584957fca417d
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);
var index_exports = {};
__export(index_exports, {
  GraphQLHandler: () => import_GraphQLHandler.GraphQLHandler,
  HttpHandler: () => import_HttpHandler.HttpHandler,
  HttpMethods: () => import_HttpHandler.HttpMethods,
  RequestHandler: () => import_RequestHandler.RequestHandler,
  SetupApi: () => import_SetupApi.SetupApi,
  WebSocketHandler: () => import_WebSocketHandler.WebSocketHandler,
  bypass: () => import_bypass.bypass,
  cleanUrl: () => import_cleanUrl.cleanUrl,
  getResponse: () => import_getResponse.getResponse,
  graphql: () => import_graphql.graphql,
  http: () => import_http.http,
  isCommonAssetRequest: () => import_isCommonAssetRequest.isCommonAssetRequest,
  matchRequestUrl: () => import_matchRequestUrl.matchRequestUrl,
  onUnhandledRequest: () => import_onUnhandledRequest.onUnhandledRequest,
  passthrough: () => import_passthrough.passthrough,
  ws: () => import_ws.ws
});
module.exports = __toCommonJS(index_exports);
var import_checkGlobals = require("./utils/internal/checkGlobals");
var import_SetupApi = require("./SetupApi");
var import_RequestHandler = require("./handlers/RequestHandler");
var import_http = require("./http");
var import_HttpHandler = require("./handlers/HttpHandler");
var import_graphql = require("./graphql");
var import_GraphQLHandler = require("./handlers/GraphQLHandler");
var import_ws = require("./ws");
var import_WebSocketHandler = require("./handlers/WebSocketHandler");
var import_matchRequestUrl = require("./utils/matching/matchRequestUrl");
__reExport(index_exports, require("./utils/handleRequest"), module.exports);
var import_onUnhandledRequest = require("./utils/request/onUnhandledRequest");
var import_getResponse = require("./getResponse");
var import_cleanUrl = require("./utils/url/cleanUrl");
__reExport(index_exports, require("./HttpResponse"), module.exports);
__reExport(index_exports, require("./delay"), module.exports);
var import_bypass = require("./bypass");
var import_passthrough = require("./passthrough");
var import_isCommonAssetRequest = require("./isCommonAssetRequest");
(0, import_checkGlobals.checkGlobals)();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbmRleF9leHBvcnRzIiwiX19leHBvcnQiLCJHcmFwaFFMSGFuZGxlciIsImltcG9ydF9HcmFwaFFMSGFuZGxlciIsIkh0dHBIYW5kbGVyIiwiaW1wb3J0X0h0dHBIYW5kbGVyIiwiSHR0cE1ldGhvZHMiLCJSZXF1ZXN0SGFuZGxlciIsImltcG9ydF9SZXF1ZXN0SGFuZGxlciIsIlNldHVwQXBpIiwiaW1wb3J0X1NldHVwQXBpIiwiV2ViU29ja2V0SGFuZGxlciIsImltcG9ydF9XZWJTb2NrZXRIYW5kbGVyIiwiYnlwYXNzIiwiaW1wb3J0X2J5cGFzcyIsImNsZWFuVXJsIiwiaW1wb3J0X2NsZWFuVXJsIiwiZ2V0UmVzcG9uc2UiLCJpbXBvcnRfZ2V0UmVzcG9uc2UiLCJncmFwaHFsIiwiaW1wb3J0X2dyYXBocWwiLCJodHRwIiwiaW1wb3J0X2h0dHAiLCJpc0NvbW1vbkFzc2V0UmVxdWVzdCIsImltcG9ydF9pc0NvbW1vbkFzc2V0UmVxdWVzdCIsIm1hdGNoUmVxdWVzdFVybCIsImltcG9ydF9tYXRjaFJlcXVlc3RVcmwiLCJvblVuaGFuZGxlZFJlcXVlc3QiLCJpbXBvcnRfb25VbmhhbmRsZWRSZXF1ZXN0IiwicGFzc3Rocm91Z2giLCJpbXBvcnRfcGFzc3Rocm91Z2giLCJ3cyIsImltcG9ydF93cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3RvQ29tbW9uSlMiLCJpbXBvcnRfY2hlY2tHbG9iYWxzIiwicmVxdWlyZSIsIl9fcmVFeHBvcnQiLCJjaGVja0dsb2JhbHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29yZS9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVja0dsb2JhbHMgfSBmcm9tICcuL3V0aWxzL2ludGVybmFsL2NoZWNrR2xvYmFscydcblxuZXhwb3J0IHsgU2V0dXBBcGkgfSBmcm9tICcuL1NldHVwQXBpJ1xuXG4vKiBIVFRQIGhhbmRsZXJzICovXG5leHBvcnQgeyBSZXF1ZXN0SGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvUmVxdWVzdEhhbmRsZXInXG5leHBvcnQgeyBodHRwIH0gZnJvbSAnLi9odHRwJ1xuZXhwb3J0IHsgSHR0cEhhbmRsZXIsIEh0dHBNZXRob2RzIH0gZnJvbSAnLi9oYW5kbGVycy9IdHRwSGFuZGxlcidcbmV4cG9ydCB7IGdyYXBocWwgfSBmcm9tICcuL2dyYXBocWwnXG5leHBvcnQgeyBHcmFwaFFMSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvR3JhcGhRTEhhbmRsZXInXG5cbi8qIFdlYlNvY2tldCBoYW5kbGVyICovXG5leHBvcnQgeyB3cywgdHlwZSBXZWJTb2NrZXRMaW5rIH0gZnJvbSAnLi93cydcbmV4cG9ydCB7XG4gIFdlYlNvY2tldEhhbmRsZXIsXG4gIHR5cGUgV2ViU29ja2V0SGFuZGxlckV2ZW50TWFwLFxuICB0eXBlIFdlYlNvY2tldEhhbmRsZXJDb25uZWN0aW9uLFxufSBmcm9tICcuL2hhbmRsZXJzL1dlYlNvY2tldEhhbmRsZXInXG5cbi8qIFV0aWxzICovXG5leHBvcnQgeyBtYXRjaFJlcXVlc3RVcmwgfSBmcm9tICcuL3V0aWxzL21hdGNoaW5nL21hdGNoUmVxdWVzdFVybCdcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvaGFuZGxlUmVxdWVzdCdcbmV4cG9ydCB7XG4gIG9uVW5oYW5kbGVkUmVxdWVzdCxcbiAgdHlwZSBVbmhhbmRsZWRSZXF1ZXN0U3RyYXRlZ3ksXG4gIHR5cGUgVW5oYW5kbGVkUmVxdWVzdENhbGxiYWNrLFxufSBmcm9tICcuL3V0aWxzL3JlcXVlc3Qvb25VbmhhbmRsZWRSZXF1ZXN0J1xuZXhwb3J0IHsgZ2V0UmVzcG9uc2UgfSBmcm9tICcuL2dldFJlc3BvbnNlJ1xuZXhwb3J0IHsgY2xlYW5VcmwgfSBmcm9tICcuL3V0aWxzL3VybC9jbGVhblVybCdcblxuLyoqXG4gKiBUeXBlIGRlZmluaXRpb25zLlxuICovXG5cbmV4cG9ydCB0eXBlIHsgU2hhcmVkT3B0aW9ucywgTGlmZUN5Y2xlRXZlbnRzTWFwIH0gZnJvbSAnLi9zaGFyZWRPcHRpb25zJ1xuXG5leHBvcnQgdHlwZSB7XG4gIFJlc3BvbnNlUmVzb2x2ZXIsXG4gIFJlc3BvbnNlUmVzb2x2ZXJSZXR1cm5UeXBlLFxuICBBc3luY1Jlc3BvbnNlUmVzb2x2ZXJSZXR1cm5UeXBlLFxuICBSZXF1ZXN0SGFuZGxlck9wdGlvbnMsXG4gIERlZmF1bHRCb2R5VHlwZSxcbiAgRGVmYXVsdFJlcXVlc3RNdWx0aXBhcnRCb2R5LFxuICBKc29uQm9keVR5cGUsXG59IGZyb20gJy4vaGFuZGxlcnMvUmVxdWVzdEhhbmRsZXInXG5cbmV4cG9ydCB0eXBlIHtcbiAgUmVxdWVzdFF1ZXJ5LFxuICBIdHRwUmVxdWVzdFBhcnNlZFJlc3VsdCxcbiAgSHR0cEN1c3RvbVByZWRpY2F0ZSxcbn0gZnJvbSAnLi9oYW5kbGVycy9IdHRwSGFuZGxlcidcbmV4cG9ydCB0eXBlIHsgSHR0cFJlcXVlc3RIYW5kbGVyLCBIdHRwUmVzcG9uc2VSZXNvbHZlciB9IGZyb20gJy4vaHR0cCdcblxuZXhwb3J0IHR5cGUge1xuICBHcmFwaFFMUXVlcnksXG4gIEdyYXBoUUxWYXJpYWJsZXMsXG4gIEdyYXBoUUxSZXF1ZXN0Qm9keSxcbiAgR3JhcGhRTFJlc3BvbnNlQm9keSxcbiAgR3JhcGhRTEpzb25SZXF1ZXN0Qm9keSxcbiAgR3JhcGhRTE9wZXJhdGlvblR5cGUsXG4gIEdyYXBoUUxDdXN0b21QcmVkaWNhdGUsXG59IGZyb20gJy4vaGFuZGxlcnMvR3JhcGhRTEhhbmRsZXInXG5leHBvcnQgdHlwZSB7IEdyYXBoUUxSZXF1ZXN0SGFuZGxlciwgR3JhcGhRTFJlc3BvbnNlUmVzb2x2ZXIgfSBmcm9tICcuL2dyYXBocWwnXG5cbmV4cG9ydCB0eXBlIHsgV2ViU29ja2V0RGF0YSwgV2ViU29ja2V0RXZlbnRMaXN0ZW5lciB9IGZyb20gJy4vd3MnXG5cbmV4cG9ydCB0eXBlIHsgUGF0aCwgUGF0aFBhcmFtcywgTWF0Y2ggfSBmcm9tICcuL3V0aWxzL21hdGNoaW5nL21hdGNoUmVxdWVzdFVybCdcbmV4cG9ydCB0eXBlIHsgUGFyc2VkR3JhcGhRTFJlcXVlc3QgfSBmcm9tICcuL3V0aWxzL2ludGVybmFsL3BhcnNlR3JhcGhRTFJlcXVlc3QnXG5cbmV4cG9ydCAqIGZyb20gJy4vSHR0cFJlc3BvbnNlJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWxheSdcbmV4cG9ydCB7IGJ5cGFzcyB9IGZyb20gJy4vYnlwYXNzJ1xuZXhwb3J0IHsgcGFzc3Rocm91Z2ggfSBmcm9tICcuL3Bhc3N0aHJvdWdoJ1xuZXhwb3J0IHsgaXNDb21tb25Bc3NldFJlcXVlc3QgfSBmcm9tICcuL2lzQ29tbW9uQXNzZXRSZXF1ZXN0J1xuXG4vLyBWYWxpZGF0ZSBlbnZpcm9ubWVudGFsIGdsb2JhbHMgYmVmb3JlIGV4ZWN1dGluZyBhbnkgY29kZS5cbi8vIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBsaWJyYXJ5IGdpdmVzIHVzZXItZnJpZW5kbHkgZXJyb3JzXG4vLyB3aGVuIHJhbiBpbiB0aGUgZW52aXJvbm1lbnRzIHRoYXQgcmVxdWlyZSBhZGRpdGlvbmFsIHBvbHlmaWxsc1xuLy8gZnJvbSB0aGUgZW5kIHVzZXIuXG5jaGVja0dsb2JhbHMoKVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsYUFBQTtBQUFBQyxRQUFBLENBQUFELGFBQUE7RUFBQUUsY0FBQSxFQUFBQSxDQUFBLEtBQUFDLHFCQUFBLENBQUFELGNBQUE7RUFBQUUsV0FBQSxFQUFBQSxDQUFBLEtBQUFDLGtCQUFBLENBQUFELFdBQUE7RUFBQUUsV0FBQSxFQUFBQSxDQUFBLEtBQUFELGtCQUFBLENBQUFDLFdBQUE7RUFBQUMsY0FBQSxFQUFBQSxDQUFBLEtBQUFDLHFCQUFBLENBQUFELGNBQUE7RUFBQUUsUUFBQSxFQUFBQSxDQUFBLEtBQUFDLGVBQUEsQ0FBQUQsUUFBQTtFQUFBRSxnQkFBQSxFQUFBQSxDQUFBLEtBQUFDLHVCQUFBLENBQUFELGdCQUFBO0VBQUFFLE1BQUEsRUFBQUEsQ0FBQSxLQUFBQyxhQUFBLENBQUFELE1BQUE7RUFBQUUsUUFBQSxFQUFBQSxDQUFBLEtBQUFDLGVBQUEsQ0FBQUQsUUFBQTtFQUFBRSxXQUFBLEVBQUFBLENBQUEsS0FBQUMsa0JBQUEsQ0FBQUQsV0FBQTtFQUFBRSxPQUFBLEVBQUFBLENBQUEsS0FBQUMsY0FBQSxDQUFBRCxPQUFBO0VBQUFFLElBQUEsRUFBQUEsQ0FBQSxLQUFBQyxXQUFBLENBQUFELElBQUE7RUFBQUUsb0JBQUEsRUFBQUEsQ0FBQSxLQUFBQywyQkFBQSxDQUFBRCxvQkFBQTtFQUFBRSxlQUFBLEVBQUFBLENBQUEsS0FBQUMsc0JBQUEsQ0FBQUQsZUFBQTtFQUFBRSxrQkFBQSxFQUFBQSxDQUFBLEtBQUFDLHlCQUFBLENBQUFELGtCQUFBO0VBQUFFLFdBQUEsRUFBQUEsQ0FBQSxLQUFBQyxrQkFBQSxDQUFBRCxXQUFBO0VBQUFFLEVBQUEsRUFBQUEsQ0FBQSxLQUFBQyxTQUFBLENBQUFEO0FBQUE7QUFBQUUsTUFBQSxDQUFBQyxPQUFBLEdBQUFDLFlBQUEsQ0FBQW5DLGFBQUE7QUFBQSxJQUFBb0MsbUJBQUEsR0FBNkJDLE9BQUE7QUFFN0IsSUFBQTNCLGVBQUEsR0FBeUIyQixPQUFBO0FBR3pCLElBQUE3QixxQkFBQSxHQUErQjZCLE9BQUE7QUFDL0IsSUFBQWYsV0FBQSxHQUFxQmUsT0FBQTtBQUNyQixJQUFBaEMsa0JBQUEsR0FBeUNnQyxPQUFBO0FBQ3pDLElBQUFqQixjQUFBLEdBQXdCaUIsT0FBQTtBQUN4QixJQUFBbEMscUJBQUEsR0FBK0JrQyxPQUFBO0FBRy9CLElBQUFMLFNBQUEsR0FBdUNLLE9BQUE7QUFDdkMsSUFBQXpCLHVCQUFBLEdBSU95QixPQUFBO0FBR1AsSUFBQVgsc0JBQUEsR0FBZ0NXLE9BQUE7QUFDaENDLFVBQUEsQ0FBQXRDLGFBQUEsRUFBY3FDLE9BQUEsMkJBckJkSixNQUFBLENBQUFDLE9BQUE7QUFzQkEsSUFBQU4seUJBQUEsR0FJT1MsT0FBQTtBQUNQLElBQUFuQixrQkFBQSxHQUE0Qm1CLE9BQUE7QUFDNUIsSUFBQXJCLGVBQUEsR0FBeUJxQixPQUFBO0FBeUN6QkMsVUFBQSxDQUFBdEMsYUFBQSxFQUFjcUMsT0FBQSxvQkFyRWRKLE1BQUEsQ0FBQUMsT0FBQTtBQXNFQUksVUFBQSxDQUFBdEMsYUFBQSxFQUFjcUMsT0FBQSxhQXRFZEosTUFBQSxDQUFBQyxPQUFBO0FBdUVBLElBQUFwQixhQUFBLEdBQXVCdUIsT0FBQTtBQUN2QixJQUFBUCxrQkFBQSxHQUE0Qk8sT0FBQTtBQUM1QixJQUFBYiwyQkFBQSxHQUFxQ2EsT0FBQTtBQUFBLElBTXJDRCxtQkFBQSxDQUFBRyxZQUFBLEVBQWEiLCJpZ25vcmVMaXN0IjpbXX0=