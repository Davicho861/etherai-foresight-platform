717bcbaad6caba32970aaeb5757d6bfc
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = _interopRequireDefault(require("express"));
var _cache = _interopRequireDefault(require("../cache.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const router = _express.default.Router();

// Mock data for alerts - in production, this would come from database
const mockAlerts = [{
  id: 1,
  title: 'Riesgo Clim치tico Extremo en Colombia',
  description: 'Aumento significativo en precipitaciones en la regi칩n andina, potencial para deslizamientos de tierra.',
  severity: 'HIGH',
  region: 'Colombia',
  type: 'CLIMATE',
  timestamp: '2025-10-05T02:00:00Z',
  status: 'ACTIVE'
}, {
  id: 2,
  title: 'Volatilidad Cripto-Econ칩mica en Argentina',
  description: 'Fluctuaciones extremas en el mercado de criptomonedas locales, riesgo de p치nico financiero.',
  severity: 'MEDIUM',
  region: 'Argentina',
  type: 'ECONOMIC',
  timestamp: '2025-10-04T18:30:00Z',
  status: 'MONITORING'
}];

// GET /api/alerts - List all alerts with caching optimization
router.get('/', (req, res) => {
  const {
    region,
    severity,
    type
  } = req.query;

  // Create cache key based on query parameters
  const cacheKey = `alerts:${region || 'all'}:${severity || 'all'}:${type || 'all'}`;

  // Check cache first
  const cachedResult = _cache.default.get(cacheKey);
  if (cachedResult) {
    return res.json(cachedResult);
  }
  let filteredAlerts = mockAlerts;
  if (region) {
    filteredAlerts = filteredAlerts.filter(alert => alert.region.toLowerCase() === region.toLowerCase());
  }
  if (severity) {
    filteredAlerts = filteredAlerts.filter(alert => alert.severity === severity);
  }
  if (type) {
    filteredAlerts = filteredAlerts.filter(alert => alert.type === type);
  }
  const result = {
    alerts: filteredAlerts,
    total: filteredAlerts.length,
    filters: {
      region,
      severity,
      type
    }
  };

  // Cache result for 5 minutes (300,000 ms)
  _cache.default.set(cacheKey, result, 300000);
  res.json(result);
});

// GET /api/alerts/:id - Get specific alert
router.get('/:id', (req, res) => {
  const alert = mockAlerts.find(a => a.id === parseInt(req.params.id));
  if (!alert) {
    return res.status(404).json({
      error: 'Alert not found'
    });
  }
  res.json(alert);
});

// POST /api/alerts - Create new alert (requires authentication in production)
router.post('/', (req, res) => {
  const {
    title,
    description,
    severity,
    region,
    type
  } = req.body;
  if (!title || !description || !severity || !region || !type) {
    return res.status(400).json({
      error: 'Missing required fields'
    });
  }
  const newAlert = {
    id: mockAlerts.length + 1,
    title,
    description,
    severity: severity.toUpperCase(),
    region,
    type: type.toUpperCase(),
    timestamp: new Date().toISOString(),
    status: 'ACTIVE'
  };
  mockAlerts.push(newAlert);
  res.status(201).json(newAlert);
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,