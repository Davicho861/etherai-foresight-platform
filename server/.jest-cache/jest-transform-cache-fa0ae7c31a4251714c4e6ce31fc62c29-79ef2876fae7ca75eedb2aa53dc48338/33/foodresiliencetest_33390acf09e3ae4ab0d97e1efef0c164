96309898e8333947a3cf5813ad38793a
"use strict";

var _server = require("../mocks/server.js");
function _supertest() {
  const data = _interopRequireDefault(require("supertest"));
  _supertest = function () {
    return data;
  };
  return data;
}
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
var _foodResilience = _interopRequireDefault(require("../../src/routes/food-resilience.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Atenea's Wisdom: The old, chaotic mocks are banished.
// We now rely on Hefesto's global, deterministic fetch mock.
// No direct mocking of integration modules is needed.

describe('Food Resilience Routes', () => {
  let app;
  beforeAll(() => {
    _server.server.listen();
    // No long timeouts needed. The Oracle (and mocks) are instantaneous.
  });
  afterAll(() => {
    _server.server.close();
  });
  beforeEach(() => {
    // Create express app with the router
    app = (0, _express().default)();
    app.use(_express().default.json());
    app.use('/api/food-resilience', _foodResilience.default);
  });
  describe('GET /api/food-resilience/prices', () => {
    it('should return food prices for all products', async () => {
      const response = await (0, _supertest().default)(app).get('/api/food-resilience/prices');
      expect(response.status).toBe(200);
      expect(response.body.country).toBe('Peru');
      expect(response.body.prices).toHaveLength(4);
      expect(response.body.summary.averageVolatility).toBeDefined();
    });
  });
  describe('GET /api/food-resilience/supply-chain', () => {
    it('should return optimized supply chain routes', async () => {
      const response = await (0, _supertest().default)(app).get('/api/food-resilience/supply-chain');
      expect(response.status).toBe(200);
      expect(response.body.country).toBe('Peru');
      expect(response.body.routes).toHaveLength(4);
      expect(response.body.optimization.recommendedRoutes).toBeDefined();
    });
  });
  describe('POST /api/food-resilience/predict', () => {
    it('should generate price prediction for valid product', async () => {
      const response = await (0, _supertest().default)(app).post('/api/food-resilience/predict').send({
        product: 'rice',
        timeframe: '30_days'
      });
      expect(response.status).toBe(200);
      expect(response.body.product).toBe('rice');
      expect(response.body.predictedPrice).toBeDefined();
      expect(response.body.confidence).toBeDefined();
    });
    it('should return 400 for invalid product', async () => {
      const response = await (0, _supertest().default)(app).post('/api/food-resilience/predict').send({
        product: '',
        timeframe: '30_days'
      });
      expect(response.status).toBe(400);
      expect(response.body.error).toBe('invalid_product');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2VydmVyIiwicmVxdWlyZSIsIl9zdXBlcnRlc3QiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9leHByZXNzIiwiX2Zvb2RSZXNpbGllbmNlIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZGVzY3JpYmUiLCJhcHAiLCJiZWZvcmVBbGwiLCJzZXJ2ZXIiLCJsaXN0ZW4iLCJhZnRlckFsbCIsImNsb3NlIiwiYmVmb3JlRWFjaCIsImV4cHJlc3MiLCJ1c2UiLCJqc29uIiwiZm9vZFJlc2lsaWVuY2VSb3V0ZXIiLCJpdCIsInJlc3BvbnNlIiwicmVxdWVzdCIsImdldCIsImV4cGVjdCIsInN0YXR1cyIsInRvQmUiLCJib2R5IiwiY291bnRyeSIsInByaWNlcyIsInRvSGF2ZUxlbmd0aCIsInN1bW1hcnkiLCJhdmVyYWdlVm9sYXRpbGl0eSIsInRvQmVEZWZpbmVkIiwicm91dGVzIiwib3B0aW1pemF0aW9uIiwicmVjb21tZW5kZWRSb3V0ZXMiLCJwb3N0Iiwic2VuZCIsInByb2R1Y3QiLCJ0aW1lZnJhbWUiLCJwcmVkaWN0ZWRQcmljZSIsImNvbmZpZGVuY2UiLCJlcnJvciJdLCJzb3VyY2VzIjpbImZvb2QtcmVzaWxpZW5jZS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlcnZlciB9IGZyb20gJy4uL21vY2tzL3NlcnZlci5qcyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdzdXBlcnRlc3QnO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgZm9vZFJlc2lsaWVuY2VSb3V0ZXIgZnJvbSAnLi4vLi4vc3JjL3JvdXRlcy9mb29kLXJlc2lsaWVuY2UuanMnO1xuXG4vLyBBdGVuZWEncyBXaXNkb206IFRoZSBvbGQsIGNoYW90aWMgbW9ja3MgYXJlIGJhbmlzaGVkLlxuLy8gV2Ugbm93IHJlbHkgb24gSGVmZXN0bydzIGdsb2JhbCwgZGV0ZXJtaW5pc3RpYyBmZXRjaCBtb2NrLlxuLy8gTm8gZGlyZWN0IG1vY2tpbmcgb2YgaW50ZWdyYXRpb24gbW9kdWxlcyBpcyBuZWVkZWQuXG5cbmRlc2NyaWJlKCdGb29kIFJlc2lsaWVuY2UgUm91dGVzJywgKCkgPT4ge1xuICBsZXQgYXBwO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgc2VydmVyLmxpc3RlbigpO1xuICAgIC8vIE5vIGxvbmcgdGltZW91dHMgbmVlZGVkLiBUaGUgT3JhY2xlIChhbmQgbW9ja3MpIGFyZSBpbnN0YW50YW5lb3VzLlxuICB9KTtcblxuICBhZnRlckFsbCgoKSA9PiB7XG4gICAgc2VydmVyLmNsb3NlKCk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBleHByZXNzIGFwcCB3aXRoIHRoZSByb3V0ZXJcbiAgICBhcHAgPSBleHByZXNzKCk7XG4gICAgYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG4gICAgYXBwLnVzZSgnL2FwaS9mb29kLXJlc2lsaWVuY2UnLCBmb29kUmVzaWxpZW5jZVJvdXRlcik7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS9mb29kLXJlc2lsaWVuY2UvcHJpY2VzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGZvb2QgcHJpY2VzIGZvciBhbGwgcHJvZHVjdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvZm9vZC1yZXNpbGllbmNlL3ByaWNlcycpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5jb3VudHJ5KS50b0JlKCdQZXJ1Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5wcmljZXMpLnRvSGF2ZUxlbmd0aCg0KTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1bW1hcnkuYXZlcmFnZVZvbGF0aWxpdHkpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS9mb29kLXJlc2lsaWVuY2Uvc3VwcGx5LWNoYWluJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIG9wdGltaXplZCBzdXBwbHkgY2hhaW4gcm91dGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvYXBpL2Zvb2QtcmVzaWxpZW5jZS9zdXBwbHktY2hhaW4nKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuY291bnRyeSkudG9CZSgnUGVydScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkucm91dGVzKS50b0hhdmVMZW5ndGgoNCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5vcHRpbWl6YXRpb24ucmVjb21tZW5kZWRSb3V0ZXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQT1NUIC9hcGkvZm9vZC1yZXNpbGllbmNlL3ByZWRpY3QnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBwcmljZSBwcmVkaWN0aW9uIGZvciB2YWxpZCBwcm9kdWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvZm9vZC1yZXNpbGllbmNlL3ByZWRpY3QnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3Q6ICdyaWNlJywgdGltZWZyYW1lOiAnMzBfZGF5cycgfSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnByb2R1Y3QpLnRvQmUoJ3JpY2UnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnByZWRpY3RlZFByaWNlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuY29uZmlkZW5jZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDQwMCBmb3IgaW52YWxpZCBwcm9kdWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvZm9vZC1yZXNpbGllbmNlL3ByZWRpY3QnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3Q6ICcnLCB0aW1lZnJhbWU6ICczMF9kYXlzJyB9KTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvQmUoJ2ludmFsaWRfcHJvZHVjdCcpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFDQSxTQUFBQyxXQUFBO0VBQUEsTUFBQUMsSUFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0VBQUFDLFVBQUEsWUFBQUEsQ0FBQTtJQUFBLE9BQUFDLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUNBLFNBQUFFLFNBQUE7RUFBQSxNQUFBRixJQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7RUFBQUksUUFBQSxZQUFBQSxDQUFBO0lBQUEsT0FBQUYsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBQ0EsSUFBQUcsZUFBQSxHQUFBRixzQkFBQSxDQUFBSCxPQUFBO0FBQXVFLFNBQUFHLHVCQUFBRyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRXZFO0FBQ0E7QUFDQTs7QUFFQUcsUUFBUSxDQUFDLHdCQUF3QixFQUFFLE1BQU07RUFDdkMsSUFBSUMsR0FBRztFQUVQQyxTQUFTLENBQUMsTUFBTTtJ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