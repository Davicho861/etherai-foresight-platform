e4d708c507fd4cbf96b7ff0af932aa7f
"use strict";

// Mock kernel for agent routes
_getJestObj().mock('../../src/orchestrator.js', () => ({
  kernel: {
    getVigilanceStatus: jest.fn(() => ({
      flows: {
        autoPreservation: {
          active: true,
          lastRun: new Date().toISOString()
        },
        knowledge: {
          active: true,
          lastRun: new Date().toISOString()
        },
        prophecy: {
          active: true,
          lastRun: new Date().toISOString()
        }
      },
      riskIndices: {
        'Colombia': {
          riskScore: 3.2,
          level: 'medium'
        },
        'Argentina': {
          riskScore: 2.8,
          level: 'low'
        }
      },
      activityFeed: [{
        timestamp: new Date().toISOString(),
        flow: 'prophecy',
        message: 'Risk indices updated'
      }]
    }))
  }
}));
_getJestObj().mock('../../src/eventHub.js', () => ({
  subscribe: jest.fn(() => jest.fn())
}));
var _supertest = _interopRequireDefault(require("supertest"));
var _express = _interopRequireDefault(require("express"));
var _alerts = _interopRequireDefault(require("../../src/routes/alerts.js"));
var _agent = _interopRequireDefault(require("../../src/routes/agent.js"));
var _predict = _interopRequireDefault(require("../../src/routes/predict.js"));
var _cache = _interopRequireDefault(require("../../src/cache.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * API Performance Tests for MIS-020 Backend Optimization
 * Tests caching, response times, and performance improvements
 */
const app = (0, _express.default)();
app.use(_express.default.json());
app.use('/api/alerts', _alerts.default);
app.use('/api/agent', _agent.default);
app.use('/api/predict', _predict.default);
describe('API Performance Tests - MIS-020', () => {
  beforeEach(() => {
    // Clear cache before each test
    _cache.default.clear();
  });
  describe('Alerts API Performance', () => {
    test('should cache alerts responses and serve from cache on subsequent calls', async () => {
      const startTime = Date.now();

      // First request - should compute and cache
      const response1 = await (0, _supertest.default)(app).get('/api/alerts').expect(200);
      const firstRequestTime = Date.now() - startTime;
      const startTime2 = Date.now();

      // Second request - should serve from cache
      const response2 = await (0, _supertest.default)(app).get('/api/alerts').expect(200);
      const secondRequestTime = Date.now() - startTime2;

      // Response should be identical
      expect(response1.body).toEqual(response2.body);

      // Second request should be significantly faster (cached)
      expect(secondRequestTime).toBeLessThan(firstRequestTime * 0.5);

      // Verify cache hit
      const cacheKey = 'alerts:all:all:all';
      const cachedData = _cache.default.get(cacheKey);
      expect(cachedData).toEqual(response1.body);
    });
    test('should cache filtered alerts responses', async () => {
      // Test caching with filters
      const response1 = await (0, _supertest.default)(app).get('/api/alerts?region=Colombia').expect(200);
      const response2 = await (0, _supertest.default)(app).get('/api/alerts?region=Colombia').expect(200);
      expect(response1.body).toEqual(response2.body);

      // Verify cache with specific key
      const cacheKey = 'alerts:colombia:all:all';
      const cachedData = _cache.default.get(cacheKey);
      expect(cachedData).toEqual(response1.body);
    });
    test('should handle concurrent requests efficiently', async () => {
      const promises = Array(10).fill().map(() => (0, _supertest.default)(app).get('/api/alerts'));
      const startTime = Date.now();
      const responses = await Promise.all(promises);
      const totalTime = Date.now() - startTime;

      // All responses should be successful
      responses.forEach(response => {
        expect(response.status).toBe(200);
        expect(response.body.alerts).toBeDefined();
      });

      // Concurrent requests should complete within reasonable time
      expect(totalTime).toBeLessThan(2000); // 2 seconds for 10 concurrent requests
    });
  });
  describe('Agent API Performance', () => {
    test('should cache vigilance status responses', async () => {
      const response1 = await (0, _supertest.default)(app).get('/api/agent/vigilance/status').expect(200);
      const response2 = await (0, _supertest.default)(app).get('/api/agent/vigilance/status').expect(200);

      // Responses should be identical
      expect(response1.body).toEqual(response2.body);

      // Verify cache hit
      const cacheKey = 'vigilance:status';
      const cachedData = _cache.default.get(cacheKey);
      expect(cachedData).toEqual(response1.body);
    });
  });
  describe('Prediction API Performance', () => {
    test('should cache prediction responses based on parameters', async () => {
      const predictionParams = {
        country: 'Colombia',
        parameters: {
          infectionRate: 25,
          protestIndex: 15,
          economicIndex: 10,
          temperature: 5
        }
      };
      const response1 = await (0, _supertest.default)(app).post('/api/predict').send(predictionParams).expect(200);
      const response2 = await (0, _supertest.default)(app).post('/api/predict').send(predictionParams).expect(200);

      // Responses should be identical
      expect(response1.body).toEqual(response2.body);
      expect(response1.body.country).toBe('Colombia');
      expect(response1.body.risk).toBeDefined();
      expect(response1.body.confidence).toBeDefined();
    });
    test('should not cache different prediction parameters', async () => {
      const params1 = {
        country: 'Colombia',
        parameters: {
          infectionRate: 25,
          protestIndex: 15,
          economicIndex: 10,
          temperature: 5
        }
      };
      const params2 = {
        country: 'Colombia',
        parameters: {
          infectionRate: 30,
          protestIndex: 15,
          economicIndex: 10,
          temperature: 5
        }
      };
      const response1 = await (0, _supertest.default)(app).post('/api/predict').send(params1).expect(200);
      const response2 = await (0, _supertest.default)(app).post('/api/predict').send(params2).expect(200);

      // Responses should be different due to different parameters
      expect(response1.body.score).not.toBe(response2.body.score);
    });
  });
  describe('Cache Performance Metrics', () => {
    test('should demonstrate significant performance improvement with caching', async () => {
      // Measure time without cache (simulate by clearing cache)
      _cache.default.clear();
      const startTime1 = process.hrtime.bigint();
      await (0, _supertest.default)(app).get('/api/alerts');
      const endTime1 = process.hrtime.bigint();
      const time1 = Number(endTime1 - startTime1) / 1000000; // Convert to milliseconds

      const startTime2 = process.hrtime.bigint();
      await (0, _supertest.default)(app).get('/api/alerts'); // Should hit cache
      const endTime2 = process.hrtime.bigint();
      const time2 = Number(endTime2 - startTime2) / 1000000;

      // Cached request should be at least 50% faster
      expect(time2).toBeLessThan(time1 * 0.5);
    });
    test('should maintain cache TTL and expiration', async () => {
      // Set a short TTL for testing
      const shortTTL = 100; // 100ms

      // Make request and cache it
      await (0, _supertest.default)(app).get('/api/alerts');

      // Modify cache to have short TTL
      const cacheKey = 'alerts:all:all:all';
      const cachedData = _cache.default.get(cacheKey);
      _cache.default.set(cacheKey, cachedData, shortTTL);

      // Wait for expiration
      await new Promise(resolve => setTimeout(resolve, shortTTL + 10));

      // Cache should be expired
      const expiredData = _cache.default.get(cacheKey);
      expect(expiredData).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJrZXJuZWwiLCJnZXRWaWdpbGFuY2VTdGF0dXMiLCJqZXN0IiwiZm4iLCJmbG93cyIsImF1dG9QcmVzZXJ2YXRpb24iLCJhY3RpdmUiLCJsYXN0UnVuIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwia25vd2xlZGdlIiwicHJvcGhlY3kiLCJyaXNrSW5kaWNlcyIsInJpc2tTY29yZSIsImxldmVsIiwiYWN0aXZpdHlGZWVkIiwidGltZXN0YW1wIiwiZmxvdyIsIm1lc3NhZ2UiLCJzdWJzY3JpYmUiLCJfc3VwZXJ0ZXN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZXhwcmVzcyIsIl9hbGVydHMiLCJfYWdlbnQiLCJfcHJlZGljdCIsIl9jYWNoZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImFwcCIsImV4cHJlc3MiLCJ1c2UiLCJqc29uIiwiYWxlcnRzUm91dGVyIiwiYWdlbnRSb3V0ZXIiLCJwcmVkaWN0Um91dGVyIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2FjaGUiLCJjbGVhciIsInRlc3QiLCJzdGFydFRpbWUiLCJub3ciLCJyZXNwb25zZTEiLCJyZXF1ZXN0IiwiZ2V0IiwiZXhwZWN0IiwiZmlyc3RSZXF1ZXN0VGltZSIsInN0YXJ0VGltZTIiLCJyZXNwb25zZTIiLCJzZWNvbmRSZXF1ZXN0VGltZSIsImJvZHkiLCJ0b0VxdWFsIiwidG9CZUxlc3NUaGFuIiwiY2FjaGVLZXkiLCJjYWNoZWREYXRhIiwicHJvbWlzZXMiLCJBcnJheSIsImZpbGwiLCJtYXAiLCJyZXNwb25zZXMiLCJQcm9taXNlIiwiYWxsIiwidG90YWxUaW1lIiwiZm9yRWFjaCIsInJlc3BvbnNlIiwic3RhdHVzIiwidG9CZSIsImFsZXJ0cyIsInRvQmVEZWZpbmVkIiwicHJlZGljdGlvblBhcmFtcyIsImNvdW50cnkiLCJwYXJhbWV0ZXJzIiwiaW5mZWN0aW9uUmF0ZSIsInByb3Rlc3RJbmRleCIsImVjb25vbWljSW5kZXgiLCJ0ZW1wZXJhdHVyZSIsInBvc3QiLCJzZW5kIiwicmlzayIsImNvbmZpZGVuY2UiLCJwYXJhbXMxIiwicGFyYW1zMiIsInNjb3JlIiwibm90Iiwic3RhcnRUaW1lMSIsInByb2Nlc3MiLCJocnRpbWUiLCJiaWdpbnQiLCJlbmRUaW1lMSIsInRpbWUxIiwiTnVtYmVyIiwiZW5kVGltZTIiLCJ0aW1lMiIsInNob3J0VFRMIiwic2V0IiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJleHBpcmVkRGF0YSIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsiQVBJUGVyZm9ybWFuY2UudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFQSSBQZXJmb3JtYW5jZSBUZXN0cyBmb3IgTUlTLTAyMCBCYWNrZW5kIE9wdGltaXphdGlvblxuICogVGVzdHMgY2FjaGluZywgcmVzcG9uc2UgdGltZXMsIGFuZCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHNcbiAqL1xuXG5pbXBvcnQgcmVxdWVzdCBmcm9tICdzdXBlcnRlc3QnO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgYWxlcnRzUm91dGVyIGZyb20gJy4uLy4uL3NyYy9yb3V0ZXMvYWxlcnRzLmpzJztcbmltcG9ydCBhZ2VudFJvdXRlciBmcm9tICcuLi8uLi9zcmMvcm91dGVzL2FnZW50LmpzJztcbmltcG9ydCBwcmVkaWN0Um91dGVyIGZyb20gJy4uLy4uL3NyYy9yb3V0ZXMvcHJlZGljdC5qcyc7XG5pbXBvcnQgY2FjaGUgZnJvbSAnLi4vLi4vc3JjL2NhY2hlLmpzJztcblxuLy8gTW9jayBrZXJuZWwgZm9yIGFnZW50IHJvdXRlc1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvb3JjaGVzdHJhdG9yLmpzJywgKCkgPT4gKHtcbiAga2VybmVsOiB7XG4gICAgZ2V0VmlnaWxhbmNlU3RhdHVzOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICBmbG93czoge1xuICAgICAgICBhdXRvUHJlc2VydmF0aW9uOiB7IGFjdGl2ZTogdHJ1ZSwgbGFzdFJ1bjogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0sXG4gICAgICAgIGtub3dsZWRnZTogeyBhY3RpdmU6IHRydWUsIGxhc3RSdW46IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9LFxuICAgICAgICBwcm9waGVjeTogeyBhY3RpdmU6IHRydWUsIGxhc3RSdW46IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9XG4gICAgICB9LFxuICAgICAgcmlza0luZGljZXM6IHtcbiAgICAgICAgJ0NvbG9tYmlhJzogeyByaXNrU2NvcmU6IDMuMiwgbGV2ZWw6ICdtZWRpdW0nIH0sXG4gICAgICAgICdBcmdlbnRpbmEnOiB7IHJpc2tTY29yZTogMi44LCBsZXZlbDogJ2xvdycgfVxuICAgICAgfSxcbiAgICAgIGFjdGl2aXR5RmVlZDogW1xuICAgICAgICB7IHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLCBmbG93OiAncHJvcGhlY3knLCBtZXNzYWdlOiAnUmlzayBpbmRpY2VzIHVwZGF0ZWQnIH1cbiAgICAgIF1cbiAgICB9KSlcbiAgfVxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9ldmVudEh1Yi5qcycsICgpID0+ICh7XG4gIHN1YnNjcmliZTogamVzdC5mbigoKSA9PiBqZXN0LmZuKCkpXG59KSk7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuYXBwLnVzZSgnL2FwaS9hbGVydHMnLCBhbGVydHNSb3V0ZXIpO1xuYXBwLnVzZSgnL2FwaS9hZ2VudCcsIGFnZW50Um91dGVyKTtcbmFwcC51c2UoJy9hcGkvcHJlZGljdCcsIHByZWRpY3RSb3V0ZXIpO1xuXG5kZXNjcmliZSgnQVBJIFBlcmZvcm1hbmNlIFRlc3RzIC0gTUlTLTAyMCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gQ2xlYXIgY2FjaGUgYmVmb3JlIGVhY2ggdGVzdFxuICAgIGNhY2hlLmNsZWFyKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBbGVydHMgQVBJIFBlcmZvcm1hbmNlJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBjYWNoZSBhbGVydHMgcmVzcG9uc2VzIGFuZCBzZXJ2ZSBmcm9tIGNhY2hlIG9uIHN1YnNlcXVlbnQgY2FsbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICAvLyBGaXJzdCByZXF1ZXN0IC0gc2hvdWxkIGNvbXB1dGUgYW5kIGNhY2hlXG4gICAgICBjb25zdCByZXNwb25zZTEgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS9hbGVydHMnKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGNvbnN0IGZpcnN0UmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICBjb25zdCBzdGFydFRpbWUyID0gRGF0ZS5ub3coKTtcblxuICAgICAgLy8gU2Vjb25kIHJlcXVlc3QgLSBzaG91bGQgc2VydmUgZnJvbSBjYWNoZVxuICAgICAgY29uc3QgcmVzcG9uc2UyID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvYWxlcnRzJylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBjb25zdCBzZWNvbmRSZXF1ZXN0VGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWUyO1xuXG4gICAgICAvLyBSZXNwb25zZSBzaG91bGQgYmUgaWRlbnRpY2FsXG4gICAgICBleHBlY3QocmVzcG9uc2UxLmJvZHkpLnRvRXF1YWwocmVzcG9uc2UyLmJvZHkpO1xuXG4gICAgICAvLyBTZWNvbmQgcmVxdWVzdCBzaG91bGQgYmUgc2lnbmlmaWNhbnRseSBmYXN0ZXIgKGNhY2hlZClcbiAgICAgIGV4cGVjdChzZWNvbmRSZXF1ZXN0VGltZSkudG9CZUxlc3NUaGFuKGZpcnN0UmVxdWVzdFRpbWUgKiAwLjUpO1xuXG4gICAgICAvLyBWZXJpZnkgY2FjaGUgaGl0XG4gICAgICBjb25zdCBjYWNoZUtleSA9ICdhbGVydHM6YWxsOmFsbDphbGwnO1xuICAgICAgY29uc3QgY2FjaGVkRGF0YSA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICBleHBlY3QoY2FjaGVkRGF0YSkudG9FcXVhbChyZXNwb25zZTEuYm9keSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgY2FjaGUgZmlsdGVyZWQgYWxlcnRzIHJlc3BvbnNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRlc3QgY2FjaGluZyB3aXRoIGZpbHRlcnNcbiAgICAgIGNvbnN0IHJlc3BvbnNlMSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL2FsZXJ0cz9yZWdpb249Q29sb21iaWEnKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlMiA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL2FsZXJ0cz9yZWdpb249Q29sb21iaWEnKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZTEuYm9keSkudG9FcXVhbChyZXNwb25zZTIuYm9keSk7XG5cbiAgICAgIC8vIFZlcmlmeSBjYWNoZSB3aXRoIHNwZWNpZmljIGtleVxuICAgICAgY29uc3QgY2FjaGVLZXkgPSAnYWxlcnRzOmNvbG9tYmlhOmFsbDphbGwnO1xuICAgICAgY29uc3QgY2FjaGVkRGF0YSA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICBleHBlY3QoY2FjaGVkRGF0YSkudG9FcXVhbChyZXNwb25zZTEuYm9keSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGNvbmN1cnJlbnQgcmVxdWVzdHMgZWZmaWNpZW50bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9taXNlcyA9IEFycmF5KDEwKS5maWxsKCkubWFwKCgpID0+XG4gICAgICAgIHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvYWxlcnRzJylcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCByZXNwb25zZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICBjb25zdCB0b3RhbFRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICAvLyBBbGwgcmVzcG9uc2VzIHNob3VsZCBiZSBzdWNjZXNzZnVsXG4gICAgICByZXNwb25zZXMuZm9yRWFjaChyZXNwb25zZSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuYWxlcnRzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENvbmN1cnJlbnQgcmVxdWVzdHMgc2hvdWxkIGNvbXBsZXRlIHdpdGhpbiByZWFzb25hYmxlIHRpbWVcbiAgICAgIGV4cGVjdCh0b3RhbFRpbWUpLnRvQmVMZXNzVGhhbigyMDAwKTsgLy8gMiBzZWNvbmRzIGZvciAxMCBjb25jdXJyZW50IHJlcXVlc3RzXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBZ2VudCBBUEkgUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNhY2hlIHZpZ2lsYW5jZSBzdGF0dXMgcmVzcG9uc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UxID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvYWdlbnQvdmlnaWxhbmNlL3N0YXR1cycpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UyID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvYWdlbnQvdmlnaWxhbmNlL3N0YXR1cycpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gUmVzcG9uc2VzIHNob3VsZCBiZSBpZGVudGljYWxcbiAgICAgIGV4cGVjdChyZXNwb25zZTEuYm9keSkudG9FcXVhbChyZXNwb25zZTIuYm9keSk7XG5cbiAgICAgIC8vIFZlcmlmeSBjYWNoZSBoaXRcbiAgICAgIGNvbnN0IGNhY2hlS2V5ID0gJ3ZpZ2lsYW5jZTpzdGF0dXMnO1xuICAgICAgY29uc3QgY2FjaGVkRGF0YSA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICBleHBlY3QoY2FjaGVkRGF0YSkudG9FcXVhbChyZXNwb25zZTEuYm9keSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQcmVkaWN0aW9uIEFQSSBQZXJmb3JtYW5jZScsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY2FjaGUgcHJlZGljdGlvbiByZXNwb25zZXMgYmFzZWQgb24gcGFyYW1ldGVycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHByZWRpY3Rpb25QYXJhbXMgPSB7XG4gICAgICAgIGNvdW50cnk6ICdDb2xvbWJpYScsXG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICBpbmZlY3Rpb25SYXRlOiAyNSxcbiAgICAgICAgICBwcm90ZXN0SW5kZXg6IDE1LFxuICAgICAgICAgIGVjb25vbWljSW5kZXg6IDEwLFxuICAgICAgICAgIHRlbXBlcmF0dXJlOiA1XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlMSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9wcmVkaWN0JylcbiAgICAgICAgLnNlbmQocHJlZGljdGlvblBhcmFtcylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBjb25zdCByZXNwb25zZTIgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvcHJlZGljdCcpXG4gICAgICAgIC5zZW5kKHByZWRpY3Rpb25QYXJhbXMpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gUmVzcG9uc2VzIHNob3VsZCBiZSBpZGVudGljYWxcbiAgICAgIGV4cGVjdChyZXNwb25zZTEuYm9keSkudG9FcXVhbChyZXNwb25zZTIuYm9keSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UxLmJvZHkuY291bnRyeSkudG9CZSgnQ29sb21iaWEnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZTEuYm9keS5yaXNrKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlMS5ib2R5LmNvbmZpZGVuY2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgbm90IGNhY2hlIGRpZmZlcmVudCBwcmVkaWN0aW9uIHBhcmFtZXRlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYXJhbXMxID0ge1xuICAgICAgICBjb3VudHJ5OiAnQ29sb21iaWEnLFxuICAgICAgICBwYXJhbWV0ZXJzOiB7IGluZmVjdGlvblJhdGU6IDI1LCBwcm90ZXN0SW5kZXg6IDE1LCBlY29ub21pY0luZGV4OiAxMCwgdGVtcGVyYXR1cmU6IDUgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgcGFyYW1zMiA9IHtcbiAgICAgICAgY291bnRyeTogJ0NvbG9tYmlhJyxcbiAgICAgICAgcGFyYW1ldGVyczogeyBpbmZlY3Rpb25SYXRlOiAzMCwgcHJvdGVzdEluZGV4OiAxNSwgZWNvbm9taWNJbmRleDogMTAsIHRlbXBlcmF0dXJlOiA1IH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlMSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9wcmVkaWN0JylcbiAgICAgICAgLnNlbmQocGFyYW1zMSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBjb25zdCByZXNwb25zZTIgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvcHJlZGljdCcpXG4gICAgICAgIC5zZW5kKHBhcmFtczIpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gUmVzcG9uc2VzIHNob3VsZCBiZSBkaWZmZXJlbnQgZHVlIHRvIGRpZmZlcmVudCBwYXJhbWV0ZXJzXG4gICAgICBleHBlY3QocmVzcG9uc2UxLmJvZHkuc2NvcmUpLm5vdC50b0JlKHJlc3BvbnNlMi5ib2R5LnNjb3JlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NhY2hlIFBlcmZvcm1hbmNlIE1ldHJpY3MnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGRlbW9uc3RyYXRlIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGltcHJvdmVtZW50IHdpdGggY2FjaGluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1lYXN1cmUgdGltZSB3aXRob3V0IGNhY2hlIChzaW11bGF0ZSBieSBjbGVhcmluZyBjYWNoZSlcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZTEgPSBwcm9jZXNzLmhydGltZS5iaWdpbnQoKTtcbiAgICAgIGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvYWxlcnRzJyk7XG4gICAgICBjb25zdCBlbmRUaW1lMSA9IHByb2Nlc3MuaHJ0aW1lLmJpZ2ludCgpO1xuICAgICAgY29uc3QgdGltZTEgPSBOdW1iZXIoZW5kVGltZTEgLSBzdGFydFRpbWUxKSAvIDEwMDAwMDA7IC8vIENvbnZlcnQgdG8gbWlsbGlzZWNvbmRzXG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZTIgPSBwcm9jZXNzLmhydGltZS5iaWdpbnQoKTtcbiAgICAgIGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvYWxlcnRzJyk7IC8vIFNob3VsZCBoaXQgY2FjaGVcbiAgICAgIGNvbnN0IGVuZFRpbWUyID0gcHJvY2Vzcy5ocnRpbWUuYmlnaW50KCk7XG4gICAgICBjb25zdCB0aW1lMiA9IE51bWJlcihlbmRUaW1lMiAtIHN0YXJ0VGltZTIpIC8gMTAwMDAwMDtcblxuICAgICAgLy8gQ2FjaGVkIHJlcXVlc3Qgc2hvdWxkIGJlIGF0IGxlYXN0IDUwJSBmYXN0ZXJcbiAgICAgIGV4cGVjdCh0aW1lMikudG9CZUxlc3NUaGFuKHRpbWUxICogMC41KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBtYWludGFpbiBjYWNoZSBUVEwgYW5kIGV4cGlyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTZXQgYSBzaG9ydCBUVEwgZm9yIHRlc3RpbmdcbiAgICAgIGNvbnN0IHNob3J0VFRMID0gMTAwOyAvLyAxMDBtc1xuXG4gICAgICAvLyBNYWtlIHJlcXVlc3QgYW5kIGNhY2hlIGl0XG4gICAgICBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvYXBpL2FsZXJ0cycpO1xuXG4gICAgICAvLyBNb2RpZnkgY2FjaGUgdG8gaGF2ZSBzaG9ydCBUVExcbiAgICAgIGNvbnN0IGNhY2hlS2V5ID0gJ2FsZXJ0czphbGw6YWxsOmFsbCc7XG4gICAgICBjb25zdCBjYWNoZWREYXRhID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgY2FjaGVkRGF0YSwgc2hvcnRUVEwpO1xuXG4gICAgICAvLyBXYWl0IGZvciBleHBpcmF0aW9uXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgc2hvcnRUVEwgKyAxMCkpO1xuXG4gICAgICAvLyBDYWNoZSBzaG91bGQgYmUgZXhwaXJlZFxuICAgICAgY29uc3QgZXhwaXJlZERhdGEgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgICAgZXhwZWN0KGV4cGlyZWREYXRhKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFZQTtBQUNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxPQUFPO0VBQzVDQyxNQUFNLEVBQUU7SUFDTkMsa0JBQWtCLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLE9BQU87TUFDakNDLEtBQUssRUFBRTtRQUNMQyxnQkFBZ0IsRUFBRTtVQUFFQyxNQUFNLEVBQUUs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