0fdb3b03d6bc50755b367ed4b96ef6fe
"use strict";

// Mock execSync to avoid actual Git commands in tests
_getJestObj().mock('child_process', () => ({
  execSync: jest.fn(() => '12\n')
}));
function _supertest() {
  const data = _interopRequireDefault(require("supertest"));
  _supertest = function () {
    return data;
  };
  return data;
}
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
var _sdlc = _interopRequireDefault(require("../../src/routes/sdlc.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const app = (0, _express().default)();
app.use(_express().default.json());
app.use('/api/sdlc', _sdlc.default);
describe('SDLC Routes', () => {
  describe('GET /api/sdlc/planning', () => {
    it('should return planning metrics', async () => {
      const response = await (0, _supertest().default)(app).get('/api/sdlc/planning').expect(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(response.body.data).toHaveProperty('backlogItems');
      expect(response.body.data).toHaveProperty('priorityScore');
      expect(response.body.data).toHaveProperty('projectedARR');
      expect(response.body.data).toHaveProperty('breakEvenMonths');
      expect(response.body.data).toHaveProperty('riskAnalysis');
      expect(response.body.data).toHaveProperty('timeline');
    });
  });
  describe('GET /api/sdlc/design', () => {
    it('should return design metrics', async () => {
      const response = await (0, _supertest().default)(app).get('/api/sdlc/design').expect(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(response.body.data).toHaveProperty('complexityScore');
      expect(response.body.data).toHaveProperty('technicalDebt');
      expect(response.body.data).toHaveProperty('securityScore');
      expect(response.body.data).toHaveProperty('responseTime');
      expect(response.body.data).toHaveProperty('architectureMap');
      expect(response.body.data).toHaveProperty('securityProfile');
    });
  });
  describe('GET /api/sdlc/implementation', () => {
    it('should return implementation metrics', async () => {
      const response = await (0, _supertest().default)(app).get('/api/sdlc/implementation').expect(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(response.body.data).toHaveProperty('commitsLast24h');
      expect(response.body.data).toHaveProperty('activeBranches');
      expect(response.body.data).toHaveProperty('linesAdded');
      expect(response.body.data).toHaveProperty('contributors');
      expect(response.body.data).toHaveProperty('velocity');
      expect(response.body.data).toHaveProperty('burndownRate');
      expect(response.body.data).toHaveProperty('codeQuality');
      expect(response.body.data).toHaveProperty('teamMetrics');
    });
  });
  describe('GET /api/sdlc/testing', () => {
    it('should return testing metrics', async () => {
      const response = await (0, _supertest().default)(app).get('/api/sdlc/testing').expect(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(response.body.data).toHaveProperty('testCoverage');
      expect(response.body.data).toHaveProperty('totalTests');
      expect(response.body.data).toHaveProperty('passingTests');
      expect(response.body.data).toHaveProperty('failingTests');
      expect(response.body.data).toHaveProperty('flakyTests');
      expect(response.body.data).toHaveProperty('testExecutionTime');
      expect(response.body.data).toHaveProperty('coverageByComponent');
      expect(response.body.data).toHaveProperty('testTrends');
      expect(response.body.data).toHaveProperty('automationStatus');
    });
  });
  describe('GET /api/sdlc/deployment', () => {
    it('should return deployment metrics', async () => {
      const response = await (0, _supertest().default)(app).get('/api/sdlc/deployment').expect(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(response.body.data).toHaveProperty('deploymentFrequency');
      expect(response.body.data).toHaveProperty('deploymentTime');
      expect(response.body.data).toHaveProperty('failureRate');
      expect(response.body.data).toHaveProperty('mttr');
      expect(response.body.data).toHaveProperty('availability');
      expect(response.body.data).toHaveProperty('pipelineStatus');
      expect(response.body.data).toHaveProperty('recentDeployments');
      expect(response.body.data).toHaveProperty('infrastructure');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,