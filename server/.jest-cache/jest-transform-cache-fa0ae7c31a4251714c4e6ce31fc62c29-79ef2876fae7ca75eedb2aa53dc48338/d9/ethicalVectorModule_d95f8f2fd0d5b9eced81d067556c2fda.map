{"version":3,"names":["cov_15q5kgs6hn","actualCoverage","calculateHumanImpact","riskIndices","f","famineRisk","supplyChainRisk","s","famineImpact","b","value","supplyChainImpact","humanImpact","Math","min","calculateEnvironmentalSustainability","geophysicalRisk","geoImpact","calculateSocialEquity","famineCountries","countries","length","famineEquity","affectedRegions","supplyEquity","socialEquity","calculatePrivacyRisk","communityResilienceRisk","climateExtremesRisk","communityDataExposure","climateDataExposure","privacyRisk","calculateAlgorithmicJustice","famineConcentration","geoConcentration","algorithmicJustice","calculateEthicalVector","environmentalSustainability","overallScore","vector","components","assessment","timestamp","Date","toISOString"],"sources":["ethicalVectorModule.js"],"sourcesContent":["/**\n * @fileoverview Ethical Vector Module for Praevisio AI.\n * This module implements the Quantum Ethics framework for evaluating predictions\n * against human impact, environmental sustainability, social equity, privacy, and algorithmic justice.\n */\n\n/**\n * Calculates the human impact component of the ethical vector.\n * Higher values indicate greater potential harm to human populations.\n * @param {object} riskIndices - The current risk indices from prediction engine.\n * @returns {number} Human impact score (0-1).\n */\nfunction calculateHumanImpact(riskIndices) {\n  const { famineRisk, supplyChainRisk } = riskIndices;\n\n  // Human impact primarily from famine and supply chain disruptions\n  const famineImpact = (famineRisk.value || 0) / 100; // Normalize to 0-1\n  const supplyChainImpact = (supplyChainRisk.value || 0) / 100;\n\n  // Weighted combination: famine has higher human impact weight\n  const humanImpact = (famineImpact * 0.7) + (supplyChainImpact * 0.3);\n\n  return Math.min(1, humanImpact);\n}\n\n/**\n * Calculates the environmental sustainability component of the ethical vector.\n * Higher values indicate greater environmental risk.\n * @param {object} riskIndices - The current risk indices from prediction engine.\n * @returns {number} Environmental sustainability score (0-1).\n */\nfunction calculateEnvironmentalSustainability(riskIndices) {\n  const { geophysicalRisk } = riskIndices;\n\n  // Environmental impact primarily from geophysical events\n  const geoImpact = (geophysicalRisk.value || 0) / 100;\n\n  // Additional factors could include climate data when available\n  // For now, focus on seismic activity as proxy for environmental disruption\n\n  return Math.min(1, geoImpact);\n}\n\n/**\n * Calculates the social equity component of the ethical vector.\n * Higher values indicate greater inequity in risk distribution.\n * @param {object} riskIndices - The current risk indices from prediction engine.\n * @returns {number} Social equity score (0-1).\n */\nfunction calculateSocialEquity(riskIndices) {\n  const { famineRisk, supplyChainRisk } = riskIndices;\n\n  // Social equity considers how risks are distributed across populations\n  // Higher famine risk in multiple countries indicates inequity\n  const famineCountries = famineRisk.countries ? famineRisk.countries.length : 0;\n  const famineEquity = Math.min(1, famineCountries / 50); // Normalize by global regions\n\n  // Supply chain disruptions affecting multiple regions\n  const affectedRegions = supplyChainRisk.affectedRegions ? supplyChainRisk.affectedRegions.length : 0;\n  const supplyEquity = Math.min(1, affectedRegions / 20);\n\n  // Combined equity score\n  const socialEquity = (famineEquity * 0.6) + (supplyEquity * 0.4);\n\n  return Math.min(1, socialEquity);\n}\n\n/**\n * Calculates the privacy risk component of the ethical vector.\n * Higher values indicate greater potential privacy violations in data handling.\n * @param {object} riskIndices - The current risk indices from prediction engine.\n * @returns {number} Privacy risk score (0-1).\n */\nfunction calculatePrivacyRisk(riskIndices) {\n  const { communityResilienceRisk, climateExtremesRisk } = riskIndices;\n\n  // Privacy risk increases with detailed community data exposure\n  const communityDataExposure = (communityResilienceRisk.value || 0) / 100;\n  const climateDataExposure = (climateExtremesRisk.value || 0) / 100;\n\n  // Weighted combination: community data has higher privacy sensitivity\n  const privacyRisk = (communityDataExposure * 0.6) + (climateDataExposure * 0.4);\n\n  return Math.min(1, privacyRisk);\n}\n\n/**\n * Calculates the algorithmic justice component of the ethical vector.\n * Higher values indicate greater potential for algorithmic bias or unfair outcomes.\n * @param {object} riskIndices - The current risk indices from prediction engine.\n * @returns {number} Algorithmic justice score (0-1).\n */\nfunction calculateAlgorithmicJustice(riskIndices) {\n  const { famineRisk, geophysicalRisk } = riskIndices;\n\n  // Algorithmic justice considers potential biases in risk predictions\n  // Higher concentration of risk in specific regions may indicate bias\n  const famineConcentration = famineRisk.countries ? Math.min(1, famineRisk.countries.length / 10) : 0;\n  const geoConcentration = (geophysicalRisk.value || 0) / 100;\n\n  // Combined justice score: concentration indicates potential bias\n  const algorithmicJustice = (famineConcentration * 0.5) + (geoConcentration * 0.5);\n\n  return Math.min(1, algorithmicJustice);\n}\n\n/**\n * Calculates the complete ethical vector for the current risk assessment.\n * The vector represents [humanImpact, environmentalSustainability, socialEquity, privacyRisk, algorithmicJustice]\n * where each component is normalized 0-1.\n * @param {object} riskIndices - The current risk indices from prediction engine.\n * @returns {object} Ethical vector with components and overall assessment.\n */\nfunction calculateEthicalVector(riskIndices) {\n  const humanImpact = calculateHumanImpact(riskIndices);\n  const environmentalSustainability = calculateEnvironmentalSustainability(riskIndices);\n  const socialEquity = calculateSocialEquity(riskIndices);\n  const privacyRisk = calculatePrivacyRisk(riskIndices);\n  const algorithmicJustice = calculateAlgorithmicJustice(riskIndices);\n\n  // Overall ethical score: weighted average\n  // Human impact has highest weight, followed by environmental and social concerns\n  // Privacy and algorithmic justice are emerging ethical dimensions\n  const overallScore = (humanImpact * 0.35) + (environmentalSustainability * 0.25) +\n                      (socialEquity * 0.2) + (privacyRisk * 0.1) + (algorithmicJustice * 0.1);\n\n  return {\n    vector: [humanImpact, environmentalSustainability, socialEquity, privacyRisk, algorithmicJustice],\n    components: {\n      humanImpact,\n      environmentalSustainability,\n      socialEquity,\n      privacyRisk,\n      algorithmicJustice,\n    },\n    overallScore,\n    assessment: overallScore > 0.7 ? 'High Ethical Concern' :\n                overallScore > 0.4 ? 'Medium Ethical Concern' : 'Low Ethical Concern',\n    timestamp: new Date().toISOString(),\n  };\n}\n\nexport {\n  calculateHumanImpact,\n  calculateEnvironmentalSustainability,\n  calculateSocialEquity,\n  calculatePrivacyRisk,\n  calculateAlgorithmicJustice,\n  calculateEthicalVector,\n};"],"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","ignoreList":[]}