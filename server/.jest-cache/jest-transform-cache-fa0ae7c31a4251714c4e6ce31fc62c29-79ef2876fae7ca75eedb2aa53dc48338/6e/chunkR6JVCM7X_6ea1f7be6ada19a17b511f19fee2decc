d2f88982204dff99c362d9a768984844
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _chunkA7U44ARPjs = require('./chunk-A7U44ARP.js');

// src/BatchInterceptor.ts
var BatchInterceptor = class extends _chunkA7U44ARPjs.Interceptor {
  constructor(options) {
    BatchInterceptor.symbol = Symbol(options.name);
    super(BatchInterceptor.symbol);
    this.interceptors = options.interceptors;
  }
  setup() {
    const logger = this.logger.extend("setup");
    logger.info("applying all %d interceptors...", this.interceptors.length);
    for (const interceptor of this.interceptors) {
      logger.info('applying "%s" interceptor...', interceptor.constructor.name);
      interceptor.apply();
      logger.info("adding interceptor dispose subscription");
      this.subscriptions.push(() => interceptor.dispose());
    }
  }
  on(event, listener) {
    for (const interceptor of this.interceptors) {
      interceptor.on(event, listener);
    }
    return this;
  }
  once(event, listener) {
    for (const interceptor of this.interceptors) {
      interceptor.once(event, listener);
    }
    return this;
  }
  off(event, listener) {
    for (const interceptor of this.interceptors) {
      interceptor.off(event, listener);
    }
    return this;
  }
  removeAllListeners(event) {
    for (const interceptors of this.interceptors) {
      interceptors.removeAllListeners(event);
    }
    return this;
  }
};
exports.BatchInterceptor = BatchInterceptor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXRjaEludGVyY2VwdG9yIiwiX2NodW5rQTdVNDRBUlBqcyIsIkludGVyY2VwdG9yIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwic3ltYm9sIiwiU3ltYm9sIiwibmFtZSIsImludGVyY2VwdG9ycyIsInNldHVwIiwibG9nZ2VyIiwiZXh0ZW5kIiwiaW5mbyIsImxlbmd0aCIsImludGVyY2VwdG9yIiwiYXBwbHkiLCJzdWJzY3JpcHRpb25zIiwicHVzaCIsImRpc3Bvc2UiLCJvbiIsImV2ZW50IiwibGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0JhdGNoSW50ZXJjZXB0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRNYXAsIExpc3RlbmVyIH0gZnJvbSAnc3RyaWN0LWV2ZW50LWVtaXR0ZXInXG5pbXBvcnQgeyBJbnRlcmNlcHRvciwgRXh0cmFjdEV2ZW50TmFtZXMgfSBmcm9tICcuL0ludGVyY2VwdG9yJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoSW50ZXJjZXB0b3JPcHRpb25zPFxuICBJbnRlcmNlcHRvckxpc3QgZXh0ZW5kcyBSZWFkb25seUFycmF5PEludGVyY2VwdG9yPGFueT4+XG4+IHtcbiAgbmFtZTogc3RyaW5nXG4gIGludGVyY2VwdG9yczogSW50ZXJjZXB0b3JMaXN0XG59XG5cbmV4cG9ydCB0eXBlIEV4dHJhY3RFdmVudE1hcFR5cGU8XG4gIEludGVyY2VwdG9yTGlzdCBleHRlbmRzIFJlYWRvbmx5QXJyYXk8SW50ZXJjZXB0b3I8YW55Pj5cbj4gPSBJbnRlcmNlcHRvckxpc3QgZXh0ZW5kcyBSZWFkb25seUFycmF5PGluZmVyIEludGVyY2VwdG9yVHlwZT5cbiAgPyBJbnRlcmNlcHRvclR5cGUgZXh0ZW5kcyBJbnRlcmNlcHRvcjxpbmZlciBFdmVudE1hcD5cbiAgICA/IEV2ZW50TWFwXG4gICAgOiBuZXZlclxuICA6IG5ldmVyXG5cbi8qKlxuICogQSBiYXRjaCBpbnRlcmNlcHRvciB0aGF0IGV4cG9zZXMgYSBzaW5nbGUgaW50ZXJmYWNlXG4gKiB0byBhcHBseSBhbmQgb3BlcmF0ZSB3aXRoIG11bHRpcGxlIGludGVyY2VwdG9ycyBhdCBvbmNlLlxuICovXG5leHBvcnQgY2xhc3MgQmF0Y2hJbnRlcmNlcHRvcjxcbiAgSW50ZXJjZXB0b3JMaXN0IGV4dGVuZHMgUmVhZG9ubHlBcnJheTxJbnRlcmNlcHRvcjxhbnk+PixcbiAgRXZlbnRzIGV4dGVuZHMgRXZlbnRNYXAgPSBFeHRyYWN0RXZlbnRNYXBUeXBlPEludGVyY2VwdG9yTGlzdD5cbj4gZXh0ZW5kcyBJbnRlcmNlcHRvcjxFdmVudHM+IHtcbiAgc3RhdGljIHN5bWJvbDogc3ltYm9sXG5cbiAgcHJpdmF0ZSBpbnRlcmNlcHRvcnM6IEludGVyY2VwdG9yTGlzdFxuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEJhdGNoSW50ZXJjZXB0b3JPcHRpb25zPEludGVyY2VwdG9yTGlzdD4pIHtcbiAgICBCYXRjaEludGVyY2VwdG9yLnN5bWJvbCA9IFN5bWJvbChvcHRpb25zLm5hbWUpXG4gICAgc3VwZXIoQmF0Y2hJbnRlcmNlcHRvci5zeW1ib2wpXG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSBvcHRpb25zLmludGVyY2VwdG9yc1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldHVwKCkge1xuICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMubG9nZ2VyLmV4dGVuZCgnc2V0dXAnKVxuXG4gICAgbG9nZ2VyLmluZm8oJ2FwcGx5aW5nIGFsbCAlZCBpbnRlcmNlcHRvcnMuLi4nLCB0aGlzLmludGVyY2VwdG9ycy5sZW5ndGgpXG5cbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9yIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG4gICAgICBsb2dnZXIuaW5mbygnYXBwbHlpbmcgXCIlc1wiIGludGVyY2VwdG9yLi4uJywgaW50ZXJjZXB0b3IuY29uc3RydWN0b3IubmFtZSlcbiAgICAgIGludGVyY2VwdG9yLmFwcGx5KClcblxuICAgICAgbG9nZ2VyLmluZm8oJ2FkZGluZyBpbnRlcmNlcHRvciBkaXNwb3NlIHN1YnNjcmlwdGlvbicpXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiBpbnRlcmNlcHRvci5kaXNwb3NlKCkpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9uPEV2ZW50TmFtZSBleHRlbmRzIEV4dHJhY3RFdmVudE5hbWVzPEV2ZW50cz4+KFxuICAgIGV2ZW50OiBFdmVudE5hbWUsXG4gICAgbGlzdGVuZXI6IExpc3RlbmVyPEV2ZW50c1tFdmVudE5hbWVdPlxuICApOiB0aGlzIHtcbiAgICAvLyBJbnN0ZWFkIG9mIGFkZGluZyBhIGxpc3RlbmVyIHRvIHRoZSBiYXRjaCBpbnRlcmNlcHRvcixcbiAgICAvLyBwcm9wYWdhdGUgdGhlIGxpc3RlbmVyIHRvIGVhY2ggb2YgdGhlIGluZGl2aWR1YWwgaW50ZXJjZXB0b3JzLlxuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIGludGVyY2VwdG9yLm9uKGV2ZW50LCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcHVibGljIG9uY2U8RXZlbnROYW1lIGV4dGVuZHMgRXh0cmFjdEV2ZW50TmFtZXM8RXZlbnRzPj4oXG4gICAgZXZlbnQ6IEV2ZW50TmFtZSxcbiAgICBsaXN0ZW5lcjogTGlzdGVuZXI8RXZlbnRzW0V2ZW50TmFtZV0+XG4gICk6IHRoaXMge1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIGludGVyY2VwdG9yLm9uY2UoZXZlbnQsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBwdWJsaWMgb2ZmPEV2ZW50TmFtZSBleHRlbmRzIEV4dHJhY3RFdmVudE5hbWVzPEV2ZW50cz4+KFxuICAgIGV2ZW50OiBFdmVudE5hbWUsXG4gICAgbGlzdGVuZXI6IExpc3RlbmVyPEV2ZW50c1tFdmVudE5hbWVdPlxuICApOiB0aGlzIHtcbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9yIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG4gICAgICBpbnRlcmNlcHRvci5vZmYoZXZlbnQsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlQWxsTGlzdGVuZXJzPEV2ZW50TmFtZSBleHRlbmRzIEV4dHJhY3RFdmVudE5hbWVzPEV2ZW50cz4+KFxuICAgIGV2ZW50PzogRXZlbnROYW1lIHwgdW5kZWZpbmVkXG4gICk6IHRoaXMge1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3JzIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG4gICAgICBpbnRlcmNlcHRvcnMucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFzQk8sSUFBTUEsZ0JBQUEsR0FBTixjQUdHQyxnQkFBb0IsQ0FBQUMsV0FBQTtFQUs1QkMsWUFBWUMsT0FBQSxFQUFtRDtJQUM3REosZ0JBQUEsQ0FBaUJLLE1BQUEsR0FBU0MsTUFBQSxDQUFPRixPQUFBLENBQVFHLElBQUk7SUFDN0MsTUFBTVAsZ0JBQUEsQ0FBaUJLLE1BQU07SUFDN0IsS0FBS0csWUFBQSxHQUFlSixPQUFBLENBQVFJLFlBQUE7RUFDOUI7RUFFVUMsTUFBQSxFQUFRO0lBQ2hCLE1BQU1DLE1BQUEsR0FBUyxLQUFLQSxNQUFBLENBQU9DLE1BQUEsQ0FBTyxPQUFPO0lBRXpDRCxNQUFBLENBQU9FLElBQUEsQ0FBSyxtQ0FBbUMsS0FBS0osWUFBQSxDQUFhSyxNQUFNO0lBRXZFLFdBQVdDLFdBQUEsSUFBZSxLQUFLTixZQUFBLEVBQWM7TUFDM0NFLE1BQUEsQ0FBT0UsSUFBQSxDQUFLLGdDQUFnQ0UsV0FBQSxDQUFZWCxXQUFBLENBQVlJLElBQUk7TUFDeEVPLFdBQUEsQ0FBWUMsS0FBQSxDQUFNO01BRWxCTCxNQUFBLENBQU9FLElBQUEsQ0FBSyx5Q0FBeUM7TUFDckQsS0FBS0ksYUFBQSxDQUFjQyxJQUFBLENBQUssTUFBTUgsV0FBQSxDQUFZSSxPQUFBLENBQVEsQ0FBQztJQUNyRDtFQUNGO0VBRU9DLEdBQ0xDLEtBQUEsRUFDQUMsUUFBQSxFQUNNO0lBR04sV0FBV1AsV0FBQSxJQUFlLEtBQUtOLFlBQUEsRUFBYztNQUMzQ00sV0FBQSxDQUFZSyxFQUFBLENBQUdDLEtBQUEsRUFBT0MsUUFBUTtJQUNoQztJQUVBLE9BQU87RUFDVDtFQUVPQyxLQUNMRixLQUFBLEVBQ0FDLFFBQUEsRUFDTTtJQUNOLFdBQVdQLFdBQUEsSUFBZSxLQUFLTixZQUFBLEVBQWM7TUFDM0NNLFdBQUEsQ0FBWVEsSUFBQSxDQUFLRixLQUFBLEVBQU9DLFFBQVE7SUFDbEM7SUFFQSxPQUFPO0VBQ1Q7RUFFT0UsSUFDTEgsS0FBQSxFQUNBQyxRQUFBLEVBQ007SUFDTixXQUFXUCxXQUFBLElBQWUsS0FBS04sWUFBQSxFQUFjO01BQzNDTSxXQUFBLENBQVlTLEdBQUEsQ0FBSUgsS0FBQSxFQUFPQyxRQUFRO0lBQ2pDO0lBRUEsT0FBTztFQUNUO0VBRU9HLG1CQUNMSixLQUFBLEVBQ007SUFDTixXQUFXWixZQUFBLElBQWdCLEtBQUtBLFlBQUEsRUFBYztNQUM1Q0EsWUFBQSxDQUFhZ0Isa0JBQUEsQ0FBbUJKLEtBQUs7SUFDdkM7SUFFQSxPQUFPO0VBQ1Q7QUFDRiIsImlnbm9yZUxpc3QiOltdfQ==