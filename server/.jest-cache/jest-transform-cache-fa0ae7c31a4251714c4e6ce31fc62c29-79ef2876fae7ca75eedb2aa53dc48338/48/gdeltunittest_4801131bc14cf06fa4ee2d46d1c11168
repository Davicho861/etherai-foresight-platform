697eefa5809c8652a42f7eacb1f7f476
const express = require('express');
const request = require('supertest');
describe('routes/gdelt.js - router', () => {
  beforeEach(() => {
    jest.resetModules();
    process.env.NODE_ENV = 'test';
  });
  afterEach(() => {
    delete process.env.FORCE_MOCKS;
    delete process.env.NODE_ENV;
    jest.clearAllMocks();
  });
  test('GET /api/gdelt/events returns 400 when missing params', async () => {
    // No need to mock integration for validation failure
    const gdeltRouter = require('../../src/routes/gdelt.js').default || require('../../src/routes/gdelt.js');
    const app = express();
    app.use('/api/gdelt', gdeltRouter);
    const res = await request(app).get('/api/gdelt/events');
    expect(res.status).toBe(400);
    expect(res.body).toHaveProperty('error');
  });
  test('GET /api/gdelt/events returns data from GdeltIntegration', async () => {
    const mockData = {
      country: 'COL',
      period: {
        start: '2025-01-01',
        end: '2025-01-02'
      },
      eventCount: 2,
      socialIntensity: 3.5,
      articles: [{
        title: 'A',
        url: 'u1'
      }, {
        title: 'B',
        url: 'u2'
      }],
      isMock: true
    };

    // Mock the integration before importing the router
    jest.doMock('../../src/integrations/GdeltIntegration.js', () => {
      return jest.fn().mockImplementation(() => ({
        getSocialEvents: jest.fn().mockResolvedValue(mockData)
      }));
    });
    const gdeltRouter = require('../../src/routes/gdelt.js').default || require('../../src/routes/gdelt.js');
    const app = express();
    app.use('/api/gdelt', gdeltRouter);
    const res = await request(app).get('/api/gdelt/events').query({
      country: 'COL',
      startDate: '2025-01-01',
      endDate: '2025-01-02'
    });
    expect(res.status).toBe(200);
    expect(res.body).toMatchObject({
      country: 'COL'
    });
    expect(res.body).toHaveProperty('articles');
    expect(Array.isArray(res.body.articles)).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInJlcXVlc3QiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJqZXN0IiwicmVzZXRNb2R1bGVzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiYWZ0ZXJFYWNoIiwiRk9SQ0VfTU9DS1MiLCJjbGVhckFsbE1vY2tzIiwidGVzdCIsImdkZWx0Um91dGVyIiwiZGVmYXVsdCIsImFwcCIsInVzZSIsInJlcyIsImdldCIsImV4cGVjdCIsInN0YXR1cyIsInRvQmUiLCJib2R5IiwidG9IYXZlUHJvcGVydHkiLCJtb2NrRGF0YSIsImNvdW50cnkiLCJwZXJpb2QiLCJzdGFydCIsImVuZCIsImV2ZW50Q291bnQiLCJzb2NpYWxJbnRlbnNpdHkiLCJhcnRpY2xlcyIsInRpdGxlIiwidXJsIiwiaXNNb2NrIiwiZG9Nb2NrIiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJnZXRTb2NpYWxFdmVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInF1ZXJ5Iiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInRvTWF0Y2hPYmplY3QiLCJBcnJheSIsImlzQXJyYXkiXSwic291cmNlcyI6WyJnZGVsdC51bml0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxuY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVydGVzdCcpXG5cbmRlc2NyaWJlKCdyb3V0ZXMvZ2RlbHQuanMgLSByb3V0ZXInLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRNb2R1bGVzKClcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0J1xuICB9KVxuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgZGVsZXRlIHByb2Nlc3MuZW52LkZPUkNFX01PQ0tTXG4gICAgZGVsZXRlIHByb2Nlc3MuZW52Lk5PREVfRU5WXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKClcbiAgfSlcblxuICB0ZXN0KCdHRVQgL2FwaS9nZGVsdC9ldmVudHMgcmV0dXJucyA0MDAgd2hlbiBtaXNzaW5nIHBhcmFtcycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBObyBuZWVkIHRvIG1vY2sgaW50ZWdyYXRpb24gZm9yIHZhbGlkYXRpb24gZmFpbHVyZVxuICAgIGNvbnN0IGdkZWx0Um91dGVyID0gcmVxdWlyZSgnLi4vLi4vc3JjL3JvdXRlcy9nZGVsdC5qcycpLmRlZmF1bHQgfHwgcmVxdWlyZSgnLi4vLi4vc3JjL3JvdXRlcy9nZGVsdC5qcycpXG4gICAgY29uc3QgYXBwID0gZXhwcmVzcygpXG4gICAgYXBwLnVzZSgnL2FwaS9nZGVsdCcsIGdkZWx0Um91dGVyKVxuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL2FwaS9nZGVsdC9ldmVudHMnKVxuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDQwMClcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcicpXG4gIH0pXG5cbiAgdGVzdCgnR0VUIC9hcGkvZ2RlbHQvZXZlbnRzIHJldHVybnMgZGF0YSBmcm9tIEdkZWx0SW50ZWdyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0RhdGEgPSB7XG4gICAgICBjb3VudHJ5OiAnQ09MJyxcbiAgICAgIHBlcmlvZDogeyBzdGFydDogJzIwMjUtMDEtMDEnLCBlbmQ6ICcyMDI1LTAxLTAyJyB9LFxuICAgICAgZXZlbnRDb3VudDogMixcbiAgICAgIHNvY2lhbEludGVuc2l0eTogMy41LFxuICAgICAgYXJ0aWNsZXM6IFt7IHRpdGxlOiAnQScsIHVybDogJ3UxJyB9LCB7IHRpdGxlOiAnQicsIHVybDogJ3UyJyB9XSxcbiAgICAgIGlzTW9jazogdHJ1ZVxuICAgIH1cblxuICAgIC8vIE1vY2sgdGhlIGludGVncmF0aW9uIGJlZm9yZSBpbXBvcnRpbmcgdGhlIHJvdXRlclxuICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9zcmMvaW50ZWdyYXRpb25zL0dkZWx0SW50ZWdyYXRpb24uanMnLCAoKSA9PiB7XG4gICAgICByZXR1cm4gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICBnZXRTb2NpYWxFdmVudHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRGF0YSlcbiAgICAgIH0pKVxuICAgIH0pXG5cbiAgICBjb25zdCBnZGVsdFJvdXRlciA9IHJlcXVpcmUoJy4uLy4uL3NyYy9yb3V0ZXMvZ2RlbHQuanMnKS5kZWZhdWx0IHx8IHJlcXVpcmUoJy4uLy4uL3NyYy9yb3V0ZXMvZ2RlbHQuanMnKVxuICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuICAgIGFwcC51c2UoJy9hcGkvZ2RlbHQnLCBnZGVsdFJvdXRlcilcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgLmdldCgnL2FwaS9nZGVsdC9ldmVudHMnKVxuICAgICAgLnF1ZXJ5KHsgY291bnRyeTogJ0NPTCcsIHN0YXJ0RGF0ZTogJzIwMjUtMDEtMDEnLCBlbmREYXRlOiAnMjAyNS0wMS0wMicgfSlcblxuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMClcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvTWF0Y2hPYmplY3QoeyBjb3VudHJ5OiAnQ09MJyB9KVxuICAgIGV4cGVjdChyZXMuYm9keSkudG9IYXZlUHJvcGVydHkoJ2FydGljbGVzJylcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXMuYm9keS5hcnRpY2xlcykpLnRvQmUodHJ1ZSlcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFFcENFLFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxNQUFNO0VBQ3pDQyxVQUFVLENBQUMsTUFBTTtJQUNmQyxJQUFJLENBQUNDLFlBQVksQ0FBQyxD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