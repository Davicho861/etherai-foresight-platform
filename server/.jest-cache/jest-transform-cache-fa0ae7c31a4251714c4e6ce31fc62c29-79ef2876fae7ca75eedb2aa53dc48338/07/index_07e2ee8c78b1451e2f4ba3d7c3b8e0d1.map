{"version":3,"names":["_nodeCrypto","require","_index","POOL_SIZE_MULTIPLIER","pool","poolOffset","fillPool","bytes","length","Buffer","allocUnsafe","crypto","getRandomValues","random","subarray","customRandom","alphabet","defaultSize","getRandom","mask","Math","clz32","step","ceil","size","id","i","customAlphabet","nanoid","scopedUrlAlphabet"],"sources":["index.js"],"sourcesContent":["import { webcrypto as crypto } from 'node:crypto'\nimport { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nfunction fillPool(bytes) {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.getRandomValues(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.getRandomValues(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nexport function random(bytes) {\n  fillPool((bytes |= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nexport function customRandom(alphabet, defaultSize, getRandom) {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    if (!size) return ''\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nexport function customAlphabet(alphabet, size = 21) {\n  return customRandom(alphabet, size, random)\n}\nexport function nanoid(size = 21) {\n  fillPool((size |= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += scopedUrlAlphabet[pool[i] & 63]\n  }\n  return id\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAEA,MAAME,oBAAoB,GAAG,GAAG;AAChC,IAAIC,IAAI,EAAEC,UAAU;AACpB,SAASC,QAAQA,CAACC,KAAK,EAAE;EACvB,IAAI,CAACH,IAAI,IAAIA,IAAI,CAACI,MAAM,GAAGD,KAAK,EAAE;IAChCH,IAAI,GAAGK,MAAM,CAACC,WAAW,CAACH,KAAK,GAAGJ,oBAAoB,CAAC;IACvDQ,qBAAM,CAACC,eAAe,CAACR,IAAI,CAAC;IAC5BC,UAAU,GAAG,CAAC;EAChB,CAAC,MAAM,IAAIA,UAAU,GAAGE,KAAK,GAAGH,IAAI,CAACI,MAAM,EAAE;IAC3CG,qBAAM,CAACC,eAAe,CAACR,IAAI,CAAC;IAC5BC,UAAU,GAAG,CAAC;EAChB;EACAA,UAAU,IAAIE,KAAK;AACrB;AACO,SAASM,MAAMA,CAACN,KAAK,EAAE;EAC5BD,QAAQ,CAAEC,KAAK,IAAI,CAAE,CAAC;EACtB,OAAOH,IAAI,CAACU,QAAQ,CAACT,UAAU,GAAGE,KAAK,EAAEF,UAAU,CAAC;AACtD;AACO,SAASU,YAAYA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAE;EAC7D,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAK,EAAE,GAAGC,IAAI,CAACC,KAAK,CAAEL,QAAQ,CAACR,MAAM,GAAG,CAAC,GAAI,CAAC,CAAE,IAAI,CAAC;EAClE,IAAIc,IAAI,GAAGF,IAAI,CAACG,IAAI,CAAE,GAAG,GAAGJ,IAAI,GAAGF,WAAW,GAAID,QAAQ,CAACR,MAAM,CAAC;EAClE,OAAO,CAACgB,IAAI,GAAGP,WAAW,KAAK;IAC7B,IAAI,CAACO,IAAI,EAAE,OAAO,EAAE;IACpB,IAAIC,EAAE,GAAG,EAAE;IACX,OAAO,IAAI,EAAE;MACX,IAAIlB,KAAK,GAAGW,SAAS,CAACI,IAAI,CAAC;MAC3B,IAAII,CAAC,GAAGJ,IAAI;MACZ,OAAOI,CAAC,EAAE,EAAE;QACVD,EAAE,IAAIT,QAAQ,CAACT,KAAK,CAACmB,CAAC,CAAC,GAAGP,IAAI,CAAC,IAAI,EAAE;QACrC,IAAIM,EAAE,CAACjB,MAAM,IAAIgB,IAAI,EAAE,OAAOC,EAAE;MAClC;IACF;EACF,CAAC;AACH;AACO,SAASE,cAAcA,CAACX,QAAQ,EAAEQ,IAAI,GAAG,EAAE,EAAE;EAClD,OAAOT,YAAY,CAACC,QAAQ,EAAEQ,IAAI,EAAEX,MAAM,CAAC;AAC7C;AACO,SAASe,MAAMA,CAACJ,IAAI,GAAG,EAAE,EAAE;EAChClB,QAAQ,CAAEkB,IAAI,IAAI,CAAE,CAAC;EACrB,IAAIC,EAAE,GAAG,EAAE;EACX,KAAK,IAAIC,CAAC,GAAGrB,UAAU,GAAGmB,IAAI,EAAEE,CAAC,GAAGrB,UAAU,EAAEqB,CAAC,EAAE,EAAE;IACnDD,EAAE,IAAII,kBAAiB,CAACzB,IAAI,CAACsB,CAAC,CAAC,GAAG,EAAE,CAAC;EACvC;EACA,OAAOD,EAAE;AACX","ignoreList":[]}