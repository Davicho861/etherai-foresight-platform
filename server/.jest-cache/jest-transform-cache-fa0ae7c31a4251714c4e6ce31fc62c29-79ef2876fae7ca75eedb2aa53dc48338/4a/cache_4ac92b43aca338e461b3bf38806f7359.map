{"version":3,"names":["SimpleCache","constructor","cache","Map","set","key","value","ttlMs","expiry","Date","now","get","entry","delete","cleanup","entries","clear","_cacheCleanupHandle","startCacheCleanup","process","env","NODE_ENV","DISABLE_BACKGROUND_TASKS","setInterval","stopCacheCleanup","clearInterval","initialize","shutdown","_default","exports","default"],"sources":["cache.js"],"sourcesContent":["/**\n * Simple in-memory cache module for API responses.\n * Provides TTL-based caching to reduce external API calls.\n */\n\nclass SimpleCache {\n  constructor() {\n    this.cache = new Map();\n  }\n\n  /**\n   * Sets a value in the cache with TTL.\n   * @param {string} key - Cache key\n   * @param {any} value - Value to cache\n   * @param {number} ttlMs - Time to live in milliseconds\n   */\n  set(key, value, ttlMs) {\n    const expiry = Date.now() + ttlMs;\n    this.cache.set(key, { value, expiry });\n  }\n\n  /**\n   * Gets a value from the cache if not expired.\n   * @param {string} key - Cache key\n   * @returns {any|null} Cached value or null if expired/not found\n   */\n  get(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n    if (Date.now() > entry.expiry) {\n      this.cache.delete(key);\n      return null;\n    }\n    return entry.value;\n  }\n\n  /**\n   * Clears expired entries from the cache.\n   */\n  cleanup() {\n    const now = Date.now();\n    for (const [key, entry] of this.cache.entries()) {\n      if (now > entry.expiry) {\n        this.cache.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Clears all cache entries.\n   */\n  clear() {\n    this.cache.clear();\n  }\n}\n\n// Export a singleton instance\nconst cache = new SimpleCache();\n\n// Cleanup expired entries every 5 minutes\nlet _cacheCleanupHandle = null;\nfunction startCacheCleanup() {\n  if (process.env.NODE_ENV === 'test' || process.env.DISABLE_BACKGROUND_TASKS === 'true') return;\n  if (_cacheCleanupHandle) return;\n  _cacheCleanupHandle = setInterval(() => cache.cleanup(), 5 * 60 * 1000);\n}\n\nfunction stopCacheCleanup() {\n  if (_cacheCleanupHandle) {\n    clearInterval(_cacheCleanupHandle);\n    _cacheCleanupHandle = null;\n  }\n}\n\n// Export functions for explicit lifecycle management\nexport function initialize() {\n  startCacheCleanup();\n}\n\nexport function shutdown() {\n  stopCacheCleanup();\n}\n\nexport default cache;"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;;AAEA,MAAMA,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,GAAGA,CAACC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAE;IACrB,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,KAAK;IACjC,IAAI,CAACL,KAAK,CAACE,GAAG,CAACC,GAAG,EAAE;MAAEC,KAAK;MAAEE;IAAO,CAAC,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACEG,GAAGA,CAACN,GAAG,EAAE;IACP,MAAMO,KAAK,GAAG,IAAI,CAACV,KAAK,CAACS,GAAG,CAACN,GAAG,CAAC;IACjC,IAAI,CAACO,KAAK,EAAE,OAAO,IAAI;IACvB,IAAIH,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGE,KAAK,CAACJ,MAAM,EAAE;MAC7B,IAAI,CAACN,KAAK,CAACW,MAAM,CAACR,GAAG,CAAC;MACtB,OAAO,IAAI;IACb;IACA,OAAOO,KAAK,CAACN,KAAK;EACpB;;EAEA;AACF;AACA;EACEQ,OAAOA,CAAA,EAAG;IACR,MAAMJ,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;IACtB,KAAK,MAAM,CAACL,GAAG,EAAEO,KAAK,CAAC,IAAI,IAAI,CAACV,KAAK,CAACa,OAAO,CAAC,CAAC,EAAE;MAC/C,IAAIL,GAAG,GAAGE,KAAK,CAACJ,MAAM,EAAE;QACtB,IAAI,CAACN,KAAK,CAACW,MAAM,CAACR,GAAG,CAAC;MACxB;IACF;EACF;;EAEA;AACF;AACA;EACEW,KAAKA,CAAA,EAAG;IACN,IAAI,CAACd,KAAK,CAACc,KAAK,CAAC,CAAC;EACpB;AACF;;AAEA;AACA,MAAMd,KAAK,GAAG,IAAIF,WAAW,CAAC,CAAC;;AAE/B;AACA,IAAIiB,mBAAmB,GAAG,IAAI;AAC9B,SAASC,iBAAiBA,CAAA,EAAG;EAC3B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,IAAIF,OAAO,CAACC,GAAG,CAACE,wBAAwB,KAAK,MAAM,EAAE;EACxF,IAAIL,mBAAmB,EAAE;EACzBA,mBAAmB,GAAGM,WAAW,CAAC,MAAMrB,KAAK,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AACzE;AAEA,SAASU,gBAAgBA,CAAA,EAAG;EAC1B,IAAIP,mBAAmB,EAAE;IACvBQ,aAAa,CAACR,mBAAmB,CAAC;IAClCA,mBAAmB,GAAG,IAAI;EAC5B;AACF;;AAEA;AACO,SAASS,UAAUA,CAAA,EAAG;EAC3BR,iBAAiB,CAAC,CAAC;AACrB;AAEO,SAASS,QAAQA,CAAA,EAAG;EACzBH,gBAAgB,CAAC,CAAC;AACpB;AAAC,IAAAI,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEc5B,KAAK","ignoreList":[]}