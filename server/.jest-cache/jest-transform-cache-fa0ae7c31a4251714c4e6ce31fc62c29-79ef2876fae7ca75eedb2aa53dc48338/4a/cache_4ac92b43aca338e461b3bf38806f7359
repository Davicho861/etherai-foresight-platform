e5583c1455539c121c5aeb3e5a2cbda4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.initialize = initialize;
exports.shutdown = shutdown;
/**
 * Simple in-memory cache module for API responses.
 * Provides TTL-based caching to reduce external API calls.
 */

class SimpleCache {
  constructor() {
    this.cache = new Map();
  }

  /**
   * Sets a value in the cache with TTL.
   * @param {string} key - Cache key
   * @param {any} value - Value to cache
   * @param {number} ttlMs - Time to live in milliseconds
   */
  set(key, value, ttlMs) {
    const expiry = Date.now() + ttlMs;
    this.cache.set(key, {
      value,
      expiry
    });
  }

  /**
   * Gets a value from the cache if not expired.
   * @param {string} key - Cache key
   * @returns {any|null} Cached value or null if expired/not found
   */
  get(key) {
    const entry = this.cache.get(key);
    if (!entry) return null;
    if (Date.now() > entry.expiry) {
      this.cache.delete(key);
      return null;
    }
    return entry.value;
  }

  /**
   * Clears expired entries from the cache.
   */
  cleanup() {
    const now = Date.now();
    for (const [key, entry] of this.cache.entries()) {
      if (now > entry.expiry) {
        this.cache.delete(key);
      }
    }
  }

  /**
   * Clears all cache entries.
   */
  clear() {
    this.cache.clear();
  }
}

// Export a singleton instance
const cache = new SimpleCache();

// Cleanup expired entries every 5 minutes
let _cacheCleanupHandle = null;
function startCacheCleanup() {
  if (process.env.NODE_ENV === 'test' || process.env.DISABLE_BACKGROUND_TASKS === 'true') return;
  if (_cacheCleanupHandle) return;
  _cacheCleanupHandle = setInterval(() => cache.cleanup(), 5 * 60 * 1000);
}
function stopCacheCleanup() {
  if (_cacheCleanupHandle) {
    clearInterval(_cacheCleanupHandle);
    _cacheCleanupHandle = null;
  }
}

// Export functions for explicit lifecycle management
function initialize() {
  startCacheCleanup();
}
function shutdown() {
  stopCacheCleanup();
}
var _default = exports.default = cache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW1wbGVDYWNoZSIsImNvbnN0cnVjdG9yIiwiY2FjaGUiLCJNYXAiLCJzZXQiLCJrZXkiLCJ2YWx1ZSIsInR0bE1zIiwiZXhwaXJ5IiwiRGF0ZSIsIm5vdyIsImdldCIsImVudHJ5IiwiZGVsZXRlIiwiY2xlYW51cCIsImVudHJpZXMiLCJjbGVhciIsIl9jYWNoZUNsZWFudXBIYW5kbGUiLCJzdGFydENhY2hlQ2xlYW51cCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkRJU0FCTEVfQkFDS0dST1VORF9UQVNLUyIsInNldEludGVydmFsIiwic3RvcENhY2hlQ2xlYW51cCIsImNsZWFySW50ZXJ2YWwiLCJpbml0aWFsaXplIiwic2h1dGRvd24iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiY2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTaW1wbGUgaW4tbWVtb3J5IGNhY2hlIG1vZHVsZSBmb3IgQVBJIHJlc3BvbnNlcy5cbiAqIFByb3ZpZGVzIFRUTC1iYXNlZCBjYWNoaW5nIHRvIHJlZHVjZSBleHRlcm5hbCBBUEkgY2FsbHMuXG4gKi9cblxuY2xhc3MgU2ltcGxlQ2FjaGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSB2YWx1ZSBpbiB0aGUgY2FjaGUgd2l0aCBUVEwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBDYWNoZSBrZXlcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIC0gVmFsdWUgdG8gY2FjaGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR0bE1zIC0gVGltZSB0byBsaXZlIGluIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgc2V0KGtleSwgdmFsdWUsIHR0bE1zKSB7XG4gICAgY29uc3QgZXhwaXJ5ID0gRGF0ZS5ub3coKSArIHR0bE1zO1xuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgeyB2YWx1ZSwgZXhwaXJ5IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSB2YWx1ZSBmcm9tIHRoZSBjYWNoZSBpZiBub3QgZXhwaXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIENhY2hlIGtleVxuICAgKiBAcmV0dXJucyB7YW55fG51bGx9IENhY2hlZCB2YWx1ZSBvciBudWxsIGlmIGV4cGlyZWQvbm90IGZvdW5kXG4gICAqL1xuICBnZXQoa2V5KSB7XG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmNhY2hlLmdldChrZXkpO1xuICAgIGlmICghZW50cnkpIHJldHVybiBudWxsO1xuICAgIGlmIChEYXRlLm5vdygpID4gZW50cnkuZXhwaXJ5KSB7XG4gICAgICB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgZXhwaXJlZCBlbnRyaWVzIGZyb20gdGhlIGNhY2hlLlxuICAgKi9cbiAgY2xlYW51cCgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIHRoaXMuY2FjaGUuZW50cmllcygpKSB7XG4gICAgICBpZiAobm93ID4gZW50cnkuZXhwaXJ5KSB7XG4gICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbGwgY2FjaGUgZW50cmllcy5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcbiAgfVxufVxuXG4vLyBFeHBvcnQgYSBzaW5nbGV0b24gaW5zdGFuY2VcbmNvbnN0IGNhY2hlID0gbmV3IFNpbXBsZUNhY2hlKCk7XG5cbi8vIENsZWFudXAgZXhwaXJlZCBlbnRyaWVzIGV2ZXJ5IDUgbWludXRlc1xubGV0IF9jYWNoZUNsZWFudXBIYW5kbGUgPSBudWxsO1xuZnVuY3Rpb24gc3RhcnRDYWNoZUNsZWFudXAoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnIHx8IHByb2Nlc3MuZW52LkRJU0FCTEVfQkFDS0dST1VORF9UQVNLUyA9PT0gJ3RydWUnKSByZXR1cm47XG4gIGlmIChfY2FjaGVDbGVhbnVwSGFuZGxlKSByZXR1cm47XG4gIF9jYWNoZUNsZWFudXBIYW5kbGUgPSBzZXRJbnRlcnZhbCgoKSA9PiBjYWNoZS5jbGVhbnVwKCksIDUgKiA2MCAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBzdG9wQ2FjaGVDbGVhbnVwKCkge1xuICBpZiAoX2NhY2hlQ2xlYW51cEhhbmRsZSkge1xuICAgIGNsZWFySW50ZXJ2YWwoX2NhY2hlQ2xlYW51cEhhbmRsZSk7XG4gICAgX2NhY2hlQ2xlYW51cEhhbmRsZSA9IG51bGw7XG4gIH1cbn1cblxuLy8gRXhwb3J0IGZ1bmN0aW9ucyBmb3IgZXhwbGljaXQgbGlmZWN5Y2xlIG1hbmFnZW1lbnRcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICBzdGFydENhY2hlQ2xlYW51cCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2h1dGRvd24oKSB7XG4gIHN0b3BDYWNoZUNsZWFudXAoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FjaGU7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLFdBQVcsQ0FBQztFQUNoQkMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7RUFDeEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLEdBQUdBLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7SUFDckIsTUFBTUMsTUFBTSxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUdILEtBQUs7SUFDakMsSUFBSSxDQUFDTCxLQUFLLENBQUNFLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFO01BQUVDLEtBQUs7TUFBRUU7SUFBTyxDQUFDLENBQUM7RUFDeEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxHQUFHQSxDQUFDTixHQUFHLEVBQUU7SUFDUCxNQUFNTyxLQUFLLEdBQUcsSUFBSSxDQUFDVixLQUFLLENBQUNTLEdBQUcsQ0FBQ04sR0FBRyxDQUFDO0lBQ2pDLElBQUksQ0FBQ08sS0FBSyxFQUFFLE9BQU8sSUFBSTtJQUN2QixJQUFJSCxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUdFLEtBQUssQ0FBQ0osTUFBTSxFQUFFO01BQzdCLElBQUksQ0FBQ04sS0FBSyxDQUFDVyxNQUFNLENBQUNSLEdBQUcsQ0FBQztNQUN0QixPQUFPLElBQUk7SUFDYjtJQUNBLE9BQU9PLEtBQUssQ0FBQ04sS0FBSztFQUNwQjs7RUFFQTtBQUNGO0FBQ0E7RUFDRVEsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsTUFBTUosR0FBRyxHQUFHRCxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLEtBQUssTUFBTSxDQUFDTCxHQUFHLEVBQUVPLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQ1YsS0FBSyxDQUFDYSxPQUFPLENBQUMsQ0FBQyxFQUFFO01BQy9DLElBQUlMLEdBQUcsR0FBR0UsS0FBSyxDQUFDSixNQUFNLEVBQUU7UUFDdEIsSUFBSSxDQUFDTixLQUFLLENBQUNXLE1BQU0sQ0FBQ1IsR0FBRyxDQUFDO01BQ3hCO0lBQ0Y7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7RUFDRVcsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxDQUFDZCxLQUFLLENBQUNjLEtBQUssQ0FBQyxDQUFDO0VBQ3BCO0FBQ0Y7O0FBRUE7QUFDQSxNQUFNZCxLQUFLLEdBQUcsSUFBSUYsV0FBVyxDQUFDLENBQUM7O0FBRS9CO0FBQ0EsSUFBSWlCLG1CQUFtQixHQUFHLElBQUk7QUFDOUIsU0FBU0MsaUJBQWlCQSxDQUFBLEVBQUc7RUFDM0IsSUFBSUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxNQUFNLElBQUlGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSx3QkFBd0IsS0FBSyxNQUFNLEVBQUU7RUFDeEYsSUFBSUwsbUJBQW1CLEVBQUU7RUFDekJBLG1CQUFtQixHQUFHTSxXQUFXLENBQUMsTUFBTXJCLEtBQUssQ0FBQ1ksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUN6RTtBQUVBLFNBQVNVLGdCQUFnQkEsQ0FBQSxFQUFHO0VBQzFCLElBQUlQLG1CQUFtQixFQUFFO0lBQ3ZCUSxhQUFhLENBQUNSLG1CQUFtQixDQUFDO0lBQ2xDQSxtQkFBbUIsR0FBRyxJQUFJO0VBQzVCO0FBQ0Y7O0FBRUE7QUFDTyxTQUFTUyxVQUFVQSxDQUFBLEVBQUc7RUFDM0JSLGlCQUFpQixDQUFDLENBQUM7QUFDckI7QUFFTyxTQUFTUyxRQUFRQSxDQUFBLEVBQUc7RUFDekJILGdCQUFnQixDQUFDLENBQUM7QUFDcEI7QUFBQyxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVjNUIsS0FBSyIsImlnbm9yZUxpc3QiOltdfQ==