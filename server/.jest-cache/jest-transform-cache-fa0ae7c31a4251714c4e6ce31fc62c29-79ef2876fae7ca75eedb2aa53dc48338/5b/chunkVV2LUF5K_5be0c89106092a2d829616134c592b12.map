{"version":3,"names":["_outvariant","require","_isnodeprocess","concatArrayBuffer","left","right","result","Uint8Array","byteLength","set","EventPolyfill","constructor","type","options","NONE","CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE","srcElement","currentTarget","eventPhase","isTrusted","composed","cancelable","defaultPrevented","bubbles","lengthComputable","loaded","total","cancelBubble","returnValue","target","timeStamp","Date","now","composedPath","initEvent","preventDefault","stopPropagation","stopImmediatePropagation","ProgressEventPolyfill","init","SUPPORTS_PROGRESS_EVENT","ProgressEvent","createEvent","progressEvents","ProgressEventClass","event","includes","findPropertySource","propertyName","hasProperty","Object","prototype","hasOwnProperty","call","Reflect","getPrototypeOf","createProxy","proxy","Proxy","optionsToProxyHandler","constructorCall","methodCall","getProperty","setProperty","handler","construct","args","newTarget","next","bind","nextValue","propertySource","ownDescriptors","getOwnPropertyDescriptor","apply","defineProperty","writable","enumerable","configurable","value","get","receiver","next2","isDomParserSupportedType","supportedTypes","some","supportedType","startsWith","parseJson","data","json","JSON","parse","_","createResponse","request","body","responseBodyOrNull","_chunkA7U44ARPjs","FetchResponse","isResponseWithBody","status","url","responseURL","statusText","headers","createHeadersFromXMLHttpRequestHeaders","getAllResponseHeaders","headersString","Headers","lines","split","line","trim","name","parts","join","append","getBodyByteLength","input","explicitContentLength","Number","buffer","arrayBuffer","kIsRequestHandled","Symbol","IS_NODE","isNodeProcess","kFetchRequest","XMLHttpRequestController","initialRequest","logger","method","events","Map","uploadEvents","requestId","createRequestId","requestHeaders","responseBuffer","invoke","eventName","slice","addEventListener","methodName","_a","toAbsoluteUrl","extend","href","info","listener","registerEvent","onResponse","fetchResponse","response","isMockedResponse","fetchRequest","requestBody","_chunkLK6DILFKjs","encodeBuffer","toFetchApiRequest","clone","onceRequestSettled","onRequest","Promise","resolve","finally","readyState","setRequestHeader","INTERNAL_REQUEST_ID_HEADER_NAME","define","upload","registerUploadEvent","prevEvents","nextEvents","concat","respondWith","totalRequestBodyLength","trigger","getResponseHeader","__","HEADERS_RECEIVED","headerValue","headersList","Array","from","entries","allHeaders","map","headerName","defineProperties","responseText","responseXML","totalResponseBodyLength","setReadyState","LOADING","finalizeResponse","DONE","reader","getReader","readNextResponseBodyChunk","done","read","responseBufferToText","decodeBuffer","responseType","responseJson","toArrayBuffer","mimeType","responseBlob","Blob","invariant","contentType","DOMParser","console","warn","parseFromString","errorWith","error","nextReadyState","UNSENT","callback","XMLHttpRequestUpload","registeredEventName","listeners","length","forEach","resolvedBody","Document","documentElement","innerText","Request","credentials","withCredentials","toUpperCase","proxyHeaders","_chunkSMXZPJEAjs","setRawRequest","location","URL","toString","property","createXMLHttpRequestProxy","emitter","XMLHttpRequestProxy","globalThis","XMLHttpRequest","originalRequest","prototypeDescriptors","getOwnPropertyDescriptors","xhrRequestController","controller","_chunk72ZIHMEBjs","RequestController","listenerCount","isRequestHandled","handleRequest","onRequestError","TypeError","onError","Error","emit","_XMLHttpRequestInterceptor","Interceptor","interceptorSymbol","checkEnvironment","_chunkPFGO5BSMjs","hasConfigurableGlobal","setup","PureXMLHttpRequest","_chunk73NOP3T5js","IS_PATCHED_MODULE","subscriptions","push","XMLHttpRequestInterceptor"],"sources":["../../src/interceptors/XMLHttpRequest/index.ts","../../src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts","../../src/interceptors/XMLHttpRequest/utils/concatArrayBuffer.ts","../../src/interceptors/XMLHttpRequest/polyfills/EventPolyfill.ts","../../src/interceptors/XMLHttpRequest/polyfills/ProgressEventPolyfill.ts","../../src/interceptors/XMLHttpRequest/utils/createEvent.ts","../../src/utils/findPropertySource.ts","../../src/utils/createProxy.ts","../../src/interceptors/XMLHttpRequest/utils/isDomParserSupportedType.ts","../../src/utils/parseJson.ts","../../src/interceptors/XMLHttpRequest/utils/createResponse.ts","../../src/interceptors/XMLHttpRequest/utils/getBodyByteLength.ts","../../src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts"],"sourcesContent":["import { invariant } from 'outvariant'\nimport { Emitter } from 'strict-event-emitter'\nimport { HttpRequestEventMap, IS_PATCHED_MODULE } from '../../glossary'\nimport { Interceptor } from '../../Interceptor'\nimport { createXMLHttpRequestProxy } from './XMLHttpRequestProxy'\nimport { hasConfigurableGlobal } from '../../utils/hasConfigurableGlobal'\n\nexport type XMLHttpRequestEmitter = Emitter<HttpRequestEventMap>\n\nexport class XMLHttpRequestInterceptor extends Interceptor<HttpRequestEventMap> {\n  static interceptorSymbol = Symbol('xhr')\n\n  constructor() {\n    super(XMLHttpRequestInterceptor.interceptorSymbol)\n  }\n\n  protected checkEnvironment() {\n    return hasConfigurableGlobal('XMLHttpRequest')\n  }\n\n  protected setup() {\n    const logger = this.logger.extend('setup')\n\n    logger.info('patching \"XMLHttpRequest\" module...')\n\n    const PureXMLHttpRequest = globalThis.XMLHttpRequest\n\n    invariant(\n      !(PureXMLHttpRequest as any)[IS_PATCHED_MODULE],\n      'Failed to patch the \"XMLHttpRequest\" module: already patched.'\n    )\n\n    globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\n      emitter: this.emitter,\n      logger: this.logger,\n    })\n\n    logger.info(\n      'native \"XMLHttpRequest\" module patched!',\n      globalThis.XMLHttpRequest.name\n    )\n\n    Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true,\n    })\n\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n        value: undefined,\n      })\n\n      globalThis.XMLHttpRequest = PureXMLHttpRequest\n      logger.info(\n        'native \"XMLHttpRequest\" module restored!',\n        globalThis.XMLHttpRequest.name\n      )\n    })\n  }\n}\n","import { invariant } from 'outvariant'\nimport { isNodeProcess } from 'is-node-process'\nimport type { Logger } from '@open-draft/logger'\nimport { concatArrayBuffer } from './utils/concatArrayBuffer'\nimport { createEvent } from './utils/createEvent'\nimport {\n  decodeBuffer,\n  encodeBuffer,\n  toArrayBuffer,\n} from '../../utils/bufferUtils'\nimport { createProxy } from '../../utils/createProxy'\nimport { isDomParserSupportedType } from './utils/isDomParserSupportedType'\nimport { parseJson } from '../../utils/parseJson'\nimport { createResponse } from './utils/createResponse'\nimport { INTERNAL_REQUEST_ID_HEADER_NAME } from '../../Interceptor'\nimport { createRequestId } from '../../createRequestId'\nimport { getBodyByteLength } from './utils/getBodyByteLength'\nimport { setRawRequest } from '../../getRawRequest'\n\nconst kIsRequestHandled = Symbol('kIsRequestHandled')\nconst IS_NODE = isNodeProcess()\nconst kFetchRequest = Symbol('kFetchRequest')\n\n/**\n * An `XMLHttpRequest` instance controller that allows us\n * to handle any given request instance (e.g. responding to it).\n */\nexport class XMLHttpRequestController {\n  public request: XMLHttpRequest\n  public requestId: string\n  public onRequest?: (\n    this: XMLHttpRequestController,\n    args: {\n      request: Request\n      requestId: string\n    }\n  ) => Promise<void>\n  public onResponse?: (\n    this: XMLHttpRequestController,\n    args: {\n      response: Response\n      isMockedResponse: boolean\n      request: Request\n      requestId: string\n    }\n  ) => void;\n\n  [kIsRequestHandled]: boolean;\n  [kFetchRequest]?: Request\n  private method: string = 'GET'\n  private url: URL = null as any\n  private requestHeaders: Headers\n  private responseBuffer: Uint8Array\n  private events: Map<keyof XMLHttpRequestEventTargetEventMap, Array<Function>>\n  private uploadEvents: Map<\n    keyof XMLHttpRequestEventTargetEventMap,\n    Array<Function>\n  >\n\n  constructor(readonly initialRequest: XMLHttpRequest, public logger: Logger) {\n    this[kIsRequestHandled] = false\n\n    this.events = new Map()\n    this.uploadEvents = new Map()\n    this.requestId = createRequestId()\n    this.requestHeaders = new Headers()\n    this.responseBuffer = new Uint8Array()\n\n    this.request = createProxy(initialRequest, {\n      setProperty: ([propertyName, nextValue], invoke) => {\n        switch (propertyName) {\n          case 'ontimeout': {\n            const eventName = propertyName.slice(\n              2\n            ) as keyof XMLHttpRequestEventTargetEventMap\n\n            /**\n             * @note Proxy callbacks to event listeners because JSDOM has trouble\n             * translating these properties to callbacks. It seemed to be operating\n             * on events exclusively.\n             */\n            this.request.addEventListener(eventName, nextValue as any)\n\n            return invoke()\n          }\n\n          default: {\n            return invoke()\n          }\n        }\n      },\n      methodCall: ([methodName, args], invoke) => {\n        switch (methodName) {\n          case 'open': {\n            const [method, url] = args as [string, string | undefined]\n\n            if (typeof url === 'undefined') {\n              this.method = 'GET'\n              this.url = toAbsoluteUrl(method)\n            } else {\n              this.method = method\n              this.url = toAbsoluteUrl(url)\n            }\n\n            this.logger = this.logger.extend(`${this.method} ${this.url.href}`)\n            this.logger.info('open', this.method, this.url.href)\n\n            return invoke()\n          }\n\n          case 'addEventListener': {\n            const [eventName, listener] = args as [\n              keyof XMLHttpRequestEventTargetEventMap,\n              Function\n            ]\n\n            this.registerEvent(eventName, listener)\n            this.logger.info('addEventListener', eventName, listener)\n\n            return invoke()\n          }\n\n          case 'setRequestHeader': {\n            const [name, value] = args as [string, string]\n            this.requestHeaders.set(name, value)\n\n            this.logger.info('setRequestHeader', name, value)\n\n            return invoke()\n          }\n\n          case 'send': {\n            const [body] = args as [\n              body?: XMLHttpRequestBodyInit | Document | null\n            ]\n\n            this.request.addEventListener('load', () => {\n              if (typeof this.onResponse !== 'undefined') {\n                // Create a Fetch API Response representation of whichever\n                // response this XMLHttpRequest received. Note those may\n                // be either a mocked and the original response.\n                const fetchResponse = createResponse(\n                  this.request,\n                  /**\n                   * The `response` property is the right way to read\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\n                   */\n                  this.request.response\n                )\n\n                // Notify the consumer about the response.\n                this.onResponse.call(this, {\n                  response: fetchResponse,\n                  isMockedResponse: this[kIsRequestHandled],\n                  request: fetchRequest,\n                  requestId: this.requestId!,\n                })\n              }\n            })\n\n            const requestBody =\n              typeof body === 'string' ? encodeBuffer(body) : body\n\n            // Delegate request handling to the consumer.\n            const fetchRequest = this.toFetchApiRequest(requestBody)\n            this[kFetchRequest] = fetchRequest.clone()\n\n            const onceRequestSettled =\n              this.onRequest?.call(this, {\n                request: fetchRequest,\n                requestId: this.requestId!,\n              }) || Promise.resolve()\n\n            onceRequestSettled.finally(() => {\n              // If the consumer didn't handle the request (called `.respondWith()`) perform it as-is.\n              if (!this[kIsRequestHandled]) {\n                this.logger.info(\n                  'request callback settled but request has not been handled (readystate %d), performing as-is...',\n                  this.request.readyState\n                )\n\n                /**\n                 * @note Set the intercepted request ID on the original request in Node.js\n                 * so that if it triggers any other interceptors, they don't attempt\n                 * to process it once again.\n                 *\n                 * For instance, XMLHttpRequest is often implemented via \"http.ClientRequest\"\n                 * and we don't want for both XHR and ClientRequest interceptors to\n                 * handle the same request at the same time (e.g. emit the \"response\" event twice).\n                 */\n                if (IS_NODE) {\n                  this.request.setRequestHeader(\n                    INTERNAL_REQUEST_ID_HEADER_NAME,\n                    this.requestId!\n                  )\n                }\n\n                return invoke()\n              }\n            })\n\n            break\n          }\n\n          default: {\n            return invoke()\n          }\n        }\n      },\n    })\n\n    /**\n     * Proxy the `.upload` property to gather the event listeners/callbacks.\n     */\n    define(\n      this.request,\n      'upload',\n      createProxy(this.request.upload, {\n        setProperty: ([propertyName, nextValue], invoke) => {\n          switch (propertyName) {\n            case 'onloadstart':\n            case 'onprogress':\n            case 'onaboart':\n            case 'onerror':\n            case 'onload':\n            case 'ontimeout':\n            case 'onloadend': {\n              const eventName = propertyName.slice(\n                2\n              ) as keyof XMLHttpRequestEventTargetEventMap\n\n              this.registerUploadEvent(eventName, nextValue as Function)\n            }\n          }\n\n          return invoke()\n        },\n        methodCall: ([methodName, args], invoke) => {\n          switch (methodName) {\n            case 'addEventListener': {\n              const [eventName, listener] = args as [\n                keyof XMLHttpRequestEventTargetEventMap,\n                Function\n              ]\n              this.registerUploadEvent(eventName, listener)\n              this.logger.info('upload.addEventListener', eventName, listener)\n\n              return invoke()\n            }\n          }\n        },\n      })\n    )\n  }\n\n  private registerEvent(\n    eventName: keyof XMLHttpRequestEventTargetEventMap,\n    listener: Function\n  ): void {\n    const prevEvents = this.events.get(eventName) || []\n    const nextEvents = prevEvents.concat(listener)\n    this.events.set(eventName, nextEvents)\n\n    this.logger.info('registered event \"%s\"', eventName, listener)\n  }\n\n  private registerUploadEvent(\n    eventName: keyof XMLHttpRequestEventTargetEventMap,\n    listener: Function\n  ): void {\n    const prevEvents = this.uploadEvents.get(eventName) || []\n    const nextEvents = prevEvents.concat(listener)\n    this.uploadEvents.set(eventName, nextEvents)\n\n    this.logger.info('registered upload event \"%s\"', eventName, listener)\n  }\n\n  /**\n   * Responds to the current request with the given\n   * Fetch API `Response` instance.\n   */\n  public async respondWith(response: Response): Promise<void> {\n    /**\n     * @note Since `XMLHttpRequestController` delegates the handling of the responses\n     * to the \"load\" event listener that doesn't distinguish between the mocked and original\n     * responses, mark the request that had a mocked response with a corresponding symbol.\n     *\n     * Mark this request as having a mocked response immediately since\n     * calculating request/response total body length is asynchronous.\n     */\n    this[kIsRequestHandled] = true\n\n    /**\n     * Dispatch request upload events for requests with a body.\n     * @see https://github.com/mswjs/interceptors/issues/573\n     */\n    if (this[kFetchRequest]) {\n      const totalRequestBodyLength = await getBodyByteLength(\n        this[kFetchRequest]\n      )\n\n      this.trigger('loadstart', this.request.upload, {\n        loaded: 0,\n        total: totalRequestBodyLength,\n      })\n      this.trigger('progress', this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength,\n      })\n      this.trigger('load', this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength,\n      })\n      this.trigger('loadend', this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength,\n      })\n    }\n\n    this.logger.info(\n      'responding with a mocked response: %d %s',\n      response.status,\n      response.statusText\n    )\n\n    define(this.request, 'status', response.status)\n    define(this.request, 'statusText', response.statusText)\n    define(this.request, 'responseURL', this.url.href)\n\n    this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\n      apply: (_, __, args: [name: string]) => {\n        this.logger.info('getResponseHeader', args[0])\n\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n          this.logger.info('headers not received yet, returning null')\n\n          // Headers not received yet, nothing to return.\n          return null\n        }\n\n        const headerValue = response.headers.get(args[0])\n        this.logger.info(\n          'resolved response header \"%s\" to',\n          args[0],\n          headerValue\n        )\n\n        return headerValue\n      },\n    })\n\n    this.request.getAllResponseHeaders = new Proxy(\n      this.request.getAllResponseHeaders,\n      {\n        apply: () => {\n          this.logger.info('getAllResponseHeaders')\n\n          if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n            this.logger.info('headers not received yet, returning empty string')\n\n            // Headers not received yet, nothing to return.\n            return ''\n          }\n\n          const headersList = Array.from(response.headers.entries())\n          const allHeaders = headersList\n            .map(([headerName, headerValue]) => {\n              return `${headerName}: ${headerValue}`\n            })\n            .join('\\r\\n')\n\n          this.logger.info('resolved all response headers to', allHeaders)\n\n          return allHeaders\n        },\n      }\n    )\n\n    // Update the response getters to resolve against the mocked response.\n    Object.defineProperties(this.request, {\n      response: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.response,\n      },\n      responseText: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseText,\n      },\n      responseXML: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseXML,\n      },\n    })\n\n    const totalResponseBodyLength = await getBodyByteLength(response.clone())\n\n    this.logger.info('calculated response body length', totalResponseBodyLength)\n\n    this.trigger('loadstart', this.request, {\n      loaded: 0,\n      total: totalResponseBodyLength,\n    })\n\n    this.setReadyState(this.request.HEADERS_RECEIVED)\n    this.setReadyState(this.request.LOADING)\n\n    const finalizeResponse = () => {\n      this.logger.info('finalizing the mocked response...')\n\n      this.setReadyState(this.request.DONE)\n\n      this.trigger('load', this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength,\n      })\n\n      this.trigger('loadend', this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength,\n      })\n    }\n\n    if (response.body) {\n      this.logger.info('mocked response has body, streaming...')\n\n      const reader = response.body.getReader()\n\n      const readNextResponseBodyChunk = async () => {\n        const { value, done } = await reader.read()\n\n        if (done) {\n          this.logger.info('response body stream done!')\n          finalizeResponse()\n          return\n        }\n\n        if (value) {\n          this.logger.info('read response body chunk:', value)\n          this.responseBuffer = concatArrayBuffer(this.responseBuffer, value)\n\n          this.trigger('progress', this.request, {\n            loaded: this.responseBuffer.byteLength,\n            total: totalResponseBodyLength,\n          })\n        }\n\n        readNextResponseBodyChunk()\n      }\n\n      readNextResponseBodyChunk()\n    } else {\n      finalizeResponse()\n    }\n  }\n\n  private responseBufferToText(): string {\n    return decodeBuffer(this.responseBuffer)\n  }\n\n  get response(): unknown {\n    this.logger.info(\n      'getResponse (responseType: %s)',\n      this.request.responseType\n    )\n\n    if (this.request.readyState !== this.request.DONE) {\n      return null\n    }\n\n    switch (this.request.responseType) {\n      case 'json': {\n        const responseJson = parseJson(this.responseBufferToText())\n        this.logger.info('resolved response JSON', responseJson)\n\n        return responseJson\n      }\n\n      case 'arraybuffer': {\n        const arrayBuffer = toArrayBuffer(this.responseBuffer)\n        this.logger.info('resolved response ArrayBuffer', arrayBuffer)\n\n        return arrayBuffer\n      }\n\n      case 'blob': {\n        const mimeType =\n          this.request.getResponseHeader('Content-Type') || 'text/plain'\n        const responseBlob = new Blob([this.responseBufferToText()], {\n          type: mimeType,\n        })\n\n        this.logger.info(\n          'resolved response Blob (mime type: %s)',\n          responseBlob,\n          mimeType\n        )\n\n        return responseBlob\n      }\n\n      default: {\n        const responseText = this.responseBufferToText()\n        this.logger.info(\n          'resolving \"%s\" response type as text',\n          this.request.responseType,\n          responseText\n        )\n\n        return responseText\n      }\n    }\n  }\n\n  get responseText(): string {\n    /**\n     * Throw when trying to read the response body as text when the\n     * \"responseType\" doesn't expect text. This just respects the spec better.\n     * @see https://xhr.spec.whatwg.org/#the-responsetext-attribute\n     */\n    invariant(\n      this.request.responseType === '' || this.request.responseType === 'text',\n      'InvalidStateError: The object is in invalid state.'\n    )\n\n    if (\n      this.request.readyState !== this.request.LOADING &&\n      this.request.readyState !== this.request.DONE\n    ) {\n      return ''\n    }\n\n    const responseText = this.responseBufferToText()\n    this.logger.info('getResponseText: \"%s\"', responseText)\n\n    return responseText\n  }\n\n  get responseXML(): Document | null {\n    invariant(\n      this.request.responseType === '' ||\n        this.request.responseType === 'document',\n      'InvalidStateError: The object is in invalid state.'\n    )\n\n    if (this.request.readyState !== this.request.DONE) {\n      return null\n    }\n\n    const contentType = this.request.getResponseHeader('Content-Type') || ''\n\n    if (typeof DOMParser === 'undefined') {\n      console.warn(\n        'Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.'\n      )\n      return null\n    }\n\n    if (isDomParserSupportedType(contentType)) {\n      return new DOMParser().parseFromString(\n        this.responseBufferToText(),\n        contentType\n      )\n    }\n\n    return null\n  }\n\n  public errorWith(error?: Error): void {\n    /**\n     * @note Mark this request as handled even if it received a mock error.\n     * This prevents the controller from trying to perform this request as-is.\n     */\n    this[kIsRequestHandled] = true\n    this.logger.info('responding with an error')\n\n    this.setReadyState(this.request.DONE)\n    this.trigger('error', this.request)\n    this.trigger('loadend', this.request)\n  }\n\n  /**\n   * Transitions this request's `readyState` to the given one.\n   */\n  private setReadyState(nextReadyState: number): void {\n    this.logger.info(\n      'setReadyState: %d -> %d',\n      this.request.readyState,\n      nextReadyState\n    )\n\n    if (this.request.readyState === nextReadyState) {\n      this.logger.info('ready state identical, skipping transition...')\n      return\n    }\n\n    define(this.request, 'readyState', nextReadyState)\n\n    this.logger.info('set readyState to: %d', nextReadyState)\n\n    if (nextReadyState !== this.request.UNSENT) {\n      this.logger.info('triggering \"readystatechange\" event...')\n\n      this.trigger('readystatechange', this.request)\n    }\n  }\n\n  /**\n   * Triggers given event on the `XMLHttpRequest` instance.\n   */\n  private trigger<\n    EventName extends keyof (XMLHttpRequestEventTargetEventMap & {\n      readystatechange: ProgressEvent<XMLHttpRequestEventTarget>\n    })\n  >(\n    eventName: EventName,\n    target: XMLHttpRequest | XMLHttpRequestUpload,\n    options?: ProgressEventInit\n  ): void {\n    const callback = (target as XMLHttpRequest)[`on${eventName}`]\n    const event = createEvent(target, eventName, options)\n\n    this.logger.info('trigger \"%s\"', eventName, options || '')\n\n    // Invoke direct callbacks.\n    if (typeof callback === 'function') {\n      this.logger.info('found a direct \"%s\" callback, calling...', eventName)\n      callback.call(target as XMLHttpRequest, event)\n    }\n\n    // Invoke event listeners.\n    const events =\n      target instanceof XMLHttpRequestUpload ? this.uploadEvents : this.events\n\n    for (const [registeredEventName, listeners] of events) {\n      if (registeredEventName === eventName) {\n        this.logger.info(\n          'found %d listener(s) for \"%s\" event, calling...',\n          listeners.length,\n          eventName\n        )\n\n        listeners.forEach((listener) => listener.call(target, event))\n      }\n    }\n  }\n\n  /**\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\n   */\n  private toFetchApiRequest(\n    body: XMLHttpRequestBodyInit | Document | null | undefined\n  ): Request {\n    this.logger.info('converting request to a Fetch API Request...')\n\n    // If the `Document` is used as the body of this XMLHttpRequest,\n    // set its inner text as the Fetch API Request body.\n    const resolvedBody =\n      body instanceof Document ? body.documentElement.innerText : body\n\n    const fetchRequest = new Request(this.url.href, {\n      method: this.method,\n      headers: this.requestHeaders,\n      /**\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\n       */\n      credentials: this.request.withCredentials ? 'include' : 'same-origin',\n      body: ['GET', 'HEAD'].includes(this.method.toUpperCase())\n        ? null\n        : resolvedBody,\n    })\n\n    const proxyHeaders = createProxy(fetchRequest.headers, {\n      methodCall: ([methodName, args], invoke) => {\n        // Forward the latest state of the internal request headers\n        // because the interceptor might have modified them\n        // without responding to the request.\n        switch (methodName) {\n          case 'append':\n          case 'set': {\n            const [headerName, headerValue] = args as [string, string]\n            this.request.setRequestHeader(headerName, headerValue)\n            break\n          }\n\n          case 'delete': {\n            const [headerName] = args as [string]\n            console.warn(\n              `XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`\n            )\n            break\n          }\n        }\n\n        return invoke()\n      },\n    })\n    define(fetchRequest, 'headers', proxyHeaders)\n    setRawRequest(fetchRequest, this.request)\n\n    this.logger.info('converted request to a Fetch API Request!', fetchRequest)\n\n    return fetchRequest\n  }\n}\n\nfunction toAbsoluteUrl(url: string | URL): URL {\n  /**\n   * @note XMLHttpRequest interceptor may run in environments\n   * that implement XMLHttpRequest but don't implement \"location\"\n   * (for example, React Native). If that's the case, return the\n   * input URL as-is (nothing to be relative to).\n   * @see https://github.com/mswjs/msw/issues/1777\n   */\n  if (typeof location === 'undefined') {\n    return new URL(url)\n  }\n\n  return new URL(url.toString(), location.href)\n}\n\nfunction define(\n  target: object,\n  property: string | symbol,\n  value: unknown\n): void {\n  Reflect.defineProperty(target, property, {\n    // Ensure writable properties to allow redefining readonly properties.\n    writable: true,\n    enumerable: true,\n    value,\n  })\n}\n","/**\n * Concatenate two `Uint8Array` buffers.\n */\nexport function concatArrayBuffer(\n  left: Uint8Array,\n  right: Uint8Array\n): Uint8Array {\n  const result = new Uint8Array(left.byteLength + right.byteLength)\n  result.set(left, 0)\n  result.set(right, left.byteLength)\n  return result\n}\n","export class EventPolyfill implements Event {\n  readonly NONE = 0\n  readonly CAPTURING_PHASE = 1\n  readonly AT_TARGET = 2\n  readonly BUBBLING_PHASE = 3\n\n  public type: string = ''\n  public srcElement: EventTarget | null = null\n  public target: EventTarget | null\n  public currentTarget: EventTarget | null = null\n  public eventPhase: number = 0\n  public timeStamp: number\n  public isTrusted: boolean = true\n  public composed: boolean = false\n  public cancelable: boolean = true\n  public defaultPrevented: boolean = false\n  public bubbles: boolean = true\n  public lengthComputable: boolean = true\n  public loaded: number = 0\n  public total: number = 0\n\n  cancelBubble: boolean = false\n  returnValue: boolean = true\n\n  constructor(\n    type: string,\n    options?: { target: EventTarget; currentTarget: EventTarget }\n  ) {\n    this.type = type\n    this.target = options?.target || null\n    this.currentTarget = options?.currentTarget || null\n    this.timeStamp = Date.now()\n  }\n\n  public composedPath(): EventTarget[] {\n    return []\n  }\n\n  public initEvent(type: string, bubbles?: boolean, cancelable?: boolean) {\n    this.type = type\n    this.bubbles = !!bubbles\n    this.cancelable = !!cancelable\n  }\n\n  public preventDefault() {\n    this.defaultPrevented = true\n  }\n\n  public stopPropagation() {}\n  public stopImmediatePropagation() {}\n}\n","import { EventPolyfill } from './EventPolyfill'\n\nexport class ProgressEventPolyfill extends EventPolyfill {\n  readonly lengthComputable: boolean\n  readonly composed: boolean\n  readonly loaded: number\n  readonly total: number\n\n  constructor(type: string, init?: ProgressEventInit) {\n    super(type)\n\n    this.lengthComputable = init?.lengthComputable || false\n    this.composed = init?.composed || false\n    this.loaded = init?.loaded || 0\n    this.total = init?.total || 0\n  }\n}\n","import { EventPolyfill } from '../polyfills/EventPolyfill'\nimport { ProgressEventPolyfill } from '../polyfills/ProgressEventPolyfill'\n\nconst SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== 'undefined'\n\nexport function createEvent(\n  target: XMLHttpRequest | XMLHttpRequestUpload,\n  type: string,\n  init?: ProgressEventInit\n): EventPolyfill | ProgressEvent {\n  const progressEvents = [\n    'error',\n    'progress',\n    'loadstart',\n    'loadend',\n    'load',\n    'timeout',\n    'abort',\n  ]\n\n  /**\n   * `ProgressEvent` is not supported in React Native.\n   * @see https://github.com/mswjs/interceptors/issues/40\n   */\n  const ProgressEventClass = SUPPORTS_PROGRESS_EVENT\n    ? ProgressEvent\n    : ProgressEventPolyfill\n\n  const event = progressEvents.includes(type)\n    ? new ProgressEventClass(type, {\n        lengthComputable: true,\n        loaded: init?.loaded || 0,\n        total: init?.total || 0,\n      })\n    : new EventPolyfill(type, {\n        target,\n        currentTarget: target,\n      })\n\n  return event\n}\n","/**\n * Returns the source object of the given property on the target object\n * (the target itself, any parent in its prototype, or null).\n */\nexport function findPropertySource(\n  target: object,\n  propertyName: string | symbol\n): object | null {\n  if (!(propertyName in target)) {\n    return null\n  }\n\n  const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName)\n  if (hasProperty) {\n    return target\n  }\n\n  const prototype = Reflect.getPrototypeOf(target)\n  return prototype ? findPropertySource(prototype, propertyName) : null\n}\n","import { findPropertySource } from './findPropertySource'\n\nexport interface ProxyOptions<Target extends Record<string, any>> {\n  constructorCall?(args: Array<unknown>, next: NextFunction<Target>): Target\n\n  methodCall?<F extends keyof Target>(\n    this: Target,\n    data: [methodName: F, args: Array<unknown>],\n    next: NextFunction<void>\n  ): void\n\n  setProperty?(\n    data: [propertyName: string | symbol, nextValue: unknown],\n    next: NextFunction<boolean>\n  ): boolean\n\n  getProperty?(\n    data: [propertyName: string | symbol, receiver: Target],\n    next: NextFunction<void>\n  ): void\n}\n\nexport type NextFunction<ReturnType> = () => ReturnType\n\nexport function createProxy<Target extends object>(\n  target: Target,\n  options: ProxyOptions<Target>\n): Target {\n  const proxy = new Proxy(target, optionsToProxyHandler(options))\n\n  return proxy\n}\n\nfunction optionsToProxyHandler<T extends Record<string, any>>(\n  options: ProxyOptions<T>\n): ProxyHandler<T> {\n  const { constructorCall, methodCall, getProperty, setProperty } = options\n  const handler: ProxyHandler<T> = {}\n\n  if (typeof constructorCall !== 'undefined') {\n    handler.construct = function (target, args, newTarget) {\n      const next = Reflect.construct.bind(null, target as any, args, newTarget)\n      return constructorCall.call(newTarget, args, next)\n    }\n  }\n\n  handler.set = function (target, propertyName, nextValue) {\n    const next = () => {\n      const propertySource = findPropertySource(target, propertyName) || target\n      const ownDescriptors = Reflect.getOwnPropertyDescriptor(\n        propertySource,\n        propertyName\n      )\n\n      // Respect any custom setters present for this property.\n      if (typeof ownDescriptors?.set !== 'undefined') {\n        ownDescriptors.set.apply(target, [nextValue])\n        return true\n      }\n\n      // Otherwise, set the property on the source.\n      return Reflect.defineProperty(propertySource, propertyName, {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: nextValue,\n      })\n    }\n\n    if (typeof setProperty !== 'undefined') {\n      return setProperty.call(target, [propertyName, nextValue], next)\n    }\n\n    return next()\n  }\n\n  handler.get = function (target, propertyName, receiver) {\n    /**\n     * @note Using `Reflect.get()` here causes \"TypeError: Illegal invocation\".\n     */\n    const next = () => target[propertyName as any]\n\n    const value =\n      typeof getProperty !== 'undefined'\n        ? getProperty.call(target, [propertyName, receiver], next)\n        : next()\n\n    if (typeof value === 'function') {\n      return (...args: Array<any>) => {\n        const next = value.bind(target, ...args)\n\n        if (typeof methodCall !== 'undefined') {\n          return methodCall.call(target, [propertyName as any, args], next)\n        }\n\n        return next()\n      }\n    }\n\n    return value\n  }\n\n  return handler\n}\n","export function isDomParserSupportedType(\n  type: string\n): type is DOMParserSupportedType {\n  const supportedTypes: Array<DOMParserSupportedType> = [\n    'application/xhtml+xml',\n    'application/xml',\n    'image/svg+xml',\n    'text/html',\n    'text/xml',\n  ]\n  return supportedTypes.some((supportedType) => {\n    return type.startsWith(supportedType)\n  })\n}\n","/**\n * Parses a given string into JSON.\n * Gracefully handles invalid JSON by returning `null`.\n */\nexport function parseJson(data: string): Record<string, unknown> | null {\n  try {\n    const json = JSON.parse(data)\n    return json\n  } catch (_) {\n    return null\n  }\n}\n","import { FetchResponse } from '../../../utils/fetchUtils'\n\n/**\n * Creates a Fetch API `Response` instance from the given\n * `XMLHttpRequest` instance and a response body.\n */\nexport function createResponse(\n  request: XMLHttpRequest,\n  body: BodyInit | null\n): Response {\n  /**\n   * Handle XMLHttpRequest responses that must have null as the\n   * response body when represented using Fetch API Response.\n   * XMLHttpRequest response will always have an empty string\n   * as the \"request.response\" in those cases, resulting in an error\n   * when constructing a Response instance.\n   * @see https://github.com/mswjs/interceptors/issues/379\n   */\n  const responseBodyOrNull = FetchResponse.isResponseWithBody(request.status)\n    ? body\n    : null\n\n  return new FetchResponse(responseBodyOrNull, {\n    url: request.responseURL,\n    status: request.status,\n    statusText: request.statusText,\n    headers: createHeadersFromXMLHttpRequestHeaders(\n      request.getAllResponseHeaders()\n    ),\n  })\n}\n\nfunction createHeadersFromXMLHttpRequestHeaders(headersString: string): Headers {\n  const headers = new Headers()\n\n  const lines = headersString.split(/[\\r\\n]+/)\n  for (const line of lines) {\n    if (line.trim() === '') {\n      continue\n    }\n\n    const [name, ...parts] = line.split(': ')\n    const value = parts.join(': ')\n\n    headers.append(name, value)\n  }\n\n  return headers\n}\n","/**\n * Return a total byte length of the given request/response body.\n * If the `Content-Length` header is present, it will be used as the byte length.\n */\nexport async function getBodyByteLength(\n  input: Request | Response\n): Promise<number> {\n  const explicitContentLength = input.headers.get('content-length')\n\n  if (explicitContentLength != null && explicitContentLength !== '') {\n    return Number(explicitContentLength)\n  }\n\n  const buffer = await input.arrayBuffer()\n  return buffer.byteLength\n}\n","import type { Logger } from '@open-draft/logger'\nimport { XMLHttpRequestEmitter } from '.'\nimport { RequestController } from '../../RequestController'\nimport { XMLHttpRequestController } from './XMLHttpRequestController'\nimport { handleRequest } from '../../utils/handleRequest'\n\nexport interface XMLHttpRequestProxyOptions {\n  emitter: XMLHttpRequestEmitter\n  logger: Logger\n}\n\n/**\n * Create a proxied `XMLHttpRequest` class.\n * The proxied class establishes spies on certain methods,\n * allowing us to intercept requests and respond to them.\n */\nexport function createXMLHttpRequestProxy({\n  emitter,\n  logger,\n}: XMLHttpRequestProxyOptions) {\n  const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\n    construct(target, args, newTarget) {\n      logger.info('constructed new XMLHttpRequest')\n\n      const originalRequest = Reflect.construct(\n        target,\n        args,\n        newTarget\n      ) as XMLHttpRequest\n\n      /**\n       * @note Forward prototype descriptors onto the proxied object.\n       * XMLHttpRequest is implemented in JSDOM in a way that assigns\n       * a bunch of descriptors, like \"set responseType()\" on the prototype.\n       * With this propagation, we make sure that those descriptors trigger\n       * when the user operates with the proxied request instance.\n       */\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(\n        target.prototype\n      )\n      for (const propertyName in prototypeDescriptors) {\n        Reflect.defineProperty(\n          originalRequest,\n          propertyName,\n          prototypeDescriptors[propertyName]\n        )\n      }\n\n      const xhrRequestController = new XMLHttpRequestController(\n        originalRequest,\n        logger\n      )\n\n      xhrRequestController.onRequest = async function ({ request, requestId }) {\n        const controller = new RequestController(request)\n\n        this.logger.info('awaiting mocked response...')\n\n        this.logger.info(\n          'emitting the \"request\" event for %s listener(s)...',\n          emitter.listenerCount('request')\n        )\n\n        const isRequestHandled = await handleRequest({\n          request,\n          requestId,\n          controller,\n          emitter,\n          onResponse: async (response) => {\n            await this.respondWith(response)\n          },\n          onRequestError: () => {\n            this.errorWith(new TypeError('Network error'))\n          },\n          onError: (error) => {\n            this.logger.info('request errored!', { error })\n\n            if (error instanceof Error) {\n              this.errorWith(error)\n            }\n          },\n        })\n\n        if (!isRequestHandled) {\n          this.logger.info(\n            'no mocked response received, performing request as-is...'\n          )\n        }\n      }\n\n      xhrRequestController.onResponse = async function ({\n        response,\n        isMockedResponse,\n        request,\n        requestId,\n      }) {\n        this.logger.info(\n          'emitting the \"response\" event for %s listener(s)...',\n          emitter.listenerCount('response')\n        )\n\n        emitter.emit('response', {\n          response,\n          isMockedResponse,\n          request,\n          requestId,\n        })\n      }\n\n      // Return the proxied request from the controller\n      // so that the controller can react to the consumer's interactions\n      // with this request (opening/sending/etc).\n      return xhrRequestController.request\n    },\n  })\n\n  return XMLHttpRequestProxy\n}\n"],"mappings":"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","ignoreList":[]}