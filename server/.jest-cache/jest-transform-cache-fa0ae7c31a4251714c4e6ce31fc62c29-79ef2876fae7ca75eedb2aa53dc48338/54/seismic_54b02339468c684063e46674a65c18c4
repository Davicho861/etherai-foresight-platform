2babb14ee2279f57cabfbcfee33575af
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = _interopRequireDefault(require("express"));
var _SeismicIntegration = require("../services/SeismicIntegration.js");
var _GeophysicalRiskAgent = require("../agents/GeophysicalRiskAgent.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const router = _express.default.Router();

/**
 * @route GET /api/seismic/activity
 * @description Provides a stream of processed real-time seismic activity.
 * @access Protected
 */
router.get('/activity', async (req, res) => {
  try {
    const rawData = await (0, _SeismicIntegration.getSeismicData)();
    const processedData = (0, _GeophysicalRiskAgent.analyzeSeismicActivity)(rawData);
    res.json(processedData);
  } catch (error) {
    console.error('Error in seismic activity route:', error);
    res.status(500).json({
      error: 'Failed to retrieve seismic activity.'
    });
  }
});

/**
 * @route GET /api/seismic/risk
 * @description Provides geophysical risk assessment based on seismic activity.
 * @access Protected
 */
router.get('/risk', async (req, res) => {
  try {
    const rawData = await (0, _SeismicIntegration.getSeismicData)();
    const events = (0, _GeophysicalRiskAgent.analyzeSeismicActivity)(rawData);
    const eventCount = events.length;
    const maxMagnitude = eventCount > 0 ? Math.max(...events.map(e => e.magnitude)) : 0;
    const overallRisk = eventCount > 0 ? maxMagnitude * eventCount / 10 : 0; // Simple risk calculation
    const highRiskZones = events.filter(e => e.magnitude >= 5.0).map(e => e.place);
    res.json({
      overallRisk,
      eventCount,
      maxMagnitude,
      highRiskZones
    });
  } catch (error) {
    console.error('Error in seismic risk route:', error);
    res.status(500).json({
      error: 'Failed to retrieve seismic risk assessment.'
    });
  }
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1NlaXNtaWNJbnRlZ3JhdGlvbiIsIl9HZW9waHlzaWNhbFJpc2tBZ2VudCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInJvdXRlciIsImV4cHJlc3MiLCJSb3V0ZXIiLCJnZXQiLCJyZXEiLCJyZXMiLCJyYXdEYXRhIiwiZ2V0U2Vpc21pY0RhdGEiLCJwcm9jZXNzZWREYXRhIiwiYW5hbHl6ZVNlaXNtaWNBY3Rpdml0eSIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJzdGF0dXMiLCJldmVudHMiLCJldmVudENvdW50IiwibGVuZ3RoIiwibWF4TWFnbml0dWRlIiwiTWF0aCIsIm1heCIsIm1hcCIsIm1hZ25pdHVkZSIsIm92ZXJhbGxSaXNrIiwiaGlnaFJpc2tab25lcyIsImZpbHRlciIsInBsYWNlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsic2Vpc21pYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IGdldFNlaXNtaWNEYXRhIH0gZnJvbSAnLi4vc2VydmljZXMvU2Vpc21pY0ludGVncmF0aW9uLmpzJztcbmltcG9ydCB7IGFuYWx5emVTZWlzbWljQWN0aXZpdHkgfSBmcm9tICcuLi9hZ2VudHMvR2VvcGh5c2ljYWxSaXNrQWdlbnQuanMnO1xuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG4vKipcbiAqIEByb3V0ZSBHRVQgL2FwaS9zZWlzbWljL2FjdGl2aXR5XG4gKiBAZGVzY3JpcHRpb24gUHJvdmlkZXMgYSBzdHJlYW0gb2YgcHJvY2Vzc2VkIHJlYWwtdGltZSBzZWlzbWljIGFjdGl2aXR5LlxuICogQGFjY2VzcyBQcm90ZWN0ZWRcbiAqL1xucm91dGVyLmdldCgnL2FjdGl2aXR5JywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmF3RGF0YSA9IGF3YWl0IGdldFNlaXNtaWNEYXRhKCk7XG4gICAgY29uc3QgcHJvY2Vzc2VkRGF0YSA9IGFuYWx5emVTZWlzbWljQWN0aXZpdHkocmF3RGF0YSk7XG4gICAgcmVzLmpzb24ocHJvY2Vzc2VkRGF0YSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gc2Vpc21pYyBhY3Rpdml0eSByb3V0ZTonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byByZXRyaWV2ZSBzZWlzbWljIGFjdGl2aXR5LicgfSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEByb3V0ZSBHRVQgL2FwaS9zZWlzbWljL3Jpc2tcbiAqIEBkZXNjcmlwdGlvbiBQcm92aWRlcyBnZW9waHlzaWNhbCByaXNrIGFzc2Vzc21lbnQgYmFzZWQgb24gc2Vpc21pYyBhY3Rpdml0eS5cbiAqIEBhY2Nlc3MgUHJvdGVjdGVkXG4gKi9cbnJvdXRlci5nZXQoJy9yaXNrJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmF3RGF0YSA9IGF3YWl0IGdldFNlaXNtaWNEYXRhKCk7XG4gICAgY29uc3QgZXZlbnRzID0gYW5hbHl6ZVNlaXNtaWNBY3Rpdml0eShyYXdEYXRhKTtcbiAgICBjb25zdCBldmVudENvdW50ID0gZXZlbnRzLmxlbmd0aDtcbiAgICBjb25zdCBtYXhNYWduaXR1ZGUgPSBldmVudENvdW50ID4gMCA/IE1hdGgubWF4KC4uLmV2ZW50cy5tYXAoZSA9PiBlLm1hZ25pdHVkZSkpIDogMDtcbiAgICBjb25zdCBvdmVyYWxsUmlzayA9IGV2ZW50Q291bnQgPiAwID8gKG1heE1hZ25pdHVkZSAqIGV2ZW50Q291bnQpIC8gMTAgOiAwOyAvLyBTaW1wbGUgcmlzayBjYWxjdWxhdGlvblxuICAgIGNvbnN0IGhpZ2hSaXNrWm9uZXMgPSBldmVudHMuZmlsdGVyKGUgPT4gZS5tYWduaXR1ZGUgPj0gNS4wKS5tYXAoZSA9PiBlLnBsYWNlKTtcblxuICAgIHJlcy5qc29uKHtcbiAgICAgIG92ZXJhbGxSaXNrLFxuICAgICAgZXZlbnRDb3VudCxcbiAgICAgIG1heE1hZ25pdHVkZSxcbiAgICAgIGhpZ2hSaXNrWm9uZXNcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzZWlzbWljIHJpc2sgcm91dGU6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gcmV0cmlldmUgc2Vpc21pYyByaXNrIGFzc2Vzc21lbnQuJyB9KTtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsbUJBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHFCQUFBLEdBQUFGLE9BQUE7QUFBMkUsU0FBQUQsdUJBQUFJLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFM0UsTUFBTUcsTUFBTSxHQUFHQyxnQkFBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQzs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRixNQUFNLENBQUNHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsT0FBT0MsR0FBRyxFQUFFQyxHQUFHLEtBQUs7RUFDMUMsSUFBSTtJQUNGLE1BQU1DLE9BQU8sR0FBRyxNQUFNLElBQUFDLGtDQUFjLEVBQUMsQ0FBQztJQUN0QyxNQUFNQyxhQUFhLEdBQUcsSUFBQUMsNENBQXNCLEVBQUNILE9BQU8sQ0FBQztJQUNyREQsR0FBRyxDQUFDSyxJQUFJLENBQUNGLGFBQWEsQ0FBQztFQUN6QixDQUFDLENBQUMsT0FBT0csS0FBSyxFQUFFO0lBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLGtDQUFrQyxFQUFFQSxLQUFLLENBQUM7SUFDeEROLEdBQUcsQ0FBQ1EsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDSCxJQUFJLENBQUM7TUFBRUMsS0FBSyxFQUFFO0lBQXVDLENBQUMsQ0FBQztFQUN6RTtBQUNGLENBQUMsQ0FBQzs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FYLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPQyxHQUFHLEVBQUVDLEdBQUcsS0FBSztFQUN0QyxJQUFJO0lBQ0YsTUFBTUMsT0FBTyxHQUFHLE1BQU0sSUFBQUMsa0NBQWMsRUFBQyxDQUFDO0lBQ3RDLE1BQU1PLE1BQU0sR0FBRyxJQUFBTCw0Q0FBc0IsRUFBQ0gsT0FBTyxDQUFDO0lBQzlDLE1BQU1TLFVBQVUsR0FBR0QsTUFBTSxDQUFDRSxNQUFNO0lBQ2hDLE1BQU1DLFlBQVksR0FBR0YsVUFBVSxHQUFHLENBQUMsR0FBR0csSUFBSSxDQUFDQyxHQUFHLENBQUMsR0FBR0wsTUFBTSxDQUFDTSxHQUFHLENBQUN2QixDQUFDLElBQUlBLENBQUMsQ0FBQ3dCLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNuRixNQUFNQyxXQUFXLEdBQUdQLFVBQVUsR0FBRyxDQUFDLEdBQUlFLFlBQVksR0FBR0YsVUFBVSxHQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzRSxNQUFNUSxhQUFhLEdBQUdULE1BQU0sQ0FBQ1UsTUFBTSxDQUFDM0IsQ0FBQyxJQUFJQSxDQUFDLENBQUN3QixTQUFTLElBQUksR0FBRyxDQUFDLENBQUNELEdBQUcsQ0FBQ3ZCLENBQUMsSUFBSUEsQ0FBQyxDQUFDNEIsS0FBSyxDQUFDO0lBRTlFcEIsR0FBRyxDQUFDSyxJQUFJLENBQUM7TUFDUFksV0FBVztNQUNYUCxVQUFVO01BQ1ZFLFlBQVk7TUFDWk07SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT1osS0FBSyxFQUFFO0lBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLDhCQUE4QixFQUFFQSxLQUFLLENBQUM7SUFDcEROLEdBQUcsQ0FBQ1EsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDSCxJQUFJLENBQUM7TUFBRUMsS0FBSyxFQUFFO0lBQThDLENBQUMsQ0FBQztFQUNoRjtBQUNGLENBQUMsQ0FBQztBQUFDLElBQUFlLFFBQUEsR0FBQUMsT0FBQSxDQUFBNUIsT0FBQSxHQUVZQyxNQUFNIiwiaWdub3JlTGlzdCI6W119