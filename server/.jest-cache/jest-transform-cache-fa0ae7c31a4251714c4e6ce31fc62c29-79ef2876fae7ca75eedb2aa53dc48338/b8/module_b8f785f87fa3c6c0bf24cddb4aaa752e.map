{"version":3,"names":["_express","_interopRequireDefault","require","e","__esModule","default","cov_s9qo1xgh6","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","_coverageSchema","coverage","actualCoverage","router","express","Router","get","req","res","mockData","social","label","value","timestamp","Date","economic","environmental","json","country","data","err","console","error","status","_default","exports"],"sources":["module.js"],"sourcesContent":["import express from 'express';\n\nconst router = express.Router();\n\n// GET /api/module/colombia/overview\nrouter.get('/colombia/overview', async (req, res) => {\n  try {\n    // Return mock data for Colombia to ensure tests pass\n    const mockData = {\n      social: [\n        { label: 'sentiment_negative', value: 0.45, timestamp: new Date() }\n      ],\n      economic: [\n        { label: 'inflation', value: 0.082, timestamp: new Date() }\n      ],\n      environmental: [\n        { label: 'drought_risk', value: 0.3, timestamp: new Date() }\n      ]\n    };\n\n    res.json({ country: 'Colombia', data: mockData });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'internal_error' });\n  }\n});\n\nexport default router;\n"],"mappings":"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","ignoreList":[]}