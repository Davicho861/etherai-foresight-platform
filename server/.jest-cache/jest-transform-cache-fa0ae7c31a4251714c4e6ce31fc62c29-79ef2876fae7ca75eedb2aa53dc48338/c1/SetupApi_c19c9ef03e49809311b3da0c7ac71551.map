{"version":3,"names":["SetupApi_exports","__export","HandlersController","InMemoryHandlersController","SetupApi","module","exports","__toCommonJS","import_outvariant","require","import_strict_event_emitter","import_devUtils","import_pipeEvents","import_toReadonlyArray","import_Disposable","constructor","initialHandlers","handlers","prepend","runtimeHandles","unshift","reset","nextHandlers","length","currentHandlers","Disposable","handlersController","emitter","publicEmitter","events","invariant","validateHandlers","devUtils","formatMessage","Emitter","pipeEvents","createLifeCycleEvents","subscriptions","push","removeAllListeners","every","handler","Array","isArray","use","runtimeHandlers","restoreHandlers","forEach","isUsed","resetHandlers","listHandlers","toReadonlyArray","on","args","removeListener"],"sources":["../../src/core/SetupApi.ts"],"sourcesContent":["import { invariant } from 'outvariant'\nimport { EventMap, Emitter } from 'strict-event-emitter'\nimport { RequestHandler } from './handlers/RequestHandler'\nimport { LifeCycleEventEmitter } from './sharedOptions'\nimport { devUtils } from './utils/internal/devUtils'\nimport { pipeEvents } from './utils/internal/pipeEvents'\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray'\nimport { Disposable } from './utils/internal/Disposable'\nimport type { WebSocketHandler } from './handlers/WebSocketHandler'\n\nexport abstract class HandlersController {\n  abstract prepend(\n    runtimeHandlers: Array<RequestHandler | WebSocketHandler>,\n  ): void\n  abstract reset(nextHandles: Array<RequestHandler | WebSocketHandler>): void\n  abstract currentHandlers(): Array<RequestHandler | WebSocketHandler>\n}\n\nexport class InMemoryHandlersController implements HandlersController {\n  private handlers: Array<RequestHandler | WebSocketHandler>\n\n  constructor(\n    private initialHandlers: Array<RequestHandler | WebSocketHandler>,\n  ) {\n    this.handlers = [...initialHandlers]\n  }\n\n  public prepend(\n    runtimeHandles: Array<RequestHandler | WebSocketHandler>,\n  ): void {\n    this.handlers.unshift(...runtimeHandles)\n  }\n\n  public reset(nextHandlers: Array<RequestHandler | WebSocketHandler>): void {\n    this.handlers =\n      nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers]\n  }\n\n  public currentHandlers(): Array<RequestHandler | WebSocketHandler> {\n    return this.handlers\n  }\n}\n\n/**\n * Generic class for the mock API setup.\n */\nexport abstract class SetupApi<EventsMap extends EventMap> extends Disposable {\n  protected handlersController: HandlersController\n  protected readonly emitter: Emitter<EventsMap>\n  protected readonly publicEmitter: Emitter<EventsMap>\n\n  public readonly events: LifeCycleEventEmitter<EventsMap>\n\n  constructor(...initialHandlers: Array<RequestHandler | WebSocketHandler>) {\n    super()\n\n    invariant(\n      this.validateHandlers(initialHandlers),\n      devUtils.formatMessage(\n        `Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`,\n      ),\n    )\n\n    this.handlersController = new InMemoryHandlersController(initialHandlers)\n\n    this.emitter = new Emitter<EventsMap>()\n    this.publicEmitter = new Emitter<EventsMap>()\n    pipeEvents(this.emitter, this.publicEmitter)\n\n    this.events = this.createLifeCycleEvents()\n\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners()\n      this.publicEmitter.removeAllListeners()\n    })\n  }\n\n  private validateHandlers(handlers: ReadonlyArray<unknown>): boolean {\n    // Guard against incorrect call signature of the setup API.\n    return handlers.every((handler) => !Array.isArray(handler))\n  }\n\n  public use(\n    ...runtimeHandlers: Array<RequestHandler | WebSocketHandler>\n  ): void {\n    invariant(\n      this.validateHandlers(runtimeHandlers),\n      devUtils.formatMessage(\n        `Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`,\n      ),\n    )\n\n    this.handlersController.prepend(runtimeHandlers)\n  }\n\n  public restoreHandlers(): void {\n    this.handlersController.currentHandlers().forEach((handler) => {\n      if ('isUsed' in handler) {\n        handler.isUsed = false\n      }\n    })\n  }\n\n  public resetHandlers(\n    ...nextHandlers: Array<RequestHandler | WebSocketHandler>\n  ): void {\n    this.handlersController.reset(nextHandlers)\n  }\n\n  public listHandlers(): ReadonlyArray<RequestHandler | WebSocketHandler> {\n    return toReadonlyArray(this.handlersController.currentHandlers())\n  }\n\n  private createLifeCycleEvents(): LifeCycleEventEmitter<EventsMap> {\n    return {\n      on: (...args: any[]) => {\n        return (this.publicEmitter.on as any)(...args)\n      },\n      removeListener: (...args: any[]) => {\n        return (this.publicEmitter.removeListener as any)(...args)\n      },\n      removeAllListeners: (...args: any[]) => {\n        return this.publicEmitter.removeAllListeners(...args)\n      },\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}