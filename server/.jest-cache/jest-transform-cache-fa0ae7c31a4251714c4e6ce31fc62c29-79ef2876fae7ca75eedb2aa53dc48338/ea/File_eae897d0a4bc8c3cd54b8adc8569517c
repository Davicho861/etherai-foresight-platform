8c90c5bf5e05bbf274f5602a332cb7dc
"use strict";

var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _File_name, _File_lastModified;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.File = void 0;
const Blob_1 = require("./Blob");
class File extends Blob_1.Blob {
  constructor(fileBits, name, options = {}) {
    super(fileBits, options);
    _File_name.set(this, void 0);
    _File_lastModified.set(this, 0);
    if (arguments.length < 2) {
      throw new TypeError("Failed to construct 'File': 2 arguments required, " + `but only ${arguments.length} present.`);
    }
    __classPrivateFieldSet(this, _File_name, String(name), "f");
    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);
    if (!Number.isNaN(lastModified)) {
      __classPrivateFieldSet(this, _File_lastModified, lastModified, "f");
    }
  }
  static [(_File_name = new WeakMap(), _File_lastModified = new WeakMap(), Symbol.hasInstance)](value) {
    return value instanceof Blob_1.Blob && value[Symbol.toStringTag] === "File" && typeof value.name === "string";
  }
  get name() {
    return __classPrivateFieldGet(this, _File_name, "f");
  }
  get lastModified() {
    return __classPrivateFieldGet(this, _File_lastModified, "f");
  }
  get webkitRelativePath() {
    return "";
  }
  get [Symbol.toStringTag]() {
    return "File";
  }
}
exports.File = File;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwicmVjZWl2ZXIiLCJzdGF0ZSIsInZhbHVlIiwia2luZCIsImYiLCJUeXBlRXJyb3IiLCJoYXMiLCJjYWxsIiwic2V0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsImdldCIsIl9GaWxlX25hbWUiLCJfRmlsZV9sYXN0TW9kaWZpZWQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJGaWxlIiwiQmxvYl8xIiwicmVxdWlyZSIsIkJsb2IiLCJjb25zdHJ1Y3RvciIsImZpbGVCaXRzIiwibmFtZSIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJTdHJpbmciLCJsYXN0TW9kaWZpZWQiLCJ1bmRlZmluZWQiLCJEYXRlIiwibm93IiwiTnVtYmVyIiwiaXNOYU4iLCJXZWFrTWFwIiwiU3ltYm9sIiwiaGFzSW5zdGFuY2UiLCJ0b1N0cmluZ1RhZyIsIndlYmtpdFJlbGF0aXZlUGF0aCJdLCJzb3VyY2VzIjpbIkZpbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0ZpbGVfbmFtZSwgX0ZpbGVfbGFzdE1vZGlmaWVkO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GaWxlID0gdm9pZCAwO1xuY29uc3QgQmxvYl8xID0gcmVxdWlyZShcIi4vQmxvYlwiKTtcbmNsYXNzIEZpbGUgZXh0ZW5kcyBCbG9iXzEuQmxvYiB7XG4gICAgY29uc3RydWN0b3IoZmlsZUJpdHMsIG5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihmaWxlQml0cywgb3B0aW9ucyk7XG4gICAgICAgIF9GaWxlX25hbWUuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9GaWxlX2xhc3RNb2RpZmllZC5zZXQodGhpcywgMCk7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ0ZpbGUnOiAyIGFyZ3VtZW50cyByZXF1aXJlZCwgXCJcbiAgICAgICAgICAgICAgICArIGBidXQgb25seSAke2FyZ3VtZW50cy5sZW5ndGh9IHByZXNlbnQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRmlsZV9uYW1lLCBTdHJpbmcobmFtZSksIFwiZlwiKTtcbiAgICAgICAgY29uc3QgbGFzdE1vZGlmaWVkID0gb3B0aW9ucy5sYXN0TW9kaWZpZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBEYXRlLm5vdygpXG4gICAgICAgICAgICA6IE51bWJlcihvcHRpb25zLmxhc3RNb2RpZmllZCk7XG4gICAgICAgIGlmICghTnVtYmVyLmlzTmFOKGxhc3RNb2RpZmllZCkpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0ZpbGVfbGFzdE1vZGlmaWVkLCBsYXN0TW9kaWZpZWQsIFwiZlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgWyhfRmlsZV9uYW1lID0gbmV3IFdlYWtNYXAoKSwgX0ZpbGVfbGFzdE1vZGlmaWVkID0gbmV3IFdlYWtNYXAoKSwgU3ltYm9sLmhhc0luc3RhbmNlKV0odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgQmxvYl8xLkJsb2JcbiAgICAgICAgICAgICYmIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IFwiRmlsZVwiXG4gICAgICAgICAgICAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PT0gXCJzdHJpbmdcIjtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9GaWxlX25hbWUsIFwiZlwiKTtcbiAgICB9XG4gICAgZ2V0IGxhc3RNb2RpZmllZCgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ZpbGVfbGFzdE1vZGlmaWVkLCBcImZcIik7XG4gICAgfVxuICAgIGdldCB3ZWJraXRSZWxhdGl2ZVBhdGgoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgICAgIHJldHVybiBcIkZpbGVcIjtcbiAgICB9XG59XG5leHBvcnRzLkZpbGUgPSBGaWxlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLElBQUlBLHNCQUFzQixHQUFJLFVBQVEsU0FBS0Esc0JBQXNCLElBQUssVUFBVUMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxDQUFDLEVBQUU7RUFDN0csSUFBSUQsSUFBSSxLQUFLLEdBQUcsRUFBRSxNQUFNLElBQUlFLFNBQVMsQ0FBQyxnQ0FBZ0MsQ0FBQztFQUN2RSxJQUFJRixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUNDLENBQUMsRUFBRSxNQUFNLElBQUlDLFNBQVMsQ0FBQywrQ0FBK0MsQ0FBQztFQUM1RixJQUFJLE9BQU9KLEtBQUssS0FBSyxVQUFVLEdBQUdELFFBQVEsS0FBS0MsS0FBSyxJQUFJLENBQUNHLENBQUMsR0FBRyxDQUFDSCxLQUFLLENBQUNLLEdBQUcsQ0FBQ04sUUFBUSxDQUFDLEVBQUUsTUFBTSxJQUFJSyxTQUFTLENBQUMseUVBQXlFLENBQUM7RUFDakwsT0FBUUYsSUFBSSxLQUFLLEdBQUcsR0FBR0MsQ0FBQyxDQUFDRyxJQUFJLENBQUNQLFFBQVEsRUFBRUUsS0FBSyxDQUFDLEdBQUdFLENBQUMsR0FBR0EsQ0FBQyxDQUFDRixLQUFLLEdBQUdBLEtBQUssR0FBR0QsS0FBSyxDQUFDTyxHQUFHLENBQUNSLFFBQVEsRUFBRUUsS0FBSyxDQUFDLEVBQUdBLEtBQUs7QUFDN0csQ0FBQztBQUNELElBQUlPLHNCQUFzQixHQUFJLFVBQVEsU0FBS0Esc0JBQXNCLElBQUssVUFBVVQsUUFBUSxFQUFFQyxLQUFLLEVBQUVFLElBQUksRUFBRUMsQ0FBQyxFQUFFO0VBQ3RHLElBQUlELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQ0MsQ0FBQyxFQUFFLE1BQU0sSUFBSUMsU0FBUyxDQUFDLCtDQUErQyxDQUFDO0VBQzVGLElBQUksT0FBT0osS0FBSyxLQUFLLFVBQVUsR0FBR0QsUUFBUSxLQUFLQyxLQUFLLElBQUksQ0FBQ0csQ0FBQyxHQUFHLENBQUNILEtBQUssQ0FBQ0ssR0FBRyxDQUFDTixRQUFRLENBQUMsRUFBRSxNQUFNLElBQUlLLFNBQVMsQ0FBQywwRUFBMEUsQ0FBQztFQUNsTCxPQUFPRixJQUFJLEtBQUssR0FBRyxHQUFHQyxDQUFDLEdBQUdELElBQUksS0FBSyxHQUFHLEdBQUdDLENBQUMsQ0FBQ0csSUFBSSxDQUFDUCxRQUFRLENBQUMsR0FBR0ksQ0FBQyxHQUFHQSxDQUFDLENBQUNGLEtBQUssR0FBR0QsS0FBSyxDQUFDUyxHQUFHLENBQUNWLFFBQVEsQ0FBQztBQUNqRyxDQUFDO0FBQ0QsSUFBSVcsVUFBVSxFQUFFQyxrQkFBa0I7QUFDbENDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUViLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3RGEsT0FBTyxDQUFDQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLE1BQU1DLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxNQUFNRixJQUFJLFNBQVNDLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDO0VBQzNCQyxXQUFXQSxDQUFDQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQ3RDLEtBQUssQ0FBQ0YsUUFBUSxFQUFFRSxPQUFPLENBQUM7SUFDeEJaLFVBQVUsQ0FBQ0gsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1Qkksa0JBQWtCLENBQUNKLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUlnQixTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDdEIsTUFBTSxJQUFJcEIsU0FBUyxDQUFDLG9EQUFvRCxHQUNsRSxZQUFZbUIsU0FBUyxDQUFDQyxNQUFNLFdBQVcsQ0FBQztJQUNsRDtJQUNBMUIsc0JBQXNCLENBQUMsSUFBSSxFQUFFWSxVQUFVLEVBQUVlLE1BQU0sQ0FBQ0osSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQzNELE1BQU1LLFlBQVksR0FBR0osT0FBTyxDQUFDSSxZQUFZLEtBQUtDLFNBQVMsR0FDakRDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FDVkMsTUFBTSxDQUFDUixPQUFPLENBQUNJLFlBQVksQ0FBQztJQUNsQyxJQUFJLENBQUNJLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDTCxZQUFZLENBQUMsRUFBRTtNQUM3QjVCLHNCQUFzQixDQUFDLElBQUksRUFBRWEsa0JBQWtCLEVBQUVlLFlBQVksRUFBRSxHQUFHLENBQUM7SUFDdkU7RUFDSjtFQUNBLFNBQVNoQixVQUFVLEdBQUcsSUFBSXNCLE9BQU8sQ0FBQyxDQUFDLEVBQUVyQixrQkFBa0IsR0FBRyxJQUFJcUIsT0FBTyxDQUFDLENBQUMsRUFBRUMsTUFBTSxDQUFDQyxXQUFXLEdBQUdqQyxLQUFLLEVBQUU7SUFDakcsT0FBT0EsS0FBSyxZQUFZZSxNQUFNLENBQUNFLElBQUksSUFDNUJqQixLQUFLLENBQUNnQyxNQUFNLENBQUNFLFdBQVcsQ0FBQyxLQUFLLE1BQU0sSUFDcEMsT0FBT2xDLEtBQUssQ0FBQ29CLElBQUksS0FBSyxRQUFRO0VBQ3pDO0VBQ0EsSUFBSUEsSUFBSUEsQ0FBQSxFQUFHO0lBQ1AsT0FBT2Isc0JBQXNCLENBQUMsSUFBSSxFQUFFRSxVQUFVLEVBQUUsR0FBRyxDQUFDO0VBQ3hEO0VBQ0EsSUFBSWdCLFlBQVlBLENBQUEsRUFBRztJQUNmLE9BQU9sQixzQkFBc0IsQ0FBQyxJQUFJLEVBQUVHLGtCQUFrQixFQUFFLEdBQUcsQ0FBQztFQUNoRTtFQUNBLElBQUl5QixrQkFBa0JBLENBQUEsRUFBRztJQUNyQixPQUFPLEVBQUU7RUFDYjtFQUNBLEtBQUtILE1BQU0sQ0FBQ0UsV0FBVyxJQUFJO0lBQ3ZCLE9BQU8sTUFBTTtFQUNqQjtBQUNKO0FBQ0FyQixPQUFPLENBQUNDLElBQUksR0FBR0EsSUFBSSIsImlnbm9yZUxpc3QiOltdfQ==