{"version":3,"names":["_BiodiversityIntegration","_interopRequireDefault","require","e","__esModule","default","cov_2lmk9rc90m","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","BiodiversityService","constructor","biodiversityIntegration","BiodiversityIntegration","getBiodiversityRiskIndex","regions","biodiversityData","getBiodiversityData","threatData","getSpeciesThreatData","console","warn","totalSpecies","globalSummary","totalThreatened","threatPercentage","totalThreats","Object","values","threatCategories","reduce","sum","category","count","majorThreats","habitatLoss","climateChange","pollution","majorThreatPercentage","riskIndex","Math","min","max","round","error","getBiodiversityAnalysis","timestamp","Date","toISOString","analysis","totalRegions","length","globalThreatPercentage","majorThreatCategories","entries","sort","a","slice","map","data","riskAssessment","_assessRiskLevel","source","message","_default","exports"],"sources":["biodiversityService.js"],"sourcesContent":["import BiodiversityIntegration from '../integrations/BiodiversityIntegration.js';\n\n/**\n * Service for calculating biodiversity risk index\n * Analyzes global biodiversity data to determine environmental risk levels\n */\nclass BiodiversityService {\n  constructor() {\n    this.biodiversityIntegration = new BiodiversityIntegration();\n  }\n\n  /**\n   * Calculates biodiversity risk index based on species threat data and regional biodiversity metrics\n   * @param {Array<string>} regions - Array of regions to analyze (default: major continents)\n   * @returns {Promise<number>} Risk index between 0-100 (0 = low risk, 100 = high risk)\n   */\n  async getBiodiversityRiskIndex(regions = ['americas', 'africa', 'asia', 'europe', 'oceania']) {\n    try {\n      const biodiversityData = await this.biodiversityIntegration.getBiodiversityData(regions);\n      const threatData = await this.biodiversityIntegration.getSpeciesThreatData();\n\n      if (!biodiversityData || !threatData) {\n        console.warn('No biodiversity data available, returning default risk index');\n        return 30; // Default moderate risk\n      }\n\n      // Calculate threat percentage across all regions\n      const totalSpecies = biodiversityData.globalSummary.totalSpecies;\n      const totalThreatened = biodiversityData.globalSummary.totalThreatened;\n      const threatPercentage = totalSpecies > 0 ? (totalThreatened / totalSpecies) * 100 : 0;\n\n      // Calculate threat distribution from threat categories\n      const totalThreats = Object.values(threatData.threatCategories).reduce((sum, category) => sum + category.count, 0);\n      const majorThreats = threatData.threatCategories.habitatLoss.count +\n                          threatData.threatCategories.climateChange.count +\n                          threatData.threatCategories.pollution.count;\n\n      const majorThreatPercentage = totalThreats > 0 ? (majorThreats / totalThreats) * 100 : 0;\n\n      // Combine metrics for risk assessment\n      // Base risk from species threat level\n      let riskIndex = threatPercentage * 0.6; // 60% weight on species threat\n\n      // Additional risk from major threat categories\n      riskIndex += (majorThreatPercentage / 100) * 40; // 40% weight on major threats\n\n      // Normalize to 0-100 scale with some baseline\n      riskIndex = Math.min(Math.max(riskIndex + 10, 0), 100); // Add 10 for baseline environmental concern\n\n      return Math.round(riskIndex);\n\n    } catch (error) {\n      console.error('Error calculating biodiversity risk index:', error);\n      return 30; // Return moderate risk as fallback\n    }\n  }\n\n  /**\n   * Gets detailed biodiversity analysis\n   * @param {Array<string>} regions - Array of regions to analyze\n   * @returns {Promise<object>} Detailed biodiversity analysis\n   */\n  async getBiodiversityAnalysis(regions = ['americas', 'africa', 'asia', 'europe', 'oceania']) {\n    try {\n      const biodiversityData = await this.biodiversityIntegration.getBiodiversityData(regions);\n      const threatData = await this.biodiversityIntegration.getSpeciesThreatData();\n\n      const riskIndex = await this.getBiodiversityRiskIndex(regions);\n\n      return {\n        timestamp: new Date().toISOString(),\n        riskIndex: riskIndex,\n        biodiversityData: biodiversityData,\n        threatData: threatData,\n        analysis: {\n          totalRegions: regions.length,\n          globalThreatPercentage: biodiversityData.globalSummary.totalSpecies > 0 ?\n            (biodiversityData.globalSummary.totalThreatened / biodiversityData.globalSummary.totalSpecies) * 100 : 0,\n          majorThreatCategories: Object.entries(threatData.threatCategories)\n            .sort(([,a], [,b]) => b.count - a.count)\n            .slice(0, 3)\n            .map(([category, data]) => ({ category, count: data.count })),\n          riskAssessment: this._assessRiskLevel(riskIndex)\n        },\n        source: 'BiodiversityService'\n      };\n    } catch (error) {\n      console.error('Error in biodiversity analysis:', error);\n      return {\n        timestamp: new Date().toISOString(),\n        riskIndex: 30,\n        biodiversityData: null,\n        threatData: null,\n        analysis: {\n          totalRegions: 0,\n          globalThreatPercentage: 0,\n          majorThreatCategories: [],\n          riskAssessment: 'Moderate'\n        },\n        source: 'BiodiversityService - Error Fallback',\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Assesses risk level based on biodiversity risk index\n   * @param {number} riskIndex - The calculated biodiversity risk index\n   * @returns {string} Risk level description\n   */\n  _assessRiskLevel(riskIndex) {\n    if (riskIndex >= 70) return 'Critical';\n    if (riskIndex >= 50) return 'High';\n    if (riskIndex >= 30) return 'Moderate';\n    return 'Low';\n  }\n}\n\nexport default BiodiversityService;"],"mappings":";;;;;;;AAAA;AAAA;AAAAA,wBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAiF,oCAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAAA,SAAAG,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA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","ignoreList":[]}