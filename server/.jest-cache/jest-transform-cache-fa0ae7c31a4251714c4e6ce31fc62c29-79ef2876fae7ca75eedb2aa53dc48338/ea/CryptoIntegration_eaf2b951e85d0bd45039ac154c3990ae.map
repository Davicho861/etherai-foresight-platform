{"version":3,"names":["_safeFetch","_interopRequireDefault","require","_forceMocks","e","__esModule","default","CryptoIntegration","constructor","baseUrl","getCryptoData","cryptoIds","vsCurrency","ids","join","url","data","safeFetch","timeout","retries","error","forceMocksEnabled","console","isMock","source","Error","message","String","getHistoricalData","cryptoId","days","_default","exports"],"sources":["CryptoIntegration.js"],"sourcesContent":["import safeFetch from '../lib/safeFetch.js';\nimport { forceMocksEnabled } from '../lib/force-mocks.js';\n\nclass CryptoIntegration {\n  constructor() {\n    this.baseUrl = 'https://api.coingecko.com/api/v3';\n  }\n\n  async getCryptoData(cryptoIds = ['bitcoin', 'ethereum'], vsCurrency = 'usd') {\n    try {\n      const ids = cryptoIds.join(',');\n      const url = `${this.baseUrl}/coins/markets?ids=${ids}&vs_currency=${vsCurrency}&order=market_cap_desc&per_page=100&page=1&sparkline=true&price_change_percentage=1h%2C24h%2C7d%2C30d`;\n      const data = await safeFetch(url, {}, { timeout: 10000, retries: 2 });\n      return data;\n    } catch (error) {\n      if (forceMocksEnabled()) {\n        console.error('CryptoIntegration: returning FORCE_MOCKS mock for crypto data due to error:', error);\n        return { error: null, cryptoIds, vsCurrency, isMock: true, source: 'FORCE_MOCKS:Crypto' };\n      }\n      console.error('Error fetching crypto data:', error);\n      throw new Error(`CryptoIntegration failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n  async getHistoricalData(cryptoId, days = 30, vsCurrency = 'usd') {\n    try {\n      const url = `${this.baseUrl}/coins/${cryptoId}/market_chart?vs_currency=${vsCurrency}&days=${days}&interval=daily`;\n      const data = await safeFetch(url, {}, { timeout: 10000, retries: 2 });\n      return data;\n    } catch (error) {\n      if (forceMocksEnabled()) {\n        console.error('CryptoIntegration: returning FORCE_MOCKS mock for historical data due to error:', error);\n        return { error: null, cryptoId, days, vsCurrency, isMock: true, source: 'FORCE_MOCKS:Crypto' };\n      }\n      console.error('Error fetching historical crypto data:', error);\n      throw new Error(`CryptoIntegration historical failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n}\n\nexport default CryptoIntegration;"],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AAA0D,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE1D,MAAMG,iBAAiB,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,kCAAkC;EACnD;EAEA,MAAMC,aAAaA,CAACC,SAAS,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,EAAEC,UAAU,GAAG,KAAK,EAAE;IAC3E,IAAI;MACF,MAAMC,GAAG,GAAGF,SAAS,CAACG,IAAI,CAAC,GAAG,CAAC;MAC/B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACN,OAAO,sBAAsBI,GAAG,gBAAgBD,UAAU,uGAAuG;MACrL,MAAMI,IAAI,GAAG,MAAM,IAAAC,kBAAS,EAACF,GAAG,EAAE,CAAC,CAAC,EAAE;QAAEG,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAE,CAAC,CAAC;MACrE,OAAOH,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,IAAI,IAAAC,6BAAiB,EAAC,CAAC,EAAE;QACvBC,OAAO,CAACF,KAAK,CAAC,6EAA6E,EAAEA,KAAK,CAAC;QACnG,OAAO;UAAEA,KAAK,EAAE,IAAI;UAAET,SAAS;UAAEC,UAAU;UAAEW,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE;QAAqB,CAAC;MAC3F;MACAF,OAAO,CAACF,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAM,IAAIK,KAAK,CAAC,6BAA6BL,KAAK,IAAIA,KAAK,CAACM,OAAO,GAAGN,KAAK,CAACM,OAAO,GAAGC,MAAM,CAACP,KAAK,CAAC,EAAE,CAAC;IACxG;EACF;EAEA,MAAMQ,iBAAiBA,CAACC,QAAQ,EAAEC,IAAI,GAAG,EAAE,EAAElB,UAAU,GAAG,KAAK,EAAE;IAC/D,IAAI;MACF,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACN,OAAO,UAAUoB,QAAQ,6BAA6BjB,UAAU,SAASkB,IAAI,iBAAiB;MAClH,MAAMd,IAAI,GAAG,MAAM,IAAAC,kBAAS,EAACF,GAAG,EAAE,CAAC,CAAC,EAAE;QAAEG,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAE,CAAC,CAAC;MACrE,OAAOH,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,IAAI,IAAAC,6BAAiB,EAAC,CAAC,EAAE;QACvBC,OAAO,CAACF,KAAK,CAAC,iFAAiF,EAAEA,KAAK,CAAC;QACvG,OAAO;UAAEA,KAAK,EAAE,IAAI;UAAES,QAAQ;UAAEC,IAAI;UAAElB,UAAU;UAAEW,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE;QAAqB,CAAC;MAChG;MACAF,OAAO,CAACF,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,MAAM,IAAIK,KAAK,CAAC,wCAAwCL,KAAK,IAAIA,KAAK,CAACM,OAAO,GAAGN,KAAK,CAACM,OAAO,GAAGC,MAAM,CAACP,KAAK,CAAC,EAAE,CAAC;IACnH;EACF;AAEF;AAAC,IAAAW,QAAA,GAAAC,OAAA,CAAA1B,OAAA,GAEcC,iBAAiB","ignoreList":[]}