{"version":3,"names":["_cybersecurityService","_interopRequireDefault","require","e","__esModule","default","describe","cybersecurityService","beforeEach","CybersecurityService","test","sectors","result","getCybersecurityAnalysis","expect","toHaveProperty","analysis","source","toBe","toEqual","riskIndex","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toContain","riskLevel","Array","isArray","recommendations","length","toBeGreaterThan","forEach","rec","getCybersecurityRiskIndex","sectors1","sectors2","risk1","risk2"],"sources":["cybersecurityService.test.js"],"sourcesContent":["import CybersecurityService from '../../src/services/cybersecurityService.js';\n\ndescribe('CybersecurityService', () => {\n  let cybersecurityService;\n\n  beforeEach(() => {\n    cybersecurityService = new CybersecurityService();\n  });\n\n  describe('getCybersecurityAnalysis', () => {\n    test('should return cybersecurity analysis with valid data', async () => {\n      const sectors = ['global'];\n      const result = await cybersecurityService.getCybersecurityAnalysis(sectors);\n\n      expect(result).toHaveProperty('timestamp');\n      expect(result).toHaveProperty('riskIndex');\n      expect(result).toHaveProperty('sectors');\n      expect(result).toHaveProperty('analysis');\n      expect(result.analysis).toHaveProperty('riskLevel');\n      expect(result.analysis).toHaveProperty('keyFactors');\n      expect(result.analysis).toHaveProperty('recommendations');\n      expect(result.source).toBe('CybersecurityService');\n    });\n\n    test('should handle multiple sectors', async () => {\n      const sectors = ['finance', 'healthcare', 'government'];\n      const result = await cybersecurityService.getCybersecurityAnalysis(sectors);\n\n      expect(result.sectors).toEqual(sectors);\n      expect(result.riskIndex).toBeGreaterThanOrEqual(0);\n      expect(result.riskIndex).toBeLessThanOrEqual(100);\n    });\n\n    test('should assess risk level correctly', async () => {\n      const result = await cybersecurityService.getCybersecurityAnalysis(['global']);\n\n      expect(['Critical', 'High', 'Moderate', 'Low', 'Minimal']).toContain(result.analysis.riskLevel);\n    });\n\n    test('should provide appropriate recommendations', async () => {\n      const result = await cybersecurityService.getCybersecurityAnalysis(['global']);\n\n      expect(Array.isArray(result.analysis.recommendations)).toBe(true);\n      expect(result.analysis.recommendations.length).toBeGreaterThan(0);\n      result.analysis.recommendations.forEach(rec => {\n        expect(typeof rec).toBe('string');\n        expect(rec.length).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('getCybersecurityRiskIndex', () => {\n    test('should return a valid risk index', async () => {\n      const sectors = ['global'];\n      const riskIndex = await cybersecurityService.getCybersecurityRiskIndex(sectors);\n\n      expect(typeof riskIndex).toBe('number');\n      expect(riskIndex).toBeGreaterThanOrEqual(0);\n      expect(riskIndex).toBeLessThanOrEqual(100);\n    });\n\n    test('should handle different sector arrays', async () => {\n      const sectors1 = ['finance'];\n      const sectors2 = ['healthcare', 'energy', 'transport'];\n\n      const risk1 = await cybersecurityService.getCybersecurityRiskIndex(sectors1);\n      const risk2 = await cybersecurityService.getCybersecurityRiskIndex(sectors2);\n\n      expect(typeof risk1).toBe('number');\n      expect(typeof risk2).toBe('number');\n      expect(risk1).toBeGreaterThanOrEqual(0);\n      expect(risk1).toBeLessThanOrEqual(100);\n      expect(risk2).toBeGreaterThanOrEqual(0);\n      expect(risk2).toBeLessThanOrEqual(100);\n    });\n  });\n\n  describe('Error handling', () => {\n    test('should handle agent failure gracefully', async () => {\n      // Mock agent failure scenario\n      const result = await cybersecurityService.getCybersecurityAnalysis(['global']);\n\n      // Should still return valid structure even if agent fails\n      expect(result).toHaveProperty('source');\n      expect(result.source).toBe('CybersecurityService - Error Fallback');\n      expect(result).toHaveProperty('error');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}