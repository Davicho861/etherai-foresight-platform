{"version":3,"names":["_agents","_interopRequireDefault","require","e","__esModule","default","getCommunityResilienceIndex","countries","days","agent","MetatronAgent","result","run","timestamp","resilienceAnalysis","globalResilienceAssessment","source","error","console","mockData","Date","toISOString","averageResilience","lowResilienceCountries","assessment","globalRecommendations","forEach","country","socialEvents","Math","floor","random","resilienceScore","recommendations","period","startDate","now","split","endDate","isMock"],"sources":["communityResilienceService.js"],"sourcesContent":["import MetatronAgent from '../agents.js';\n\n/**\n * Fetches community resilience analysis for LATAM countries.\n * Uses the MetatronAgent CommunityResilienceAgent to analyze social resilience.\n * @param {Array<string>} countries - Array of country codes (e.g., ['COL', 'PER', 'ARG'])\n * @param {number} days - Number of days for analysis (default: 30)\n * @returns {Promise<object>} A promise that resolves to the community resilience data.\n */\nexport async function getCommunityResilienceIndex(countries = ['COL', 'PER', 'ARG'], days = 30) {\n  try {\n    const agent = new MetatronAgent('CommunityResilienceAgent');\n    const result = await agent.run({\n      countries,\n      days\n    });\n\n    return {\n      timestamp: result.timestamp,\n      resilienceAnalysis: result.resilienceAnalysis,\n      globalResilienceAssessment: result.globalResilienceAssessment,\n      source: 'CommunityResilienceAgent'\n    };\n  } catch (error) {\n    console.error('Error in getCommunityResilienceIndex:', error);\n    // Return mock data if agent fails\n    const mockData = {\n      timestamp: new Date().toISOString(),\n      resilienceAnalysis: {},\n      globalResilienceAssessment: {\n        averageResilience: 65.0,\n        lowResilienceCountries: ['COL', 'PER'],\n        assessment: 'Moderate community resilience with areas of concern',\n        globalRecommendations: ['Strengthen community networks', 'Improve social services']\n      },\n      source: 'Mock data - Agent unavailable'\n    };\n\n    // Generate mock data for each country\n    countries.forEach(country => {\n      mockData.resilienceAnalysis[country] = {\n        socialEvents: Math.floor(Math.random() * 10) + 1,\n        resilienceScore: Math.floor(Math.random() * 40) + 60, // 60-100\n        recommendations: ['Community engagement', 'Social programs', 'Education initiatives'],\n        period: {\n          startDate: new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          endDate: new Date().toISOString().split('T')[0]\n        },\n        isMock: true\n      };\n    });\n\n    return mockData;\n  }\n}"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAyC,SAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeG,2BAA2BA,CAACC,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAEC,IAAI,GAAG,EAAE,EAAE;EAC9F,IAAI;IACF,MAAMC,KAAK,GAAG,IAAIC,eAAa,CAAC,0BAA0B,CAAC;IAC3D,MAAMC,MAAM,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC;MAC7BL,SAAS;MACTC;IACF,CAAC,CAAC;IAEF,OAAO;MACLK,SAAS,EAAEF,MAAM,CAACE,SAAS;MAC3BC,kBAAkB,EAAEH,MAAM,CAACG,kBAAkB;MAC7CC,0BAA0B,EAAEJ,MAAM,CAACI,0BAA0B;MAC7DC,MAAM,EAAE;IACV,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D;IACA,MAAME,QAAQ,GAAG;MACfN,SAAS,EAAE,IAAIO,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCP,kBAAkB,EAAE,CAAC,CAAC;MACtBC,0BAA0B,EAAE;QAC1BO,iBAAiB,EAAE,IAAI;QACvBC,sBAAsB,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;QACtCC,UAAU,EAAE,qDAAqD;QACjEC,qBAAqB,EAAE,CAAC,+BAA+B,EAAE,yBAAyB;MACpF,CAAC;MACDT,MAAM,EAAE;IACV,CAAC;;IAED;IACAT,SAAS,CAACmB,OAAO,CAACC,OAAO,IAAI;MAC3BR,QAAQ,CAACL,kBAAkB,CAACa,OAAO,CAAC,GAAG;QACrCC,YAAY,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;QAChDC,eAAe,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;QAAE;QACtDE,eAAe,EAAE,CAAC,sBAAsB,EAAE,iBAAiB,EAAE,uBAAuB,CAAC;QACrFC,MAAM,EAAE;UACNC,SAAS,EAAE,IAAIf,IAAI,CAACA,IAAI,CAACgB,GAAG,CAAC,CAAC,GAAG5B,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACa,WAAW,CAAC,CAAC,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACxFC,OAAO,EAAE,IAAIlB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAChD,CAAC;QACDE,MAAM,EAAE;MACV,CAAC;IACH,CAAC,CAAC;IAEF,OAAOpB,QAAQ;EACjB;AACF","ignoreList":[]}