{"version":3,"names":["_neo4jDriver","_interopRequireDefault","require","_promises","_path","e","__esModule","default","__dirname","process","cwd","FALLBACK_DIR","path","join","FALLBACK_FILE","loadFallbackFromDisk","txt","fs","readFile","global","__praevisio_chroma_fallback","JSON","parse","console","log","persistFallbackToDisk","mkdir","recursive","writeFile","stringify","warn","message","catch","chromaClient","neo4jDriver","CHROMA_URL","env","OLLAMA_CHROMA_URL","textToEmbedding","text","dims","v","Array","fill","i","length","code","charCodeAt","max","Math","map","abs","x","getChromaClient","NATIVE_DEV_MODE","url","isAlive","ensureCollection","upsertLog","missionId","col","description","id","Date","now","toString","floor","random","embedding","push","ts","querySimilar","topK","slice","resp","fetch","method","ok","name","headers","body","alive","Error","ids","embeddings","metadatas","documents","encodeURIComponent","query_embeddings","n_results","data","json","getNeo4jDriver","NODE_ENV","host","NEO4J_HOST","port","NEO4J_PORT","user","NEO4J_USER","password","NEO4J_PASSWORD","maxRetries","retryDelay","attempt","neo4j","driver","auth","basic","maxConnectionPoolSize","connectionTimeout","maxTransactionRetryTime","session","run","close","error","exit","Promise","resolve","setTimeout","closeConnections"],"sources":["database.js"],"sourcesContent":["import neo4j from 'neo4j-driver';\nimport 'dotenv/config';\nimport fs from 'fs/promises';\nimport path from 'path';\n// Prefer process.cwd() when import.meta isn't available (Jest test envs)\nlet __dirname = process.cwd();\ntry {\n  // When running as ESM, fileURLToPath(import.meta.url) gives accurate dirname\n  // but in some test runners import.meta may not be supported in transformed code.\n  // Guard it with a try/catch to remain robust.\n   \n  // Note: fileURLToPath may not be available when tests transform modules; fallback above\n  // keeps behavior stable across environments.\n  // ...existing code...\n} catch (e) {\n  // keep process.cwd() as __dirname\n}\n// Paths for persisting chroma fallback to disk so native mode can survive restarts\nconst FALLBACK_DIR = path.join(__dirname, '..', 'data');\nconst FALLBACK_FILE = path.join(FALLBACK_DIR, 'chroma_fallback.json');\n\nasync function loadFallbackFromDisk() {\n  try {\n    const txt = await fs.readFile(FALLBACK_FILE, 'utf8');\n    global.__praevisio_chroma_fallback = JSON.parse(txt);\n    console.log('Loaded chroma fallback from disk');\n  } catch (e) {\n    global.__praevisio_chroma_fallback = global.__praevisio_chroma_fallback || {};\n  }\n}\n\nasync function persistFallbackToDisk() {\n  try {\n    await fs.mkdir(FALLBACK_DIR, { recursive: true });\n    await fs.writeFile(FALLBACK_FILE, JSON.stringify(global.__praevisio_chroma_fallback || {}, null, 2), 'utf8');\n  } catch (e) {\n    console.warn('Failed to persist chroma fallback to disk:', e.message);\n  }\n}\n\n// Load persisted fallback if present (fire-and-forget)\nloadFallbackFromDisk().catch(() => {});\n\nlet chromaClient;\nlet neo4jDriver;\n\nconst CHROMA_URL = process.env.CHROMA_URL || process.env.OLLAMA_CHROMA_URL || 'http://chromadb:8000';\n\nfunction textToEmbedding(text, dims = 8) {\n  // Lightweight deterministic embedding fallback for local usage.\n  // Produces a vector of length `dims` using a simple hash-based scheme.\n  const v = new Array(dims).fill(0);\n  for (let i = 0; i < text.length; i++) {\n    const code = text.charCodeAt(i);\n    v[i % dims] = (v[i % dims] + code) % 1000;\n  }\n  // normalize to floats between -1 and 1\n  const max = Math.max(...v.map(Math.abs)) || 1;\n  return v.map((x) => (x / max));\n}\n\nfunction getChromaClient() {\n  // If running in native dev mode, avoid calling external Chroma service and\n  // provide an in-memory fallback client so the app remains fully functional\n  // without external dependencies.\n  if (process.env.NATIVE_DEV_MODE === 'true') {\n    if (!chromaClient) {\n      chromaClient = {\n        url: 'native-disabled',\n        async isAlive() { return false; },\n        async ensureCollection() { return; },\n        async upsertLog(missionId, log) {\n          // keep fallback storage in memory\n          const col = `missions_logs`;\n          const text = typeof log === 'string' ? log : (log.description || JSON.stringify(log));\n          const id = `${missionId}-${(Date.now()).toString(36)}-${Math.floor(Math.random() * 10000)}`;\n          const embedding = textToEmbedding(text, 8);\n          if (!global.__praevisio_chroma_fallback) global.__praevisio_chroma_fallback = {};\n          if (!global.__praevisio_chroma_fallback[col]) global.__praevisio_chroma_fallback[col] = [];\n          global.__praevisio_chroma_fallback[col].push({ id, missionId, log, embedding, ts: Date.now() });\n        },\n        async querySimilar(text, topK = 5) {\n          if (global.__praevisio_chroma_fallback && global.__praevisio_chroma_fallback['missions_logs']) {\n            return global.__praevisio_chroma_fallback['missions_logs'].slice(-topK);\n          }\n          return [];\n        }\n      };\n    }\n    return chromaClient;\n  }\n\n  if (!chromaClient) {\n    chromaClient = {\n      url: CHROMA_URL,\n      async isAlive() {\n        try {\n          const resp = await fetch(`${this.url}/api/v1/heartbeat`, { method: 'GET' });\n          return resp.ok;\n        } catch {\n          return false;\n        }\n      },\n      async ensureCollection(name) {\n        try {\n          // Attempt to create collection if it doesn't exist. API surface may differ\n          // between Chroma versions; silent-ignore on failure and rely on fallback.\n          await fetch(`${this.url}/api/collections`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ name }),\n          }).catch(() => {});\n        } catch {\n          // ignore\n        }\n      },\n      async upsertLog(missionId, log) {\n        const col = `missions_logs`;\n        const text = typeof log === 'string' ? log : (log.description || JSON.stringify(log));\n        const id = `${missionId}-${(Date.now()).toString(36)}-${Math.floor(Math.random() * 10000)}`;\n        const embedding = textToEmbedding(text, 8);\n          try {\n            const alive = await this.isAlive();\n            if (!alive) throw new Error('Chroma unreachable');\n\n            await this.ensureCollection(col);\n\n            // Try the common Chroma REST shape: /api/collections/{name}/points\n            const body = {\n              ids: [id],\n              embeddings: [embedding],\n              metadatas: [{ missionId, ...(log || {}) }],\n              documents: [text],\n            };\n            await fetch(`${this.url}/api/collections/${encodeURIComponent(col)}/points`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(body),\n            });\n          } catch {\n            // Fallback: write to a simple in-memory map so system continues to operate.\n            if (!global.__praevisio_chroma_fallback) global.__praevisio_chroma_fallback = {};\n            if (!global.__praevisio_chroma_fallback[col]) global.__praevisio_chroma_fallback[col] = [];\n            global.__praevisio_chroma_fallback[col].push({ id, missionId, log, embedding, ts: Date.now() });\n            // Persist fallback to disk asynchronously (best-effort)\n            persistFallbackToDisk().catch(() => {});\n          }\n      },\n      async querySimilar(text, topK = 5) {\n        try {\n          const alive = await this.isAlive();\n          if (!alive) throw new Error('Chroma unreachable');\n          const embedding = textToEmbedding(text, 8);\n          const resp = await fetch(`${this.url}/api/collections/missions_logs/points/search`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ query_embeddings: [embedding], n_results: topK }),\n          });\n          if (!resp.ok) return [];\n          const data = await resp.json();\n          return data;\n        } catch {\n          if (global.__praevisio_chroma_fallback && global.__praevisio_chroma_fallback['missions_logs']) {\n            return global.__praevisio_chroma_fallback['missions_logs'].slice(-topK);\n          }\n          return [];\n        }\n      }\n    };\n  }\n  return chromaClient;\n}\n\nasync function getNeo4jDriver() {\n  // Prevent Neo4j connections during unit tests to avoid external side effects\n  if (process.env.NODE_ENV === 'test') return null;\n\n  // Always attempt to connect to Neo4j - no fallback to null\n\n  if (!neo4jDriver) {\n    const host = process.env.NEO4J_HOST || 'localhost';\n    const port = process.env.NEO4J_PORT || '7687';\n    const user = process.env.NEO4J_USER || 'neo4j';\n    const password = process.env.NEO4J_PASSWORD || 'praevisio_password';\n    const maxRetries = 5;\n    const retryDelay = 2000; // 2 seconds\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        neo4jDriver = neo4j.driver(`bolt://${host}:${port}`, neo4j.auth.basic(user, password), {\n          maxConnectionPoolSize: 10,\n          connectionTimeout: 30000,\n          maxTransactionRetryTime: 30000,\n        });\n\n        // Test the connection\n        const session = neo4jDriver.session();\n        await session.run('RETURN 1 as test');\n        await session.close();\n\n        console.log('Neo4j connection established successfully');\n        break;\n      } catch (error) {\n        console.warn(`Neo4j connection attempt ${attempt}/${maxRetries} failed:`, error.message);\n        if (neo4jDriver) {\n          await neo4jDriver.close();\n          neo4jDriver = null;\n        }\n        if (attempt === maxRetries) {\n          console.error(`Failed to connect to Neo4j after ${maxRetries} attempts: ${error.message}`);\n          process.exit(1);\n        }\n        await new Promise(resolve => setTimeout(resolve, retryDelay));\n      }\n    }\n  }\n  return neo4jDriver;\n}\n\nasync function closeConnections() {\n  if (neo4jDriver) {\n    await neo4jDriver.close();\n  }\n}\n\nexport {\n  getChromaClient,\n  getNeo4jDriver,\n  closeConnections,\n};\n"],"mappings":";;;;;;;;AAAA,IAAAA,YAAA,GAAAC,sBAAA,CAAAC,OAAA;AACAA,OAAA;AACA,IAAAC,SAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,KAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAwB,SAAAD,uBAAAI,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AACxB;AACA,IAAIG,QAAS,GAAGC,OAAO,CAACC,GAAG,CAAC,CAAC;AAC7B,IAAI;EACF;EACA;EACA;;EAEA;EACA;EACA;AAAA,CACD,CAAC,OAAOL,CAAC,EAAE;EACV;AAAA;AAEF;AACA,MAAMM,YAAY,GAAGC,aAAI,CAACC,IAAI,CAACL,QAAS,EAAE,IAAI,EAAE,MAAM,CAAC;AACvD,MAAMM,aAAa,GAAGF,aAAI,CAACC,IAAI,CAACF,YAAY,EAAE,sBAAsB,CAAC;AAErE,eAAeI,oBAAoBA,CAAA,EAAG;EACpC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,iBAAE,CAACC,QAAQ,CAACJ,aAAa,EAAE,MAAM,CAAC;IACpDK,MAAM,CAACC,2BAA2B,GAAGC,IAAI,CAACC,KAAK,CAACN,GAAG,CAAC;IACpDO,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EACjD,CAAC,CAAC,OAAOnB,CAAC,EAAE;IACVc,MAAM,CAACC,2BAA2B,GAAGD,MAAM,CAACC,2BAA2B,IAAI,CAAC,CAAC;EAC/E;AACF;AAEA,eAAeK,qBAAqBA,CAAA,EAAG;EACrC,IAAI;IACF,MAAMR,iBAAE,CAACS,KAAK,CAACf,YAAY,EAAE;MAAEgB,SAAS,EAAE;IAAK,CAAC,CAAC;IACjD,MAAMV,iBAAE,CAACW,SAAS,CAACd,aAAa,EAAEO,IAAI,CAACQ,SAAS,CAACV,MAAM,CAACC,2BAA2B,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;EAC9G,CAAC,CAAC,OAAOf,CAAC,EAAE;IACVkB,OAAO,CAACO,IAAI,CAAC,4CAA4C,EAAEzB,CAAC,CAAC0B,OAAO,CAAC;EACvE;AACF;;AAEA;AACAhB,oBAAoB,CAAC,CAAC,CAACiB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AAEtC,IAAIC,YAAY;AAChB,IAAIC,WAAW;AAEf,MAAMC,UAAU,GAAG1B,OAAO,CAAC2B,GAAG,CAACD,UAAU,IAAI1B,OAAO,CAAC2B,GAAG,CAACC,iBAAiB,IAAI,sBAAsB;AAEpG,SAASC,eAAeA,CAACC,IAAI,EAAEC,IAAI,GAAG,CAAC,EAAE;EACvC;EACA;EACA,MAAMC,CAAC,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC;EACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,IAAI,GAAGP,IAAI,CAACQ,UAAU,CAACH,CAAC,CAAC;IAC/BH,CAAC,CAACG,CAAC,GAAGJ,IAAI,CAAC,GAAG,CAACC,CAAC,CAACG,CAAC,GAAGJ,IAAI,CAAC,GAAGM,IAAI,IAAI,IAAI;EAC3C;EACA;EACA,MAAME,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,GAAGP,CAAC,CAACS,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,IAAI,CAAC;EAC7C,OAAOV,CAAC,CAACS,GAAG,CAAEE,CAAC,IAAMA,CAAC,GAAGJ,GAAI,CAAC;AAChC;AAEA,SAASK,eAAeA,CAAA,EAAG;EACzB;EACA;EACA;EACA,IAAI5C,OAAO,CAAC2B,GAAG,CAACkB,eAAe,KAAK,MAAM,EAAE;IAC1C,IAAI,CAACrB,YAAY,EAAE;MACjBA,YAAY,GAAG;QACbsB,GAAG,EAAE,iBAAiB;QACtB,MAAMC,OAAOA,CAAA,EAAG;UAAE,OAAO,KAAK;QAAE,CAAC;QACjC,MAAMC,gBAAgBA,CAAA,EAAG;UAAE;QAAQ,CAAC;QACpC,MAAMC,SAASA,CAACC,SAAS,EAAEnC,GAAG,EAAE;UAC9B;UACA,MAAMoC,GAAG,GAAG,eAAe;UAC3B,MAAMrB,IAAI,GAAG,OAAOf,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAIA,GAAG,CAACqC,WAAW,IAAIxC,IAAI,CAACQ,SAAS,CAACL,GAAG,CAAE;UACrF,MAAMsC,EAAE,GAAG,GAAGH,SAAS,IAAKI,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEC,QAAQ,CAAC,EAAE,CAAC,IAAIhB,IAAI,CAACiB,KAAK,CAACjB,IAAI,CAACkB,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE;UAC3F,MAAMC,SAAS,GAAG9B,eAAe,CAACC,IAAI,EAAE,CAAC,CAAC;UAC1C,IAAI,CAACpB,MAAM,CAACC,2BAA2B,EAAED,MAAM,CAACC,2BAA2B,GAAG,CAAC,CAAC;UAChF,IAAI,CAACD,MAAM,CAACC,2BAA2B,CAACwC,GAAG,CAAC,EAAEzC,MAAM,CAACC,2BAA2B,CAACwC,GAAG,CAAC,GAAG,EAAE;UAC1FzC,MAAM,CAACC,2BAA2B,CAACwC,GAAG,CAAC,CAACS,IAAI,CAAC;YAAEP,EAAE;YAAEH,SAAS;YAAEnC,GAAG;YAAE4C,SAAS;YAAEE,EAAE,EAAEP,IAAI,CAACC,GAAG,CAAC;UAAE,CAAC,CAAC;QACjG,CAAC;QACD,MAAMO,YAAYA,CAAChC,IAAI,EAAEiC,IAAI,GAAG,CAAC,EAAE;UACjC,IAAIrD,MAAM,CAACC,2BAA2B,IAAID,MAAM,CAACC,2BAA2B,CAAC,eAAe,CAAC,EAAE;YAC7F,OAAOD,MAAM,CAACC,2BAA2B,CAAC,eAAe,CAAC,CAACqD,KAAK,CAAC,CAACD,IAAI,CAAC;UACzE;UACA,OAAO,EAAE;QACX;MACF,CAAC;IACH;IACA,OAAOvC,YAAY;EACrB;EAEA,IAAI,CAACA,YAAY,EAAE;IACjBA,YAAY,GAAG;MACbsB,GAAG,EAAEpB,UAAU;MACf,MAAMqB,OAAOA,CAAA,EAAG;QACd,IAAI;UACF,MAAMkB,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACpB,GAAG,mBAAmB,EAAE;YAAEqB,MAAM,EAAE;UAAM,CAAC,CAAC;UAC3E,OAAOF,IAAI,CAACG,EAAE;QAChB,CAAC,CAAC,MAAM;UACN,OAAO,KAAK;QACd;MACF,CAAC;MACD,MAAMpB,gBAAgBA,CAACqB,IAAI,EAAE;QAC3B,IAAI;UACF;UACA;UACA,MAAMH,KAAK,CAAC,GAAG,IAAI,CAACpB,GAAG,kBAAkB,EAAE;YACzCqB,MAAM,EAAE,MAAM;YACdG,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CC,IAAI,EAAE3D,IAAI,CAACQ,SAAS,CAAC;cAAEiD;YAAK,CAAC;UAC/B,CAAC,CAAC,CAAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACpB,CAAC,CAAC,MAAM;UACN;QAAA;MAEJ,CAAC;MACD,MAAM0B,SAASA,CAACC,SAAS,EAAEnC,GAAG,EAAE;QAC9B,MAAMoC,GAAG,GAAG,eAAe;QAC3B,MAAMrB,IAAI,GAAG,OAAOf,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAIA,GAAG,CAACqC,WAAW,IAAIxC,IAAI,CAACQ,SAAS,CAACL,GAAG,CAAE;QACrF,MAAMsC,EAAE,GAAG,GAAGH,SAAS,IAAKI,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEC,QAAQ,CAAC,EAAE,CAAC,IAAIhB,IAAI,CAACiB,KAAK,CAACjB,IAAI,CAACkB,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE;QAC3F,MAAMC,SAAS,GAAG9B,eAAe,CAACC,IAAI,EAAE,CAAC,CAAC;QACxC,IAAI;UACF,MAAM0C,KAAK,GAAG,MAAM,IAAI,CAACzB,OAAO,CAAC,CAAC;UAClC,IAAI,CAACyB,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;UAEjD,MAAM,IAAI,CAACzB,gBAAgB,CAACG,GAAG,CAAC;;UAEhC;UACA,MAAMoB,IAAI,GAAG;YACXG,GAAG,EAAE,CAACrB,EAAE,CAAC;YACTsB,UAAU,EAAE,CAAChB,SAAS,CAAC;YACvBiB,SAAS,EAAE,CAAC;cAAE1B,SAAS;cAAE,IAAInC,GAAG,IAAI,CAAC,CAAC;YAAE,CAAC,CAAC;YAC1C8D,SAAS,EAAE,CAAC/C,IAAI;UAClB,CAAC;UACD,MAAMoC,KAAK,CAAC,GAAG,IAAI,CAACpB,GAAG,oBAAoBgC,kBAAkB,CAAC3B,GAAG,CAAC,SAAS,EAAE;YAC3EgB,MAAM,EAAE,MAAM;YACdG,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CC,IAAI,EAAE3D,IAAI,CAACQ,SAAS,CAACmD,IAAI;UAC3B,CAAC,CAAC;QACJ,CAAC,CAAC,MAAM;UACN;UACA,IAAI,CAAC7D,MAAM,CAACC,2BAA2B,EAAED,MAAM,CAACC,2BAA2B,GAAG,CAAC,CAAC;UAChF,IAAI,CAACD,MAAM,CAACC,2BAA2B,CAACwC,GAAG,CAAC,EAAEzC,MAAM,CAACC,2BAA2B,CAACwC,GAAG,CAAC,GAAG,EAAE;UAC1FzC,MAAM,CAACC,2BAA2B,CAACwC,GAAG,CAAC,CAACS,IAAI,CAAC;YAAEP,EAAE;YAAEH,SAAS;YAAEnC,GAAG;YAAE4C,SAAS;YAAEE,EAAE,EAAEP,IAAI,CAACC,GAAG,CAAC;UAAE,CAAC,CAAC;UAC/F;UACAvC,qBAAqB,CAAC,CAAC,CAACO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACzC;MACJ,CAAC;MACD,MAAMuC,YAAYA,CAAChC,IAAI,EAAEiC,IAAI,GAAG,CAAC,EAAE;QACjC,IAAI;UACF,MAAMS,KAAK,GAAG,MAAM,IAAI,CAACzB,OAAO,CAAC,CAAC;UAClC,IAAI,CAACyB,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;UACjD,MAAMd,SAAS,GAAG9B,eAAe,CAACC,IAAI,EAAE,CAAC,CAAC;UAC1C,MAAMmC,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACpB,GAAG,8CAA8C,EAAE;YAClFqB,MAAM,EAAE,MAAM;YACdG,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CC,IAAI,EAAE3D,IAAI,CAACQ,SAAS,CAAC;cAAE2D,gBAAgB,EAAE,CAACpB,SAAS,CAAC;cAAEqB,SAAS,EAAEjB;YAAK,CAAC;UACzE,CAAC,CAAC;UACF,IAAI,CAACE,IAAI,CAACG,EAAE,EAAE,OAAO,EAAE;UACvB,MAAMa,IAAI,GAAG,MAAMhB,IAAI,CAACiB,IAAI,CAAC,CAAC;UAC9B,OAAOD,IAAI;QACb,CAAC,CAAC,MAAM;UACN,IAAIvE,MAAM,CAACC,2BAA2B,IAAID,MAAM,CAACC,2BAA2B,CAAC,eAAe,CAAC,EAAE;YAC7F,OAAOD,MAAM,CAACC,2BAA2B,CAAC,eAAe,CAAC,CAACqD,KAAK,CAAC,CAACD,IAAI,CAAC;UACzE;UACA,OAAO,EAAE;QACX;MACF;IACF,CAAC;EACH;EACA,OAAOvC,YAAY;AACrB;AAEA,eAAe2D,cAAcA,CAAA,EAAG;EAC9B;EACA,IAAInF,OAAO,CAAC2B,GAAG,CAACyD,QAAQ,KAAK,MAAM,EAAE,OAAO,IAAI;;EAEhD;;EAEA,IAAI,CAAC3D,WAAW,EAAE;IAChB,MAAM4D,IAAI,GAAGrF,OAAO,CAAC2B,GAAG,CAAC2D,UAAU,IAAI,WAAW;IAClD,MAAMC,IAAI,GAAGvF,OAAO,CAAC2B,GAAG,CAAC6D,UAAU,IAAI,MAAM;IAC7C,MAAMC,IAAI,GAAGzF,OAAO,CAAC2B,GAAG,CAAC+D,UAAU,IAAI,OAAO;IAC9C,MAAMC,QAAQ,GAAG3F,OAAO,CAAC2B,GAAG,CAACiE,cAAc,IAAI,oBAAoB;IACnE,MAAMC,UAAU,GAAG,CAAC;IACpB,MAAMC,UAAU,GAAG,IAAI,CAAC,CAAC;;IAEzB,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAIF,UAAU,EAAEE,OAAO,EAAE,EAAE;MACtD,IAAI;QACFtE,WAAW,GAAGuE,oBAAK,CAACC,MAAM,CAAC,UAAUZ,IAAI,IAAIE,IAAI,EAAE,EAAES,oBAAK,CAACE,IAAI,CAACC,KAAK,CAACV,IAAI,EAAEE,QAAQ,CAAC,EAAE;UACrFS,qBAAqB,EAAE,EAAE;UACzBC,iBAAiB,EAAE,KAAK;UACxBC,uBAAuB,EAAE;QAC3B,CAAC,CAAC;;QAEF;QACA,MAAMC,OAAO,GAAG9E,WAAW,CAAC8E,OAAO,CAAC,CAAC;QACrC,MAAMA,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACrC,MAAMD,OAAO,CAACE,KAAK,CAAC,CAAC;QAErB3F,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;QACxD;MACF,CAAC,CAAC,OAAO2F,KAAK,EAAE;QACd5F,OAAO,CAACO,IAAI,CAAC,4BAA4B0E,OAAO,IAAIF,UAAU,UAAU,EAAEa,KAAK,CAACpF,OAAO,CAAC;QACxF,IAAIG,WAAW,EAAE;UACf,MAAMA,WAAW,CAACgF,KAAK,CAAC,CAAC;UACzBhF,WAAW,GAAG,IAAI;QACpB;QACA,IAAIsE,OAAO,KAAKF,UAAU,EAAE;UAC1B/E,OAAO,CAAC4F,KAAK,CAAC,oCAAoCb,UAAU,cAAca,KAAK,CAACpF,OAAO,EAAE,CAAC;UAC1FtB,OAAO,CAAC2G,IAAI,CAAC,CAAC,CAAC;QACjB;QACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEf,UAAU,CAAC,CAAC;MAC/D;IACF;EACF;EACA,OAAOrE,WAAW;AACpB;AAEA,eAAesF,gBAAgBA,CAAA,EAAG;EAChC,IAAItF,WAAW,EAAE;IACf,MAAMA,WAAW,CAACgF,KAAK,CAAC,CAAC;EAC3B;AACF","ignoreList":[]}