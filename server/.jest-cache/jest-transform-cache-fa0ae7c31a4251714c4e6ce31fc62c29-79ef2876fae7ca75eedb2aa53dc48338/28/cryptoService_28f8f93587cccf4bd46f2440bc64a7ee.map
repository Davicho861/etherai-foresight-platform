{"version":3,"names":["_CryptoIntegration","_interopRequireDefault","require","e","__esModule","default","CryptoService","constructor","cryptoIntegration","CryptoIntegration","getCryptoVolatilityIndex","cryptoIds","cryptoData","getCryptoData","length","console","warn","totalVolatility","validCryptos","crypto","price_change_percentage_24h","undefined","volatility","Math","abs","averageVolatility","riskIndex","min","max","error","getCryptoMarketAnalysis","timestamp","Date","toISOString","volatilityIndex","marketData","analysis","totalCryptos","reduce","sum","riskAssessment","_assessRiskLevel","source","message","_default","exports"],"sources":["cryptoService.js"],"sourcesContent":["import CryptoIntegration from '../integrations/CryptoIntegration.js';\n\n/**\n * Service for calculating crypto volatility risk index\n * Analyzes cryptocurrency market data to determine volatility-based risk levels\n */\nclass CryptoService {\n  constructor() {\n    this.cryptoIntegration = new CryptoIntegration();\n  }\n\n  /**\n   * Calculates crypto volatility risk index based on price changes and market data\n   * @param {Array<string>} cryptoIds - Array of cryptocurrency IDs to analyze\n   * @returns {Promise<number>} Risk index between 0-100 (0 = low risk, 100 = high risk)\n   */\n  async getCryptoVolatilityIndex(cryptoIds = ['bitcoin', 'ethereum']) {\n    try {\n      const cryptoData = await this.cryptoIntegration.getCryptoData(cryptoIds);\n\n      if (!cryptoData || cryptoData.length === 0) {\n        console.warn('No crypto data available, returning default risk index');\n        return 25; // Default moderate risk\n      }\n\n      // Calculate volatility based on price changes\n      let totalVolatility = 0;\n      let validCryptos = 0;\n\n      for (const crypto of cryptoData) {\n        if (crypto && crypto.price_change_percentage_24h !== undefined) {\n          // Use absolute percentage change as volatility measure\n          const volatility = Math.abs(crypto.price_change_percentage_24h);\n          totalVolatility += volatility;\n          validCryptos++;\n        }\n      }\n\n      if (validCryptos === 0) {\n        return 25; // Default moderate risk\n      }\n\n      const averageVolatility = totalVolatility / validCryptos;\n\n      // Normalize to 0-100 scale\n      // Volatility > 10% = high risk (80-100)\n      // Volatility 5-10% = medium risk (40-80)\n      // Volatility < 5% = low risk (0-40)\n      let riskIndex;\n      if (averageVolatility > 10) {\n        riskIndex = 80 + (averageVolatility - 10) * 2; // Scale up for extreme volatility\n      } else if (averageVolatility > 5) {\n        riskIndex = 40 + (averageVolatility - 5) * 8;\n      } else {\n        riskIndex = averageVolatility * 8;\n      }\n\n      // Cap at 100\n      return Math.min(Math.max(riskIndex, 0), 100);\n\n    } catch (error) {\n      console.error('Error calculating crypto volatility index:', error);\n      return 25; // Return moderate risk as fallback\n    }\n  }\n\n  /**\n   * Gets detailed crypto market analysis\n   * @param {Array<string>} cryptoIds - Array of cryptocurrency IDs\n   * @returns {Promise<object>} Detailed market analysis\n   */\n  async getCryptoMarketAnalysis(cryptoIds = ['bitcoin', 'ethereum']) {\n    try {\n      const cryptoData = await this.cryptoIntegration.getCryptoData(cryptoIds);\n\n      return {\n        timestamp: new Date().toISOString(),\n        volatilityIndex: await this.getCryptoVolatilityIndex(cryptoIds),\n        marketData: cryptoData,\n        analysis: {\n          totalCryptos: cryptoData ? cryptoData.length : 0,\n          averageVolatility: cryptoData ?\n            cryptoData.reduce((sum, crypto) =>\n              sum + Math.abs(crypto.price_change_percentage_24h || 0), 0) / cryptoData.length : 0,\n          riskAssessment: this._assessRiskLevel(await this.getCryptoVolatilityIndex(cryptoIds))\n        },\n        source: 'CryptoService'\n      };\n    } catch (error) {\n      console.error('Error in crypto market analysis:', error);\n      return {\n        timestamp: new Date().toISOString(),\n        volatilityIndex: 25,\n        marketData: [],\n        analysis: {\n          totalCryptos: 0,\n          averageVolatility: 0,\n          riskAssessment: 'Moderate'\n        },\n        source: 'CryptoService - Error Fallback',\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Assesses risk level based on volatility index\n   * @param {number} volatilityIndex - The calculated volatility index\n   * @returns {string} Risk level description\n   */\n  _assessRiskLevel(volatilityIndex) {\n    if (volatilityIndex >= 70) return 'High';\n    if (volatilityIndex >= 40) return 'Moderate';\n    return 'Low';\n  }\n}\n\nexport default CryptoService;"],"mappings":"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","ignoreList":[]}