{"version":3,"names":["HttpHandler_exports","__export","HttpHandler","HttpMethods","module","exports","__toCommonJS","import_devUtils","require","import_isStringEqual","import_getStatusCodeColor","import_getTimestamp","import_serializeRequest","import_serializeResponse","import_matchRequestUrl","import_toPublicUrl","import_getRequestCookies","import_cleanUrl","import_RequestHandler","HttpMethods2","RequestHandler","constructor","method","predicate","resolver","options","displayPath","info","header","path","checkRedundantQueryParameters","RegExp","url","cleanUrl","devUtils","warn","parse","args","URL","request","cookies","getAllRequestCookies","customPredicateResult","match2","matches","params","match","matchRequestUrl","resolutionContext","baseUrl","hasMatchingMethod","matchMethod","hasMatchingUrl","parsedResult","actualMethod","test","isStringEqual","extendResolverArgs","log","publicUrl","toPublicUrl","loggedRequest","serializeRequest","loggedResponse","serializeResponse","response","statusColor","getStatusCodeColor","status","console","groupCollapsed","formatMessage","getTimestamp","statusText","groupEnd"],"sources":["../../../src/core/handlers/HttpHandler.ts"],"sourcesContent":["import { ResponseResolutionContext } from '../utils/executeHandlers'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { isStringEqual } from '../utils/internal/isStringEqual'\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'\nimport { getTimestamp } from '../utils/logging/getTimestamp'\nimport { serializeRequest } from '../utils/logging/serializeRequest'\nimport { serializeResponse } from '../utils/logging/serializeResponse'\nimport {\n  matchRequestUrl,\n  Match,\n  Path,\n  PathParams,\n} from '../utils/matching/matchRequestUrl'\nimport { toPublicUrl } from '../utils/request/toPublicUrl'\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies'\nimport { cleanUrl } from '../utils/url/cleanUrl'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './RequestHandler'\n\ntype HttpHandlerMethod = string | RegExp\n\nexport interface HttpHandlerInfo extends RequestHandlerDefaultInfo {\n  method: HttpHandlerMethod\n  path: HttpRequestPredicate<PathParams>\n}\n\nexport enum HttpMethods {\n  HEAD = 'HEAD',\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  OPTIONS = 'OPTIONS',\n  DELETE = 'DELETE',\n}\n\nexport type RequestQuery = {\n  [queryName: string]: string\n}\n\nexport type HttpRequestParsedResult = {\n  match: Match\n  cookies: Record<string, string>\n}\n\nexport type HttpRequestResolverExtras<Params extends PathParams> = {\n  params: Params\n  cookies: Record<string, string>\n}\n\nexport type HttpCustomPredicate<Params extends PathParams> = (args: {\n  request: Request\n  cookies: Record<string, string>\n}) =>\n  | HttpCustomPredicateResult<Params>\n  | Promise<HttpCustomPredicateResult<Params>>\n\nexport type HttpCustomPredicateResult<Params extends PathParams> =\n  | boolean\n  | {\n      matches: boolean\n      params: Params\n    }\n\nexport type HttpRequestPredicate<Params extends PathParams> =\n  | Path\n  | HttpCustomPredicate<Params>\n\n/**\n * Request handler for HTTP requests.\n * Provides request matching based on method and URL.\n */\nexport class HttpHandler extends RequestHandler<\n  HttpHandlerInfo,\n  HttpRequestParsedResult,\n  HttpRequestResolverExtras<any>\n> {\n  constructor(\n    method: HttpHandlerMethod,\n    predicate: HttpRequestPredicate<PathParams>,\n    resolver: ResponseResolver<HttpRequestResolverExtras<any>, any, any>,\n    options?: RequestHandlerOptions,\n  ) {\n    const displayPath =\n      typeof predicate === 'function' ? '[custom predicate]' : predicate\n\n    super({\n      info: {\n        header: `${method}${displayPath ? ` ${displayPath}` : ''}`,\n        path: predicate,\n        method,\n      },\n      resolver,\n      options,\n    })\n\n    this.checkRedundantQueryParameters()\n  }\n\n  private checkRedundantQueryParameters() {\n    const { method, path } = this.info\n\n    if (!path || path instanceof RegExp || typeof path === 'function') {\n      return\n    }\n\n    const url = cleanUrl(path)\n\n    // Bypass request handler URLs that have no redundant characters.\n    if (url === path) {\n      return\n    }\n\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters using \"new URL(request.url).searchParams\" instead. Learn more: https://mswjs.io/docs/http/intercepting-requests#querysearch-parameters`,\n    )\n  }\n\n  async parse(args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }) {\n    const url = new URL(args.request.url)\n    const cookies = getAllRequestCookies(args.request)\n\n    /**\n     * Handle custom predicate functions.\n     * @note Invoke this during parsing so the user can parse the path parameters\n     * manually. Otherwise, `params` is always an empty object, which isn't nice.\n     */\n    if (typeof this.info.path === 'function') {\n      const customPredicateResult = await this.info.path({\n        request: args.request,\n        cookies,\n      })\n\n      const match =\n        typeof customPredicateResult === 'boolean'\n          ? {\n              matches: customPredicateResult,\n              params: {},\n            }\n          : customPredicateResult\n\n      return {\n        match,\n        cookies,\n      }\n    }\n\n    const match = this.info.path\n      ? matchRequestUrl(url, this.info.path, args.resolutionContext?.baseUrl)\n      : { matches: false, params: {} }\n\n    return {\n      match,\n      cookies,\n    }\n  }\n\n  async predicate(args: {\n    request: Request\n    parsedResult: HttpRequestParsedResult\n    resolutionContext?: ResponseResolutionContext\n  }) {\n    const hasMatchingMethod = this.matchMethod(args.request.method)\n    const hasMatchingUrl = args.parsedResult.match.matches\n    return hasMatchingMethod && hasMatchingUrl\n  }\n\n  private matchMethod(actualMethod: string): boolean {\n    return this.info.method instanceof RegExp\n      ? this.info.method.test(actualMethod)\n      : isStringEqual(this.info.method, actualMethod)\n  }\n\n  protected extendResolverArgs(args: {\n    request: Request\n    parsedResult: HttpRequestParsedResult\n  }) {\n    return {\n      params: args.parsedResult.match?.params || {},\n      cookies: args.parsedResult.cookies,\n    }\n  }\n\n  async log(args: { request: Request; response: Response }) {\n    const publicUrl = toPublicUrl(args.request.url)\n    const loggedRequest = await serializeRequest(args.request)\n    const loggedResponse = await serializeResponse(args.response)\n    const statusColor = getStatusCodeColor(loggedResponse.status)\n\n    console.groupCollapsed(\n      devUtils.formatMessage(\n        `${getTimestamp()} ${args.request.method} ${publicUrl} (%c${\n          loggedResponse.status\n        } ${loggedResponse.statusText}%c)`,\n      ),\n      `color:${statusColor}`,\n      'color:inherit',\n    )\n    // eslint-disable-next-line no-console\n    console.log('Request', loggedRequest)\n    // eslint-disable-next-line no-console\n    console.log('Handler:', this)\n    // eslint-disable-next-line no-console\n    console.log('Response', loggedResponse)\n    console.groupEnd()\n  }\n}\n"],"mappings":"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","ignoreList":[]}