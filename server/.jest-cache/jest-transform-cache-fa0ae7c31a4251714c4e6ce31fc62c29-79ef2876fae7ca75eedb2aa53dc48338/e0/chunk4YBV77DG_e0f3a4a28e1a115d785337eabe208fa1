f58d4ccbf2aef2447dfb5f31089cedbe
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _chunkSMXZPJEAjs = require('./chunk-SMXZPJEA.js');

// src/utils/node/index.ts
var _http = require('http');
var _stream = require('stream');
var _outvariant = require('outvariant');
var kRawRequestBodyStream = Symbol("kRawRequestBodyStream");
function getClientRequestBodyStream(request) {
  const rawRequest = _chunkSMXZPJEAjs.getRawRequest.call(void 0, request);
  _outvariant.invariant.call(void 0, rawRequest instanceof _http.ClientRequest, `Failed to retrieve raw request body stream: request is not an instance of "http.ClientRequest". Note that you can only use the "getClientRequestBodyStream" function with the requests issued by "http.clientRequest".`);
  const requestBodyStream = Reflect.get(request, kRawRequestBodyStream);
  _outvariant.invariant.call(void 0, requestBodyStream instanceof _stream.Readable, "Failed to retrieve raw request body stream: corrupted stream (%s)", typeof requestBodyStream);
  return requestBodyStream;
}
function setRawRequestBodyStream(request, stream) {
  Reflect.set(request, kRawRequestBodyStream, stream);
}
exports.getClientRequestBodyStream = getClientRequestBodyStream;
exports.setRawRequestBodyStream = setRawRequestBodyStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaHR0cCIsInJlcXVpcmUiLCJfc3RyZWFtIiwiX291dHZhcmlhbnQiLCJrUmF3UmVxdWVzdEJvZHlTdHJlYW0iLCJTeW1ib2wiLCJnZXRDbGllbnRSZXF1ZXN0Qm9keVN0cmVhbSIsInJlcXVlc3QiLCJyYXdSZXF1ZXN0IiwiX2NodW5rU01YWlBKRUFqcyIsImdldFJhd1JlcXVlc3QiLCJjYWxsIiwiaW52YXJpYW50IiwiQ2xpZW50UmVxdWVzdCIsInJlcXVlc3RCb2R5U3RyZWFtIiwiUmVmbGVjdCIsImdldCIsIlJlYWRhYmxlIiwic2V0UmF3UmVxdWVzdEJvZHlTdHJlYW0iLCJzdHJlYW0iLCJzZXQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvbm9kZS9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnRSZXF1ZXN0IH0gZnJvbSAnbm9kZTpodHRwJ1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdub2RlOnN0cmVhbSdcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ291dHZhcmlhbnQnXG5pbXBvcnQgeyBnZXRSYXdSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vZ2V0UmF3UmVxdWVzdCdcblxuY29uc3Qga1Jhd1JlcXVlc3RCb2R5U3RyZWFtID0gU3ltYm9sKCdrUmF3UmVxdWVzdEJvZHlTdHJlYW0nKVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlcXVlc3QgYm9keSBzdHJlYW0gb2YgdGhlIGdpdmVuIHJlcXVlc3QuXG4gKiBAbm90ZSBUaGlzIGlzIG9ubHkgcmVsZXZhbnQgaW4gdGhlIGNvbnRleHQgb2YgYGh0dHAuQ2xpZW50UmVxdWVzdGAuXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgaWYgdGhlIGdpdmVuIGByZXF1ZXN0YCB3YXNuJ3QgY3JlYXRlZCBiYXNlZCBvblxuICogdGhlIGBodHRwLkNsaWVudFJlcXVlc3RgIGluc3RhbmNlLlxuICogWW91IG11c3QgcmVseSBvbiB0aGUgd2ViIHN0cmVhbSBjb25zdW1lcnMgZm9yIG90aGVyIHJlcXVlc3QgY2xpZW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENsaWVudFJlcXVlc3RCb2R5U3RyZWFtKHJlcXVlc3Q6IFJlcXVlc3QpOiBSZWFkYWJsZSB7XG4gIGNvbnN0IHJhd1JlcXVlc3QgPSBnZXRSYXdSZXF1ZXN0KHJlcXVlc3QpXG5cbiAgaW52YXJpYW50KFxuICAgIHJhd1JlcXVlc3QgaW5zdGFuY2VvZiBDbGllbnRSZXF1ZXN0LFxuICAgIGBGYWlsZWQgdG8gcmV0cmlldmUgcmF3IHJlcXVlc3QgYm9keSBzdHJlYW06IHJlcXVlc3QgaXMgbm90IGFuIGluc3RhbmNlIG9mIFwiaHR0cC5DbGllbnRSZXF1ZXN0XCIuIE5vdGUgdGhhdCB5b3UgY2FuIG9ubHkgdXNlIHRoZSBcImdldENsaWVudFJlcXVlc3RCb2R5U3RyZWFtXCIgZnVuY3Rpb24gd2l0aCB0aGUgcmVxdWVzdHMgaXNzdWVkIGJ5IFwiaHR0cC5jbGllbnRSZXF1ZXN0XCIuYFxuICApXG5cbiAgY29uc3QgcmVxdWVzdEJvZHlTdHJlYW0gPSBSZWZsZWN0LmdldChyZXF1ZXN0LCBrUmF3UmVxdWVzdEJvZHlTdHJlYW0pXG5cbiAgaW52YXJpYW50KFxuICAgIHJlcXVlc3RCb2R5U3RyZWFtIGluc3RhbmNlb2YgUmVhZGFibGUsXG4gICAgJ0ZhaWxlZCB0byByZXRyaWV2ZSByYXcgcmVxdWVzdCBib2R5IHN0cmVhbTogY29ycnVwdGVkIHN0cmVhbSAoJXMpJyxcbiAgICB0eXBlb2YgcmVxdWVzdEJvZHlTdHJlYW1cbiAgKVxuXG4gIHJldHVybiByZXF1ZXN0Qm9keVN0cmVhbVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0UmF3UmVxdWVzdEJvZHlTdHJlYW0oXG4gIHJlcXVlc3Q6IFJlcXVlc3QsXG4gIHN0cmVhbTogUmVhZGFibGVcbik6IHZvaWQge1xuICBSZWZsZWN0LnNldChyZXF1ZXN0LCBrUmF3UmVxdWVzdEJvZHlTdHJlYW0sIHN0cmVhbSlcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFTLEdBQUFDLE9BQUE7QUFDVCxJQUFBQyxPQUFTLEdBQUFELE9BQUEsU0FBZ0I7QUFDekIsSUFBQUUsV0FBUyxHQUFBRixPQUFBLENBQWlCO0FBRzFCLElBQU1HLHFCQUFBLEdBQXdCQyxNQUFBLENBQU8sdUJBQXVCO0FBU3JELFNBQVNDLDJCQUEyQkMsT0FBQSxFQUE0QjtFQUNyRSxNQUFNQyxVQUFBLEdBQWFDLGdCQUFjLENBQUFDLGFBQU8sQ0FBQUMsSUFBQSxTQUFBSixPQUFBO0VBRXhDSixXQUFBLENBQUFTLFNBQUEsQ0FBQUQsSUFBQSxTQUNFSCxVQUFBLFlBQXNCUixLQUFBLENBQUFhLGFBQUEsRUFDdEIsd05BQ0Y7RUFFQSxNQUFNQyxpQkFBQSxHQUFvQkMsT0FBQSxDQUFRQyxHQUFBLENBQUlULE9BQUEsRUFBU0gscUJBQXFCO0VBRXBFRCxXQUFBLENBQUFTLFNBQUEsQ0FBQUQsSUFBQSxTQUNFRyxpQkFBQSxZQUE2QlosT0FBQSxDQUFBZSxRQUFBLEVBQzdCLHFFQUNBLE9BQU9ILGlCQUNUO0VBRUEsT0FBT0EsaUJBQUE7QUFDVDtBQUVPLFNBQVNJLHdCQUNkWCxPQUFBLEVBQ0FZLE1BQUEsRUFDTTtFQUNOSixPQUFBLENBQVFLLEdBQUEsQ0FBSWIsT0FBQSxFQUFTSCxxQkFBQSxFQUF1QmUsTUFBTTtBQUNwRCIsImlnbm9yZUxpc3QiOltdfQ==