111b27cb568dd64784bb8153c401682c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customAlphabet = customAlphabet;
exports.customRandom = customRandom;
exports.nanoid = nanoid;
exports.random = random;
Object.defineProperty(exports, "urlAlphabet", {
  enumerable: true,
  get: function () {
    return _index.urlAlphabet;
  }
});
var _nodeCrypto = require("node:crypto");
var _index = require("./url-alphabet/index.js");
const POOL_SIZE_MULTIPLIER = 128;
let pool, poolOffset;
function fillPool(bytes) {
  if (!pool || pool.length < bytes) {
    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);
    _nodeCrypto.webcrypto.getRandomValues(pool);
    poolOffset = 0;
  } else if (poolOffset + bytes > pool.length) {
    _nodeCrypto.webcrypto.getRandomValues(pool);
    poolOffset = 0;
  }
  poolOffset += bytes;
}
function random(bytes) {
  fillPool(bytes |= 0);
  return pool.subarray(poolOffset - bytes, poolOffset);
}
function customRandom(alphabet, defaultSize, getRandom) {
  let mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1;
  let step = Math.ceil(1.6 * mask * defaultSize / alphabet.length);
  return (size = defaultSize) => {
    if (!size) return '';
    let id = '';
    while (true) {
      let bytes = getRandom(step);
      let i = step;
      while (i--) {
        id += alphabet[bytes[i] & mask] || '';
        if (id.length >= size) return id;
      }
    }
  };
}
function customAlphabet(alphabet, size = 21) {
  return customRandom(alphabet, size, random);
}
function nanoid(size = 21) {
  fillPool(size |= 0);
  let id = '';
  for (let i = poolOffset - size; i < poolOffset; i++) {
    id += _index.urlAlphabet[pool[i] & 63];
  }
  return id;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9kZUNyeXB0byIsInJlcXVpcmUiLCJfaW5kZXgiLCJQT09MX1NJWkVfTVVMVElQTElFUiIsInBvb2wiLCJwb29sT2Zmc2V0IiwiZmlsbFBvb2wiLCJieXRlcyIsImxlbmd0aCIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwicmFuZG9tIiwic3ViYXJyYXkiLCJjdXN0b21SYW5kb20iLCJhbHBoYWJldCIsImRlZmF1bHRTaXplIiwiZ2V0UmFuZG9tIiwibWFzayIsIk1hdGgiLCJjbHozMiIsInN0ZXAiLCJjZWlsIiwic2l6ZSIsImlkIiwiaSIsImN1c3RvbUFscGhhYmV0IiwibmFub2lkIiwic2NvcGVkVXJsQWxwaGFiZXQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3ZWJjcnlwdG8gYXMgY3J5cHRvIH0gZnJvbSAnbm9kZTpjcnlwdG8nXG5pbXBvcnQgeyB1cmxBbHBoYWJldCBhcyBzY29wZWRVcmxBbHBoYWJldCB9IGZyb20gJy4vdXJsLWFscGhhYmV0L2luZGV4LmpzJ1xuZXhwb3J0IHsgdXJsQWxwaGFiZXQgfSBmcm9tICcuL3VybC1hbHBoYWJldC9pbmRleC5qcydcbmNvbnN0IFBPT0xfU0laRV9NVUxUSVBMSUVSID0gMTI4XG5sZXQgcG9vbCwgcG9vbE9mZnNldFxuZnVuY3Rpb24gZmlsbFBvb2woYnl0ZXMpIHtcbiAgaWYgKCFwb29sIHx8IHBvb2wubGVuZ3RoIDwgYnl0ZXMpIHtcbiAgICBwb29sID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJ5dGVzICogUE9PTF9TSVpFX01VTFRJUExJRVIpXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhwb29sKVxuICAgIHBvb2xPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAocG9vbE9mZnNldCArIGJ5dGVzID4gcG9vbC5sZW5ndGgpIHtcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHBvb2wpXG4gICAgcG9vbE9mZnNldCA9IDBcbiAgfVxuICBwb29sT2Zmc2V0ICs9IGJ5dGVzXG59XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKGJ5dGVzKSB7XG4gIGZpbGxQb29sKChieXRlcyB8PSAwKSlcbiAgcmV0dXJuIHBvb2wuc3ViYXJyYXkocG9vbE9mZnNldCAtIGJ5dGVzLCBwb29sT2Zmc2V0KVxufVxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbVJhbmRvbShhbHBoYWJldCwgZGVmYXVsdFNpemUsIGdldFJhbmRvbSkge1xuICBsZXQgbWFzayA9ICgyIDw8ICgzMSAtIE1hdGguY2x6MzIoKGFscGhhYmV0Lmxlbmd0aCAtIDEpIHwgMSkpKSAtIDFcbiAgbGV0IHN0ZXAgPSBNYXRoLmNlaWwoKDEuNiAqIG1hc2sgKiBkZWZhdWx0U2l6ZSkgLyBhbHBoYWJldC5sZW5ndGgpXG4gIHJldHVybiAoc2l6ZSA9IGRlZmF1bHRTaXplKSA9PiB7XG4gICAgaWYgKCFzaXplKSByZXR1cm4gJydcbiAgICBsZXQgaWQgPSAnJ1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgYnl0ZXMgPSBnZXRSYW5kb20oc3RlcClcbiAgICAgIGxldCBpID0gc3RlcFxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZCArPSBhbHBoYWJldFtieXRlc1tpXSAmIG1hc2tdIHx8ICcnXG4gICAgICAgIGlmIChpZC5sZW5ndGggPj0gc2l6ZSkgcmV0dXJuIGlkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tQWxwaGFiZXQoYWxwaGFiZXQsIHNpemUgPSAyMSkge1xuICByZXR1cm4gY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBzaXplLCByYW5kb20pXG59XG5leHBvcnQgZnVuY3Rpb24gbmFub2lkKHNpemUgPSAyMSkge1xuICBmaWxsUG9vbCgoc2l6ZSB8PSAwKSlcbiAgbGV0IGlkID0gJydcbiAgZm9yIChsZXQgaSA9IHBvb2xPZmZzZXQgLSBzaXplOyBpIDwgcG9vbE9mZnNldDsgaSsrKSB7XG4gICAgaWQgKz0gc2NvcGVkVXJsQWxwaGFiZXRbcG9vbFtpXSAmIDYzXVxuICB9XG4gIHJldHVybiBpZFxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxXQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFFQSxNQUFNRSxvQkFBb0IsR0FBRyxHQUFHO0FBQ2hDLElBQUlDLElBQUksRUFBRUMsVUFBVTtBQUNwQixTQUFTQyxRQUFRQSxDQUFDQyxLQUFLLEVBQUU7RUFDdkIsSUFBSSxDQUFDSCxJQUFJLElBQUlBLElBQUksQ0FBQ0ksTUFBTSxHQUFHRCxLQUFLLEVBQUU7SUFDaENILElBQUksR0FBR0ssTUFBTSxDQUFDQyxXQUFXLENBQUNILEtBQUssR0FBR0osb0JBQW9CLENBQUM7SUFDdkRRLHFCQUFNLENBQUNDLGVBQWUsQ0FBQ1IsSUFBSSxDQUFDO0lBQzVCQyxVQUFVLEdBQUcsQ0FBQztFQUNoQixDQUFDLE1BQU0sSUFBSUEsVUFBVSxHQUFHRSxLQUFLLEdBQUdILElBQUksQ0FBQ0ksTUFBTSxFQUFFO0lBQzNDRyxxQkFBTSxDQUFDQyxlQUFlLENBQUNSLElBQUksQ0FBQztJQUM1QkMsVUFBVSxHQUFHLENBQUM7RUFDaEI7RUFDQUEsVUFBVSxJQUFJRSxLQUFLO0FBQ3JCO0FBQ08sU0FBU00sTUFBTUEsQ0FBQ04sS0FBSyxFQUFFO0VBQzVCRCxRQUFRLENBQUVDLEtBQUssSUFBSSxDQUFFLENBQUM7RUFDdEIsT0FBT0gsSUFBSSxDQUFDVSxRQUFRLENBQUNULFVBQVUsR0FBR0UsS0FBSyxFQUFFRixVQUFVLENBQUM7QUFDdEQ7QUFDTyxTQUFTVSxZQUFZQSxDQUFDQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsU0FBUyxFQUFFO0VBQzdELElBQUlDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFFTCxRQUFRLENBQUNSLE1BQU0sR0FBRyxDQUFDLEdBQUksQ0FBQyxDQUFFLElBQUksQ0FBQztFQUNsRSxJQUFJYyxJQUFJLEdBQUdGLElBQUksQ0FBQ0csSUFBSSxDQUFFLEdBQUcsR0FBR0osSUFBSSxHQUFHRixXQUFXLEdBQUlELFFBQVEsQ0FBQ1IsTUFBTSxDQUFDO0VBQ2xFLE9BQU8sQ0FBQ2dCLElBQUksR0FBR1AsV0FBVyxLQUFLO0lBQzdCLElBQUksQ0FBQ08sSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUNwQixJQUFJQyxFQUFFLEdBQUcsRUFBRTtJQUNYLE9BQU8sSUFBSSxFQUFFO01BQ1gsSUFBSWxCLEtBQUssR0FBR1csU0FBUyxDQUFDSSxJQUFJLENBQUM7TUFDM0IsSUFBSUksQ0FBQyxHQUFHSixJQUFJO01BQ1osT0FBT0ksQ0FBQyxFQUFFLEVBQUU7UUFDVkQsRUFBRSxJQUFJVCxRQUFRLENBQUNULEtBQUssQ0FBQ21CLENBQUMsQ0FBQyxHQUFHUCxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ3JDLElBQUlNLEVBQUUsQ0FBQ2pCLE1BQU0sSUFBSWdCLElBQUksRUFBRSxPQUFPQyxFQUFFO01BQ2xDO0lBQ0Y7RUFDRixDQUFDO0FBQ0g7QUFDTyxTQUFTRSxjQUFjQSxDQUFDWCxRQUFRLEVBQUVRLElBQUksR0FBRyxFQUFFLEVBQUU7RUFDbEQsT0FBT1QsWUFBWSxDQUFDQyxRQUFRLEVBQUVRLElBQUksRUFBRVgsTUFBTSxDQUFDO0FBQzdDO0FBQ08sU0FBU2UsTUFBTUEsQ0FBQ0osSUFBSSxHQUFHLEVBQUUsRUFBRTtFQUNoQ2xCLFFBQVEsQ0FBRWtCLElBQUksSUFBSSxDQUFFLENBQUM7RUFDckIsSUFBSUMsRUFBRSxHQUFHLEVBQUU7RUFDWCxLQUFLLElBQUlDLENBQUMsR0FBR3JCLFVBQVUsR0FBR21CLElBQUksRUFBRUUsQ0FBQyxHQUFHckIsVUFBVSxFQUFFcUIsQ0FBQyxFQUFFLEVBQUU7SUFDbkRELEVBQUUsSUFBSUksa0JBQWlCLENBQUN6QixJQUFJLENBQUNzQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7RUFDdkM7RUFDQSxPQUFPRCxFQUFFO0FBQ1giLCJpZ25vcmVMaXN0IjpbXX0=