{"version":3,"names":["_getJestObj","mock","_biodiversityService","_interopRequireDefault","require","_BiodiversityIntegration","e","__esModule","default","jest","describe","biodiversityService","mockIntegration","beforeEach","clearAllMocks","getBiodiversityData","fn","getSpeciesThreatData","BiodiversityIntegration","mockImplementation","BiodiversityService","test","mockBiodiversityData","globalSummary","totalSpecies","totalThreatened","mockThreatData","threatCategories","habitatLoss","count","climateChange","pollution","invasiveSpecies","overexploitation","other","mockResolvedValue","result","getBiodiversityRiskIndex","expect","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toHaveBeenCalledWith","toHaveBeenCalled","toBe","mockRejectedValue","Error","customRegions","timestamp","regions","americas","threatenedSpecies","africa","getBiodiversityAnalysis","toHaveProperty","analysis","source","riskIndex","biodiversityData","toBeNull","threatData","totalRegions","error","toBeDefined","_assessRiskLevel"],"sources":["biodiversityService.test.js"],"sourcesContent":["import BiodiversityService from '../../src/services/biodiversityService.js';\nimport BiodiversityIntegration from '../../src/integrations/BiodiversityIntegration.js';\n\n// Mock the integration\njest.mock('../../src/integrations/BiodiversityIntegration.js');\n\ndescribe('BiodiversityService', () => {\n  let biodiversityService;\n  let mockIntegration;\n\n  beforeEach(() => {\n    // Clear all mocks\n    jest.clearAllMocks();\n\n    // Create mock integration\n    mockIntegration = {\n      getBiodiversityData: jest.fn(),\n      getSpeciesThreatData: jest.fn()\n    };\n\n    // Mock the constructor to return our mock\n    BiodiversityIntegration.mockImplementation(() => mockIntegration);\n\n    // Create service instance\n    biodiversityService = new BiodiversityService();\n  });\n\n  describe('getBiodiversityRiskIndex', () => {\n    test('should calculate risk index correctly with valid data', async () => {\n      const mockBiodiversityData = {\n        globalSummary: {\n          totalSpecies: 10000,\n          totalThreatened: 2000\n        }\n      };\n\n      const mockThreatData = {\n        threatCategories: {\n          habitatLoss: { count: 500 },\n          climateChange: { count: 300 },\n          pollution: { count: 200 },\n          invasiveSpecies: { count: 100 },\n          overexploitation: { count: 150 },\n          other: { count: 50 }\n        }\n      };\n\n      mockIntegration.getBiodiversityData.mockResolvedValue(mockBiodiversityData);\n      mockIntegration.getSpeciesThreatData.mockResolvedValue(mockThreatData);\n\n      const result = await biodiversityService.getBiodiversityRiskIndex();\n\n      expect(result).toBeGreaterThanOrEqual(0);\n      expect(result).toBeLessThanOrEqual(100);\n      expect(mockIntegration.getBiodiversityData).toHaveBeenCalledWith(['americas', 'africa', 'asia', 'europe', 'oceania']);\n      expect(mockIntegration.getSpeciesThreatData).toHaveBeenCalled();\n    });\n\n    test('should return default risk when data is invalid', async () => {\n      mockIntegration.getBiodiversityData.mockResolvedValue(null);\n      mockIntegration.getSpeciesThreatData.mockResolvedValue(null);\n\n      const result = await biodiversityService.getBiodiversityRiskIndex();\n\n      expect(result).toBe(30); // Default moderate risk\n    });\n\n    test('should handle errors gracefully', async () => {\n      mockIntegration.getBiodiversityData.mockRejectedValue(new Error('API Error'));\n\n      const result = await biodiversityService.getBiodiversityRiskIndex();\n\n      expect(result).toBe(30); // Default moderate risk\n    });\n\n    test('should accept custom regions parameter', async () => {\n      const customRegions = ['asia', 'europe'];\n      const mockBiodiversityData = {\n        globalSummary: {\n          totalSpecies: 5000,\n          totalThreatened: 500\n        }\n      };\n\n      mockIntegration.getBiodiversityData.mockResolvedValue(mockBiodiversityData);\n      mockIntegration.getSpeciesThreatData.mockResolvedValue({\n        threatCategories: {\n          habitatLoss: { count: 100 },\n          climateChange: { count: 50 },\n          pollution: { count: 30 },\n          invasiveSpecies: { count: 20 },\n          overexploitation: { count: 25 },\n          other: { count: 10 }\n        }\n      });\n\n      const result = await biodiversityService.getBiodiversityRiskIndex(customRegions);\n\n      expect(result).toBeGreaterThanOrEqual(0);\n      expect(result).toBeLessThanOrEqual(100);\n      expect(mockIntegration.getBiodiversityData).toHaveBeenCalledWith(customRegions);\n    });\n  });\n\n  describe('getBiodiversityAnalysis', () => {\n    test('should return complete analysis with valid data', async () => {\n      const mockBiodiversityData = {\n        timestamp: '2025-10-13T19:30:00.000Z',\n        regions: {\n          americas: { totalSpecies: 5000, threatenedSpecies: 1000 },\n          africa: { totalSpecies: 4000, threatenedSpecies: 800 }\n        },\n        globalSummary: {\n          totalSpecies: 9000,\n          totalThreatened: 1800\n        }\n      };\n\n      const mockThreatData = {\n        threatCategories: {\n          habitatLoss: { count: 500 },\n          climateChange: { count: 300 },\n          pollution: { count: 200 },\n          invasiveSpecies: { count: 100 },\n          overexploitation: { count: 150 },\n          other: { count: 50 }\n        }\n      };\n\n      mockIntegration.getBiodiversityData.mockResolvedValue(mockBiodiversityData);\n      mockIntegration.getSpeciesThreatData.mockResolvedValue(mockThreatData);\n\n      const result = await biodiversityService.getBiodiversityAnalysis();\n\n      expect(result).toHaveProperty('timestamp');\n      expect(result).toHaveProperty('riskIndex');\n      expect(result).toHaveProperty('biodiversityData');\n      expect(result).toHaveProperty('threatData');\n      expect(result).toHaveProperty('analysis');\n      expect(result.analysis).toHaveProperty('totalRegions');\n      expect(result.analysis).toHaveProperty('globalThreatPercentage');\n      expect(result.analysis).toHaveProperty('majorThreatCategories');\n      expect(result.analysis).toHaveProperty('riskAssessment');\n      expect(result.source).toBe('BiodiversityService');\n    });\n\n    test('should return fallback analysis when data is invalid', async () => {\n      mockIntegration.getBiodiversityData.mockResolvedValue(null);\n      mockIntegration.getSpeciesThreatData.mockResolvedValue(null);\n\n      const result = await biodiversityService.getBiodiversityAnalysis();\n\n      expect(result.riskIndex).toBe(30);\n      expect(result.biodiversityData).toBeNull();\n      expect(result.threatData).toBeNull();\n      expect(result.analysis.totalRegions).toBe(0);\n      expect(result.source).toBe('BiodiversityService - Error Fallback');\n      expect(result.error).toBeDefined();\n    });\n\n    test('should handle errors gracefully in analysis', async () => {\n      mockIntegration.getBiodiversityData.mockRejectedValue(new Error('Network Error'));\n\n      const result = await biodiversityService.getBiodiversityAnalysis();\n\n      expect(result.riskIndex).toBe(30);\n      expect(result.source).toBe('BiodiversityService - Error Fallback');\n      expect(result.error).toBe('Network Error');\n    });\n  });\n\n  describe('_assessRiskLevel', () => {\n    test('should assess risk levels correctly', () => {\n      expect(biodiversityService._assessRiskLevel(20)).toBe('Low');\n      expect(biodiversityService._assessRiskLevel(35)).toBe('Moderate');\n      expect(biodiversityService._assessRiskLevel(55)).toBe('High');\n      expect(biodiversityService._assessRiskLevel(75)).toBe('Critical');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}