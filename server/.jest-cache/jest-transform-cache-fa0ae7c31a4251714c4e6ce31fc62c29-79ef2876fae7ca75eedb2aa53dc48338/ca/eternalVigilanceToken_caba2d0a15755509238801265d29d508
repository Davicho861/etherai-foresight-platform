ee46a25175ebf01e66f47bab9bca978d
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var
/* istanbul ignore next */
_express = _interopRequireDefault(require("express"));
var
/* istanbul ignore next */
_expressRateLimit = _interopRequireDefault(require("express-rate-limit"));
/* istanbul ignore next */ function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function cov_izbrzizxq() {
  var path = "/home/davicho/etherai-foresight-platform-main/server/src/routes/eternalVigilanceToken.js";
  var hash = "c8002c3277411421f9a661ac9f812562120ad93e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/davicho/etherai-foresight-platform-main/server/src/routes/eternalVigilanceToken.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 31
        }
      },
      "1": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 121
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "3": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 104
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 54
        }
      },
      "6": {
        start: {
          line: 14,
          column: 33
        },
        end: {
          line: 14,
          column: 73
        }
      },
      "7": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 166
        }
      },
      "8": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 17,
          column: 66
        }
      },
      "9": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 35
        }
      },
      "10": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 48
        }
      },
      "11": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 36
          },
          end: {
            line: 10,
            column: 37
          }
        },
        loc: {
          start: {
            line: 10,
            column: 56
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 10
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 12,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 12,
            column: 68
          }
        }, {
          start: {
            line: 12,
            column: 72
          },
          end: {
            line: 12,
            column: 104
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 48
          }
        }, {
          start: {
            line: 13,
            column: 52
          },
          end: {
            line: 13,
            column: 54
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 13,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 13,
            column: 31
          }
        }, {
          start: {
            line: 13,
            column: 35
          },
          end: {
            line: 13,
            column: 47
          }
        }],
        line: 13
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c8002c3277411421f9a661ac9f812562120ad93e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_izbrzizxq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_izbrzizxq();
// require sseTokenService at request time so tests can mock it

const router =
/* istanbul ignore next */
(cov_izbrzizxq().s[0]++,
/* istanbul ignore next */
_express.
/* istanbul ignore next */
default.Router());
const tokenLimiter =
/* istanbul ignore next */
(cov_izbrzizxq().s[1]++,
/* istanbul ignore next */
(0,
/* istanbul ignore next */
_expressRateLimit.
/* istanbul ignore next */
default)({
  windowMs: 60 * 1000,
  max: 5,
  message: {
    error: 'Too many token requests, try later'
  }
}));

// POST /token -> returns { token, expiresAt }
/* istanbul ignore next */
cov_izbrzizxq().s[2]++;
router.post('/token', tokenLimiter, async (req, res) => {
  /* istanbul ignore next */
  cov_izbrzizxq().f[0]++;
  cov_izbrzizxq().s[3]++;
  try {
    const sseTokenService =
    /* istanbul ignore next */
    (cov_izbrzizxq().s[4]++,
    /* istanbul ignore next */
    (cov_izbrzizxq().b[0][0]++, require('../sseTokenService.js').default) ||
    /* istanbul ignore next */
    (cov_izbrzizxq().b[0][1]++, require('../sseTokenService.js')));
    const ttl =
    /* istanbul ignore next */
    (cov_izbrzizxq().s[5]++,
    /* istanbul ignore next */
    (cov_izbrzizxq().b[1][0]++, Number(
    /* istanbul ignore next */
    (cov_izbrzizxq().b[2][0]++, req.body) &&
    /* istanbul ignore next */
    (cov_izbrzizxq().b[2][1]++, req.body.ttl))) ||
    /* istanbul ignore next */
    (cov_izbrzizxq().b[1][1]++, 60)); // seconds
    const {
      token,
      expiresAt
    } =
    /* istanbul ignore next */
    (cov_izbrzizxq().s[6]++, await sseTokenService.generateToken(ttl));
    // Ensure cookie contains the exact token string returned by the service
    const cookieOptions =
    /* istanbul ignore next */
    (cov_izbrzizxq().s[7]++, {
      httpOnly: false,
      secure: process.env.NODE_ENV === 'production',
      maxAge: Math.max(1000, expiresAt - Date.now()),
      sameSite: 'lax',
      path: '/'
    });
    /* istanbul ignore next */
    cov_izbrzizxq().s[8]++;
    res.cookie('praevisio_sse_token', String(token), cookieOptions);
    /* istanbul ignore next */
    cov_izbrzizxq().s[9]++;
    res.json({
      token,
      expiresAt
    });
  } catch (e) {
    /* istanbul ignore next */
    cov_izbrzizxq().s[10]++;
    console.error('Error generating token:', e);
    /* istanbul ignore next */
    cov_izbrzizxq().s[11]++;
    res.status(500).json({
      error: 'Could not generate token'
    });
  }
});
/* istanbul ignore next */
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,