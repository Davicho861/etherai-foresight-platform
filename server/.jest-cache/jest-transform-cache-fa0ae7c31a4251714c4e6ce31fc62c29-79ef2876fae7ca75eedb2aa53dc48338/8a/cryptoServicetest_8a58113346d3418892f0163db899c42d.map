{"version":3,"names":["_getJestObj","mock","_cryptoService","_interopRequireDefault","require","_CryptoIntegration","e","__esModule","default","jest","describe","cryptoService","mockCryptoIntegration","beforeEach","clearAllMocks","getCryptoData","fn","CryptoIntegration","mockImplementation","CryptoService","test","mockCryptoData","id","price_change_percentage_24h","mockResolvedValue","result","getCryptoVolatilityIndex","expect","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toHaveBeenCalledWith","toBeGreaterThan","toBeLessThan","toBe","mockRejectedValue","Error","symbol","name","current_price","getCryptoMarketAnalysis","toHaveProperty","analysis","_assessRiskLevel"],"sources":["cryptoService.test.js"],"sourcesContent":["import CryptoService from '../../src/services/cryptoService.js';\nimport CryptoIntegration from '../../src/integrations/CryptoIntegration.js';\n\n// Mock the CryptoIntegration\njest.mock('../../src/integrations/CryptoIntegration.js');\n\ndescribe('CryptoService', () => {\n  let cryptoService;\n  let mockCryptoIntegration;\n\n  beforeEach(() => {\n    // Clear all mocks\n    jest.clearAllMocks();\n\n    // Create mock instance\n    mockCryptoIntegration = {\n      getCryptoData: jest.fn(),\n    };\n\n    // Make the constructor return our mock\n    CryptoIntegration.mockImplementation(() => mockCryptoIntegration);\n\n    // Create service instance\n    cryptoService = new CryptoService();\n  });\n\n  describe('getCryptoVolatilityIndex', () => {\n    test('should return moderate risk index for normal market conditions', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', price_change_percentage_24h: -2.5 },\n        { id: 'ethereum', price_change_percentage_24h: 1.2 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin', 'ethereum']);\n\n      expect(result).toBeGreaterThanOrEqual(0);\n      expect(result).toBeLessThanOrEqual(100);\n      expect(mockCryptoIntegration.getCryptoData).toHaveBeenCalledWith(['bitcoin', 'ethereum']);\n    });\n\n    test('should return high risk index for volatile market conditions', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', price_change_percentage_24h: -15.0 },\n        { id: 'ethereum', price_change_percentage_24h: 12.5 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin', 'ethereum']);\n\n      expect(result).toBeGreaterThan(50); // High volatility should result in high risk\n      expect(result).toBeLessThanOrEqual(100);\n    });\n\n    test('should return low risk index for stable market conditions', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', price_change_percentage_24h: 0.5 },\n        { id: 'ethereum', price_change_percentage_24h: -0.3 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin', 'ethereum']);\n\n      expect(result).toBeLessThan(20); // Low volatility should result in low risk\n      expect(result).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should return default risk when no data available', async () => {\n      mockCryptoIntegration.getCryptoData.mockResolvedValue([]);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin']);\n\n      expect(result).toBe(25); // Default moderate risk\n    });\n\n    test('should handle integration errors gracefully', async () => {\n      mockCryptoIntegration.getCryptoData.mockRejectedValue(new Error('API Error'));\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin']);\n\n      expect(result).toBe(25); // Should return default risk on error\n    });\n  });\n\n  describe('getCryptoMarketAnalysis', () => {\n    test('should return complete market analysis with volatility index', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', symbol: 'btc', name: 'Bitcoin', current_price: 45000, price_change_percentage_24h: -2.5 },\n        { id: 'ethereum', symbol: 'eth', name: 'Ethereum', current_price: 2800, price_change_percentage_24h: 1.2 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoMarketAnalysis(['bitcoin', 'ethereum']);\n\n      expect(result).toHaveProperty('timestamp');\n      expect(result).toHaveProperty('volatilityIndex');\n      expect(result).toHaveProperty('marketData');\n      expect(result).toHaveProperty('analysis');\n      expect(result.analysis).toHaveProperty('totalCryptos', 2);\n      expect(result.analysis).toHaveProperty('averageVolatility');\n      expect(result.analysis).toHaveProperty('riskAssessment');\n      expect(result).toHaveProperty('source', 'CryptoService');\n    });\n\n    test('should handle errors and return fallback data', async () => {\n      mockCryptoIntegration.getCryptoData.mockRejectedValue(new Error('API Error'));\n\n      const result = await cryptoService.getCryptoMarketAnalysis(['bitcoin']);\n\n      expect(result).toHaveProperty('timestamp');\n      expect(result).toHaveProperty('volatilityIndex', 25);\n      expect(result).toHaveProperty('marketData', []);\n      expect(result).toHaveProperty('analysis');\n      expect(result).toHaveProperty('source', 'CryptoService - Error Fallback');\n      expect(result).toHaveProperty('error');\n    });\n  });\n\n  describe('_assessRiskLevel', () => {\n    test('should assess high risk correctly', () => {\n      const result = cryptoService._assessRiskLevel(75);\n      expect(result).toBe('High');\n    });\n\n    test('should assess moderate risk correctly', () => {\n      const result = cryptoService._assessRiskLevel(45);\n      expect(result).toBe('Moderate');\n    });\n\n    test('should assess low risk correctly', () => {\n      const result = cryptoService._assessRiskLevel(25);\n      expect(result).toBe('Low');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}