e283c2d3de99fd9a37566b5e3e4852db
"use strict";

describe('usgsService.getSeismicActivity', () => {
  afterEach(() => {
    jest.resetModules();
    delete process.env.FORCE_MOCKS;
    delete process.env.NATIVE_DEV_MODE;
    delete process.env.USGS_MOCK_PORT;
    delete global.fetch;
  });
  test('returns built-in mock when FORCE_MOCKS=true', async () => {
    process.env.FORCE_MOCKS = 'true';
    const svc = require('../../src/services/usgsService.js');
    const out = await svc.getSeismicActivity();
    expect(out).toHaveProperty('isMock', true);
    expect(out.events.length).toBeGreaterThan(0);
  });
  test('uses local mock server when NATIVE_DEV_MODE=true and mock responds', async () => {
    process.env.NATIVE_DEV_MODE = 'true';
    process.env.USGS_MOCK_PORT = '4011';
    const fakeBody = {
      metadata: {
        generated: Date.now()
      },
      features: [{
        id: 'm-1',
        properties: {
          mag: 3.2,
          place: 'X',
          time: Date.now(),
          tsunami: 0,
          sig: 10,
          url: 'u'
        },
        geometry: {
          coordinates: [0, 0, 10]
        }
      }]
    };
    global.fetch = jest.fn().mockResolvedValue({
      ok: true,
      json: async () => fakeBody
    });
    const svc = require('../../src/services/usgsService.js');
    const out = await svc.getSeismicActivity();
    expect(out.events[0].magnitude).toBeCloseTo(3.2);
  });
  test('falls back when live integration throws and FORCE_MOCKS not set', async () => {
    // Mock getSeismicData to throw
    const seismicPath = require.resolve('../../src/services/SeismicIntegration.js');
    jest.doMock(seismicPath, () => ({
      getSeismicData: async () => {
        throw new Error('live fail');
      }
    }));
    const svc = require('../../src/services/usgsService.js');
    const out = await svc.getSeismicActivity();
    expect(out).toHaveProperty('events');
    expect(Array.isArray(out.events)).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsImFmdGVyRWFjaCIsImplc3QiLCJyZXNldE1vZHVsZXMiLCJwcm9jZXNzIiwiZW52IiwiRk9SQ0VfTU9DS1MiLCJOQVRJVkVfREVWX01PREUiLCJVU0dTX01PQ0tfUE9SVCIsImdsb2JhbCIsImZldGNoIiwidGVzdCIsInN2YyIsInJlcXVpcmUiLCJvdXQiLCJnZXRTZWlzbWljQWN0aXZpdHkiLCJleHBlY3QiLCJ0b0hhdmVQcm9wZXJ0eSIsImV2ZW50cyIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsImZha2VCb2R5IiwibWV0YWRhdGEiLCJnZW5lcmF0ZWQiLCJEYXRlIiwibm93IiwiZmVhdHVyZXMiLCJpZCIsInByb3BlcnRpZXMiLCJtYWciLCJwbGFjZSIsInRpbWUiLCJ0c3VuYW1pIiwic2lnIiwidXJsIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJvayIsImpzb24iLCJtYWduaXR1ZGUiLCJ0b0JlQ2xvc2VUbyIsInNlaXNtaWNQYXRoIiwicmVzb2x2ZSIsImRvTW9jayIsImdldFNlaXNtaWNEYXRhIiwiRXJyb3IiLCJBcnJheSIsImlzQXJyYXkiLCJ0b0JlIl0sInNvdXJjZXMiOlsidXNnc1NlcnZpY2UudW5pdC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImRlc2NyaWJlKCd1c2dzU2VydmljZS5nZXRTZWlzbWljQWN0aXZpdHknLCAoKSA9PiB7XG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXNldE1vZHVsZXMoKVxuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5GT1JDRV9NT0NLU1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5OQVRJVkVfREVWX01PREVcbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuVVNHU19NT0NLX1BPUlRcbiAgICBkZWxldGUgZ2xvYmFsLmZldGNoXG4gIH0pXG5cbiAgdGVzdCgncmV0dXJucyBidWlsdC1pbiBtb2NrIHdoZW4gRk9SQ0VfTU9DS1M9dHJ1ZScsIGFzeW5jICgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5GT1JDRV9NT0NLUyA9ICd0cnVlJ1xuICBjb25zdCBzdmMgPSByZXF1aXJlKCcuLi8uLi9zcmMvc2VydmljZXMvdXNnc1NlcnZpY2UuanMnKVxuICAgIGNvbnN0IG91dCA9IGF3YWl0IHN2Yy5nZXRTZWlzbWljQWN0aXZpdHkoKVxuICAgIGV4cGVjdChvdXQpLnRvSGF2ZVByb3BlcnR5KCdpc01vY2snLCB0cnVlKVxuICAgIGV4cGVjdChvdXQuZXZlbnRzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApXG4gIH0pXG5cbiAgdGVzdCgndXNlcyBsb2NhbCBtb2NrIHNlcnZlciB3aGVuIE5BVElWRV9ERVZfTU9ERT10cnVlIGFuZCBtb2NrIHJlc3BvbmRzJywgYXN5bmMgKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5BVElWRV9ERVZfTU9ERSA9ICd0cnVlJ1xuICAgIHByb2Nlc3MuZW52LlVTR1NfTU9DS19QT1JUID0gJzQwMTEnXG4gICAgY29uc3QgZmFrZUJvZHkgPSB7IG1ldGFkYXRhOiB7IGdlbmVyYXRlZDogRGF0ZS5ub3coKSB9LCBmZWF0dXJlczogW3sgaWQ6ICdtLTEnLCBwcm9wZXJ0aWVzOiB7IG1hZzogMy4yLCBwbGFjZTogJ1gnLCB0aW1lOiBEYXRlLm5vdygpLCB0c3VuYW1pOiAwLCBzaWc6IDEwLCB1cmw6ICd1JyB9LCBnZW9tZXRyeTogeyBjb29yZGluYXRlczogWzAsMCwxMF0gfSB9XSB9XG4gICAgZ2xvYmFsLmZldGNoID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgb2s6IHRydWUsIGpzb246IGFzeW5jICgpID0+IGZha2VCb2R5IH0pXG4gIGNvbnN0IHN2YyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9zZXJ2aWNlcy91c2dzU2VydmljZS5qcycpXG4gICAgY29uc3Qgb3V0ID0gYXdhaXQgc3ZjLmdldFNlaXNtaWNBY3Rpdml0eSgpXG4gICAgZXhwZWN0KG91dC5ldmVudHNbMF0ubWFnbml0dWRlKS50b0JlQ2xvc2VUbygzLjIpXG4gIH0pXG5cbiAgdGVzdCgnZmFsbHMgYmFjayB3aGVuIGxpdmUgaW50ZWdyYXRpb24gdGhyb3dzIGFuZCBGT1JDRV9NT0NLUyBub3Qgc2V0JywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIE1vY2sgZ2V0U2Vpc21pY0RhdGEgdG8gdGhyb3dcbiAgY29uc3Qgc2Vpc21pY1BhdGggPSByZXF1aXJlLnJlc29sdmUoJy4uLy4uL3NyYy9zZXJ2aWNlcy9TZWlzbWljSW50ZWdyYXRpb24uanMnKVxuICBqZXN0LmRvTW9jayhzZWlzbWljUGF0aCwgKCkgPT4gKHsgZ2V0U2Vpc21pY0RhdGE6IGFzeW5jICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdsaXZlIGZhaWwnKSB9IH0pKVxuICBjb25zdCBzdmMgPSByZXF1aXJlKCcuLi8uLi9zcmMvc2VydmljZXMvdXNnc1NlcnZpY2UuanMnKVxuICAgIGNvbnN0IG91dCA9IGF3YWl0IHN2Yy5nZXRTZWlzbWljQWN0aXZpdHkoKVxuICAgIGV4cGVjdChvdXQpLnRvSGF2ZVByb3BlcnR5KCdldmVudHMnKVxuICAgIGV4cGVjdChBcnJheS5pc0FycmF5KG91dC5ldmVudHMpKS50b0JlKHRydWUpXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxRQUFRLENBQUMsZ0NBQWdDLEVBQUUsTUFBTTtFQUMvQ0MsU0FBUyxDQUFDLE1BQU07SUFDZEMsSUFBSSxDQUFDQyxZQUFZLENBQUMsQ0FBQztJQUNuQixPQUFPQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBVztJQUM5QixPQUFPRixPQUFPLENBQUNDLEdBQUcsQ0FBQ0UsZUFBZTtJQUNsQyxPQUFPSCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0csY0FBYztJQUNqQyxPQUFPQyxNQUFNLENBQUNDLEtBQUs7RUFDckIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxZQUFZO0lBQzlEUCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBVyxHQUFHLE1BQU07SUFDbEMsTUFBTU0s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