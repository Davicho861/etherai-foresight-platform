71c33ed68bfa931a1a1d603366f2db6d
"use strict";

// Mock the SeismicIntegration
_getJestObj().mock('../../src/services/SeismicIntegration.js');
var _server = require("../mocks/server.js");
var _usgsService = require("../../src/services/usgsService.js");
var _SeismicIntegration = require("../../src/services/SeismicIntegration.js");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('USGS Service', () => {
  beforeAll(() => {
    _server.server.listen();
  });
  afterAll(() => {
    _server.server.close();
  });
  beforeEach(() => {
    jest.clearAllMocks();
  });
  describe('getSeismicActivity', () => {
    it('should return transformed seismic data successfully', async () => {
      const mockRawData = {
        features: [{
          id: 'test1',
          properties: {
            mag: 6.5,
            place: 'Test Location',
            time: 1638360000000,
            tsunami: 0,
            sig: 100,
            url: 'https://example.com'
          },
          geometry: {
            coordinates: [-120.0, 35.0, 10.0]
          }
        }]
      };
      _SeismicIntegration.getSeismicData.mockResolvedValue(mockRawData);
      const result = await (0, _usgsService.getSeismicActivity)();
      expect(result).toHaveProperty('events');
      expect(result).toHaveProperty('summary');
      expect(result.events).toHaveLength(1);
      expect(result.events[0]).toMatchObject({
        id: 'test1',
        magnitude: 6.5,
        place: 'Test Location',
        time: 1638360000000,
        tsunami: 0,
        significance: 100,
        url: 'https://example.com',
        coordinates: [-120.0, 35.0, 10.0]
      });
      expect(result.summary).toMatchObject({
        totalEvents: 1,
        maxMagnitude: 6.5,
        source: 'USGS Earthquake Hazards Program'
      });
    });
    it('should handle empty seismic data', async () => {
      const mockRawData = {
        features: []
      };
      _SeismicIntegration.getSeismicData.mockResolvedValue(mockRawData);
      const result = await (0, _usgsService.getSeismicActivity)();
      expect(result.events).toEqual([]);
      expect(result.summary).toMatchObject({
        totalEvents: 0,
        maxMagnitude: 0,
        source: 'USGS Earthquake Hazards Program'
      });
    });
    it('should handle integration errors gracefully', async () => {
      _SeismicIntegration.getSeismicData.mockRejectedValue(new Error('Network error'));
      const result = await (0, _usgsService.getSeismicActivity)();
      expect(result).toHaveProperty('error');
      expect(result.error).toBe('Network error');
      expect(result.events).toEqual([]);
    });
    it('should handle invalid data structure', async () => {
      _SeismicIntegration.getSeismicData.mockResolvedValue(null);
      const result = await (0, _usgsService.getSeismicActivity)();
      expect(result.events).toEqual([]);
      expect(result.summary.totalEvents).toBe(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,