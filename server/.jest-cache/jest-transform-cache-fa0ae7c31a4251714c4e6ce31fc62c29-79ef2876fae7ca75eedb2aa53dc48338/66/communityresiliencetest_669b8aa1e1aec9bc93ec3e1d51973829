cd8fb614e03b14d158c55b3d7b16b012
"use strict";

var _supertest = _interopRequireDefault(require("supertest"));
var _express = _interopRequireDefault(require("express"));
var _communityResilience = _interopRequireDefault(require("../../src/routes/community-resilience.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('Community Resilience Routes', () => {
  let app;
  beforeEach(() => {
    // Clear mock history before each test for purity
    global.mockFetch.mockClear();

    // Create express app with the router
    app = (0, _express.default)();
    app.use(_express.default.json());
    app.use('/api/community-resilience', _communityResilience.default);
  });
  describe('GET /api/community-resilience', () => {
    it('should return community resilience analysis for default countries', async () => {
      // Mock successful GDELT API response
      global.mockFetch.mockResolvedValue(new global.Response(JSON.stringify({
        eventCount: 5,
        events: []
      }), {
        status: 200
      }));
      const response = await (0, _supertest.default)(app).get('/api/community-resilience');
      expect(response.status).toBe(200);
      expect(response.body).toBeDefined();
      expect(typeof response.body.resilience).toBe('number');
    });
    it('should accept custom countries and days parameters', async () => {
      global.mockFetch.mockResolvedValue(new global.Response(JSON.stringify({
        eventCount: 3,
        events: []
      }), {
        status: 200
      }));
      const response = await (0, _supertest.default)(app).get('/api/community-resilience?countries=COL,PER&days=15');
      expect(response.status).toBe(200);
      expect(response.body).toBeDefined();
      expect(typeof response.body.resilience).toBe('number');
    });
    it('should handle API failures gracefully with fallback data', async () => {
      // Simulate GDELT API failure
      global.mockFetch.mockRejectedValue(new Error('GDELT API failure'));
      const response = await (0, _supertest.default)(app).get('/api/community-resilience');
      expect(response.status).toBe(200);
      expect(response.body).toBeDefined();
      expect(typeof response.body.resilience).toBe('number');
    });
  });
  describe('GET /api/community-resilience/report', () => {
    it('should return formatted resilience report', async () => {
      global.mockFetch.mockResolvedValue(new global.Response(JSON.stringify({
        eventCount: 4,
        events: []
      }), {
        status: 200
      }));
      const response = await (0, _supertest.default)(app).get('/api/community-resilience/report');
      expect(response.status).toBe(200);
      expect(typeof response.body).toBe('string');
      expect(response.body).toContain('# COMMUNITY_RESILIENCE_REPORT.md');
    });
    it('should include recommendations in the report', async () => {
      global.mockFetch.mockResolvedValue(new global.Response(JSON.stringify({
        eventCount: 10,
        events: []
      }), {
        status: 200
      }));
      const response = await (0, _supertest.default)(app).get('/api/community-resilience/report');
      expect(response.status).toBe(200);
      expect(response.body.report).toContain('Recomendaciones:');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,