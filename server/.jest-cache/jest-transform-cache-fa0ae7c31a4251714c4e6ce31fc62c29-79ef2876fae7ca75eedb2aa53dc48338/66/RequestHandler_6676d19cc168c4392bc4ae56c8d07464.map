{"version":3,"names":["RequestHandler_exports","__export","RequestHandler","module","exports","__toCommonJS","import_getCallFrame","require","import_isIterable","cache","WeakMap","__kind","info","isUsed","resolver","resolverIterator","resolverIteratorResult","options","constructor","args","callFrame","getCallFrame","Error","parse","_args","test","parsedResult","request","resolutionContext","predicate","extendResolverArgs","cloneRequestOrGetFromCache","existingClone","get","clonedRequest","clone","set","run","once","requestClone","shouldInterceptRequest","executeResolver","wrapResolver","resolverExtras","mockedResponsePromise","requestId","catch","errorOrResponse","Response","mockedResponse","executionResult","createExecutionResult","response","result","isIterable","Symbol","iterator","asyncIterator","done","value","next","nextResponse","handler"],"sources":["../../../src/core/handlers/RequestHandler.ts"],"sourcesContent":["import { getCallFrame } from '../utils/internal/getCallFrame'\nimport {\n  AsyncIterable,\n  Iterable,\n  isIterable,\n} from '../utils/internal/isIterable'\nimport type { ResponseResolutionContext } from '../utils/executeHandlers'\nimport type { MaybePromise } from '../typeUtils'\nimport {\n  StrictRequest,\n  HttpResponse,\n  DefaultUnsafeFetchResponse,\n} from '../HttpResponse'\nimport type { HandlerKind } from './common'\nimport type { GraphQLRequestBody } from './GraphQLHandler'\n\nexport type DefaultRequestMultipartBody = Record<\n  string,\n  string | File | Array<string | File>\n>\n\nexport type DefaultBodyType =\n  | Record<string, any>\n  | DefaultRequestMultipartBody\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\nexport type JsonBodyType =\n  | Record<string, any>\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\nexport interface RequestHandlerDefaultInfo {\n  header: string\n}\n\nexport interface RequestHandlerInternalInfo {\n  callFrame?: string\n}\n\nexport type ResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType = undefined,\n> =\n  // If ResponseBodyType is a union and one of the types is `undefined`,\n  // allow plain Response as the type.\n  | ([ResponseBodyType] extends [undefined]\n      ? Response\n      : /**\n         * Treat GraphQL response body type as a special case.\n         * For esome reason, making the default HttpResponse<T> | DefaultUnsafeFetchResponse\n         * union breaks the body type inference for HTTP requests.\n         * @see https://github.com/mswjs/msw/issues/2130\n         */\n        ResponseBodyType extends GraphQLRequestBody<any>\n        ? HttpResponse<ResponseBodyType> | DefaultUnsafeFetchResponse\n        : HttpResponse<ResponseBodyType>)\n  | undefined\n  | void\n\nexport type MaybeAsyncResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType,\n> = MaybePromise<ResponseResolverReturnType<ResponseBodyType>>\n\nexport type AsyncResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType,\n> = MaybePromise<\n  | ResponseResolverReturnType<ResponseBodyType>\n  | Iterable<\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>\n    >\n  | AsyncIterable<\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>\n    >\n>\n\nexport type ResponseResolverInfo<\n  ResolverExtraInfo extends Record<string, unknown>,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n> = {\n  request: StrictRequest<RequestBodyType>\n  requestId: string\n} & ResolverExtraInfo\n\nexport type ResponseResolver<\n  ResolverExtraInfo extends Record<string, unknown> = Record<string, unknown>,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  ResponseBodyType extends DefaultBodyType = undefined,\n> = (\n  info: ResponseResolverInfo<ResolverExtraInfo, RequestBodyType>,\n) => AsyncResponseResolverReturnType<ResponseBodyType>\n\nexport interface RequestHandlerArgs<\n  HandlerInfo,\n  HandlerOptions extends RequestHandlerOptions,\n> {\n  info: HandlerInfo\n  resolver: ResponseResolver<any>\n  options?: HandlerOptions\n}\n\nexport interface RequestHandlerOptions {\n  once?: boolean\n}\n\nexport interface RequestHandlerExecutionResult<\n  ParsedResult extends Record<string, unknown> | undefined,\n> {\n  handler: RequestHandler\n  parsedResult?: ParsedResult\n  request: Request\n  requestId: string\n  response?: Response\n}\n\nexport abstract class RequestHandler<\n  HandlerInfo extends RequestHandlerDefaultInfo = RequestHandlerDefaultInfo,\n  ParsedResult extends Record<string, any> | undefined = any,\n  ResolverExtras extends Record<string, unknown> = any,\n  HandlerOptions extends RequestHandlerOptions = RequestHandlerOptions,\n> {\n  static cache = new WeakMap<\n    StrictRequest<DefaultBodyType>,\n    StrictRequest<DefaultBodyType>\n  >()\n\n  private readonly __kind: HandlerKind\n\n  public info: HandlerInfo & RequestHandlerInternalInfo\n  /**\n   * Indicates whether this request handler has been used\n   * (its resolver has successfully executed).\n   */\n  public isUsed: boolean\n\n  protected resolver: ResponseResolver<ResolverExtras, any, any>\n  private resolverIterator?:\n    | Iterator<\n        MaybeAsyncResponseResolverReturnType<any>,\n        MaybeAsyncResponseResolverReturnType<any>,\n        MaybeAsyncResponseResolverReturnType<any>\n      >\n    | AsyncIterator<\n        MaybeAsyncResponseResolverReturnType<any>,\n        MaybeAsyncResponseResolverReturnType<any>,\n        MaybeAsyncResponseResolverReturnType<any>\n      >\n  private resolverIteratorResult?: Response | HttpResponse<any>\n  private options?: HandlerOptions\n\n  constructor(args: RequestHandlerArgs<HandlerInfo, HandlerOptions>) {\n    this.resolver = args.resolver\n    this.options = args.options\n\n    const callFrame = getCallFrame(new Error())\n\n    this.info = {\n      ...args.info,\n      callFrame,\n    }\n\n    this.isUsed = false\n    this.__kind = 'RequestHandler'\n  }\n\n  /**\n   * Determine if the intercepted request should be mocked.\n   */\n  abstract predicate(args: {\n    request: Request\n    parsedResult: ParsedResult\n    resolutionContext?: ResponseResolutionContext\n  }): boolean | Promise<boolean>\n\n  /**\n   * Print out the successfully handled request.\n   */\n  abstract log(args: {\n    request: Request\n    response: Response\n    parsedResult: ParsedResult\n  }): void\n\n  /**\n   * Parse the intercepted request to extract additional information from it.\n   * Parsed result is then exposed to other methods of this request handler.\n   */\n  async parse(_args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<ParsedResult> {\n    return {} as ParsedResult\n  }\n\n  /**\n   * Test if this handler matches the given request.\n   *\n   * This method is not used internally but is exposed\n   * as a convenience method for consumers writing custom\n   * handlers.\n   */\n  public async test(args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<boolean> {\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext,\n    })\n\n    return this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext,\n    })\n  }\n\n  protected extendResolverArgs(_args: {\n    request: Request\n    parsedResult: ParsedResult\n  }): ResolverExtras {\n    return {} as ResolverExtras\n  }\n\n  // Clone the request instance before it's passed to the handler phases\n  // and the response resolver so we can always read it for logging.\n  // We only clone it once per request to avoid unnecessary overhead.\n  private cloneRequestOrGetFromCache(\n    request: StrictRequest<DefaultBodyType>,\n  ): StrictRequest<DefaultBodyType> {\n    const existingClone = RequestHandler.cache.get(request)\n\n    if (typeof existingClone !== 'undefined') {\n      return existingClone\n    }\n\n    const clonedRequest = request.clone()\n    RequestHandler.cache.set(request, clonedRequest)\n\n    return clonedRequest\n  }\n\n  /**\n   * Execute this request handler and produce a mocked response\n   * using the given resolver function.\n   */\n  public async run(args: {\n    request: StrictRequest<any>\n    requestId: string\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<RequestHandlerExecutionResult<ParsedResult> | null> {\n    if (this.isUsed && this.options?.once) {\n      return null\n    }\n\n    // Clone the request.\n    // If this is the first time MSW handles this request, a fresh clone\n    // will be created and cached. Upon further handling of the same request,\n    // the request clone from the cache will be reused to prevent abundant\n    // \"abort\" listeners and save up resources on cloning.\n    const requestClone = this.cloneRequestOrGetFromCache(args.request)\n\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext,\n    })\n    const shouldInterceptRequest = await this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext,\n    })\n\n    if (!shouldInterceptRequest) {\n      return null\n    }\n\n    // Re-check isUsed, in case another request hit this handler while we were\n    // asynchronously parsing the request.\n    if (this.isUsed && this.options?.once) {\n      return null\n    }\n\n    // Preemptively mark the handler as used.\n    // Generators will undo this because only when the resolver reaches the\n    // \"done\" state of the generator that it considers the handler used.\n    this.isUsed = true\n\n    // Create a response extraction wrapper around the resolver\n    // since it can be both an async function and a generator.\n    const executeResolver = this.wrapResolver(this.resolver)\n\n    const resolverExtras = this.extendResolverArgs({\n      request: args.request,\n      parsedResult,\n    })\n\n    const mockedResponsePromise = (\n      executeResolver({\n        ...resolverExtras,\n        requestId: args.requestId,\n        request: args.request,\n      }) as Promise<Response>\n    ).catch((errorOrResponse) => {\n      // Allow throwing a Response instance in a response resolver.\n      if (errorOrResponse instanceof Response) {\n        return errorOrResponse\n      }\n\n      // Otherwise, throw the error as-is.\n      throw errorOrResponse\n    })\n\n    const mockedResponse = await mockedResponsePromise\n\n    const executionResult = this.createExecutionResult({\n      // Pass the cloned request to the result so that logging\n      // and other consumers could read its body once more.\n      request: requestClone,\n      requestId: args.requestId,\n      response: mockedResponse,\n      parsedResult,\n    })\n\n    return executionResult\n  }\n\n  private wrapResolver(\n    resolver: ResponseResolver<ResolverExtras>,\n  ): ResponseResolver<ResolverExtras> {\n    return async (info): Promise<ResponseResolverReturnType<any>> => {\n      if (!this.resolverIterator) {\n        const result = await resolver(info)\n\n        if (!isIterable(result)) {\n          return result\n        }\n\n        this.resolverIterator =\n          Symbol.iterator in result\n            ? result[Symbol.iterator]()\n            : result[Symbol.asyncIterator]()\n      }\n\n      // Opt-out from marking this handler as used.\n      this.isUsed = false\n\n      const { done, value } = await this.resolverIterator.next()\n      const nextResponse = await value\n\n      if (nextResponse) {\n        this.resolverIteratorResult = nextResponse.clone()\n      }\n\n      if (done) {\n        // A one-time generator resolver stops affecting the network\n        // only after it's been completely exhausted.\n        this.isUsed = true\n\n        // Clone the previously stored response so it can be read\n        // when receiving it repeatedly from the \"done\" generator.\n        return this.resolverIteratorResult?.clone()\n      }\n\n      return nextResponse\n    }\n  }\n\n  private createExecutionResult(args: {\n    request: Request\n    requestId: string\n    parsedResult: ParsedResult\n    response?: Response\n  }): RequestHandlerExecutionResult<ParsedResult> {\n    return {\n      handler: this,\n      request: args.request,\n      requestId: args.requestId,\n      response: args.response,\n      parsedResult: args.parsedResult,\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}