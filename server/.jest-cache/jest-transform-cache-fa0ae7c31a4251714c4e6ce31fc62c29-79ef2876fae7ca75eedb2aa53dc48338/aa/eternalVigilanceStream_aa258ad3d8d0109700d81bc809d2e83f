a7f3817169895f6772539bfa6ef608ff
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Do not import vigilance or sseTokenService at module load time so tests can mock them with jest.doMock

const router = _express().default.Router();

// Allow EventSource to authenticate via query param: /stream?token=xxx
router.get('/stream', async (req, res) => {
  // prefer token from cookie (praevisio_sse_token), fallback to query param for backward compatibility
  const cookieToken = req.cookies && req.cookies.praevisio_sse_token ? String(req.cookies.praevisio_sse_token) : '';
  const token = cookieToken || (req.query && (req.query.token || req.query.auth) ? String(req.query.token || req.query.auth) : '');
  const expected = process.env.PRAEVISIO_BEARER_TOKEN || 'demo-token';

  // require services at request time so tests can override them
  const sseTokenService = require('../sseTokenService.js').default || require('../sseTokenService.js');
  const vigilance = require('../eternalVigilanceService.js').default || require('../eternalVigilanceService.js');
  const okStatic = token && token === expected;
  const okTemp = token && (await sseTokenService.validateToken(token));
  if (!okStatic && !okTemp) {
    // return 401 to the client
    res.status(401).json({
      error: 'Unauthorized - invalid token'
    });
    return;
  }
  // headers SSE
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
  res.flushHeaders && res.flushHeaders();

  // send initial state
  // send initial state (stringified event)
  try {
    const state = typeof vigilance.getState === 'function' ? vigilance.getState() : {};
    res.write(`data: ${JSON.stringify({
      event: 'init',
      state
    })}\n\n`);
  } catch (e) {
    // ignore write errors
  }
  if (typeof vigilance.subscribe === 'function') vigilance.subscribe(res);
  req.on('close', () => {
    if (typeof vigilance.unsubscribe === 'function') vigilance.unsubscribe(res);
  });
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInJvdXRlciIsImV4cHJlc3MiLCJSb3V0ZXIiLCJnZXQiLCJyZXEiLCJyZXMiLCJjb29raWVUb2tlbiIsImNvb2tpZXMiLCJwcmFldmlzaW9fc3NlX3Rva2VuIiwiU3RyaW5nIiwidG9rZW4iLCJxdWVyeSIsImF1dGgiLCJleHBlY3RlZCIsInByb2Nlc3MiLCJlbnYiLCJQUkFFVklTSU9fQkVBUkVSX1RPS0VOIiwic3NlVG9rZW5TZXJ2aWNlIiwidmlnaWxhbmNlIiwib2tTdGF0aWMiLCJva1RlbXAiLCJ2YWxpZGF0ZVRva2VuIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwic2V0SGVhZGVyIiwiZmx1c2hIZWFkZXJzIiwic3RhdGUiLCJnZXRTdGF0ZSIsIndyaXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsImV2ZW50Iiwic3Vic2NyaWJlIiwib24iLCJ1bnN1YnNjcmliZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImV0ZXJuYWxWaWdpbGFuY2VTdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG4vLyBEbyBub3QgaW1wb3J0IHZpZ2lsYW5jZSBvciBzc2VUb2tlblNlcnZpY2UgYXQgbW9kdWxlIGxvYWQgdGltZSBzbyB0ZXN0cyBjYW4gbW9jayB0aGVtIHdpdGggamVzdC5kb01vY2tcblxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuLy8gQWxsb3cgRXZlbnRTb3VyY2UgdG8gYXV0aGVudGljYXRlIHZpYSBxdWVyeSBwYXJhbTogL3N0cmVhbT90b2tlbj14eHhcbnJvdXRlci5nZXQoJy9zdHJlYW0nLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgLy8gcHJlZmVyIHRva2VuIGZyb20gY29va2llIChwcmFldmlzaW9fc3NlX3Rva2VuKSwgZmFsbGJhY2sgdG8gcXVlcnkgcGFyYW0gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgY29uc3QgY29va2llVG9rZW4gPSByZXEuY29va2llcyAmJiByZXEuY29va2llcy5wcmFldmlzaW9fc3NlX3Rva2VuID8gU3RyaW5nKHJlcS5jb29raWVzLnByYWV2aXNpb19zc2VfdG9rZW4pIDogJyc7XG4gIGNvbnN0IHRva2VuID0gY29va2llVG9rZW4gfHwgKHJlcS5xdWVyeSAmJiAocmVxLnF1ZXJ5LnRva2VuIHx8IHJlcS5xdWVyeS5hdXRoKSA/IFN0cmluZyhyZXEucXVlcnkudG9rZW4gfHwgcmVxLnF1ZXJ5LmF1dGgpIDogJycpO1xuICBjb25zdCBleHBlY3RlZCA9IHByb2Nlc3MuZW52LlBSQUVWSVNJT19CRUFSRVJfVE9LRU4gfHwgJ2RlbW8tdG9rZW4nO1xuXG4gIC8vIHJlcXVpcmUgc2VydmljZXMgYXQgcmVxdWVzdCB0aW1lIHNvIHRlc3RzIGNhbiBvdmVycmlkZSB0aGVtXG4gIGNvbnN0IHNzZVRva2VuU2VydmljZSA9IHJlcXVpcmUoJy4uL3NzZVRva2VuU2VydmljZS5qcycpLmRlZmF1bHQgfHwgcmVxdWlyZSgnLi4vc3NlVG9rZW5TZXJ2aWNlLmpzJyk7XG4gIGNvbnN0IHZpZ2lsYW5jZSA9IHJlcXVpcmUoJy4uL2V0ZXJuYWxWaWdpbGFuY2VTZXJ2aWNlLmpzJykuZGVmYXVsdCB8fCByZXF1aXJlKCcuLi9ldGVybmFsVmlnaWxhbmNlU2VydmljZS5qcycpO1xuXG4gIGNvbnN0IG9rU3RhdGljID0gdG9rZW4gJiYgdG9rZW4gPT09IGV4cGVjdGVkO1xuICBjb25zdCBva1RlbXAgPSB0b2tlbiAmJiAoYXdhaXQgc3NlVG9rZW5TZXJ2aWNlLnZhbGlkYXRlVG9rZW4odG9rZW4pKTtcbiAgaWYgKCFva1N0YXRpYyAmJiAhb2tUZW1wKSB7XG4gICAgLy8gcmV0dXJuIDQwMSB0byB0aGUgY2xpZW50XG4gICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCAtIGludmFsaWQgdG9rZW4nIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBoZWFkZXJzIFNTRVxuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9ldmVudC1zdHJlYW0nKTtcbiAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICduby1jYWNoZScpO1xuICByZXMuc2V0SGVhZGVyKCdDb25uZWN0aW9uJywgJ2tlZXAtYWxpdmUnKTtcbiAgcmVzLmZsdXNoSGVhZGVycyAmJiByZXMuZmx1c2hIZWFkZXJzKCk7XG5cbiAgLy8gc2VuZCBpbml0aWFsIHN0YXRlXG4gIC8vIHNlbmQgaW5pdGlhbCBzdGF0ZSAoc3RyaW5naWZpZWQgZXZlbnQpXG4gIHRyeSB7XG4gICAgY29uc3Qgc3RhdGUgPSAodHlwZW9mIHZpZ2lsYW5jZS5nZXRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJykgPyB2aWdpbGFuY2UuZ2V0U3RhdGUoKSA6IHt9O1xuICAgIHJlcy53cml0ZShgZGF0YTogJHtKU09OLnN0cmluZ2lmeSh7IGV2ZW50OiAnaW5pdCcsIHN0YXRlIH0pfVxcblxcbmApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaWdub3JlIHdyaXRlIGVycm9yc1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2aWdpbGFuY2Uuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSB2aWdpbGFuY2Uuc3Vic2NyaWJlKHJlcyk7XG5cbiAgcmVxLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHZpZ2lsYW5jZS51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgdmlnaWxhbmNlLnVuc3Vic2NyaWJlKHJlcyk7XG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBQUEsU0FBQTtFQUFBLE1BQUFDLElBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtFQUFBSCxRQUFBLFlBQUFBLENBQUE7SUFBQSxPQUFBQyxJQUFBO0VBQUE7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