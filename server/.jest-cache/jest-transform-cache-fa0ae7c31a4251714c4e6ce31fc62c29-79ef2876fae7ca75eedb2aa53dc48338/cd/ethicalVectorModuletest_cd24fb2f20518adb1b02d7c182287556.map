{"version":3,"names":["_ethicalVectorModule","require","describe","test","riskIndices","famineRisk","value","supplyChainRisk","expect","calculateHumanImpact","toBe","result","toBeCloseTo","geophysicalRisk","calculateEnvironmentalSustainability","countries","affectedRegions","calculateSocialEquity","communityResilienceRisk","climateExtremesRisk","calculatePrivacyRisk","calculateAlgorithmicJustice","calculateEthicalVector","toHaveProperty","vector","toHaveLength","components","Array","fill","assessment","overallScore"],"sources":["ethicalVectorModule.test.js"],"sourcesContent":["/**\n * @fileoverview Tests for Ethical Vector Module\n */\n\nimport {\n  calculateHumanImpact,\n  calculateEnvironmentalSustainability,\n  calculateSocialEquity,\n  calculatePrivacyRisk,\n  calculateAlgorithmicJustice,\n  calculateEthicalVector,\n} from '../../src/services/ethicalVectorModule.js';\n\ndescribe('Ethical Vector Module', () => {\n  describe('calculateHumanImpact', () => {\n    test('should return 0 when no risks are present', () => {\n      const riskIndices = {\n        famineRisk: { value: 0 },\n        supplyChainRisk: { value: 0 },\n      };\n      expect(calculateHumanImpact(riskIndices)).toBe(0);\n    });\n\n    test('should calculate human impact based on famine and supply chain risks', () => {\n      const riskIndices = {\n        famineRisk: { value: 50 },\n        supplyChainRisk: { value: 30 },\n      };\n      const result = calculateHumanImpact(riskIndices);\n      // (50/100 * 0.7) + (30/100 * 0.3) = 0.35 + 0.09 = 0.44\n      expect(result).toBeCloseTo(0.44, 2);\n    });\n\n    test('should cap human impact at 1.0', () => {\n      const riskIndices = {\n        famineRisk: { value: 100 },\n        supplyChainRisk: { value: 100 },\n      };\n      expect(calculateHumanImpact(riskIndices)).toBe(1.0);\n    });\n  });\n\n  describe('calculateEnvironmentalSustainability', () => {\n    test('should return 0 when no geophysical risk', () => {\n      const riskIndices = {\n        geophysicalRisk: { value: 0 },\n      };\n      expect(calculateEnvironmentalSustainability(riskIndices)).toBe(0);\n    });\n\n    test('should calculate environmental sustainability based on geophysical risk', () => {\n      const riskIndices = {\n        geophysicalRisk: { value: 75 },\n      };\n      expect(calculateEnvironmentalSustainability(riskIndices)).toBe(0.75);\n    });\n  });\n\n  describe('calculateSocialEquity', () => {\n    test('should return 0 when no affected regions or countries', () => {\n      const riskIndices = {\n        famineRisk: { countries: [] },\n        supplyChainRisk: { affectedRegions: [] },\n      };\n      expect(calculateSocialEquity(riskIndices)).toBe(0);\n    });\n\n    test('should calculate social equity based on famine countries and affected regions', () => {\n      const riskIndices = {\n        famineRisk: { countries: ['Country1', 'Country2', 'Country3'] },\n        supplyChainRisk: { affectedRegions: ['Region1', 'Region2'] },\n      };\n      const result = calculateSocialEquity(riskIndices);\n      // famineEquity = 3/50 = 0.06\n      // supplyEquity = 2/20 = 0.1\n      // combined = (0.06 * 0.6) + (0.1 * 0.4) = 0.036 + 0.04 = 0.076\n      expect(result).toBeCloseTo(0.076, 3);\n    });\n  });\n\n  describe('calculatePrivacyRisk', () => {\n    test('should return 0 when no community or climate risks', () => {\n      const riskIndices = {\n        communityResilienceRisk: { value: 0 },\n        climateExtremesRisk: { value: 0 },\n      };\n      expect(calculatePrivacyRisk(riskIndices)).toBe(0);\n    });\n\n    test('should calculate privacy risk based on community and climate data exposure', () => {\n      const riskIndices = {\n        communityResilienceRisk: { value: 40 },\n        climateExtremesRisk: { value: 60 },\n      };\n      const result = calculatePrivacyRisk(riskIndices);\n      // communityExposure = 40/100 = 0.4\n      // climateExposure = 60/100 = 0.6\n      // combined = (0.4 * 0.6) + (0.6 * 0.4) = 0.24 + 0.24 = 0.48\n      expect(result).toBeCloseTo(0.48, 2);\n    });\n  });\n\n  describe('calculateAlgorithmicJustice', () => {\n    test('should return 0 when no famine or geophysical risks', () => {\n      const riskIndices = {\n        famineRisk: { countries: [] },\n        geophysicalRisk: { value: 0 },\n      };\n      expect(calculateAlgorithmicJustice(riskIndices)).toBe(0);\n    });\n\n    test('should calculate algorithmic justice based on risk concentration', () => {\n      const riskIndices = {\n        famineRisk: { countries: ['A', 'B', 'C', 'D', 'E'] }, // 5 countries\n        geophysicalRisk: { value: 80 },\n      };\n      const result = calculateAlgorithmicJustice(riskIndices);\n      // famineConcentration = min(1, 5/10) = 0.5\n      // geoConcentration = 80/100 = 0.8\n      // combined = (0.5 * 0.5) + (0.8 * 0.5) = 0.25 + 0.4 = 0.65\n      expect(result).toBeCloseTo(0.65, 2);\n    });\n  });\n\n  describe('calculateEthicalVector', () => {\n    test('should return complete ethical vector with all components', () => {\n      const riskIndices = {\n        famineRisk: { value: 40, countries: ['A', 'B'] },\n        geophysicalRisk: { value: 60 },\n        supplyChainRisk: { value: 20, affectedRegions: ['X'] },\n        communityResilienceRisk: { value: 30 },\n        climateExtremesRisk: { value: 50 },\n      };\n\n      const result = calculateEthicalVector(riskIndices);\n\n      expect(result).toHaveProperty('vector');\n      expect(result.vector).toHaveLength(5);\n      expect(result).toHaveProperty('components');\n      expect(result.components).toHaveProperty('humanImpact');\n      expect(result.components).toHaveProperty('environmentalSustainability');\n      expect(result.components).toHaveProperty('socialEquity');\n      expect(result.components).toHaveProperty('privacyRisk');\n      expect(result.components).toHaveProperty('algorithmicJustice');\n      expect(result).toHaveProperty('overallScore');\n      expect(result).toHaveProperty('assessment');\n      expect(result).toHaveProperty('timestamp');\n    });\n\n    test('should classify as High Ethical Concern when score > 0.7', () => {\n      const riskIndices = {\n        famineRisk: { value: 100, countries: Array(50).fill('Country') }, // 50 countries\n        geophysicalRisk: { value: 100 },\n        supplyChainRisk: { value: 100, affectedRegions: Array(20).fill('Region') }, // 20 regions\n        communityResilienceRisk: { value: 100 },\n        climateExtremesRisk: { value: 100 },\n      };\n\n      const result = calculateEthicalVector(riskIndices);\n      expect(result.assessment).toBe('High Ethical Concern');\n      expect(result.overallScore).toBeCloseTo(1.0, 1);\n    });\n\n    test('should classify as Medium Ethical Concern when score 0.4-0.7', () => {\n      const riskIndices = {\n        famineRisk: { value: 50, countries: ['A', 'B', 'C', 'D', 'E'] }, // 5 countries\n        geophysicalRisk: { value: 50 },\n        supplyChainRisk: { value: 50, affectedRegions: ['Region1', 'Region2'] }, // 2 regions\n        communityResilienceRisk: { value: 50 },\n        climateExtremesRisk: { value: 50 },\n      };\n\n      const result = calculateEthicalVector(riskIndices);\n      expect(result.assessment).toBe('Medium Ethical Concern');\n    });\n\n    test('should classify as Low Ethical Concern when score < 0.4', () => {\n      const riskIndices = {\n        famineRisk: { value: 10 },\n        geophysicalRisk: { value: 10 },\n        supplyChainRisk: { value: 10 },\n        communityResilienceRisk: { value: 10 },\n        climateExtremesRisk: { value: 10 },\n      };\n\n      const result = calculateEthicalVector(riskIndices);\n      expect(result.assessment).toBe('Low Ethical Concern');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}