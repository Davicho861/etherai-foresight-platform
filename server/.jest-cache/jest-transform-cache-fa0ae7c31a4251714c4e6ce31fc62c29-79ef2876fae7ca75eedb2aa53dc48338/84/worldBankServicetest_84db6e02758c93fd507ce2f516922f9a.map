{"version":3,"names":["_getJestObj","mock","jest","fn","mockImplementation","getFoodSecurityData","require","getFoodSecurityIndex","global","fetch","describe","mockWorldBankIntegration","beforeEach","clearAllMocks","MockWorldBankIntegration","afterEach","resetModules","it","mockApiData","data","countryCode","value","year","country","countries","period","endYear","source","summary","averageValue","mockResolvedValue","result","expect","toHaveBeenCalledWith","toEqual","COL","PER","globalAverage","mockRejectedValue","Error","mockServerlessData","ok","json","Promise","resolve","malformedData","undefined","dataWithNulls","toBe","mixedFormatData","testData","originalEnv","process","env","WORLDBANK_SERVERLESS_URL","fail","error","message","toContain","customUrl"],"sources":["worldBankService.test.js"],"sourcesContent":["const { getFoodSecurityIndex } = require('../../src/services/worldBankService');\n\n// Mock the WorldBankIntegration\njest.mock('../../src/integrations/WorldBankIntegration.js', () => {\n  return jest.fn().mockImplementation(() => ({\n    getFoodSecurityData: jest.fn(),\n  }));\n});\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe('worldBankService', () => {\n  let mockWorldBankIntegration;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Get the mock constructor and instance\n    const MockWorldBankIntegration = require('../../src/integrations/WorldBankIntegration.js');\n    mockWorldBankIntegration = new MockWorldBankIntegration();\n  });\n\n  afterEach(() => {\n    // Clear the cached instance\n    jest.resetModules();\n  });\n\n  describe('getFoodSecurityIndex', () => {\n    it('should return data from WorldBankIntegration when available', async () => {\n      const mockApiData = {\n        data: [\n          { countryCode: 'COL', value: 15.5, year: '2024', country: 'Colombia' },\n          { countryCode: 'PER', value: 12.3, year: '2024', country: 'Peru' },\n        ],\n        countries: ['COL', 'PER'],\n        period: { endYear: 2024 },\n        source: 'World Bank API',\n        summary: { averageValue: 13.9 },\n      };\n\n      mockWorldBankIntegration.getFoodSecurityData.mockResolvedValue(mockApiData);\n\n      const result = await getFoodSecurityIndex();\n\n      expect(mockWorldBankIntegration.getFoodSecurityData).toHaveBeenCalledWith(\n        ['COL', 'PER'],\n        '2020',\n        '2024'\n      );\n\n      expect(result).toEqual({\n        countries: ['COL', 'PER'],\n        year: 2024,\n        source: 'World Bank Integration',\n        data: {\n          COL: { value: 15.5, year: '2024', country: 'Colombia' },\n          PER: { value: 12.3, year: '2024', country: 'Peru' },\n        },\n        globalAverage: 13.9,\n      });\n    });\n\n    it('should handle WorldBankIntegration errors and fallback to serverless endpoint', async () => {\n      mockWorldBankIntegration.getFoodSecurityData.mockRejectedValue(\n        new Error('Integration failed')\n      );\n\n      const mockServerlessData = {\n        data: [\n          { countryCode: 'COL', value: 16.0, year: '2024', country: 'Colombia' },\n        ],\n        countries: ['COL'],\n        period: { endYear: 2024 },\n        source: 'Serverless API',\n        summary: { averageValue: 16.0 },\n      };\n\n      global.fetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockServerlessData),\n      });\n\n      const result = await getFoodSecurityIndex();\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        'http://localhost:4010/api/global-risk/food-security'\n      );\n\n      expect(result).toEqual({\n        countries: ['COL'],\n        year: 2024,\n        source: 'World Bank Serverless',\n        data: {\n          COL: { value: 16.0, year: '2024', country: 'Colombia' },\n        },\n        globalAverage: 16.0,\n      });\n    });\n\n    it('should handle serverless endpoint failure and return fallback data', async () => {\n      mockWorldBankIntegration.getFoodSecurityData.mockRejectedValue(\n        new Error('Integration failed')\n      );\n\n      global.fetch.mockRejectedValue(new Error('Network error'));\n\n      const result = await getFoodSecurityIndex();\n\n      expect(result).toEqual({\n        countries: ['COL', 'PER'],\n        year: 2024,\n        source: 'Fallback Mock Data - WorldBank',\n        data: {\n          COL: { value: 0, year: '2024', country: 'Colombia' },\n          PER: { value: 0, year: '2024', country: 'Peru' },\n        },\n        globalAverage: null,\n      });\n    });\n\n    it('should handle malformed API data gracefully', async () => {\n      const malformedData = {\n        data: null, // Invalid data structure\n        countries: undefined,\n      };\n\n      mockWorldBankIntegration.getFoodSecurityData.mockResolvedValue(malformedData);\n\n      const result = await getFoodSecurityIndex();\n\n      expect(result).toEqual({\n        countries: [],\n        year: 2024,\n        source: 'World Bank Integration',\n        data: {},\n        globalAverage: null,\n      });\n    });\n\n    it('should handle null values in data correctly', async () => {\n      const dataWithNulls = {\n        data: [\n          { countryCode: 'COL', value: null, year: '2024', country: 'Colombia' },\n          { countryCode: 'PER', value: 10.5, year: '2024', country: 'Peru' },\n        ],\n        countries: ['COL', 'PER'],\n        period: { endYear: 2024 },\n      };\n\n      mockWorldBankIntegration.getFoodSecurityData.mockResolvedValue(dataWithNulls);\n\n      const result = await getFoodSecurityIndex();\n\n      expect(result.data).toEqual({\n        COL: { value: null, year: '2024', country: 'Colombia' },\n        PER: { value: 10.5, year: '2024', country: 'Peru' },\n      });\n      expect(result.globalAverage).toBe(10.5); // Should exclude null values\n    });\n\n    it('should handle different country code formats', async () => {\n      const mixedFormatData = {\n        data: [\n          { countryCode: 'col', value: 15.0, year: '2024', country: 'Colombia' }, // lowercase\n          { countryCode: 'Per', value: 12.0, year: '2024', country: 'Peru' }, // mixed case\n        ],\n        countries: ['col', 'Per'],\n        period: { endYear: 2024 },\n      };\n\n      mockWorldBankIntegration.getFoodSecurityData.mockResolvedValue(mixedFormatData);\n\n      const result = await getFoodSecurityIndex();\n\n      expect(result.data).toEqual({\n        COL: { value: 15.0, year: '2024', country: 'Colombia' },\n        PER: { value: 12.0, year: '2024', country: 'Peru' },\n      });\n    });\n\n    it('should calculate global average correctly', async () => {\n      const testData = {\n        data: [\n          { countryCode: 'COL', value: 10, year: '2024', country: 'Colombia' },\n          { countryCode: 'PER', value: 20, year: '2024', country: 'Peru' },\n          { countryCode: 'ARG', value: 30, year: '2024', country: 'Argentina' },\n        ],\n        countries: ['COL', 'PER', 'ARG'],\n        period: { endYear: 2024 },\n      };\n\n      mockWorldBankIntegration.getFoodSecurityData.mockResolvedValue(testData);\n\n      const result = await getFoodSecurityIndex();\n\n      expect(result.globalAverage).toBe(20); // (10 + 20 + 30) / 3\n    });\n\n    it('should throw error when all integrations fail and no fallback available', async () => {\n      mockWorldBankIntegration.getFoodSecurityData.mockRejectedValue(\n        new Error('Integration failed')\n      );\n\n      global.fetch.mockRejectedValue(new Error('Network error'));\n\n      // Mock process.env to remove WORLDBANK_SERVERLESS_URL\n      const originalEnv = process.env;\n      delete process.env.WORLDBANK_SERVERLESS_URL;\n\n      try {\n        await getFoodSecurityIndex();\n        fail('Should have thrown an error');\n      } catch (error) {\n        expect(error.message).toContain('Integration failed');\n      } finally {\n        process.env = originalEnv;\n      }\n    });\n\n    it('should use custom serverless URL from environment', async () => {\n      mockWorldBankIntegration.getFoodSecurityData.mockRejectedValue(\n        new Error('Integration failed')\n      );\n\n      const customUrl = 'https://custom-api.example.com/food-security';\n      process.env.WORLDBANK_SERVERLESS_URL = customUrl;\n\n      global.fetch.mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve({\n          data: [{ countryCode: 'COL', value: 15.0, year: '2024', country: 'Colombia' }],\n          countries: ['COL'],\n          period: { endYear: 2024 },\n        }),\n      });\n\n      await getFoodSecurityIndex();\n\n      expect(global.fetch).toHaveBeenCalledWith(customUrl);\n\n      delete process.env.WORLDBANK_SERVERLESS_URL;\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}