{"version":3,"names":["_express","data","_interopRequireDefault","require","_SIMIntegration","_MINAGRIIntegration","_INEIIntegration","e","__esModule","default","router","express","Router","simIntegration","SIMIntegration","minagriIntegration","MINAGRIIntegration","ineiIntegration","INEIIntegration","get","req","res","products","prices","product","priceResult","getFoodPrices","volatilityResult","getVolatilityIndex","priceData","Error","currentPrice","volatility","volatilityIndex","predictedPrice","push","confidence","source","isMock","productError","console","error","averageVolatility","reduce","sum","p","length","riskLevel","highRiskProducts","filter","map","json","country","timestamp","Date","summary","Math","round","recommendation","join","err","status","regions","routes","region","capacityResult","getSupplyChainCapacity","capacityData","capacity","distance","cost","efficiency","regionError","optimizedRoutes","sort","a","b","optimization","totalCapacity","r","averageCost","recommendedRoutes","slice","post","timeframe","body","targetRegion","Promise","all","productionResult","getAgriculturalProduction","getFullYear","baseChange","productionAdjustment","productionData","production","factors","prediction","max","dataSources","usedMockData","_default","exports"],"sources":["food-resilience.js"],"sourcesContent":["import express from 'express';\nimport SIMIntegration from '../integrations/SIMIntegration.js';\nimport MINAGRIIntegration from '../integrations/MINAGRIIntegration.js';\nimport INEIIntegration from '../integrations/INEIIntegration.js';\n\nconst router = express.Router();\n\n// Initialize integrations\nconst simIntegration = new SIMIntegration();\nconst minagriIntegration = new MINAGRIIntegration();\nconst ineiIntegration = new INEIIntegration();\n\n// GET /api/food-resilience/prices\nrouter.get('/prices', async (req, res) => {\n  try {\n    const products = ['rice', 'potatoes', 'corn', 'beans'];\n    const prices = [];\n\n    for (const product of products) {\n      try {\n        // Get current price from SIM\n        const priceResult = await simIntegration.getFoodPrices(product, 'Lima');\n        const volatilityResult = await simIntegration.getVolatilityIndex(product, 'Lima');\n\n        if (!priceResult || !priceResult.priceData || !volatilityResult) {\n          throw new Error('Invalid integration response');\n        }\n\n        // Simple prediction model based on volatility\n        const currentPrice = priceResult.priceData.currentPrice;\n        const volatility = volatilityResult.volatilityIndex;\n        const predictedPrice = currentPrice * (1 + volatility * 0.1);\n\n        prices.push({\n          product,\n          currentPrice,\n          predictedPrice,\n          volatilityIndex: volatility,\n          confidence: 0.87,\n          source: priceResult.isMock ? 'Mock SIM Data' : 'SIM MINAGRI',\n          isMock: priceResult.isMock\n        });\n      } catch (productError) {\n        console.error(`Error fetching data for ${product}:`, productError);\n        // Add fallback data\n        prices.push({\n          product,\n          currentPrice: 3.00,\n          predictedPrice: 3.15,\n          volatilityIndex: 0.15,\n          confidence: 0.5,\n          source: 'Fallback Data'\n        });\n      }\n    }\n\n    // Calculate summary statistics\n    const averageVolatility = prices.reduce((sum, p) => sum + p.volatilityIndex, 0) / prices.length;\n    const riskLevel = averageVolatility > 0.15 ? 'high' : averageVolatility > 0.10 ? 'medium' : 'low';\n    const highRiskProducts = prices.filter(p => p.volatilityIndex > 0.15).map(p => p.product);\n\n    res.json({\n      country: 'Peru',\n      timestamp: new Date(),\n      prices,\n      summary: {\n        averageVolatility: Math.round(averageVolatility * 1000) / 1000,\n        riskLevel,\n        recommendation: highRiskProducts.length > 0\n          ? `Implement buffer stocks for ${highRiskProducts.join(', ')}`\n          : 'Market conditions stable'\n      }\n    });\n  } catch (err) {\n    console.error('Error fetching food prices:', err);\n    res.status(500).json({ error: 'internal_error' });\n  }\n});\n\n// GET /api/food-resilience/supply-chain\nrouter.get('/supply-chain', async (req, res) => {\n  try {\n    const regions = ['Lima', 'Arequipa', 'Cusco', 'Trujillo'];\n    const routes = [];\n\n    for (const region of regions) {\n      try {\n        // Get supply chain capacity from MINAGRI\n        const capacityResult = await minagriIntegration.getSupplyChainCapacity(region);\n\n        if (!capacityResult || !capacityResult.capacityData || !capacityResult.capacityData[0]) {\n          throw new Error('Invalid capacity data');\n        }\n\n        const capacityData = capacityResult.capacityData[0];\n\n        routes.push({\n            region,\n            capacity: capacityData.capacity,\n            distance: capacityData.distance,\n            isMock: capacityResult.isMock,\n          cost: capacityData.cost,\n          efficiency: capacityData.capacity / capacityData.cost,\n          source: capacityResult.isMock ? 'Mock MINAGRI Data' : 'MINAGRI'\n        });\n      } catch (regionError) {\n        console.error(`Error fetching capacity for ${region}:`, regionError);\n        // Add fallback data\n        routes.push({\n          region,\n          capacity: 75,\n          distance: 400,\n          cost: 1.8,\n          efficiency: 75 / 1.8,\n          source: 'Fallback Data'\n        });\n      }\n    }\n\n    // Sort by cost efficiency\n    const optimizedRoutes = routes.sort((a, b) => b.efficiency - a.efficiency);\n\n    res.json({\n      country: 'Peru',\n      timestamp: new Date(),\n      routes: optimizedRoutes,\n      optimization: {\n        totalCapacity: optimizedRoutes.reduce((sum, r) => sum + r.capacity, 0),\n        averageCost: Math.round((optimizedRoutes.reduce((sum, r) => sum + r.cost, 0) / optimizedRoutes.length) * 100) / 100,\n        recommendedRoutes: optimizedRoutes.slice(0, 2).map(r => r.region)\n      }\n    });\n  } catch (err) {\n    console.error('Error fetching supply chain data:', err);\n    res.status(500).json({ error: 'internal_error' });\n  }\n});\n\n// POST /api/food-resilience/predict\nrouter.post('/predict', async (req, res) => {\n  try {\n    const { product, timeframe, region } = req.body;\n\n    if (!product) {\n      return res.status(400).json({ error: 'invalid_product' });\n    }\n\n    const targetRegion = region || 'Lima';\n\n    // Get current price and volatility from SIM\n    const [priceResult, volatilityResult] = await Promise.all([\n      simIntegration.getFoodPrices(product, targetRegion),\n      simIntegration.getVolatilityIndex(product, targetRegion)\n    ]);\n\n    if (!priceResult || !priceResult.priceData || !volatilityResult) {\n      throw new Error('Invalid price or volatility data');\n    }\n\n    const currentPrice = priceResult.priceData.currentPrice;\n    const volatility = volatilityResult.volatilityIndex;\n\n    // Get production data from MINAGRI for context\n    const productionResult = await minagriIntegration.getAgriculturalProduction(product, new Date().getFullYear());\n\n    // Enhanced prediction model considering multiple factors\n    const baseChange = volatility * 0.1; // Base change from volatility\n    const productionAdjustment = (productionResult && productionResult.productionData && productionResult.productionData[0]?.production > 2000000) ? -0.02 : 0.02; // Supply effect\n    const predictedPrice = currentPrice * (1 + baseChange + productionAdjustment);\n\n    // Determine factors based on data\n    const factors = [\n      'Weather patterns',\n      'Import costs',\n      'Local production',\n      'Market demand'\n    ];\n\n    if (volatility > 0.15) {\n      factors.push('High market volatility');\n    }\n\n      if (productionResult && productionResult.productionData && productionResult.productionData[0]?.production < 1500000) {\n        factors.push('Limited local production');\n      }\n\n      const prediction = {\n        product,\n        region: targetRegion,\n        currentPrice,\n        predictedPrice: Math.round(predictedPrice * 100) / 100,\n        timeframe: timeframe || '30_days',\n        confidence: Math.max(0.7, 0.9 - volatility * 2), // Lower confidence for high volatility\n        factors,\n        dataSources: {\n          prices: priceResult.isMock ? 'Mock SIM Data' : 'SIM MINAGRI',\n          production: (productionResult && productionResult.isMock) ? 'Mock MINAGRI Data' : 'MINAGRI',\n          volatility: volatilityResult.isMock ? 'Mock SIM Data' : 'SIM MINAGRI'\n        },\n        usedMockData: priceResult.isMock || volatilityResult.isMock || (productionResult && productionResult.isMock)\n      };    res.json(prediction);\n  } catch (err) {\n    console.error('Error generating prediction:', err);\n    res.status(500).json({ error: 'internal_error' });\n  }\n});\n\nexport default router;"],"mappings":"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","ignoreList":[]}