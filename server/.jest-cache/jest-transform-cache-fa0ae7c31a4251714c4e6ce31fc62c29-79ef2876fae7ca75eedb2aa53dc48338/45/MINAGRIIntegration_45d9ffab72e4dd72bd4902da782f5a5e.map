{"version":3,"names":["_safeFetch","_interopRequireDefault","require","_forceMocks","e","__esModule","default","MINAGRIIntegration","constructor","baseUrl","process","env","TEST_MODE","getAgriculturalProduction","product","year","resourceId","url","data","safeFetch","timeout","retries","records","result","productionData","map","record","producto","anio","production","parseFloat","produccion","unit","unidad","isMock","error","forceMocksEnabled","console","log","mockProductions","toLowerCase","source","Error","message","String","getSupplyChainCapacity","region","capacityData","capacity","parseInt","capacidad","distance","distancia","cost","costo","mockRegions","regionData","_default","exports"],"sources":["MINAGRIIntegration.js"],"sourcesContent":["import safeFetch from '../lib/safeFetch.js';\nimport { forceMocksEnabled } from '../lib/force-mocks.js';\n\nclass MINAGRIIntegration {\n  constructor() {\n    // MINAGRI API base URL - using datos abiertos portal\n    this.baseUrl = process.env.TEST_MODE === 'true'\n      ? 'http://mock-api-server:3001/minagri' // internal mock server\n      : 'https://www.datosabiertos.gob.pe/api/action/datastore_search';\n  }\n\n  async getAgriculturalProduction(product, year) {\n    try {\n      // Attempt to fetch real MINAGRI data\n      // Using datos abiertos API for agricultural production\n      const resourceId = 'produccion-agricola'; // Placeholder - would need actual resource ID\n      const url = `${this.baseUrl}?resource_id=${resourceId}&q=${product}&filters[anio]=${year}`;\n\n      const data = await safeFetch(url, {}, { timeout: 10000, retries: 2 });\n      const records = (data && data.result && data.result.records) ? data.result.records : [];\n\n      // Process records to get production data\n      const productionData = records.map(record => ({\n        product: record.producto || product,\n        year: record.anio || year,\n        production: parseFloat(record.produccion) || 0,\n        unit: record.unidad || 'tonnes'\n      }));\n\n      return {\n        product,\n        year,\n        productionData,\n        isMock: false\n      };\n    } catch (error) {\n      if (forceMocksEnabled()) {\n        console.log(`MINAGRIIntegration: returning FORCE_MOCKS mock for ${product} (${year})`);\n        const mockProductions = {\n          'rice': 2200000, // tonnes\n          'potatoes': 4500000,\n          'corn': 1800000,\n          'beans': 180000\n        };\n\n        return {\n          product,\n          year,\n          productionData: [{\n            product,\n            year,\n            production: mockProductions[product.toLowerCase()] || 1000000,\n            unit: 'tonnes'\n          }],\n          isMock: true,\n          source: 'FORCE_MOCKS:MINAGRI'\n        };\n      }\n\n      throw new Error(`MINAGRIIntegration failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n  async getSupplyChainCapacity(region) {\n    try {\n      // Attempt to fetch real supply chain data\n      const resourceId = 'capacidad-logistica'; // Placeholder\n      const url = `${this.baseUrl}?resource_id=${resourceId}&q=${region}`;\n\n      const data = await safeFetch(url, {}, { timeout: 10000, retries: 2 });\n      const records = (data && data.result && data.result.records) ? data.result.records : [];\n\n      const capacityData = records.map(record => ({\n        region: record.region || region,\n        capacity: parseInt(record.capacidad) || 80,\n        distance: parseInt(record.distancia) || 500,\n        cost: parseFloat(record.costo) || 2.0\n      }));\n\n      return {\n        region,\n        capacityData,\n        isMock: false\n      };\n    } catch (error) {\n      if (forceMocksEnabled()) {\n        console.log(`MINAGRIIntegration: returning FORCE_MOCKS mock for supply chain ${region}`);\n        const mockRegions = {\n          'Lima': { capacity: 85, distance: 0, cost: 1.2 },\n          'Arequipa': { capacity: 72, distance: 800, cost: 2.1 },\n          'Cusco': { capacity: 68, distance: 1200, cost: 2.8 },\n          'Trujillo': { capacity: 79, distance: 600, cost: 1.9 }\n        };\n\n        const regionData = mockRegions[region] || { capacity: 75, distance: 400, cost: 1.8 };\n\n        return {\n          region,\n          capacityData: [{\n            region,\n            capacity: regionData.capacity,\n            distance: regionData.distance,\n            cost: regionData.cost\n          }],\n          isMock: true,\n          source: 'FORCE_MOCKS:MINAGRI'\n        };\n      }\n\n      throw new Error(`MINAGRIIntegration failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n}\n\nexport default MINAGRIIntegration;"],"mappings":"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","ignoreList":[]}