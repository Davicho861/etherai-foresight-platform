{"version":3,"names":["until","callback","catch","error"],"sources":["../src/index.ts"],"sourcesContent":["export type UntilResult<RejectionReason, ResolveData> =\n  | [reason: RejectionReason, data: null]\n  | [reason: null, data: ResolveData]\n\n/**\n * Gracefully handles a callback that returns a promise.\n *\n * @example\n * await until(() => Promise.resolve(123))\n * // [null, 123]\n *\n * await until(() => Promise.reject(new Error('Oops!')))\n * // [new Error('Oops!'), null]\n */\nexport async function until<RejectionReason = Error, ResolveData = unknown>(\n  callback: () => Promise<ResolveData>,\n): Promise<UntilResult<RejectionReason, ResolveData>> {\n  try {\n    const data = await callback().catch((error) => {\n      throw error\n    })\n    return [null, data]\n  } catch (error: any) {\n    return [error, null]\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAcA,eAAsBA,MACpBC,QAAA,EACoD;EACpD,IAAI;IAIF,OAAO,CAAC,MAHK,MAAMA,QAAA,EAAU,CAACC,KAAA,CAAOC,KAAA,IAAU;MAC7C,MAAMA,KAAA;MACN,CACiB;WACZA,KAAA,EAAY;IACnB,OAAO,CAACA,KAAA,EAAO,KAAK","ignoreList":[]}