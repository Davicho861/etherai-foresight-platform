{"version":3,"names":["http_exports","__export","http","module","exports","__toCommonJS","import_HttpHandler","require","createHttpHandler","method","predicate","resolver","options","HttpHandler","all","head","HttpMethods","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","OPTIONS"],"sources":["../../src/core/http.ts"],"sourcesContent":["import {\n  DefaultBodyType,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './handlers/RequestHandler'\nimport {\n  HttpMethods,\n  HttpHandler,\n  HttpRequestResolverExtras,\n  HttpRequestPredicate,\n} from './handlers/HttpHandler'\nimport type { PathParams } from './utils/matching/matchRequestUrl'\n\nexport type HttpRequestHandler = <\n  Params extends PathParams<keyof Params> = PathParams,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  // Response body type MUST be undefined by default.\n  // This is how we can distinguish between a handler that\n  // returns plain \"Response\" and the one returning \"HttpResponse\"\n  // to enforce a stricter response body type.\n  ResponseBodyType extends DefaultBodyType = undefined,\n>(\n  predicate: HttpRequestPredicate<Params>,\n  resolver: HttpResponseResolver<Params, RequestBodyType, ResponseBodyType>,\n  options?: RequestHandlerOptions,\n) => HttpHandler\n\nexport type HttpResponseResolver<\n  Params extends PathParams<keyof Params> = PathParams,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  ResponseBodyType extends DefaultBodyType = DefaultBodyType,\n> = ResponseResolver<\n  HttpRequestResolverExtras<Params>,\n  RequestBodyType,\n  ResponseBodyType\n>\n\nfunction createHttpHandler<Method extends HttpMethods | RegExp>(\n  method: Method,\n): HttpRequestHandler {\n  return (predicate, resolver, options = {}) => {\n    return new HttpHandler(method, predicate, resolver, options)\n  }\n}\n\n/**\n * A namespace to intercept and mock HTTP requests.\n *\n * @example\n * http.get('/user', resolver)\n * http.post('/post/:id', resolver)\n *\n * @see {@link https://mswjs.io/docs/api/http `http` API reference}\n */\nexport const http = {\n  all: createHttpHandler(/.+/),\n  head: createHttpHandler(HttpMethods.HEAD),\n  get: createHttpHandler(HttpMethods.GET),\n  post: createHttpHandler(HttpMethods.POST),\n  put: createHttpHandler(HttpMethods.PUT),\n  delete: createHttpHandler(HttpMethods.DELETE),\n  patch: createHttpHandler(HttpMethods.PATCH),\n  options: createHttpHandler(HttpMethods.OPTIONS),\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,YAAA;AAAAC,QAAA,CAAAD,YAAA;EAAAE,IAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,YAAA;AAKA,IAAAM,kBAAA,GAKOC,OAAA;AA2BP,SAASC,kBACPC,MAAA,EACoB;EACpB,OAAO,CAACC,SAAA,EAAWC,QAAA,EAAUC,OAAA,GAAU,CAAC,MAAM;IAC5C,OAAO,IAAIN,kBAAA,CAAAO,WAAA,CAAYJ,MAAA,EAAQC,SAAA,EAAWC,QAAA,EAAUC,OAAO;EAC7D;AACF;AAWO,MAAMV,IAAA,GAAO;EAClBY,GAAA,EAAKN,iBAAA,CAAkB,IAAI;EAC3BO,IAAA,EAAMP,iBAAA,CAAkBF,kBAAA,CAAAU,WAAA,CAAYC,IAAI;EACxCC,GAAA,EAAKV,iBAAA,CAAkBF,kBAAA,CAAAU,WAAA,CAAYG,GAAG;EACtCC,IAAA,EAAMZ,iBAAA,CAAkBF,kBAAA,CAAAU,WAAA,CAAYK,IAAI;EACxCC,GAAA,EAAKd,iBAAA,CAAkBF,kBAAA,CAAAU,WAAA,CAAYO,GAAG;EACtCC,MAAA,EAAQhB,iBAAA,CAAkBF,kBAAA,CAAAU,WAAA,CAAYS,MAAM;EAC5CC,KAAA,EAAOlB,iBAAA,CAAkBF,kBAAA,CAAAU,WAAA,CAAYW,KAAK;EAC1Cf,OAAA,EAASJ,iBAAA,CAAkBF,kBAAA,CAAAU,WAAA,CAAYY,OAAO;AAChD","ignoreList":[]}