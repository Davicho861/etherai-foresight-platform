3feb6c3215030e2768151bda470ba1e6
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);
var http_exports = {};
__export(http_exports, {
  http: () => http
});
module.exports = __toCommonJS(http_exports);
var import_HttpHandler = require("./handlers/HttpHandler");
function createHttpHandler(method) {
  return (predicate, resolver, options = {}) => {
    return new import_HttpHandler.HttpHandler(method, predicate, resolver, options);
  };
}
const http = {
  all: createHttpHandler(/.+/),
  head: createHttpHandler(import_HttpHandler.HttpMethods.HEAD),
  get: createHttpHandler(import_HttpHandler.HttpMethods.GET),
  post: createHttpHandler(import_HttpHandler.HttpMethods.POST),
  put: createHttpHandler(import_HttpHandler.HttpMethods.PUT),
  delete: createHttpHandler(import_HttpHandler.HttpMethods.DELETE),
  patch: createHttpHandler(import_HttpHandler.HttpMethods.PATCH),
  options: createHttpHandler(import_HttpHandler.HttpMethods.OPTIONS)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodHRwX2V4cG9ydHMiLCJfX2V4cG9ydCIsImh0dHAiLCJtb2R1bGUiLCJleHBvcnRzIiwiX190b0NvbW1vbkpTIiwiaW1wb3J0X0h0dHBIYW5kbGVyIiwicmVxdWlyZSIsImNyZWF0ZUh0dHBIYW5kbGVyIiwibWV0aG9kIiwicHJlZGljYXRlIiwicmVzb2x2ZXIiLCJvcHRpb25zIiwiSHR0cEhhbmRsZXIiLCJhbGwiLCJoZWFkIiwiSHR0cE1ldGhvZHMiLCJIRUFEIiwiZ2V0IiwiR0VUIiwicG9zdCIsIlBPU1QiLCJwdXQiLCJQVVQiLCJkZWxldGUiLCJERUxFVEUiLCJwYXRjaCIsIlBBVENIIiwiT1BUSU9OUyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2h0dHAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGVmYXVsdEJvZHlUeXBlLFxuICBSZXF1ZXN0SGFuZGxlck9wdGlvbnMsXG4gIFJlc3BvbnNlUmVzb2x2ZXIsXG59IGZyb20gJy4vaGFuZGxlcnMvUmVxdWVzdEhhbmRsZXInXG5pbXBvcnQge1xuICBIdHRwTWV0aG9kcyxcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBSZXF1ZXN0UmVzb2x2ZXJFeHRyYXMsXG4gIEh0dHBSZXF1ZXN0UHJlZGljYXRlLFxufSBmcm9tICcuL2hhbmRsZXJzL0h0dHBIYW5kbGVyJ1xuaW1wb3J0IHR5cGUgeyBQYXRoUGFyYW1zIH0gZnJvbSAnLi91dGlscy9tYXRjaGluZy9tYXRjaFJlcXVlc3RVcmwnXG5cbmV4cG9ydCB0eXBlIEh0dHBSZXF1ZXN0SGFuZGxlciA9IDxcbiAgUGFyYW1zIGV4dGVuZHMgUGF0aFBhcmFtczxrZXlvZiBQYXJhbXM+ID0gUGF0aFBhcmFtcyxcbiAgUmVxdWVzdEJvZHlUeXBlIGV4dGVuZHMgRGVmYXVsdEJvZHlUeXBlID0gRGVmYXVsdEJvZHlUeXBlLFxuICAvLyBSZXNwb25zZSBib2R5IHR5cGUgTVVTVCBiZSB1bmRlZmluZWQgYnkgZGVmYXVsdC5cbiAgLy8gVGhpcyBpcyBob3cgd2UgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW4gYSBoYW5kbGVyIHRoYXRcbiAgLy8gcmV0dXJucyBwbGFpbiBcIlJlc3BvbnNlXCIgYW5kIHRoZSBvbmUgcmV0dXJuaW5nIFwiSHR0cFJlc3BvbnNlXCJcbiAgLy8gdG8gZW5mb3JjZSBhIHN0cmljdGVyIHJlc3BvbnNlIGJvZHkgdHlwZS5cbiAgUmVzcG9uc2VCb2R5VHlwZSBleHRlbmRzIERlZmF1bHRCb2R5VHlwZSA9IHVuZGVmaW5lZCxcbj4oXG4gIHByZWRpY2F0ZTogSHR0cFJlcXVlc3RQcmVkaWNhdGU8UGFyYW1zPixcbiAgcmVzb2x2ZXI6IEh0dHBSZXNwb25zZVJlc29sdmVyPFBhcmFtcywgUmVxdWVzdEJvZHlUeXBlLCBSZXNwb25zZUJvZHlUeXBlPixcbiAgb3B0aW9ucz86IFJlcXVlc3RIYW5kbGVyT3B0aW9ucyxcbikgPT4gSHR0cEhhbmRsZXJcblxuZXhwb3J0IHR5cGUgSHR0cFJlc3BvbnNlUmVzb2x2ZXI8XG4gIFBhcmFtcyBleHRlbmRzIFBhdGhQYXJhbXM8a2V5b2YgUGFyYW1zPiA9IFBhdGhQYXJhbXMsXG4gIFJlcXVlc3RCb2R5VHlwZSBleHRlbmRzIERlZmF1bHRCb2R5VHlwZSA9IERlZmF1bHRCb2R5VHlwZSxcbiAgUmVzcG9uc2VCb2R5VHlwZSBleHRlbmRzIERlZmF1bHRCb2R5VHlwZSA9IERlZmF1bHRCb2R5VHlwZSxcbj4gPSBSZXNwb25zZVJlc29sdmVyPFxuICBIdHRwUmVxdWVzdFJlc29sdmVyRXh0cmFzPFBhcmFtcz4sXG4gIFJlcXVlc3RCb2R5VHlwZSxcbiAgUmVzcG9uc2VCb2R5VHlwZVxuPlxuXG5mdW5jdGlvbiBjcmVhdGVIdHRwSGFuZGxlcjxNZXRob2QgZXh0ZW5kcyBIdHRwTWV0aG9kcyB8IFJlZ0V4cD4oXG4gIG1ldGhvZDogTWV0aG9kLFxuKTogSHR0cFJlcXVlc3RIYW5kbGVyIHtcbiAgcmV0dXJuIChwcmVkaWNhdGUsIHJlc29sdmVyLCBvcHRpb25zID0ge30pID0+IHtcbiAgICByZXR1cm4gbmV3IEh0dHBIYW5kbGVyKG1ldGhvZCwgcHJlZGljYXRlLCByZXNvbHZlciwgb3B0aW9ucylcbiAgfVxufVxuXG4vKipcbiAqIEEgbmFtZXNwYWNlIHRvIGludGVyY2VwdCBhbmQgbW9jayBIVFRQIHJlcXVlc3RzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBodHRwLmdldCgnL3VzZXInLCByZXNvbHZlcilcbiAqIGh0dHAucG9zdCgnL3Bvc3QvOmlkJywgcmVzb2x2ZXIpXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9tc3dqcy5pby9kb2NzL2FwaS9odHRwIGBodHRwYCBBUEkgcmVmZXJlbmNlfVxuICovXG5leHBvcnQgY29uc3QgaHR0cCA9IHtcbiAgYWxsOiBjcmVhdGVIdHRwSGFuZGxlcigvLisvKSxcbiAgaGVhZDogY3JlYXRlSHR0cEhhbmRsZXIoSHR0cE1ldGhvZHMuSEVBRCksXG4gIGdldDogY3JlYXRlSHR0cEhhbmRsZXIoSHR0cE1ldGhvZHMuR0VUKSxcbiAgcG9zdDogY3JlYXRlSHR0cEhhbmRsZXIoSHR0cE1ldGhvZHMuUE9TVCksXG4gIHB1dDogY3JlYXRlSHR0cEhhbmRsZXIoSHR0cE1ldGhvZHMuUFVUKSxcbiAgZGVsZXRlOiBjcmVhdGVIdHRwSGFuZGxlcihIdHRwTWV0aG9kcy5ERUxFVEUpLFxuICBwYXRjaDogY3JlYXRlSHR0cEhhbmRsZXIoSHR0cE1ldGhvZHMuUEFUQ0gpLFxuICBvcHRpb25zOiBjcmVhdGVIdHRwSGFuZGxlcihIdHRwTWV0aG9kcy5PUFRJT05TKSxcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsWUFBQTtBQUFBQyxRQUFBLENBQUFELFlBQUE7RUFBQUUsSUFBQSxFQUFBQSxDQUFBLEtBQUFBO0FBQUE7QUFBQUMsTUFBQSxDQUFBQyxPQUFBLEdBQUFDLFlBQUEsQ0FBQUwsWUFBQTtBQUtBLElBQUFNLGtCQUFBLEdBS09DLE9BQUE7QUEyQlAsU0FBU0Msa0JBQ1BDLE1BQUEsRUFDb0I7RUFDcEIsT0FBTyxDQUFDQyxTQUFBLEVBQVdDLFFBQUEsRUFBVUMsT0FBQSxHQUFVLENBQUMsTUFBTTtJQUM1QyxPQUFPLElBQUlOLGtCQUFBLENBQUFPLFdBQUEsQ0FBWUosTUFBQSxFQUFRQyxTQUFBLEVBQVdDLFFBQUEsRUFBVUMsT0FBTztFQUM3RDtBQUNGO0FBV08sTUFBTVYsSUFBQSxHQUFPO0VBQ2xCWSxHQUFBLEVBQUtOLGlCQUFBLENBQWtCLElBQUk7RUFDM0JPLElBQUEsRUFBTVAsaUJBQUEsQ0FBa0JGLGtCQUFBLENBQUFVLFdBQUEsQ0FBWUMsSUFBSTtFQUN4Q0MsR0FBQSxFQUFLVixpQkFBQSxDQUFrQkYsa0JBQUEsQ0FBQVUsV0FBQSxDQUFZRyxHQUFHO0VBQ3RDQyxJQUFBLEVBQU1aLGlCQUFBLENBQWtCRixrQkFBQSxDQUFBVSxXQUFBLENBQVlLLElBQUk7RUFDeENDLEdBQUEsRUFBS2QsaUJBQUEsQ0FBa0JGLGtCQUFBLENBQUFVLFdBQUEsQ0FBWU8sR0FBRztFQUN0Q0MsTUFBQSxFQUFRaEIsaUJBQUEsQ0FBa0JGLGtCQUFBLENBQUFVLFdBQUEsQ0FBWVMsTUFBTTtFQUM1Q0MsS0FBQSxFQUFPbEIsaUJBQUEsQ0FBa0JGLGtCQUFBLENBQUFVLFdBQUEsQ0FBWVcsS0FBSztFQUMxQ2YsT0FBQSxFQUFTSixpQkFBQSxDQUFrQkYsa0JBQUEsQ0FBQVUsV0FBQSxDQUFZWSxPQUFPO0FBQ2hEIiwiaWdub3JlTGlzdCI6W119