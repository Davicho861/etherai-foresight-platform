4e99b6c3c79871949526a6fb1a6d2a58
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
var _cache = _interopRequireDefault(require("../cache.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const router = _express().default.Router();

// Mock data for alerts - in production, this would come from database
const mockAlerts = [{
  id: 1,
  title: 'Riesgo Clim치tico Extremo en Colombia',
  description: 'Aumento significativo en precipitaciones en la regi칩n andina, potencial para deslizamientos de tierra.',
  severity: 'HIGH',
  region: 'Colombia',
  type: 'CLIMATE',
  timestamp: '2025-10-05T02:00:00Z',
  status: 'ACTIVE'
}, {
  id: 2,
  title: 'Volatilidad Cripto-Econ칩mica en Argentina',
  description: 'Fluctuaciones extremas en el mercado de criptomonedas locales, riesgo de p치nico financiero.',
  severity: 'MEDIUM',
  region: 'Argentina',
  type: 'ECONOMIC',
  timestamp: '2025-10-04T18:30:00Z',
  status: 'MONITORING'
}];

// GET /api/alerts - List all alerts with caching optimization
router.get('/', (req, res) => {
  const {
    region,
    severity,
    type
  } = req.query;

  // Create cache key based on query parameters
  const cacheKey = `alerts:${region || 'all'}:${severity || 'all'}:${type || 'all'}`;

  // Check cache first
  const cachedResult = _cache.default.get(cacheKey);
  if (cachedResult) {
    return res.json(cachedResult);
  }
  let filteredAlerts = mockAlerts;
  if (region) {
    filteredAlerts = filteredAlerts.filter(alert => alert.region.toLowerCase() === region.toLowerCase());
  }
  if (severity) {
    filteredAlerts = filteredAlerts.filter(alert => alert.severity === severity);
  }
  if (type) {
    filteredAlerts = filteredAlerts.filter(alert => alert.type === type);
  }
  const result = {
    alerts: filteredAlerts,
    total: filteredAlerts.length,
    filters: {
      region,
      severity,
      type
    }
  };

  // Cache result for 5 minutes (300,000 ms)
  _cache.default.set(cacheKey, result, 300000);
  res.json(result);
});

// GET /api/alerts/:id - Get specific alert
router.get('/:id', (req, res) => {
  const alert = mockAlerts.find(a => a.id === parseInt(req.params.id));
  if (!alert) {
    return res.status(404).json({
      error: 'Alert not found'
    });
  }
  res.json(alert);
});

// POST /api/alerts - Create new alert (requires authentication in production)
router.post('/', (req, res) => {
  const {
    title,
    description,
    severity,
    region,
    type
  } = req.body;
  if (!title || !description || !severity || !region || !type) {
    return res.status(400).json({
      error: 'Missing required fields'
    });
  }
  const newAlert = {
    id: mockAlerts.length + 1,
    title,
    description,
    severity: severity.toUpperCase(),
    region,
    type: type.toUpperCase(),
    timestamp: new Date().toISOString(),
    status: 'ACTIVE'
  };
  mockAlerts.push(newAlert);
  res.status(201).json(newAlert);
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jYWNoZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInJvdXRlciIsImV4cHJlc3MiLCJSb3V0ZXIiLCJtb2NrQWxlcnRzIiwiaWQiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwic2V2ZXJpdHkiLCJyZWdpb24iLCJ0eXBlIiwidGltZXN0YW1wIiwic3RhdHVzIiwiZ2V0IiwicmVxIiwicmVzIiwicXVlcnkiLCJjYWNoZUtleSIsImNhY2hlZFJlc3VsdCIsImNhY2hlIiwianNvbiIsImZpbHRlcmVkQWxlcnRzIiwiZmlsdGVyIiwiYWxlcnQiLCJ0b0xvd2VyQ2FzZSIsInJlc3VsdCIsImFsZXJ0cyIsInRvdGFsIiwibGVuZ3RoIiwiZmlsdGVycyIsInNldCIsImZpbmQiLCJhIiwicGFyc2VJbnQiLCJwYXJhbXMiLCJlcnJvciIsInBvc3QiLCJib2R5IiwibmV3QWxlcnQiLCJ0b1VwcGVyQ2FzZSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInB1c2giLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhbGVydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgY2FjaGUgZnJvbSAnLi4vY2FjaGUuanMnO1xuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuLy8gTW9jayBkYXRhIGZvciBhbGVydHMgLSBpbiBwcm9kdWN0aW9uLCB0aGlzIHdvdWxkIGNvbWUgZnJvbSBkYXRhYmFzZVxuY29uc3QgbW9ja0FsZXJ0cyA9IFtcbiAge1xuICAgIGlkOiAxLFxuICAgIHRpdGxlOiAnUmllc2dvIENsaW3DoXRpY28gRXh0cmVtbyBlbiBDb2xvbWJpYScsXG4gICAgZGVzY3JpcHRpb246ICdBdW1lbnRvIHNpZ25pZmljYXRpdm8gZW4gcHJlY2lwaXRhY2lvbmVzIGVuIGxhIHJlZ2nDs24gYW5kaW5hLCBwb3RlbmNpYWwgcGFyYSBkZXNsaXphbWllbnRvcyBkZSB0aWVycmEuJyxcbiAgICBzZXZlcml0eTogJ0hJR0gnLFxuICAgIHJlZ2lvbjogJ0NvbG9tYmlhJyxcbiAgICB0eXBlOiAnQ0xJTUFURScsXG4gICAgdGltZXN0YW1wOiAnMjAyNS0xMC0wNVQwMjowMDowMFonLFxuICAgIHN0YXR1czogJ0FDVElWRSdcbiAgfSxcbiAge1xuICAgIGlkOiAyLFxuICAgIHRpdGxlOiAnVm9sYXRpbGlkYWQgQ3JpcHRvLUVjb27Ds21pY2EgZW4gQXJnZW50aW5hJyxcbiAgICBkZXNjcmlwdGlvbjogJ0ZsdWN0dWFjaW9uZXMgZXh0cmVtYXMgZW4gZWwgbWVyY2FkbyBkZSBjcmlwdG9tb25lZGFzIGxvY2FsZXMsIHJpZXNnbyBkZSBww6FuaWNvIGZpbmFuY2llcm8uJyxcbiAgICBzZXZlcml0eTogJ01FRElVTScsXG4gICAgcmVnaW9uOiAnQXJnZW50aW5hJyxcbiAgICB0eXBlOiAnRUNPTk9NSUMnLFxuICAgIHRpbWVzdGFtcDogJzIwMjUtMTAtMDRUMTg6MzA6MDBaJyxcbiAgICBzdGF0dXM6ICdNT05JVE9SSU5HJ1xuICB9XG5dO1xuXG4vLyBHRVQgL2FwaS9hbGVydHMgLSBMaXN0IGFsbCBhbGVydHMgd2l0aCBjYWNoaW5nIG9wdGltaXphdGlvblxucm91dGVyLmdldCgnLycsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCB7IHJlZ2lvbiwgc2V2ZXJpdHksIHR5cGUgfSA9IHJlcS5xdWVyeTtcblxuICAvLyBDcmVhdGUgY2FjaGUga2V5IGJhc2VkIG9uIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgY29uc3QgY2FjaGVLZXkgPSBgYWxlcnRzOiR7cmVnaW9uIHx8ICdhbGwnfToke3NldmVyaXR5IHx8ICdhbGwnfToke3R5cGUgfHwgJ2FsbCd9YDtcblxuICAvLyBDaGVjayBjYWNoZSBmaXJzdFxuICBjb25zdCBjYWNoZWRSZXN1bHQgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoY2FjaGVkUmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlcy5qc29uKGNhY2hlZFJlc3VsdCk7XG4gIH1cblxuICBsZXQgZmlsdGVyZWRBbGVydHMgPSBtb2NrQWxlcnRzO1xuXG4gIGlmIChyZWdpb24pIHtcbiAgICBmaWx0ZXJlZEFsZXJ0cyA9IGZpbHRlcmVkQWxlcnRzLmZpbHRlcihhbGVydCA9PiBhbGVydC5yZWdpb24udG9Mb3dlckNhc2UoKSA9PT0gcmVnaW9uLnRvTG93ZXJDYXNlKCkpO1xuICB9XG4gIGlmIChzZXZlcml0eSkge1xuICAgIGZpbHRlcmVkQWxlcnRzID0gZmlsdGVyZWRBbGVydHMuZmlsdGVyKGFsZXJ0ID0+IGFsZXJ0LnNldmVyaXR5ID09PSBzZXZlcml0eSk7XG4gIH1cbiAgaWYgKHR5cGUpIHtcbiAgICBmaWx0ZXJlZEFsZXJ0cyA9IGZpbHRlcmVkQWxlcnRzLmZpbHRlcihhbGVydCA9PiBhbGVydC50eXBlID09PSB0eXBlKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBhbGVydHM6IGZpbHRlcmVkQWxlcnRzLFxuICAgIHRvdGFsOiBmaWx0ZXJlZEFsZXJ0cy5sZW5ndGgsXG4gICAgZmlsdGVyczogeyByZWdpb24sIHNldmVyaXR5LCB0eXBlIH1cbiAgfTtcblxuICAvLyBDYWNoZSByZXN1bHQgZm9yIDUgbWludXRlcyAoMzAwLDAwMCBtcylcbiAgY2FjaGUuc2V0KGNhY2hlS2V5LCByZXN1bHQsIDMwMDAwMCk7XG5cbiAgcmVzLmpzb24ocmVzdWx0KTtcbn0pO1xuXG4vLyBHRVQgL2FwaS9hbGVydHMvOmlkIC0gR2V0IHNwZWNpZmljIGFsZXJ0XG5yb3V0ZXIuZ2V0KCcvOmlkJywgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IGFsZXJ0ID0gbW9ja0FsZXJ0cy5maW5kKGEgPT4gYS5pZCA9PT0gcGFyc2VJbnQocmVxLnBhcmFtcy5pZCkpO1xuICBpZiAoIWFsZXJ0KSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdBbGVydCBub3QgZm91bmQnIH0pO1xuICB9XG4gIHJlcy5qc29uKGFsZXJ0KTtcbn0pO1xuXG4vLyBQT1NUIC9hcGkvYWxlcnRzIC0gQ3JlYXRlIG5ldyBhbGVydCAocmVxdWlyZXMgYXV0aGVudGljYXRpb24gaW4gcHJvZHVjdGlvbilcbnJvdXRlci5wb3N0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBzZXZlcml0eSwgcmVnaW9uLCB0eXBlIH0gPSByZXEuYm9keTtcblxuICBpZiAoIXRpdGxlIHx8ICFkZXNjcmlwdGlvbiB8fCAhc2V2ZXJpdHkgfHwgIXJlZ2lvbiB8fCAhdHlwZSkge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnTWlzc2luZyByZXF1aXJlZCBmaWVsZHMnIH0pO1xuICB9XG5cbiAgY29uc3QgbmV3QWxlcnQgPSB7XG4gICAgaWQ6IG1vY2tBbGVydHMubGVuZ3RoICsgMSxcbiAgICB0aXRsZSxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBzZXZlcml0eTogc2V2ZXJpdHkudG9VcHBlckNhc2UoKSxcbiAgICByZWdpb24sXG4gICAgdHlwZTogdHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIHN0YXR1czogJ0FDVElWRSdcbiAgfTtcblxuICBtb2NrQWxlcnRzLnB1c2gobmV3QWxlcnQpO1xuICByZXMuc3RhdHVzKDIwMSkuanNvbihuZXdBbGVydCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBQUEsU0FBQTtFQUFBLE1BQUFDLElBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtFQUFBSCxRQUFBLFlBQUFBLENBQUE7SUFBQSxPQUFBQyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBZ0MsU0FBQUQsdUJBQUFH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