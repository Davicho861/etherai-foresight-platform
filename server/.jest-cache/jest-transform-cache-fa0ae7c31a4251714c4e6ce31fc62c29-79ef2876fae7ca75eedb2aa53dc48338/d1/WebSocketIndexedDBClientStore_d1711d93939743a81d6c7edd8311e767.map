{"version":3,"names":["WebSocketIndexedDBClientStore_exports","__export","WebSocketIndexedDBClientStore","module","exports","__toCommonJS","import_deferred_promise","require","DB_NAME","DB_STORE_NAME","db","constructor","createDatabase","add","client","promise","DeferredPromise","store","getStore","request","put","id","url","href","onsuccess","resolve","onerror","console","error","reject","Error","getAll","result","log","deleteMany","clientIds","clientId","delete","transaction","oncomplete","join","indexedDB","open","currentTarget","Reflect","get","objectStoreNames","contains","onupgradeneeded","createObjectStore","keyPath","objectStore"],"sources":["../../../src/core/ws/WebSocketIndexedDBClientStore.ts"],"sourcesContent":["import { DeferredPromise } from '@open-draft/deferred-promise'\nimport { WebSocketClientConnectionProtocol } from '@mswjs/interceptors/WebSocket'\nimport {\n  type SerializedWebSocketClient,\n  WebSocketClientStore,\n} from './WebSocketClientStore'\n\nconst DB_NAME = 'msw-websocket-clients'\nconst DB_STORE_NAME = 'clients'\n\nexport class WebSocketIndexedDBClientStore implements WebSocketClientStore {\n  private db: Promise<IDBDatabase>\n\n  constructor() {\n    this.db = this.createDatabase()\n  }\n\n  public async add(client: WebSocketClientConnectionProtocol): Promise<void> {\n    const promise = new DeferredPromise<void>()\n    const store = await this.getStore()\n\n    /**\n     * @note Use `.put()` instead of `.add()` to allow setting clients\n     * that already exist in the database. This can happen if a single page\n     * has multiple event handlers. Each handler will receive the \"connection\"\n     * event in parallel, and try to set that WebSocket client in the database.\n     */\n    const request = store.put({\n      id: client.id,\n      url: client.url.href,\n    } satisfies SerializedWebSocketClient)\n\n    request.onsuccess = () => {\n      promise.resolve()\n    }\n    request.onerror = () => {\n      console.error(request.error)\n      promise.reject(\n        new Error(\n          `Failed to add WebSocket client \"${client.id}\". There is likely an additional output above.`,\n        ),\n      )\n    }\n\n    return promise\n  }\n\n  public async getAll(): Promise<Array<SerializedWebSocketClient>> {\n    const promise = new DeferredPromise<Array<SerializedWebSocketClient>>()\n    const store = await this.getStore()\n    const request = store.getAll() as IDBRequest<\n      Array<SerializedWebSocketClient>\n    >\n\n    request.onsuccess = () => {\n      promise.resolve(request.result)\n    }\n    request.onerror = () => {\n      // eslint-disable-next-line no-console\n      console.log(request.error)\n      promise.reject(\n        new Error(\n          `Failed to get all WebSocket clients. There is likely an additional output above.`,\n        ),\n      )\n    }\n\n    return promise\n  }\n\n  public async deleteMany(clientIds: Array<string>): Promise<void> {\n    const promise = new DeferredPromise<void>()\n    const store = await this.getStore()\n\n    for (const clientId of clientIds) {\n      store.delete(clientId)\n    }\n\n    store.transaction.oncomplete = () => {\n      promise.resolve()\n    }\n    store.transaction.onerror = () => {\n      console.error(store.transaction.error)\n      promise.reject(\n        new Error(\n          `Failed to delete WebSocket clients [${clientIds.join(', ')}]. There is likely an additional output above.`,\n        ),\n      )\n    }\n\n    return promise\n  }\n\n  private async createDatabase(): Promise<IDBDatabase> {\n    const promise = new DeferredPromise<IDBDatabase>()\n    const request = indexedDB.open(DB_NAME, 1)\n\n    request.onsuccess = ({ currentTarget }) => {\n      const db = Reflect.get(currentTarget!, 'result') as IDBDatabase\n\n      if (db.objectStoreNames.contains(DB_STORE_NAME)) {\n        return promise.resolve(db)\n      }\n    }\n\n    request.onupgradeneeded = async ({ currentTarget }) => {\n      const db = Reflect.get(currentTarget!, 'result') as IDBDatabase\n      if (db.objectStoreNames.contains(DB_STORE_NAME)) {\n        return\n      }\n\n      const store = db.createObjectStore(DB_STORE_NAME, { keyPath: 'id' })\n      store.transaction.oncomplete = () => {\n        promise.resolve(db)\n      }\n      store.transaction.onerror = () => {\n        console.error(store.transaction.error)\n        promise.reject(\n          new Error(\n            'Failed to create WebSocket client store. There is likely an additional output above.',\n          ),\n        )\n      }\n    }\n    request.onerror = () => {\n      console.error(request.error)\n      promise.reject(\n        new Error(\n          'Failed to open an IndexedDB database. There is likely an additional output above.',\n        ),\n      )\n    }\n\n    return promise\n  }\n\n  private async getStore(): Promise<IDBObjectStore> {\n    const db = await this.db\n    return db.transaction(DB_STORE_NAME, 'readwrite').objectStore(DB_STORE_NAME)\n  }\n}\n"],"mappings":"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","ignoreList":[]}