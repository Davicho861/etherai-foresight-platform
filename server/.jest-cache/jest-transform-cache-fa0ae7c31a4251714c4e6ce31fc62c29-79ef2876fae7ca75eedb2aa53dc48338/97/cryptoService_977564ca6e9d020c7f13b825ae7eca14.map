{"version":3,"names":["_CryptoIntegration","_interopRequireDefault","require","e","__esModule","default","cov_1yp0c2emek","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","CryptoService","constructor","cryptoIntegration","CryptoIntegration","getCryptoVolatilityIndex","cryptoIds","cryptoData","getCryptoData","length","console","warn","totalVolatility","validCryptos","crypto","price_change_percentage_24h","volatility","Math","abs","averageVolatility","riskIndex","min","max","error","getCryptoMarketAnalysis","timestamp","Date","toISOString","volatilityIndex","marketData","analysis","totalCryptos","reduce","sum","riskAssessment","_assessRiskLevel","source","message","_default","exports"],"sources":["cryptoService.js"],"sourcesContent":["import CryptoIntegration from '../integrations/CryptoIntegration.js';\n\n/**\n * Service for calculating crypto volatility risk index\n * Analyzes cryptocurrency market data to determine volatility-based risk levels\n */\nclass CryptoService {\n  constructor() {\n    this.cryptoIntegration = new CryptoIntegration();\n  }\n\n  /**\n   * Calculates crypto volatility risk index based on price changes and market data\n   * @param {Array<string>} cryptoIds - Array of cryptocurrency IDs to analyze\n   * @returns {Promise<number>} Risk index between 0-100 (0 = low risk, 100 = high risk)\n   */\n  async getCryptoVolatilityIndex(cryptoIds = ['bitcoin', 'ethereum']) {\n    try {\n      const cryptoData = await this.cryptoIntegration.getCryptoData(cryptoIds);\n\n      if (!cryptoData || cryptoData.length === 0) {\n        console.warn('No crypto data available, returning default risk index');\n        return 25; // Default moderate risk\n      }\n\n      // Calculate volatility based on price changes\n      let totalVolatility = 0;\n      let validCryptos = 0;\n\n      for (const crypto of cryptoData) {\n        if (crypto && crypto.price_change_percentage_24h !== undefined) {\n          // Use absolute percentage change as volatility measure\n          const volatility = Math.abs(crypto.price_change_percentage_24h);\n          totalVolatility += volatility;\n          validCryptos++;\n        }\n      }\n\n      if (validCryptos === 0) {\n        return 25; // Default moderate risk\n      }\n\n      const averageVolatility = totalVolatility / validCryptos;\n\n      // Normalize to 0-100 scale\n      // Volatility > 10% = high risk (80-100)\n      // Volatility 5-10% = medium risk (40-80)\n      // Volatility < 5% = low risk (0-40)\n      let riskIndex;\n      if (averageVolatility > 10) {\n        riskIndex = 80 + (averageVolatility - 10) * 2; // Scale up for extreme volatility\n      } else if (averageVolatility > 5) {\n        riskIndex = 40 + (averageVolatility - 5) * 8;\n      } else {\n        riskIndex = averageVolatility * 8;\n      }\n\n      // Cap at 100\n      return Math.min(Math.max(riskIndex, 0), 100);\n\n    } catch (error) {\n      console.error('Error calculating crypto volatility index:', error);\n      return 25; // Return moderate risk as fallback\n    }\n  }\n\n  /**\n   * Gets detailed crypto market analysis\n   * @param {Array<string>} cryptoIds - Array of cryptocurrency IDs\n   * @returns {Promise<object>} Detailed market analysis\n   */\n  async getCryptoMarketAnalysis(cryptoIds = ['bitcoin', 'ethereum']) {\n    try {\n      const cryptoData = await this.cryptoIntegration.getCryptoData(cryptoIds);\n\n      return {\n        timestamp: new Date().toISOString(),\n        volatilityIndex: await this.getCryptoVolatilityIndex(cryptoIds),\n        marketData: cryptoData,\n        analysis: {\n          totalCryptos: cryptoData ? cryptoData.length : 0,\n          averageVolatility: cryptoData ?\n            cryptoData.reduce((sum, crypto) =>\n              sum + Math.abs(crypto.price_change_percentage_24h || 0), 0) / cryptoData.length : 0,\n          riskAssessment: this._assessRiskLevel(await this.getCryptoVolatilityIndex(cryptoIds))\n        },\n        source: 'CryptoService'\n      };\n    } catch (error) {\n      console.error('Error in crypto market analysis:', error);\n      return {\n        timestamp: new Date().toISOString(),\n        volatilityIndex: 25,\n        marketData: [],\n        analysis: {\n          totalCryptos: 0,\n          averageVolatility: 0,\n          riskAssessment: 'Moderate'\n        },\n        source: 'CryptoService - Error Fallback',\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Assesses risk level based on volatility index\n   * @param {number} volatilityIndex - The calculated volatility index\n   * @returns {string} Risk level description\n   */\n  _assessRiskLevel(volatilityIndex) {\n    if (volatilityIndex >= 70) return 'High';\n    if (volatilityIndex >= 40) return 'Moderate';\n    return 'Low';\n  }\n}\n\nexport default CryptoService;"],"mappings":";;;;;;;AAAA;AAAA;AAAAA,kBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAqE,oCAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAAA,SAAAG,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA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","ignoreList":[]}