238fd932f1b26f6e3ed84c5473f7359f
"use strict";

var _server = require("../mocks/server.js");
function _supertest() {
  const data = _interopRequireDefault(require("supertest"));
  _supertest = function () {
    return data;
  };
  return data;
}
function _express() {
  const data = _interopRequireDefault(require("express"));
  _express = function () {
    return data;
  };
  return data;
}
var _seismic = _interopRequireDefault(require("../../src/routes/seismic.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
describe('Seismic Routes', () => {
  let app;
  beforeAll(() => {
    _server.server.listen();
  });
  afterAll(() => {
    _server.server.close();
  });
  beforeEach(() => {
    // Create express app with the router
    app = (0, _express().default)();
    app.use(_express().default.json());
    app.use('/api/seismic', _seismic.default);
  });
  describe('GET /api/seismic/activity', () => {
    it('should return processed seismic activity with risk scores', async () => {
      const response = await (0, _supertest().default)(app).get('/api/seismic/activity');
      expect(response.status).toBe(200);
      expect(Array.isArray(response.body)).toBe(true);
      expect(response.body).toHaveLength(1);
      expect(response.body[0]).toMatchObject({
        id: 'test1',
        place: expect.any(String),
        magnitude: expect.any(Number),
        riskScore: expect.any(Number)
      });
    });
  });
  describe('GET /api/seismic/risk', () => {
    it('should return geophysical risk prediction', async () => {
      const response = await (0, _supertest().default)(app).get('/api/seismic/risk');
      expect(response.status).toBe(200);
      expect(response.body).toMatchObject({
        overallRisk: expect.any(Number),
        eventCount: 1,
        maxMagnitude: 6.0,
        highRiskZones: expect.any(Array)
      });
    });
    it('should handle no seismic events', async () => {
      const response = await (0, _supertest().default)(app).get('/api/seismic/risk');
      expect(response.status).toBe(200);
      expect(typeof response.body.overallRisk).toBe('number');
      expect(typeof response.body.eventCount).toBe('number');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2VydmVyIiwicmVxdWlyZSIsIl9zdXBlcnRlc3QiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9leHByZXNzIiwiX3NlaXNtaWMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJkZXNjcmliZSIsImFwcCIsImJlZm9yZUFsbCIsInNlcnZlciIsImxpc3RlbiIsImFmdGVyQWxsIiwiY2xvc2UiLCJiZWZvcmVFYWNoIiwiZXhwcmVzcyIsInVzZSIsImpzb24iLCJzZWlzbWljUm91dGVyIiwiaXQiLCJyZXNwb25zZSIsInJlcXVlc3QiLCJnZXQiLCJleHBlY3QiLCJzdGF0dXMiLCJ0b0JlIiwiQXJyYXkiLCJpc0FycmF5IiwiYm9keSIsInRvSGF2ZUxlbmd0aCIsInRvTWF0Y2hPYmplY3QiLCJpZCIsInBsYWNlIiwiYW55IiwiU3RyaW5nIiwibWFnbml0dWRlIiwiTnVtYmVyIiwicmlza1Njb3JlIiwib3ZlcmFsbFJpc2siLCJldmVudENvdW50IiwibWF4TWFnbml0dWRlIiwiaGlnaFJpc2tab25lcyJdLCJzb3VyY2VzIjpbInNlaXNtaWMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXJ2ZXIgfSBmcm9tICcuLi9tb2Nrcy9zZXJ2ZXIuanMnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnc3VwZXJ0ZXN0JztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHNlaXNtaWNSb3V0ZXIgZnJvbSAnLi4vLi4vc3JjL3JvdXRlcy9zZWlzbWljLmpzJztcblxuZGVzY3JpYmUoJ1NlaXNtaWMgUm91dGVzJywgKCkgPT4ge1xuICBsZXQgYXBwO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgc2VydmVyLmxpc3RlbigpO1xuICB9KTtcblxuICBhZnRlckFsbCgoKSA9PiB7XG4gICAgc2VydmVyLmNsb3NlKCk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBleHByZXNzIGFwcCB3aXRoIHRoZSByb3V0ZXJcbiAgICBhcHAgPSBleHByZXNzKCk7XG4gICAgYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG4gICAgYXBwLnVzZSgnL2FwaS9zZWlzbWljJywgc2Vpc21pY1JvdXRlcik7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS9zZWlzbWljL2FjdGl2aXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHByb2Nlc3NlZCBzZWlzbWljIGFjdGl2aXR5IHdpdGggcmlzayBzY29yZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvc2Vpc21pYy9hY3Rpdml0eScpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXNwb25zZS5ib2R5KSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keVswXSkudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIGlkOiAndGVzdDEnLFxuICAgICAgICBwbGFjZTogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICBtYWduaXR1ZGU6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgICAgcmlza1Njb3JlOiBleHBlY3QuYW55KE51bWJlciksXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL3NlaXNtaWMvcmlzaycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBnZW9waHlzaWNhbCByaXNrIHByZWRpY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvc2Vpc21pYy9yaXNrJyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgb3ZlcmFsbFJpc2s6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgICAgZXZlbnRDb3VudDogMSxcbiAgICAgICAgbWF4TWFnbml0dWRlOiA2LjAsXG4gICAgICAgIGhpZ2hSaXNrWm9uZXM6IGV4cGVjdC5hbnkoQXJyYXkpLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBubyBzZWlzbWljIGV2ZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL2FwaS9zZWlzbWljL3Jpc2snKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXNwb25zZS5ib2R5Lm92ZXJhbGxSaXNrKS50b0JlKCdudW1iZXInKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVzcG9uc2UuYm9keS5ldmVudENvdW50KS50b0JlKCdudW1iZXInKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsU0FBQUMsV0FBQTtFQUFBLE1BQUFDLElBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtFQUFBQyxVQUFBLFlBQUFBLENBQUE7SUFBQSxPQUFBQyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFDQSxTQUFBRSxTQUFBO0VBQUEsTUFBQUYsSUFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0VBQUFJLFFBQUEsWUFBQUEsQ0FBQTtJQUFBLE9BQUFGLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUYsc0JBQUEsQ0FBQUgsT0FBQTtBQUF3RCxTQUFBRyx1QkFBQUcsQ0FBQSxXQUFBQSxDQUFBLElB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