2e1f812cf36fc87acb5dba900f38b68f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = _interopRequireDefault(require("express"));
var _database = require("../database.js");
var _promises = _interopRequireDefault(require("fs/promises"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const router = _express.default.Router();

// GET /api/consciousness
router.get('/', async (req, res) => {
  try {
    const client = (0, _database.getChromaClient)();
    const clientUsable = client && typeof client.getOrCreateCollection === 'function' && !client.mock;
    if (clientUsable) {
      const collection = await client.getOrCreateCollection({
        name: 'failure_patterns'
      });
      const all = await collection.get();
      const docs = (all || {}).documents || [];
      const metadatas = (all || {}).metadatas || [];
      const ids = (all || {}).ids || [];
      const result = ids.map((id, i) => ({
        id,
        error: docs[i],
        metadata: metadatas[i]
      }));
      return res.json({
        source: 'chroma',
        items: result
      });
    }

    // Fallback: read local JSONL
    const p = _path.default.join(process.cwd(), 'server', 'data', 'failure_patterns.jsonl');
    const exists = await _promises.default.access(p).then(() => true).catch(() => false);
    if (!exists) return res.json({
      source: 'local',
      items: []
    });
    const txt = await _promises.default.readFile(p, 'utf8');
    const lines = txt.split('\n').filter(Boolean);
    const items = lines.map(l => {
      try {
        return JSON.parse(l);
      } catch {
        return {
          raw: l
        };
      }
    });
    return res.json({
      source: 'local',
      items
    });
  } catch (e) {
    console.error('consciousness route error', e);
    return res.status(500).json({
      error: 'Internal server error'
    });
  }
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2RhdGFiYXNlIiwiX3Byb21pc2VzIiwiX3BhdGgiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJyb3V0ZXIiLCJleHByZXNzIiwiUm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwiY2xpZW50IiwiZ2V0Q2hyb21hQ2xpZW50IiwiY2xpZW50VXNhYmxlIiwiZ2V0T3JDcmVhdGVDb2xsZWN0aW9uIiwibW9jayIsImNvbGxlY3Rpb24iLCJuYW1lIiwiYWxsIiwiZG9jcyIsImRvY3VtZW50cyIsIm1ldGFkYXRhcyIsImlkcyIsInJlc3VsdCIsIm1hcCIsImlkIiwiaSIsImVycm9yIiwibWV0YWRhdGEiLCJqc29uIiwic291cmNlIiwiaXRlbXMiLCJwIiwicGF0aCIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwiZXhpc3RzIiwiZnMiLCJhY2Nlc3MiLCJ0aGVuIiwiY2F0Y2giLCJ0eHQiLCJyZWFkRmlsZSIsImxpbmVzIiwic3BsaXQiLCJmaWx0ZXIiLCJCb29sZWFuIiwibCIsIkpTT04iLCJwYXJzZSIsInJhdyIsImNvbnNvbGUiLCJzdGF0dXMiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJjb25zY2lvdXNuZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgZ2V0Q2hyb21hQ2xpZW50IH0gZnJvbSAnLi4vZGF0YWJhc2UuanMnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG4vLyBHRVQgL2FwaS9jb25zY2lvdXNuZXNzXG5yb3V0ZXIuZ2V0KCcvJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2hyb21hQ2xpZW50KCk7XG4gICAgY29uc3QgY2xpZW50VXNhYmxlID0gY2xpZW50ICYmIHR5cGVvZiBjbGllbnQuZ2V0T3JDcmVhdGVDb2xsZWN0aW9uID09PSAnZnVuY3Rpb24nICYmICFjbGllbnQubW9jaztcbiAgICBpZiAoY2xpZW50VXNhYmxlKSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gYXdhaXQgY2xpZW50LmdldE9yQ3JlYXRlQ29sbGVjdGlvbih7IG5hbWU6ICdmYWlsdXJlX3BhdHRlcm5zJyB9KTtcbiAgICAgIGNvbnN0IGFsbCA9IGF3YWl0IGNvbGxlY3Rpb24uZ2V0KCk7XG4gICAgICBjb25zdCBkb2NzID0gKGFsbCB8fCB7fSkuZG9jdW1lbnRzIHx8IFtdO1xuICAgICAgY29uc3QgbWV0YWRhdGFzID0gKGFsbCB8fCB7fSkubWV0YWRhdGFzIHx8IFtdO1xuICAgICAgY29uc3QgaWRzID0gKGFsbCB8fCB7fSkuaWRzIHx8IFtdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gaWRzLm1hcCgoaWQsIGkpID0+ICh7IGlkLCBlcnJvcjogZG9jc1tpXSwgbWV0YWRhdGE6IG1ldGFkYXRhc1tpXSB9KSk7XG4gICAgICByZXR1cm4gcmVzLmpzb24oeyBzb3VyY2U6ICdjaHJvbWEnLCBpdGVtczogcmVzdWx0IH0pO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrOiByZWFkIGxvY2FsIEpTT05MXG4gICAgY29uc3QgcCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnc2VydmVyJywgJ2RhdGEnLCAnZmFpbHVyZV9wYXR0ZXJucy5qc29ubCcpO1xuICAgIGNvbnN0IGV4aXN0cyA9IGF3YWl0IGZzLmFjY2VzcyhwKS50aGVuKCgpID0+IHRydWUpLmNhdGNoKCgpID0+IGZhbHNlKTtcbiAgICBpZiAoIWV4aXN0cykgcmV0dXJuIHJlcy5qc29uKHsgc291cmNlOiAnbG9jYWwnLCBpdGVtczogW10gfSk7XG4gICAgY29uc3QgdHh0ID0gYXdhaXQgZnMucmVhZEZpbGUocCwgJ3V0ZjgnKTtcbiAgICBjb25zdCBsaW5lcyA9IHR4dC5zcGxpdCgnXFxuJykuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGNvbnN0IGl0ZW1zID0gbGluZXMubWFwKGwgPT4geyB0cnkgeyByZXR1cm4gSlNPTi5wYXJzZShsKTsgfSBjYXRjaCB7IHJldHVybiB7IHJhdzogbCB9OyB9IH0pO1xuICAgIHJldHVybiByZXMuanNvbih7IHNvdXJjZTogJ2xvY2FsJywgaXRlbXMgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdjb25zY2lvdXNuZXNzIHJvdXRlIGVycm9yJywgZSk7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBd0IsU0FBQUQsdUJBQUFLLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFeEIsTUFBTUcsTUFBTSxHQUFHQyxnQkFBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQzs7QUFFL0I7QUFDQUYsTUFBTSxDQUFDRyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU9DLEdBQUcsRUFBRUMsR0FBRyxLQUFLO0VBQ2xDLElBQUk7SUFDRixNQUFNQyxNQUFNLEdBQUcsSUFBQUMseUJBQWUsRUFBQyxDQUFDO0lBQ2hDLE1BQU1DLFlBQVksR0FBR0YsTUFBTSxJQUFJLE9BQU9BLE1BQU0sQ0FBQ0cscUJBQXFCLEtBQUssVUFBVSxJQUFJLENBQUNILE1BQU0sQ0FBQ0ksSUFBSTtJQUNqRyxJQUFJ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