95af1e0f8610534ca05710fab0f92df8
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var
/* istanbul ignore next */
_safeFetch = _interopRequireDefault(require("../lib/safeFetch.js"));
/* istanbul ignore next */ function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function cov_1ixvrcbn7t() {
  var path = "/home/davicho/etherai-foresight-platform-main/server/src/integrations/BiodiversityIntegration.js";
  var hash = "b78f5f2351780036c2ba2d834f536b3c4eb82099";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/davicho/etherai-foresight-platform-main/server/src/integrations/BiodiversityIntegration.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 58
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "2": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 66
        }
      },
      "3": {
        start: {
          line: 15,
          column: 6
        },
        end: {
          line: 15,
          column: 22
        }
      },
      "4": {
        start: {
          line: 17,
          column: 18
        },
        end: {
          line: 17,
          column: 55
        }
      },
      "5": {
        start: {
          line: 18,
          column: 32
        },
        end: {
          line: 18,
          column: 75
        }
      },
      "6": {
        start: {
          line: 19,
          column: 6
        },
        end: {
          line: 22,
          column: 7
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 120
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 90
        }
      },
      "9": {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 64
        }
      },
      "10": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 115
        }
      },
      "11": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "12": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 31,
          column: 59
        }
      },
      "13": {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 28
        }
      },
      "14": {
        start: {
          line: 34,
          column: 19
        },
        end: {
          line: 34,
          column: 56
        }
      },
      "15": {
        start: {
          line: 35,
          column: 33
        },
        end: {
          line: 35,
          column: 79
        }
      },
      "16": {
        start: {
          line: 36,
          column: 6
        },
        end: {
          line: 39,
          column: 7
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 114
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 81
        }
      },
      "19": {
        start: {
          line: 40,
          column: 6
        },
        end: {
          line: 40,
          column: 66
        }
      },
      "20": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 127
        }
      },
      "21": {
        start: {
          line: 46,
          column: 29
        },
        end: {
          line: 46,
          column: 31
        }
      },
      "22": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "23": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 61,
          column: 8
        }
      },
      "24": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 75,
          column: 6
        }
      },
      "25": {
        start: {
          line: 69,
          column: 78
        },
        end: {
          line: 69,
          column: 103
        }
      },
      "26": {
        start: {
          line: 70,
          column: 81
        },
        end: {
          line: 70,
          column: 111
        }
      },
      "27": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 91,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        },
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 8,
            column: 3
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        },
        loc: {
          start: {
            line: 10,
            column: 91
          },
          end: {
            line: 26,
            column: 3
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        },
        loc: {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 43,
            column: 3
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 45,
            column: 3
          }
        },
        loc: {
          start: {
            line: 45,
            column: 41
          },
          end: {
            line: 76,
            column: 3
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 61
          },
          end: {
            line: 69,
            column: 62
          }
        },
        loc: {
          start: {
            line: 69,
            column: 78
          },
          end: {
            line: 69,
            column: 103
          }
        },
        line: 69
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 70,
            column: 64
          },
          end: {
            line: 70,
            column: 65
          }
        },
        loc: {
          start: {
            line: 70,
            column: 81
          },
          end: {
            line: 70,
            column: 111
          }
        },
        line: 70
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 78,
            column: 2
          },
          end: {
            line: 78,
            column: 3
          }
        },
        loc: {
          start: {
            line: 78,
            column: 28
          },
          end: {
            line: 92,
            column: 3
          }
        },
        line: 78
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 28
          },
          end: {
            line: 10,
            column: 89
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 38
          },
          end: {
            line: 10,
            column: 89
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 53
          }
        }, {
          start: {
            line: 18,
            column: 57
          },
          end: {
            line: 18,
            column: 68
          }
        }, {
          start: {
            line: 18,
            column: 72
          },
          end: {
            line: 18,
            column: 75
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 22,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 22,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 57
          },
          end: {
            line: 24,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 82
          },
          end: {
            line: 24,
            column: 95
          }
        }, {
          start: {
            line: 24,
            column: 98
          },
          end: {
            line: 24,
            column: 111
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 24,
            column: 57
          },
          end: {
            line: 24,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 57
          },
          end: {
            line: 24,
            column: 62
          }
        }, {
          start: {
            line: 24,
            column: 66
          },
          end: {
            line: 24,
            column: 79
          }
        }],
        line: 24
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 33
          },
          end: {
            line: 35,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 33
          },
          end: {
            line: 35,
            column: 55
          }
        }, {
          start: {
            line: 35,
            column: 59
          },
          end: {
            line: 35,
            column: 71
          }
        }, {
          start: {
            line: 35,
            column: 75
          },
          end: {
            line: 35,
            column: 79
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 36,
            column: 6
          },
          end: {
            line: 39,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 6
          },
          end: {
            line: 39,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "7": {
        loc: {
          start: {
            line: 41,
            column: 69
          },
          end: {
            line: 41,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 94
          },
          end: {
            line: 41,
            column: 107
          }
        }, {
          start: {
            line: 41,
            column: 110
          },
          end: {
            line: 41,
            column: 123
          }
        }],
        line: 41
      },
      "8": {
        loc: {
          start: {
            line: 41,
            column: 69
          },
          end: {
            line: 41,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 69
          },
          end: {
            line: 41,
            column: 74
          }
        }, {
          start: {
            line: 41,
            column: 78
          },
          end: {
            line: 41,
            column: 91
          }
        }],
        line: 41
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b78f5f2351780036c2ba2d834f536b3c4eb82099"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ixvrcbn7t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ixvrcbn7t();
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
class BiodiversityIntegration {
  constructor() {
    /* istanbul ignore next */
    cov_1ixvrcbn7t().f[0]++;
    cov_1ixvrcbn7t().s[0]++;
    // Using IUCN Red List API as primary source for biodiversity data
    this.baseUrl = 'https://apiv3.iucnredlist.org/api/v3';
    // Note: IUCN API requires token, but we'll implement with fallback to mock data
  }
  async getBiodiversityData(regions =
  /* istanbul ignore next */
  (cov_1ixvrcbn7t().b[0][0]++, ['americas', 'africa', 'asia', 'europe', 'oceania'])) {
    /* istanbul ignore next */
    cov_1ixvrcbn7t().f[1]++;
    cov_1ixvrcbn7t().s[1]++;
    try {
      // For now, we'll simulate biodiversity data since IUCN API requires authentication
      // In production, this would use: `${this.baseUrl}/species/region/${region}?token=${process.env.IUCN_TOKEN}`
      const mockData =
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().s[2]++, this._generateMockBiodiversityData(regions));
      /* istanbul ignore next */
      cov_1ixvrcbn7t().s[3]++;
      return mockData;
    } catch (error) {
      const _fm =
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().s[4]++, await
      /* istanbul ignore next */
      Promise.resolve().then(() => _interopRequireWildcard(require('../lib/force-mocks.js'))));
      const forceMocksEnabled =
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().s[5]++,
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[1][0]++, _fm.forceMocksEnabled) ||
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[1][1]++, _fm.default) ||
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[1][2]++, _fm));
      /* istanbul ignore next */
      cov_1ixvrcbn7t().s[6]++;
      if (forceMocksEnabled()) {
        /* istanbul ignore next */
        cov_1ixvrcbn7t().b[2][0]++;
        cov_1ixvrcbn7t().s[7]++;
        console.error('BiodiversityIntegration: returning FORCE_MOCKS mock for biodiversity data due to error:', error);
        /* istanbul ignore next */
        cov_1ixvrcbn7t().s[8]++;
        return {
          error: null,
          regions,
          isMock: true,
          source: 'FORCE_MOCKS:Biodiversity'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ixvrcbn7t().b[2][1]++;
      }
      cov_1ixvrcbn7t().s[9]++;
      console.error('Error fetching biodiversity data:', error);
      /* istanbul ignore next */
      cov_1ixvrcbn7t().s[10]++;
      throw new Error(`BiodiversityIntegration failed: ${
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[4][0]++, error) &&
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[4][1]++, error.message) ?
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[3][1]++, String(error))}`);
    }
  }
  async getSpeciesThreatData() {
    /* istanbul ignore next */
    cov_1ixvrcbn7t().f[2]++;
    cov_1ixvrcbn7t().s[11]++;
    try {
      // Simulate species threat assessment data
      const mockThreatData =
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().s[12]++, this._generateMockThreatData());
      /* istanbul ignore next */
      cov_1ixvrcbn7t().s[13]++;
      return mockThreatData;
    } catch (error) {
      const _fm2 =
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().s[14]++, await
      /* istanbul ignore next */
      Promise.resolve().then(() => _interopRequireWildcard(require('../lib/force-mocks.js'))));
      const forceMocksEnabled2 =
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().s[15]++,
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[5][0]++, _fm2.forceMocksEnabled) ||
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[5][1]++, _fm2.default) ||
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[5][2]++, _fm2));
      /* istanbul ignore next */
      cov_1ixvrcbn7t().s[16]++;
      if (forceMocksEnabled2()) {
        /* istanbul ignore next */
        cov_1ixvrcbn7t().b[6][0]++;
        cov_1ixvrcbn7t().s[17]++;
        console.error('BiodiversityIntegration: returning FORCE_MOCKS mock for threat data due to error:', error);
        /* istanbul ignore next */
        cov_1ixvrcbn7t().s[18]++;
        return {
          error: null,
          isMock: true,
          source: 'FORCE_MOCKS:Biodiversity'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ixvrcbn7t().b[6][1]++;
      }
      cov_1ixvrcbn7t().s[19]++;
      console.error('Error fetching species threat data:', error);
      /* istanbul ignore next */
      cov_1ixvrcbn7t().s[20]++;
      throw new Error(`BiodiversityIntegration threat data failed: ${
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[8][0]++, error) &&
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[8][1]++, error.message) ?
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ixvrcbn7t().b[7][1]++, String(error))}`);
    }
  }
  _generateMockBiodiversityData(regions) {
    /* istanbul ignore next */
    cov_1ixvrcbn7t().f[3]++;
    const biodiversityData =
    /* istanbul ignore next */
    (cov_1ixvrcbn7t().s[21]++, {});
    /* istanbul ignore next */
    cov_1ixvrcbn7t().s[22]++;
    for (const region of regions) {
      /* istanbul ignore next */
      cov_1ixvrcbn7t().s[23]++;
      biodiversityData[region] = {
        totalSpecies: Math.floor(Math.random() * 50000) + 10000,
        threatenedSpecies: Math.floor(Math.random() * 5000) + 1000,
        criticallyEndangered: Math.floor(Math.random() * 500) + 50,
        endangered: Math.floor(Math.random() * 1000) + 100,
        vulnerable: Math.floor(Math.random() * 2000) + 200,
        nearThreatened: Math.floor(Math.random() * 1500) + 150,
        leastConcern: Math.floor(Math.random() * 30000) + 5000,
        dataDeficient: Math.floor(Math.random() * 2000) + 200,
        lastUpdated: new Date().toISOString(),
        source: 'IUCN Red List (Mock Data)',
        region: region
      };
    }
    /* istanbul ignore next */
    cov_1ixvrcbn7t().s[24]++;
    return {
      timestamp: new Date().toISOString(),
      regions: biodiversityData,
      globalSummary: {
        totalRegions: regions.length,
        totalSpecies: Object.values(biodiversityData).reduce((sum, region) => {
          /* istanbul ignore next */
          cov_1ixvrcbn7t().f[4]++;
          cov_1ixvrcbn7t().s[25]++;
          return sum + region.totalSpecies;
        }, 0),
        totalThreatened: Object.values(biodiversityData).reduce((sum, region) => {
          /* istanbul ignore next */
          cov_1ixvrcbn7t().f[5]++;
          cov_1ixvrcbn7t().s[26]++;
          return sum + region.threatenedSpecies;
        }, 0),
        threatPercentage: 0 // Will be calculated by service
      },
      source: 'BiodiversityIntegration',
      isMock: true
    };
  }
  _generateMockThreatData() {
    /* istanbul ignore next */
    cov_1ixvrcbn7t().f[6]++;
    cov_1ixvrcbn7t().s[27]++;
    return {
      timestamp: new Date().toISOString(),
      threatCategories: {
        habitatLoss: {
          count: Math.floor(Math.random() * 1000) + 500,
          percentage: 0
        },
        climateChange: {
          count: Math.floor(Math.random() * 800) + 300,
          percentage: 0
        },
        pollution: {
          count: Math.floor(Math.random() * 600) + 200,
          percentage: 0
        },
        invasiveSpecies: {
          count: Math.floor(Math.random() * 400) + 100,
          percentage: 0
        },
        overexploitation: {
          count: Math.floor(Math.random() * 500) + 150,
          percentage: 0
        },
        other: {
          count: Math.floor(Math.random() * 300) + 50,
          percentage: 0
        }
      },
      source: 'IUCN Red List (Mock Data)',
      isMock: true
    };
  }
}
/* istanbul ignore next */
var _default = exports.default = BiodiversityIntegration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,