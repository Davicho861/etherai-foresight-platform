{"version":3,"names":["_safeFetch","_interopRequireDefault","require","e","__esModule","default","cov_1ixvrcbn7t","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","_interopRequireWildcard","t","WeakMap","r","n","o","i","__proto__","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","BiodiversityIntegration","constructor","baseUrl","getBiodiversityData","regions","mockData","_generateMockBiodiversityData","error","_fm","Promise","resolve","then","forceMocksEnabled","console","isMock","source","Error","message","String","getSpeciesThreatData","mockThreatData","_generateMockThreatData","_fm2","forceMocksEnabled2","biodiversityData","region","totalSpecies","Math","floor","random","threatenedSpecies","criticallyEndangered","endangered","vulnerable","nearThreatened","leastConcern","dataDeficient","lastUpdated","Date","toISOString","timestamp","globalSummary","totalRegions","length","values","reduce","sum","totalThreatened","threatPercentage","threatCategories","habitatLoss","count","percentage","climateChange","pollution","invasiveSpecies","overexploitation","other","_default","exports"],"sources":["BiodiversityIntegration.js"],"sourcesContent":["import safeFetch from '../lib/safeFetch.js';\n\nclass BiodiversityIntegration {\n  constructor() {\n    // Using IUCN Red List API as primary source for biodiversity data\n    this.baseUrl = 'https://apiv3.iucnredlist.org/api/v3';\n    // Note: IUCN API requires token, but we'll implement with fallback to mock data\n  }\n\n  async getBiodiversityData(regions = ['americas', 'africa', 'asia', 'europe', 'oceania']) {\n    try {\n      // For now, we'll simulate biodiversity data since IUCN API requires authentication\n      // In production, this would use: `${this.baseUrl}/species/region/${region}?token=${process.env.IUCN_TOKEN}`\n      const mockData = this._generateMockBiodiversityData(regions);\n      return mockData;\n    } catch (error) {\n      const _fm = await import('../lib/force-mocks.js');\n      const forceMocksEnabled = _fm.forceMocksEnabled || _fm.default || _fm;\n      if (forceMocksEnabled()) {\n        console.error('BiodiversityIntegration: returning FORCE_MOCKS mock for biodiversity data due to error:', error);\n        return { error: null, regions, isMock: true, source: 'FORCE_MOCKS:Biodiversity' };\n      }\n      console.error('Error fetching biodiversity data:', error);\n      throw new Error(`BiodiversityIntegration failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n  async getSpeciesThreatData() {\n    try {\n      // Simulate species threat assessment data\n      const mockThreatData = this._generateMockThreatData();\n      return mockThreatData;\n    } catch (error) {\n      const _fm2 = await import('../lib/force-mocks.js');\n      const forceMocksEnabled2 = _fm2.forceMocksEnabled || _fm2.default || _fm2;\n      if (forceMocksEnabled2()) {\n        console.error('BiodiversityIntegration: returning FORCE_MOCKS mock for threat data due to error:', error);\n        return { error: null, isMock: true, source: 'FORCE_MOCKS:Biodiversity' };\n      }\n      console.error('Error fetching species threat data:', error);\n      throw new Error(`BiodiversityIntegration threat data failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n  _generateMockBiodiversityData(regions) {\n    const biodiversityData = {};\n\n    for (const region of regions) {\n      biodiversityData[region] = {\n        totalSpecies: Math.floor(Math.random() * 50000) + 10000,\n        threatenedSpecies: Math.floor(Math.random() * 5000) + 1000,\n        criticallyEndangered: Math.floor(Math.random() * 500) + 50,\n        endangered: Math.floor(Math.random() * 1000) + 100,\n        vulnerable: Math.floor(Math.random() * 2000) + 200,\n        nearThreatened: Math.floor(Math.random() * 1500) + 150,\n        leastConcern: Math.floor(Math.random() * 30000) + 5000,\n        dataDeficient: Math.floor(Math.random() * 2000) + 200,\n        lastUpdated: new Date().toISOString(),\n        source: 'IUCN Red List (Mock Data)',\n        region: region\n      };\n    }\n\n    return {\n      timestamp: new Date().toISOString(),\n      regions: biodiversityData,\n      globalSummary: {\n        totalRegions: regions.length,\n        totalSpecies: Object.values(biodiversityData).reduce((sum, region) => sum + region.totalSpecies, 0),\n        totalThreatened: Object.values(biodiversityData).reduce((sum, region) => sum + region.threatenedSpecies, 0),\n        threatPercentage: 0 // Will be calculated by service\n      },\n      source: 'BiodiversityIntegration',\n      isMock: true\n    };\n  }\n\n  _generateMockThreatData() {\n    return {\n      timestamp: new Date().toISOString(),\n      threatCategories: {\n        habitatLoss: { count: Math.floor(Math.random() * 1000) + 500, percentage: 0 },\n        climateChange: { count: Math.floor(Math.random() * 800) + 300, percentage: 0 },\n        pollution: { count: Math.floor(Math.random() * 600) + 200, percentage: 0 },\n        invasiveSpecies: { count: Math.floor(Math.random() * 400) + 100, percentage: 0 },\n        overexploitation: { count: Math.floor(Math.random() * 500) + 150, percentage: 0 },\n        other: { count: Math.floor(Math.random() * 300) + 50, percentage: 0 }\n      },\n      source: 'IUCN Red List (Mock Data)',\n      isMock: true\n    };\n  }\n}\n\nexport default BiodiversityIntegration;"],"mappings":";;;;;;;AAAA;AAAA;AAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AAA4C,oCAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAAA,SAAAG,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;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","ignoreList":[]}