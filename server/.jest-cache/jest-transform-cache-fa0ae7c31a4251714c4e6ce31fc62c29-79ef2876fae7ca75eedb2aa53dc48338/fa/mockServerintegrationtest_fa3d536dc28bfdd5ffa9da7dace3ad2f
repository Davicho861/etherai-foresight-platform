880133c962105af9b3f9a3c808d80af3
"use strict";

var _child_process = require("child_process");
var _axios = _interopRequireDefault(require("axios"));
var _net = _interopRequireDefault(require("net"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const MOCK_PORT = 45111; // use a non-default port to avoid collisions

function waitForPort(port, host = '127.0.0.1', timeout = 5000) {
  return new Promise((resolve, reject) => {
    const start = Date.now();
    (function tryConnect() {
      const sock = new _net.default.Socket();
      sock.setTimeout(500);
      sock.on('connect', () => {
        sock.destroy();
        resolve(true);
      }).on('error', () => {
        sock.destroy();
        if (Date.now() - start > timeout) return reject(new Error('timeout'));
        setTimeout(tryConnect, 100);
      }).on('timeout', () => {
        sock.destroy();
        if (Date.now() - start > timeout) return reject(new Error('timeout'));
        setTimeout(tryConnect, 100);
      }).connect(port, host);
    })();
  });
}
describe('mock-server integration', () => {
  let proc;
  beforeAll(async () => {
    // Start the mock server with a custom port
    proc = (0, _child_process.spawn)(process.execPath, ['./mocks/mock-server.js'], {
      cwd: __dirname + '/../',
      env: {
        ...process.env,
        USGS_MOCK_PORT: String(MOCK_PORT),
        PORT: String(MOCK_PORT)
      },
      stdio: ['ignore', 'pipe', 'pipe']
    });

    // Pipe logs to console for easier debugging when tests fail
    proc.stdout.on('data', d => process.stdout.write(`[mock-server] ${d}`));
    proc.stderr.on('data', d => process.stderr.write(`[mock-server] ${d}`));

    // Wait until port is listening
    await waitForPort(MOCK_PORT, '127.0.0.1', 5000);
  }, 15000);
  afterAll(() => {
    if (proc && !proc.killed) {
      proc.kill();
    }
  });
  test('usgs mock returns FeatureCollection with features array', async () => {
    const url = `http://127.0.0.1:${MOCK_PORT}/usgs/significant_day.geojson`;
    const res = await _axios.default.get(url, {
      timeout: 3000
    });
    const json = res.data;
    expect(json).toHaveProperty('type', 'FeatureCollection');
    expect(Array.isArray(json.features)).toBe(true);
    expect(json.features.length).toBeGreaterThan(0);
    expect(json.features[0]).toHaveProperty('properties');
  }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2hpbGRfcHJvY2VzcyIsInJlcXVpcmUiLCJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX25ldCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk1PQ0tfUE9SVCIsIndhaXRGb3JQb3J0IiwicG9ydCIsImhvc3QiLCJ0aW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJ0cnlDb25uZWN0Iiwic29jayIsIm5ldCIsIlNvY2tldCIsInNldFRpbWVvdXQiLCJvbiIsImRlc3Ryb3kiLCJFcnJvciIsImNvbm5lY3QiLCJkZXNjcmliZSIsInByb2MiLCJiZWZvcmVBbGwiLCJzcGF3biIsInByb2Nlc3MiLCJleGVjUGF0aCIsImN3ZCIsIl9fZGlybmFtZSIsImVudiIsIlVTR1NfTU9DS19QT1JUIiwiU3RyaW5nIiwiUE9SVCIsInN0ZGlvIiwic3Rkb3V0IiwiZCIsIndyaXRlIiwic3RkZXJyIiwiYWZ0ZXJBbGwiLCJraWxsZWQiLCJraWxsIiwidGVzdCIsInVybCIsInJlcyIsImF4aW9zIiwiZ2V0IiwianNvbiIsImRhdGEiLCJleHBlY3QiLCJ0b0hhdmVQcm9wZXJ0eSIsIkFycmF5IiwiaXNBcnJheSIsImZlYXR1cmVzIiwidG9CZSIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiJdLCJzb3VyY2VzIjpbIm1vY2tTZXJ2ZXIuaW50ZWdyYXRpb24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzcGF3biB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcblxuY29uc3QgTU9DS19QT1JUID0gNDUxMTE7IC8vIHVzZSBhIG5vbi1kZWZhdWx0IHBvcnQgdG8gYXZvaWQgY29sbGlzaW9uc1xuXG5mdW5jdGlvbiB3YWl0Rm9yUG9ydChwb3J0LCBob3N0ID0gJzEyNy4wLjAuMScsIHRpbWVvdXQgPSA1MDAwKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIChmdW5jdGlvbiB0cnlDb25uZWN0KCkge1xuICAgICAgY29uc3Qgc29jayA9IG5ldyBuZXQuU29ja2V0KCk7XG4gICAgICBzb2NrLnNldFRpbWVvdXQoNTAwKTtcbiAgICAgIHNvY2sub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgIHNvY2suZGVzdHJveSgpO1xuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgfSkub24oJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICBzb2NrLmRlc3Ryb3koKTtcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IHRpbWVvdXQpIHJldHVybiByZWplY3QobmV3IEVycm9yKCd0aW1lb3V0JykpO1xuICAgICAgICBzZXRUaW1lb3V0KHRyeUNvbm5lY3QsIDEwMCk7XG4gICAgICB9KS5vbigndGltZW91dCcsICgpID0+IHtcbiAgICAgICAgc29jay5kZXN0cm95KCk7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcigndGltZW91dCcpKTtcbiAgICAgICAgc2V0VGltZW91dCh0cnlDb25uZWN0LCAxMDApO1xuICAgICAgfSkuY29ubmVjdChwb3J0LCBob3N0KTtcbiAgICB9KSgpO1xuICB9KTtcbn1cblxuZGVzY3JpYmUoJ21vY2stc2VydmVyIGludGVncmF0aW9uJywgKCkgPT4ge1xuICBsZXQgcHJvYztcblxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIC8vIFN0YXJ0IHRoZSBtb2NrIHNlcnZlciB3aXRoIGEgY3VzdG9tIHBvcnRcbiAgICBwcm9jID0gc3Bhd24ocHJvY2Vzcy5leGVjUGF0aCwgWycuL21vY2tzL21vY2stc2VydmVyLmpzJ10sIHtcbiAgICAgIGN3ZDogX19kaXJuYW1lICsgJy8uLi8nLFxuICAgICAgZW52OiB7IC4uLnByb2Nlc3MuZW52LCBVU0dTX01PQ0tfUE9SVDogU3RyaW5nKE1PQ0tfUE9SVCksIFBPUlQ6IFN0cmluZyhNT0NLX1BPUlQpIH0sXG4gICAgICBzdGRpbzogWydpZ25vcmUnLCAncGlwZScsICdwaXBlJ11cbiAgICB9KTtcblxuICAgIC8vIFBpcGUgbG9ncyB0byBjb25zb2xlIGZvciBlYXNpZXIgZGVidWdnaW5nIHdoZW4gdGVzdHMgZmFpbFxuICAgIHByb2Muc3Rkb3V0Lm9uKCdkYXRhJywgKGQpID0+IHByb2Nlc3Muc3Rkb3V0LndyaXRlKGBbbW9jay1zZXJ2ZXJdICR7ZH1gKSk7XG4gICAgcHJvYy5zdGRlcnIub24oJ2RhdGEnLCAoZCkgPT4gcHJvY2Vzcy5zdGRlcnIud3JpdGUoYFttb2NrLXNlcnZlcl0gJHtkfWApKTtcblxuICAgIC8vIFdhaXQgdW50aWwgcG9ydCBpcyBsaXN0ZW5pbmdcbiAgICBhd2FpdCB3YWl0Rm9yUG9ydChNT0NLX1BPUlQsICcxMjcuMC4wLjEnLCA1MDAwKTtcbiAgfSwgMTUwMDApO1xuXG4gIGFmdGVyQWxsKCgpID0+IHtcbiAgICBpZiAocHJvYyAmJiAhcHJvYy5raWxsZWQpIHtcbiAgICAgIHByb2Mua2lsbCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgdGVzdCgndXNncyBtb2NrIHJldHVybnMgRmVhdHVyZUNvbGxlY3Rpb24gd2l0aCBmZWF0dXJlcyBhcnJheScsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgdXJsID0gYGh0dHA6Ly8xMjcuMC4wLjE6JHtNT0NLX1BPUlR9L3VzZ3Mvc2lnbmlmaWNhbnRfZGF5Lmdlb2pzb25gO1xuICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQodXJsLCB7IHRpbWVvdXQ6IDMwMDAgfSk7XG4gIGNvbnN0IGpzb24gPSByZXMuZGF0YTtcbiAgICBleHBlY3QoanNvbikudG9IYXZlUHJvcGVydHkoJ3R5cGUnLCAnRmVhdHVyZUNvbGxlY3Rpb24nKTtcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheShqc29uLmZlYXR1cmVzKSkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QoanNvbi5mZWF0dXJlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3QoanNvbi5mZWF0dXJlc1swXSkudG9IYXZlUHJvcGVydHkoJ3Byb3BlcnRpZXMnKTtcbiAgfSwgMTAwMDApO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsY0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsSUFBQSxHQUFBRCxzQkFBQSxDQUFBRixPQUFBO0FBQXNCLFNBQUFFLHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRXRCLE1BQU1HLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQzs7QUFFekIsU0FBU0MsV0FBV0EsQ0FBQ0MsSUFBSSxFQUFFQyxJQUFJLEdBQUcsV0FBVyxFQUFFQyxPQUFPLEdBQUcsSUFBSSxFQUFFO0VBQzdELE9BQU8sSUFBSUMsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQ3RDLE1BQU1DLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDLFNBQVNDLFVBQVVBLENBQUEsRUFBRztNQUNyQixNQUFNQyxJQUFJLEdBQUcsSUFBSUMsWUFBRyxDQUFDQyxNQUFNLENBQUMsQ0FBQztNQUM3QkYsSUFBSSxDQUFDRyxVQUFVLENBQUMsR0FBRyxDQUFDO01BQ3BCSCxJQUFJLENBQUNJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsTUFBTTtRQUN2QkosSUFBSSxDQUFDSyxPQUFPLENBQUMsQ0FBQztRQUNkWCxPQUFPLENBQUMsSUFBSSxDQUFDO01BQ2YsQ0FBQyxDQUFDLENBQUNVLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTTtRQUNuQkosSUFBSSxDQUFDSyxPQUFPLENBQUMsQ0FBQztR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