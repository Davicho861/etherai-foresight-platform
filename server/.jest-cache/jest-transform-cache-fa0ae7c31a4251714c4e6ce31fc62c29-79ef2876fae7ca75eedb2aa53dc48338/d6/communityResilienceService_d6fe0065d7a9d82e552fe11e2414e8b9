65869b3351386fdcbde30e8db195ada5
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCommunityResilienceIndex = getCommunityResilienceIndex;
var
/* istanbul ignore next */
_agents = _interopRequireDefault(require("../agents.js"));
/* istanbul ignore next */ function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function cov_19oqcvrysd() {
  var path = "/home/davicho/etherai-foresight-platform-main/server/src/services/communityResilienceService.js";
  var hash = "19b961dd1556ed8e4dbf0e88122f5563c11a580a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/davicho/etherai-foresight-platform-main/server/src/services/communityResilienceService.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 54,
          column: 3
        }
      },
      "1": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 63
        }
      },
      "2": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "3": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 23,
          column: 6
        }
      },
      "4": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 66
        }
      },
      "5": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "6": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 51,
          column: 7
        }
      },
      "7": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 50,
          column: 8
        }
      },
      "8": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "getCommunityResilienceIndex",
        decl: {
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 10,
            column: 49
          }
        },
        loc: {
          start: {
            line: 10,
            column: 96
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 40,
            column: 22
          },
          end: {
            line: 40,
            column: 23
          }
        },
        loc: {
          start: {
            line: 40,
            column: 33
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 40
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 50
          },
          end: {
            line: 10,
            column: 83
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 62
          },
          end: {
            line: 10,
            column: 83
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 85
          },
          end: {
            line: 10,
            column: 94
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 92
          },
          end: {
            line: 10,
            column: 94
          }
        }],
        line: 10
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "19b961dd1556ed8e4dbf0e88122f5563c11a580a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_19oqcvrysd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_19oqcvrysd();
/**
 * Fetches community resilience analysis for LATAM countries.
 * Uses the MetatronAgent CommunityResilienceAgent to analyze social resilience.
 * @param {Array<string>} countries - Array of country codes (e.g., ['COL', 'PER', 'ARG'])
 * @param {number} days - Number of days for analysis (default: 30)
 * @returns {Promise<object>} A promise that resolves to the community resilience data.
 */
async function getCommunityResilienceIndex(countries =
/* istanbul ignore next */
(cov_19oqcvrysd().b[0][0]++, ['COL', 'PER', 'ARG']), days =
/* istanbul ignore next */
(cov_19oqcvrysd().b[1][0]++, 30)) {
  /* istanbul ignore next */
  cov_19oqcvrysd().f[0]++;
  cov_19oqcvrysd().s[0]++;
  try {
    const agent =
    /* istanbul ignore next */
    (cov_19oqcvrysd().s[1]++, new
    /* istanbul ignore next */
    _agents.
    /* istanbul ignore next */
    default('CommunityResilienceAgent'));
    const result =
    /* istanbul ignore next */
    (cov_19oqcvrysd().s[2]++, await agent.run({
      countries,
      days
    }));
    /* istanbul ignore next */
    cov_19oqcvrysd().s[3]++;
    return {
      timestamp: result.timestamp,
      resilienceAnalysis: result.resilienceAnalysis,
      globalResilienceAssessment: result.globalResilienceAssessment,
      source: 'CommunityResilienceAgent'
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_19oqcvrysd().s[4]++;
    console.error('Error in getCommunityResilienceIndex:', error);
    // Return mock data if agent fails
    const mockData =
    /* istanbul ignore next */
    (cov_19oqcvrysd().s[5]++, {
      timestamp: new Date().toISOString(),
      resilienceAnalysis: {},
      globalResilienceAssessment: {
        averageResilience: 65.0,
        lowResilienceCountries: ['COL', 'PER'],
        assessment: 'Moderate community resilience with areas of concern',
        globalRecommendations: ['Strengthen community networks', 'Improve social services']
      },
      source: 'Mock data - Agent unavailable'
    });

    // Generate mock data for each country
    /* istanbul ignore next */
    cov_19oqcvrysd().s[6]++;
    countries.forEach(country => {
      /* istanbul ignore next */
      cov_19oqcvrysd().f[1]++;
      cov_19oqcvrysd().s[7]++;
      mockData.resilienceAnalysis[country] = {
        socialEvents: Math.floor(Math.random() * 10) + 1,
        resilienceScore: Math.floor(Math.random() * 40) + 60,
        // 60-100
        recommendations: ['Community engagement', 'Social programs', 'Education initiatives'],
        period: {
          startDate: new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          endDate: new Date().toISOString().split('T')[0]
        },
        isMock: true
      };
    });
    /* istanbul ignore next */
    cov_19oqcvrysd().s[8]++;
    return mockData;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,