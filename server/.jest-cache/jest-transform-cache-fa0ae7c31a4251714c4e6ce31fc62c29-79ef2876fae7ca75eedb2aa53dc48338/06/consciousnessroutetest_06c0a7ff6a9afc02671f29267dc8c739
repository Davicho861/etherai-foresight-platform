76a779d1d1470116590bfae026830cab
const request = require('supertest');
const express = require('express');
describe('/api/consciousness route', () => {
  afterEach(() => {
    jest.resetModules();
    jest.restoreAllMocks();
  });
  test('returns local fallback when chroma client unavailable', async () => {
    await jest.isolateModulesAsync(async () => {
      jest.doMock('../../src/database.js', () => ({
        getChromaClient: jest.fn(() => null)
      }));
      jest.doMock('fs/promises', () => ({
        access: jest.fn().mockResolvedValue(true),
        readFile: jest.fn().mockResolvedValue(JSON.stringify({
          id: 'a'
        }) + '\n')
      }));
      const routerMod = require('../../src/routes/consciousness.js');
      let router = routerMod;
      if (router && router.default) router = router.default;
      const app = express();
      app.use('/api/consciousness', router);
      const res = await request(app).get('/api/consciousness').set('Host', 'localhost');
      expect(res.statusCode).toBe(200);
      expect(res.body.source).toBe('local');
      expect(Array.isArray(res.body.items)).toBe(true);
    });
  });
  test('returns chroma source when client provides collection', async () => {
    await jest.isolateModulesAsync(async () => {
      const fakeCollection = {
        get: jest.fn().mockResolvedValue({
          ids: ['id1'],
          documents: ['err'],
          metadatas: [{
            timestamp: Date.now()
          }]
        })
      };
      jest.doMock('../../src/database.js', () => ({
        getChromaClient: jest.fn(() => ({
          getOrCreateCollection: jest.fn().mockResolvedValue(fakeCollection)
        }))
      }));
      const routerMod = require('../../src/routes/consciousness.js');
      let router = routerMod;
      if (router && router.default) router = router.default;
      const app = express();
      app.use('/api/consciousness', router);
      const res = await request(app).get('/api/consciousness').set('Host', 'localhost');
      expect(res.statusCode).toBe(200);
      expect(res.body.source).toBe('chroma');
      expect(Array.isArray(res.body.items)).toBe(true);
      expect(res.body.items[0].id).toBe('id1');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImV4cHJlc3MiLCJkZXNjcmliZSIsImFmdGVyRWFjaCIsImplc3QiLCJyZXNldE1vZHVsZXMiLCJyZXN0b3JlQWxsTW9ja3MiLCJ0ZXN0IiwiaXNvbGF0ZU1vZHVsZXNBc3luYyIsImRvTW9jayIsImdldENocm9tYUNsaWVudCIsImZuIiwiYWNjZXNzIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJyZWFkRmlsZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpZCIsInJvdXRlck1vZCIsInJvdXRlciIsImRlZmF1bHQiLCJhcHAiLCJ1c2UiLCJyZXMiLCJnZXQiLCJzZXQiLCJleHBlY3QiLCJzdGF0dXNDb2RlIiwidG9CZSIsImJvZHkiLCJzb3VyY2UiLCJBcnJheSIsImlzQXJyYXkiLCJpdGVtcyIsImZha2VDb2xsZWN0aW9uIiwiaWRzIiwiZG9jdW1lbnRzIiwibWV0YWRhdGFzIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImdldE9yQ3JlYXRlQ29sbGVjdGlvbiJdLCJzb3VyY2VzIjpbImNvbnNjaW91c25lc3Mucm91dGUudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuXG5kZXNjcmliZSgnL2FwaS9jb25zY2lvdXNuZXNzIHJvdXRlJywgKCkgPT4ge1xuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRNb2R1bGVzKCk7XG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgdGVzdCgncmV0dXJucyBsb2NhbCBmYWxsYmFjayB3aGVuIGNocm9tYSBjbGllbnQgdW5hdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgamVzdC5pc29sYXRlTW9kdWxlc0FzeW5jKGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9zcmMvZGF0YWJhc2UuanMnLCAoKSA9PiAoeyBnZXRDaHJvbWFDbGllbnQ6IGplc3QuZm4oKCkgPT4gbnVsbCkgfSkpO1xuICAgICAgamVzdC5kb01vY2soJ2ZzL3Byb21pc2VzJywgKCkgPT4gKHtcbiAgICAgICAgYWNjZXNzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgICAgIHJlYWRGaWxlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoSlNPTi5zdHJpbmdpZnkoeyBpZDogJ2EnIH0pICsgJ1xcbicpXG4gICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IHJvdXRlck1vZCA9IHJlcXVpcmUoJy4uLy4uL3NyYy9yb3V0ZXMvY29uc2Npb3VzbmVzcy5qcycpO1xuICAgICAgbGV0IHJvdXRlciA9IHJvdXRlck1vZDtcbiAgICAgIGlmIChyb3V0ZXIgJiYgcm91dGVyLmRlZmF1bHQpIHJvdXRlciA9IHJvdXRlci5kZWZhdWx0O1xuXG4gICAgICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gICAgICBhcHAudXNlKCcvYXBpL2NvbnNjaW91c25lc3MnLCByb3V0ZXIpO1xuXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvYXBpL2NvbnNjaW91c25lc3MnKS5zZXQoJ0hvc3QnLCAnbG9jYWxob3N0Jyk7XG4gICAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXMuYm9keS5zb3VyY2UpLnRvQmUoJ2xvY2FsJyk7XG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXMuYm9keS5pdGVtcykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JldHVybnMgY2hyb21hIHNvdXJjZSB3aGVuIGNsaWVudCBwcm92aWRlcyBjb2xsZWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGplc3QuaXNvbGF0ZU1vZHVsZXNBc3luYyhhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmYWtlQ29sbGVjdGlvbiA9IHsgZ2V0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBpZHM6IFsnaWQxJ10sIGRvY3VtZW50czogWydlcnInXSwgbWV0YWRhdGFzOiBbeyB0aW1lc3RhbXA6IERhdGUubm93KCkgfV0gfSkgfTtcbiAgICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9zcmMvZGF0YWJhc2UuanMnLCAoKSA9PiAoeyBnZXRDaHJvbWFDbGllbnQ6IGplc3QuZm4oKCkgPT4gKHsgZ2V0T3JDcmVhdGVDb2xsZWN0aW9uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoZmFrZUNvbGxlY3Rpb24pIH0pKSB9KSk7XG5cbiAgICAgIGNvbnN0IHJvdXRlck1vZCA9IHJlcXVpcmUoJy4uLy4uL3NyYy9yb3V0ZXMvY29uc2Npb3VzbmVzcy5qcycpO1xuICAgICAgbGV0IHJvdXRlciA9IHJvdXRlck1vZDtcbiAgICAgIGlmIChyb3V0ZXIgJiYgcm91dGVyLmRlZmF1bHQpIHJvdXRlciA9IHJvdXRlci5kZWZhdWx0O1xuXG4gICAgICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gICAgICBhcHAudXNlKCcvYXBpL2NvbnNjaW91c25lc3MnLCByb3V0ZXIpO1xuXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvYXBpL2NvbnNjaW91c25lc3MnKS5zZXQoJ0hvc3QnLCAnbG9jYWxob3N0Jyk7XG4gICAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXMuYm9keS5zb3VyY2UpLnRvQmUoJ2Nocm9tYScpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzLmJvZHkuaXRlbXMpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlcy5ib2R5Lml0ZW1zWzBdLmlkKS50b0JlKCdpZDEnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FB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