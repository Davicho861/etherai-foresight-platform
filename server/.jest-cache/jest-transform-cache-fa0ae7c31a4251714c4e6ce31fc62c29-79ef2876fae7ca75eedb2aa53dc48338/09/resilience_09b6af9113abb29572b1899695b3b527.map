{"version":3,"names":["CircuitBreaker","constructor","failureThreshold","recoveryTimeout","failureCount","lastFailureTime","state","execute","fn","Date","now","Error","result","onSuccess","error","onFailure","exports","retryWithBackoff","maxRetries","baseDelay","maxDelay","lastError","attempt","delay","Math","min","pow","jitter","random","totalDelay","console","log","toFixed","message","Promise","resolve","setTimeout","fetchWithTimeout","url","options","timeout","controller","AbortController","timeoutId","timeoutPromise","_","reject","abort","e","defaultHeaders","mergedOptions","headers","signal","response","race","fetch","clearTimeout","name","isJsonResponse","contentType","get","includes"],"sources":["resilience.js"],"sourcesContent":["/**\n * Utilidades de resiliencia para APIs externas\n * Incluye retry logic, circuit breaker y timeouts\n */\n\nclass CircuitBreaker {\n  constructor(failureThreshold = 3, recoveryTimeout = 60000) {\n    this.failureThreshold = failureThreshold;\n    this.recoveryTimeout = recoveryTimeout;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN\n  }\n\n  async execute(fn) {\n    if (this.state === 'OPEN') {\n      if (Date.now() - this.lastFailureTime > this.recoveryTimeout) {\n        this.state = 'HALF_OPEN';\n      } else {\n        throw new Error('Circuit breaker is OPEN');\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  onSuccess() {\n    this.failureCount = 0;\n    this.state = 'CLOSED';\n  }\n\n  onFailure() {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n    if (this.failureCount >= this.failureThreshold) {\n      this.state = 'OPEN';\n    }\n  }\n}\n\nasync function retryWithBackoff(fn, maxRetries = 3, baseDelay = 1000, maxDelay = 10000) {\n  let lastError;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n\n      if (attempt === maxRetries) {\n        break;\n      }\n\n      // Exponential backoff with jitter\n      const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n      const jitter = Math.random() * 0.1 * delay;\n      const totalDelay = delay + jitter;\n\n      console.log(`Retry attempt ${attempt + 1}/${maxRetries} after ${totalDelay.toFixed(0)}ms: ${error.message}`);\n      await new Promise(resolve => setTimeout(resolve, totalDelay));\n    }\n  }\n\n  throw lastError;\n}\n\nasync function fetchWithTimeout(url, options = {}, timeout = 10000) {\n  const controller = new AbortController();\n\n  // Create a timeout promise that rejects after `timeout` ms.\n  // We still call controller.abort() to keep behavior when real fetch supports it,\n  // but also race the fetch against this timeout so mocked fetches that ignore\n  // the signal don't hang the test.\n  let timeoutId;\n  const timeoutPromise = new Promise((_, reject) => {\n    timeoutId = setTimeout(() => {\n      try { controller.abort(); } catch (e) {}\n      reject(new Error(`Request timeout after ${timeout}ms`));\n    }, timeout);\n  });\n\n  try {\n    // Provide conservative default headers to reduce chance of being blocked by upstream providers\n    const defaultHeaders = {\n      'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)',\n      'Accept': 'application/json, text/plain, */*'\n    };\n    const mergedOptions = { ...options, headers: { ...(options.headers || {}), ...defaultHeaders }, signal: controller.signal };\n    const response = await Promise.race([\n      fetch(url, mergedOptions),\n      timeoutPromise\n    ]);\n\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    // If the fetch was aborted and produced an AbortError, normalize the message\n    if (error && error.name === 'AbortError') {\n      throw new Error(`Request timeout after ${timeout}ms`);\n    }\n    throw error;\n  }\n}\n\nfunction isJsonResponse(response) {\n  const contentType = response.headers.get('content-type');\n  return !!(contentType && contentType.includes('application/json'));\n}\n\nexport { CircuitBreaker, retryWithBackoff, fetchWithTimeout, isJsonResponse };"],"mappings":"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","ignoreList":[]}