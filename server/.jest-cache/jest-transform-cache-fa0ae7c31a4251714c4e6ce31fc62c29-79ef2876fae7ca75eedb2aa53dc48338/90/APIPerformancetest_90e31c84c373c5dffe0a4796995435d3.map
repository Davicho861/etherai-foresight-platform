{"version":3,"names":["_getJestObj","mock","kernel","getVigilanceStatus","jest","fn","flows","autoPreservation","active","lastRun","Date","toISOString","knowledge","prophecy","riskIndices","riskScore","level","activityFeed","timestamp","flow","message","subscribe","_supertest","data","_interopRequireDefault","require","_express","_alerts","_agent","_predict","_cache","e","__esModule","default","app","express","use","json","alertsRouter","agentRouter","predictRouter","describe","beforeEach","cache","clear","test","startTime","now","response1","request","get","expect","firstRequestTime","startTime2","response2","secondRequestTime","body","toEqual","toBeLessThan","cacheKey","cachedData","promises","Array","fill","map","responses","Promise","all","totalTime","forEach","response","status","toBe","alerts","toBeDefined","predictionParams","country","parameters","infectionRate","protestIndex","economicIndex","temperature","post","send","risk","confidence","params1","params2","score","not","startTime1","process","hrtime","bigint","endTime1","time1","Number","endTime2","time2","shortTTL","set","resolve","setTimeout","expiredData","toBeNull"],"sources":["APIPerformance.test.js"],"sourcesContent":["/**\n * API Performance Tests for MIS-020 Backend Optimization\n * Tests caching, response times, and performance improvements\n */\n\nimport request from 'supertest';\nimport express from 'express';\nimport alertsRouter from '../../src/routes/alerts.js';\nimport agentRouter from '../../src/routes/agent.js';\nimport predictRouter from '../../src/routes/predict.js';\nimport cache from '../../src/cache.js';\n\n// Mock kernel for agent routes\njest.mock('../../src/orchestrator.js', () => ({\n  kernel: {\n    getVigilanceStatus: jest.fn(() => ({\n      flows: {\n        autoPreservation: { active: true, lastRun: new Date().toISOString() },\n        knowledge: { active: true, lastRun: new Date().toISOString() },\n        prophecy: { active: true, lastRun: new Date().toISOString() }\n      },\n      riskIndices: {\n        'Colombia': { riskScore: 3.2, level: 'medium' },\n        'Argentina': { riskScore: 2.8, level: 'low' }\n      },\n      activityFeed: [\n        { timestamp: new Date().toISOString(), flow: 'prophecy', message: 'Risk indices updated' }\n      ]\n    }))\n  }\n}));\n\njest.mock('../../src/eventHub.js', () => ({\n  subscribe: jest.fn(() => jest.fn())\n}));\n\nconst app = express();\napp.use(express.json());\napp.use('/api/alerts', alertsRouter);\napp.use('/api/agent', agentRouter);\napp.use('/api/predict', predictRouter);\n\ndescribe('API Performance Tests - MIS-020', () => {\n  beforeEach(() => {\n    // Clear cache before each test\n    cache.clear();\n  });\n\n  describe('Alerts API Performance', () => {\n    test('should cache alerts responses and serve from cache on subsequent calls', async () => {\n      const startTime = Date.now();\n\n      // First request - should compute and cache\n      const response1 = await request(app)\n        .get('/api/alerts')\n        .expect(200);\n\n      const firstRequestTime = Date.now() - startTime;\n\n      const startTime2 = Date.now();\n\n      // Second request - should serve from cache\n      const response2 = await request(app)\n        .get('/api/alerts')\n        .expect(200);\n\n      const secondRequestTime = Date.now() - startTime2;\n\n      // Response should be identical\n      expect(response1.body).toEqual(response2.body);\n\n      // Second request should be significantly faster (cached)\n      expect(secondRequestTime).toBeLessThan(firstRequestTime * 0.5);\n\n      // Verify cache hit\n      const cacheKey = 'alerts:all:all:all';\n      const cachedData = cache.get(cacheKey);\n      expect(cachedData).toEqual(response1.body);\n    });\n\n    test('should cache filtered alerts responses', async () => {\n      // Test caching with filters\n      const response1 = await request(app)\n        .get('/api/alerts?region=Colombia')\n        .expect(200);\n\n      const response2 = await request(app)\n        .get('/api/alerts?region=Colombia')\n        .expect(200);\n\n      expect(response1.body).toEqual(response2.body);\n\n      // Verify cache with specific key\n      const cacheKey = 'alerts:colombia:all:all';\n      const cachedData = cache.get(cacheKey);\n      expect(cachedData).toEqual(response1.body);\n    });\n\n    test('should handle concurrent requests efficiently', async () => {\n      const promises = Array(10).fill().map(() =>\n        request(app).get('/api/alerts')\n      );\n\n      const startTime = Date.now();\n      const responses = await Promise.all(promises);\n      const totalTime = Date.now() - startTime;\n\n      // All responses should be successful\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(response.body.alerts).toBeDefined();\n      });\n\n      // Concurrent requests should complete within reasonable time\n      expect(totalTime).toBeLessThan(2000); // 2 seconds for 10 concurrent requests\n    });\n  });\n\n  describe('Agent API Performance', () => {\n    test('should cache vigilance status responses', async () => {\n      const response1 = await request(app)\n        .get('/api/agent/vigilance/status')\n        .expect(200);\n\n      const response2 = await request(app)\n        .get('/api/agent/vigilance/status')\n        .expect(200);\n\n      // Responses should be identical\n      expect(response1.body).toEqual(response2.body);\n\n      // Verify cache hit\n      const cacheKey = 'vigilance:status';\n      const cachedData = cache.get(cacheKey);\n      expect(cachedData).toEqual(response1.body);\n    });\n  });\n\n  describe('Prediction API Performance', () => {\n    test('should cache prediction responses based on parameters', async () => {\n      const predictionParams = {\n        country: 'Colombia',\n        parameters: {\n          infectionRate: 25,\n          protestIndex: 15,\n          economicIndex: 10,\n          temperature: 5\n        }\n      };\n\n      const response1 = await request(app)\n        .post('/api/predict')\n        .send(predictionParams)\n        .expect(200);\n\n      const response2 = await request(app)\n        .post('/api/predict')\n        .send(predictionParams)\n        .expect(200);\n\n      // Responses should be identical\n      expect(response1.body).toEqual(response2.body);\n      expect(response1.body.country).toBe('Colombia');\n      expect(response1.body.risk).toBeDefined();\n      expect(response1.body.confidence).toBeDefined();\n    });\n\n    test('should not cache different prediction parameters', async () => {\n      const params1 = {\n        country: 'Colombia',\n        parameters: { infectionRate: 25, protestIndex: 15, economicIndex: 10, temperature: 5 }\n      };\n\n      const params2 = {\n        country: 'Colombia',\n        parameters: { infectionRate: 30, protestIndex: 15, economicIndex: 10, temperature: 5 }\n      };\n\n      const response1 = await request(app)\n        .post('/api/predict')\n        .send(params1)\n        .expect(200);\n\n      const response2 = await request(app)\n        .post('/api/predict')\n        .send(params2)\n        .expect(200);\n\n      // Responses should be different due to different parameters\n      expect(response1.body.score).not.toBe(response2.body.score);\n    });\n  });\n\n  describe('Cache Performance Metrics', () => {\n    test('should demonstrate significant performance improvement with caching', async () => {\n      // Measure time without cache (simulate by clearing cache)\n      cache.clear();\n\n      const startTime1 = process.hrtime.bigint();\n      await request(app).get('/api/alerts');\n      const endTime1 = process.hrtime.bigint();\n      const time1 = Number(endTime1 - startTime1) / 1000000; // Convert to milliseconds\n\n      const startTime2 = process.hrtime.bigint();\n      await request(app).get('/api/alerts'); // Should hit cache\n      const endTime2 = process.hrtime.bigint();\n      const time2 = Number(endTime2 - startTime2) / 1000000;\n\n      // Cached request should be at least 50% faster\n      expect(time2).toBeLessThan(time1 * 0.5);\n    });\n\n    test('should maintain cache TTL and expiration', async () => {\n      // Set a short TTL for testing\n      const shortTTL = 100; // 100ms\n\n      // Make request and cache it\n      await request(app).get('/api/alerts');\n\n      // Modify cache to have short TTL\n      const cacheKey = 'alerts:all:all:all';\n      const cachedData = cache.get(cacheKey);\n      cache.set(cacheKey, cachedData, shortTTL);\n\n      // Wait for expiration\n      await new Promise(resolve => setTimeout(resolve, shortTTL + 10));\n\n      // Cache should be expired\n      const expiredData = cache.get(cacheKey);\n      expect(expiredData).toBeNull();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}