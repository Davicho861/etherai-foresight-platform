{"version":3,"names":["_getJestObj","mock","_server","require","_usgsService","_SeismicIntegration","jest","describe","beforeAll","server","listen","afterAll","close","beforeEach","clearAllMocks","it","mockRawData","features","id","properties","mag","place","time","tsunami","sig","url","geometry","coordinates","getSeismicData","mockResolvedValue","result","getSeismicActivity","expect","toHaveProperty","events","toHaveLength","toMatchObject","magnitude","significance","summary","totalEvents","maxMagnitude","source","toEqual","mockRejectedValue","Error","error","toBe"],"sources":["usgsService.test.js"],"sourcesContent":["import { server } from '../mocks/server.js';\nimport { getSeismicActivity } from '../../src/services/usgsService.js';\nimport { getSeismicData } from '../../src/services/SeismicIntegration.js';\n\n// Mock the SeismicIntegration\njest.mock('../../src/services/SeismicIntegration.js');\n\ndescribe('USGS Service', () => {\n  beforeAll(() => {\n    server.listen();\n  });\n\n  afterAll(() => {\n    server.close();\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getSeismicActivity', () => {\n    it('should return transformed seismic data successfully', async () => {\n      const mockRawData = {\n        features: [\n          {\n            id: 'test1',\n            properties: {\n              mag: 6.5,\n              place: 'Test Location',\n              time: 1638360000000,\n              tsunami: 0,\n              sig: 100,\n              url: 'https://example.com'\n            },\n            geometry: {\n              coordinates: [-120.0, 35.0, 10.0]\n            }\n          }\n        ]\n      };\n\n      getSeismicData.mockResolvedValue(mockRawData);\n\n      const result = await getSeismicActivity();\n\n      expect(result).toHaveProperty('events');\n      expect(result).toHaveProperty('summary');\n      expect(result.events).toHaveLength(1);\n      expect(result.events[0]).toMatchObject({\n        id: 'test1',\n        magnitude: 6.5,\n        place: 'Test Location',\n        time: 1638360000000,\n        tsunami: 0,\n        significance: 100,\n        url: 'https://example.com',\n        coordinates: [-120.0, 35.0, 10.0]\n      });\n      expect(result.summary).toMatchObject({\n        totalEvents: 1,\n        maxMagnitude: 6.5,\n        source: 'USGS Earthquake Hazards Program'\n      });\n    });\n\n    it('should handle empty seismic data', async () => {\n      const mockRawData = { features: [] };\n      getSeismicData.mockResolvedValue(mockRawData);\n\n      const result = await getSeismicActivity();\n\n      expect(result.events).toEqual([]);\n      expect(result.summary).toMatchObject({\n        totalEvents: 0,\n        maxMagnitude: 0,\n        source: 'USGS Earthquake Hazards Program'\n      });\n    });\n\n    it('should handle integration errors gracefully', async () => {\n      getSeismicData.mockRejectedValue(new Error('Network error'));\n\n      const result = await getSeismicActivity();\n\n      expect(result).toHaveProperty('error');\n      expect(result.error).toBe('Network error');\n      expect(result.events).toEqual([]);\n    });\n\n    it('should handle invalid data structure', async () => {\n      getSeismicData.mockResolvedValue(null);\n\n      const result = await getSeismicActivity();\n\n      expect(result.events).toEqual([]);\n      expect(result.summary.totalEvents).toBe(0);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}