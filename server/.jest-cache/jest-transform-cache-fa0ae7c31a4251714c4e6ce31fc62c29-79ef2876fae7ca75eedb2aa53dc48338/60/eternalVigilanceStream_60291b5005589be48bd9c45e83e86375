9fb73eeda00c41616f1fb2c77ad9fe00
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = _interopRequireDefault(require("express"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Do not import vigilance or sseTokenService at module load time so tests can mock them with jest.doMock

const router = _express.default.Router();

// Allow EventSource to authenticate via query param: /stream?token=xxx
router.get('/stream', async (req, res) => {
  // prefer token from cookie (praevisio_sse_token), fallback to query param for backward compatibility
  const cookieToken = req.cookies && req.cookies.praevisio_sse_token ? String(req.cookies.praevisio_sse_token) : '';
  const token = cookieToken || (req.query && (req.query.token || req.query.auth) ? String(req.query.token || req.query.auth) : '');
  const expected = process.env.PRAEVISIO_BEARER_TOKEN || 'demo-token';

  // require services at request time so tests can override them
  const sseTokenService = require('../sseTokenService.js').default || require('../sseTokenService.js');
  const vigilance = require('../eternalVigilanceService.js').default || require('../eternalVigilanceService.js');
  const okStatic = token && token === expected;
  const okTemp = token && (await sseTokenService.validateToken(token));
  if (!okStatic && !okTemp) {
    // return 401 to the client
    res.status(401).json({
      error: 'Unauthorized - invalid token'
    });
    return;
  }
  // headers SSE
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
  res.flushHeaders && res.flushHeaders();

  // send initial state
  // send initial state (stringified event)
  try {
    const state = typeof vigilance.getState === 'function' ? vigilance.getState() : {};
    res.write(`data: ${JSON.stringify({
      event: 'init',
      state
    })}\n\n`);
  } catch (e) {
    // ignore write errors
  }
  if (typeof vigilance.subscribe === 'function') vigilance.subscribe(res);
  req.on('close', () => {
    if (typeof vigilance.unsubscribe === 'function') vigilance.unsubscribe(res);
  });
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwicm91dGVyIiwiZXhwcmVzcyIsIlJvdXRlciIsImdldCIsInJlcSIsInJlcyIsImNvb2tpZVRva2VuIiwiY29va2llcyIsInByYWV2aXNpb19zc2VfdG9rZW4iLCJTdHJpbmciLCJ0b2tlbiIsInF1ZXJ5IiwiYXV0aCIsImV4cGVjdGVkIiwicHJvY2VzcyIsImVudiIsIlBSQUVWSVNJT19CRUFSRVJfVE9LRU4iLCJzc2VUb2tlblNlcnZpY2UiLCJ2aWdpbGFuY2UiLCJva1N0YXRpYyIsIm9rVGVtcCIsInZhbGlkYXRlVG9rZW4iLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJzZXRIZWFkZXIiLCJmbHVzaEhlYWRlcnMiLCJzdGF0ZSIsImdldFN0YXRlIiwid3JpdGUiLCJKU09OIiwic3RyaW5naWZ5IiwiZXZlbnQiLCJzdWJzY3JpYmUiLCJvbiIsInVuc3Vic2NyaWJlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZXRlcm5hbFZpZ2lsYW5jZVN0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbi8vIERvIG5vdCBpbXBvcnQgdmlnaWxhbmNlIG9yIHNzZVRva2VuU2VydmljZSBhdCBtb2R1bGUgbG9hZCB0aW1lIHNvIHRlc3RzIGNhbiBtb2NrIHRoZW0gd2l0aCBqZXN0LmRvTW9ja1xuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG4vLyBBbGxvdyBFdmVudFNvdXJjZSB0byBhdXRoZW50aWNhdGUgdmlhIHF1ZXJ5IHBhcmFtOiAvc3RyZWFtP3Rva2VuPXh4eFxucm91dGVyLmdldCgnL3N0cmVhbScsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAvLyBwcmVmZXIgdG9rZW4gZnJvbSBjb29raWUgKHByYWV2aXNpb19zc2VfdG9rZW4pLCBmYWxsYmFjayB0byBxdWVyeSBwYXJhbSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICBjb25zdCBjb29raWVUb2tlbiA9IHJlcS5jb29raWVzICYmIHJlcS5jb29raWVzLnByYWV2aXNpb19zc2VfdG9rZW4gPyBTdHJpbmcocmVxLmNvb2tpZXMucHJhZXZpc2lvX3NzZV90b2tlbikgOiAnJztcbiAgY29uc3QgdG9rZW4gPSBjb29raWVUb2tlbiB8fCAocmVxLnF1ZXJ5ICYmIChyZXEucXVlcnkudG9rZW4gfHwgcmVxLnF1ZXJ5LmF1dGgpID8gU3RyaW5nKHJlcS5xdWVyeS50b2tlbiB8fCByZXEucXVlcnkuYXV0aCkgOiAnJyk7XG4gIGNvbnN0IGV4cGVjdGVkID0gcHJvY2Vzcy5lbnYuUFJBRVZJU0lPX0JFQVJFUl9UT0tFTiB8fCAnZGVtby10b2tlbic7XG5cbiAgLy8gcmVxdWlyZSBzZXJ2aWNlcyBhdCByZXF1ZXN0IHRpbWUgc28gdGVzdHMgY2FuIG92ZXJyaWRlIHRoZW1cbiAgY29uc3Qgc3NlVG9rZW5TZXJ2aWNlID0gcmVxdWlyZSgnLi4vc3NlVG9rZW5TZXJ2aWNlLmpzJykuZGVmYXVsdCB8fCByZXF1aXJlKCcuLi9zc2VUb2tlblNlcnZpY2UuanMnKTtcbiAgY29uc3QgdmlnaWxhbmNlID0gcmVxdWlyZSgnLi4vZXRlcm5hbFZpZ2lsYW5jZVNlcnZpY2UuanMnKS5kZWZhdWx0IHx8IHJlcXVpcmUoJy4uL2V0ZXJuYWxWaWdpbGFuY2VTZXJ2aWNlLmpzJyk7XG5cbiAgY29uc3Qgb2tTdGF0aWMgPSB0b2tlbiAmJiB0b2tlbiA9PT0gZXhwZWN0ZWQ7XG4gIGNvbnN0IG9rVGVtcCA9IHRva2VuICYmIChhd2FpdCBzc2VUb2tlblNlcnZpY2UudmFsaWRhdGVUb2tlbih0b2tlbikpO1xuICBpZiAoIW9rU3RhdGljICYmICFva1RlbXApIHtcbiAgICAvLyByZXR1cm4gNDAxIHRvIHRoZSBjbGllbnRcbiAgICByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkIC0gaW52YWxpZCB0b2tlbicgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGhlYWRlcnMgU1NFXG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L2V2ZW50LXN0cmVhbScpO1xuICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLWNhY2hlJyk7XG4gIHJlcy5zZXRIZWFkZXIoJ0Nvbm5lY3Rpb24nLCAna2VlcC1hbGl2ZScpO1xuICByZXMuZmx1c2hIZWFkZXJzICYmIHJlcy5mbHVzaEhlYWRlcnMoKTtcblxuICAvLyBzZW5kIGluaXRpYWwgc3RhdGVcbiAgLy8gc2VuZCBpbml0aWFsIHN0YXRlIChzdHJpbmdpZmllZCBldmVudClcbiAgdHJ5IHtcbiAgICBjb25zdCBzdGF0ZSA9ICh0eXBlb2YgdmlnaWxhbmNlLmdldFN0YXRlID09PSAnZnVuY3Rpb24nKSA/IHZpZ2lsYW5jZS5nZXRTdGF0ZSgpIDoge307XG4gICAgcmVzLndyaXRlKGBkYXRhOiAke0pTT04uc3RyaW5naWZ5KHsgZXZlbnQ6ICdpbml0Jywgc3RhdGUgfSl9XFxuXFxuYCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpZ25vcmUgd3JpdGUgZXJyb3JzXG4gIH1cblxuICBpZiAodHlwZW9mIHZpZ2lsYW5jZS5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIHZpZ2lsYW5jZS5zdWJzY3JpYmUocmVzKTtcblxuICByZXEub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmlnaWxhbmNlLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSB2aWdpbGFuY2UudW5zdWJzY3JpYmUocmVzKTtcbiAgfSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBOEIsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FB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