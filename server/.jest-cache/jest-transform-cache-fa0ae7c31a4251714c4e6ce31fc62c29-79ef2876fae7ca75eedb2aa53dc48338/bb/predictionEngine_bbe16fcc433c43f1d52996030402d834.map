{"version":3,"names":["_axios","data","_interopRequireDefault","require","_ethicalVectorModule","_cache","e","__esModule","default","generativeAIService","getGenerativeAIService","module","RESOLVED_PORT","process","env","PORT","Number","NATIVE_DEV_MODE","PRAEVISIO_API_BASE_URL","AUTH_TOKEN","PRAEVISIO_BEARER_TOKEN","predictionState","lastUpdated","riskIndices","famineRisk","value","source","confidence","geophysicalRisk","significantEvents","supplyChainRisk","affectedRegions","climateExtremesRisk","extremeEvents","affectedCountries","communityResilienceRisk","lowResilienceCountries","averageResilience","cryptoVolatilityRisk","volatilityIndex","riskAssessment","marketData","biodiversityRisk","riskIndex","regions","pandemicsRisk","riskLevel","cybersecurityRisk","sectors","economicInstabilityRisk","geopoliticalInstabilityRisk","multiDomainRiskIndex","ethicalAssessment","vector","components","humanImpact","environmentalSustainability","socialEquity","overallScore","assessment","timestamp","generativeAnalysis","narrative","correlations","lastGenerated","fetchInternalData","endpoint","cacheKey","cached","cache","get","console","log","response","axios","headers","set","error","stack","message","String","Error","updateFamineRiskIndex","foodSecurityData","warn","values","Object","filter","item","map","length","averageUndernourishment","reduce","sum","val","riskValue","Math","min","parseFloat","toFixed","countries","keys","updateGeophysicalRiskIndex","seismicEvents","Array","isArray","maxMagnitude","max","magnitude","updateSupplyChainRiskIndex","event","location","place","coordinates","potentialImpact","avgMagnitude","region","eventCountFactor","magnitudeFactor","updateClimateExtremesRiskIndex","climateData","totalExtremeEvents","highRiskCountries","mediumRiskCountries","updateCommunityResilienceRiskIndex","resilienceData","resilienceAnalysis","globalResilienceAssessment","entries","country","resilienceScore","join","updateCryptoVolatilityRiskIndex","cryptoData","undefined","analysis","totalCryptos","updateBiodiversityRiskIndex","biodiversityData","bioData","totalRegions","updatePandemicsRiskIndex","pandemicsData","updateCybersecurityRiskIndex","cybersecurityData","updateEconomicInstabilityRiskIndex","economicData","updateGeopoliticalInstabilityRiskIndex","geopoliticalData","updateMultiDomainRiskIndex","famineWeight","geoWeight","supplyChainWeight","climateWeight","resilienceWeight","cryptoWeight","biodiversityWeight","pandemicsWeight","cybersecurityWeight","economicInstabilityWeight","geopoliticalInstabilityWeight","famineValue","geoValue","supplyChainValue","climateValue","resilienceValue","cryptoValue","biodiversityValue","pandemicsValue","cybersecurityValue","economicInstabilityValue","geopoliticalInstabilityValue","totalRisk","weightedConfidence","updateGenerativeAnalysis","service","currentRiskData","generatePredictiveNarrative","focusAreas","timeHorizon","detailLevel","language","analyzeRiskCorrelations","Date","toISOString","updateEthicalAssessment","ethicalVector","calculateEthicalVector","getRiskIndices","runProphecyCycle","Promise","all","catch"],"sources":["predictionEngine.js"],"sourcesContent":["/**\n * @fileoverview Prediction Engine for Global Risk Assessment.\n * This service consumes integrated data sources to generate and update predictive risk indices.\n * It represents the \"Perpetual Prophecy Flow\" of the Aion directive.\n */\n\nimport axios from 'axios';\nimport { calculateEthicalVector } from './ethicalVectorModule.js';\nimport cache from '../cache.js';\n\n// Lazy load generative AI service to avoid circular dependencies\nlet generativeAIService = null;\nconst getGenerativeAIService = async () => {\n  if (!generativeAIService) {\n    const module = await import('./generativeAIService.js');\n    generativeAIService = module.default || module;\n  }\n  return generativeAIService;\n};\n\n// This would be stored in a more secure and dynamic configuration in a real system.\n// Resolve the internal API base URL to the actual running server port.\n// Default to PORT env or 4000 (the server listens on 4000 by default for native/dev runs).\nconst RESOLVED_PORT = process.env.PORT ? Number(process.env.PORT) : (process.env.NATIVE_DEV_MODE === 'true' ? 4003 : 4000);\nconst PRAEVISIO_API_BASE_URL = `http://localhost:${RESOLVED_PORT}`;\nconst AUTH_TOKEN = process.env.PRAEVISIO_BEARER_TOKEN || 'demo-token';\n\nconst predictionState = {\n  lastUpdated: null,\n  riskIndices: {\n    famineRisk: {\n      value: null,\n      source: null,\n      confidence: 0.0,\n    },\n    geophysicalRisk: {\n      value: null,\n      source: 'USGS',\n      confidence: 0.0,\n      significantEvents: [],\n    },\n    supplyChainRisk: {\n      value: null,\n      source: 'USGS-Seismic',\n      confidence: 0.0,\n      affectedRegions: [],\n    },\n    climateExtremesRisk: {\n      value: null,\n      source: 'NASA-POWER',\n      confidence: 0.0,\n      extremeEvents: [],\n      affectedCountries: [],\n    },\n    communityResilienceRisk: {\n      value: null,\n      source: 'CommunityResilienceAgent',\n      confidence: 0.0,\n      lowResilienceCountries: [],\n      averageResilience: 0,\n    },\n    cryptoVolatilityRisk: {\n      value: null,\n      source: 'CryptoService',\n      confidence: 0.0,\n      volatilityIndex: 0,\n      riskAssessment: 'Low',\n      marketData: [],\n    },\n    biodiversityRisk: {\n      value: null,\n      source: 'BiodiversityService',\n      confidence: 0.0,\n      riskIndex: 0,\n      riskAssessment: 'Low',\n      regions: [],\n    },\n    pandemicsRisk: {\n      value: null,\n      source: 'PandemicsService',\n      confidence: 0.0,\n      riskIndex: 0,\n      riskLevel: 'Low',\n      regions: [],\n    },\n    cybersecurityRisk: {\n      value: null,\n      source: 'CybersecurityService',\n      confidence: 0.0,\n      riskIndex: 0,\n      riskLevel: 'Low',\n      sectors: [],\n    },\n    economicInstabilityRisk: {\n      value: null,\n      source: 'EconomicInstabilityService',\n      confidence: 0.0,\n      riskIndex: 0,\n      riskLevel: 'Low',\n      regions: [],\n    },\n    geopoliticalInstabilityRisk: {\n      value: null,\n      source: 'GeopoliticalInstabilityService',\n      confidence: 0.0,\n      riskIndex: 0,\n      riskLevel: 'Low',\n      regions: [],\n    },\n  },\n  multiDomainRiskIndex: {\n    value: null,\n    confidence: 0.0,\n  },\n  ethicalAssessment: {\n    vector: [0, 0, 0],\n    components: {\n      humanImpact: 0,\n      environmentalSustainability: 0,\n      socialEquity: 0,\n    },\n    overallScore: 0,\n    assessment: 'Low Ethical Concern',\n    timestamp: null,\n  },\n  generativeAnalysis: {\n    narrative: null,\n    correlations: null,\n    lastGenerated: null,\n    confidence: 0.0,\n  },\n};\n\n/**\n * Fetches data from a Praevisio internal API endpoint with caching.\n * @param {string} endpoint The API endpoint to fetch data from.\n * @returns {Promise<object>} The data from the endpoint.\n */\nasync function fetchInternalData(endpoint) {\n  const cacheKey = `internal_${endpoint}`;\n  const cached = cache.get(cacheKey);\n  if (cached) {\n    console.log(`[PredictionEngine] Using cached data for ${endpoint}`);\n    return cached;\n  }\n\n\n  try {\n    const response = await axios.get(`${PRAEVISIO_API_BASE_URL}${endpoint}`, {\n      headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` },\n    });\n    const data = response.data.data || response.data;\n    // Cache for 5 minutes\n    cache.set(cacheKey, data, 5 * 60 * 1000);\n    return data;\n  } catch (error) {\n    console.error(`[PredictionEngine] Failed to fetch internal data from ${endpoint}:`, error && error.stack ? error.stack : (error && error.message) || String(error));\n    throw new Error('Internal data source unavailable.');\n  }\n}\n\n/**\n * Updates the Famine Risk Index based on the latest food security data.\n */\nasync function updateFamineRiskIndex() {\n  console.log('[PredictionEngine] Updating Famine Risk Index...');\n  try {\n    const foodSecurityData = await fetchInternalData('/api/global-risk/food-security');\n\n    if (!foodSecurityData || !foodSecurityData.data) {\n      console.warn('[PredictionEngine] Invalid food security data received. Skipping update.');\n      return;\n    }\n\n  // Calculate risk based on prevalence of undernourishment\n  // Higher undernourishment = higher famine risk\n  const values = Object.values(foodSecurityData.data).filter(item => item.value !== null && !item.error).map(item => item.value);\n  if (values.length === 0) {\n    console.error('[PredictionEngine] No valid undernourishment data available.');\n    return;\n  }\n\n  const averageUndernourishment = values.reduce((sum, val) => sum + val, 0) / values.length;\n  // Risk scales with undernourishment: 0-10% = low risk (0-20), 10-20% = medium (20-50), >20% = high (50-100)\n  let riskValue;\n  if (averageUndernourishment <= 10) {\n    riskValue = (averageUndernourishment / 10) * 20;\n  } else if (averageUndernourishment <= 20) {\n    riskValue = 20 + ((averageUndernourishment - 10) / 10) * 30;\n  } else {\n    riskValue = 50 + ((averageUndernourishment - 20) / 10) * 50;\n  }\n  riskValue = Math.min(100, parseFloat(riskValue.toFixed(2)));\n\n  predictionState.riskIndices.famineRisk = {\n    value: riskValue,\n    source: foodSecurityData.source,\n    confidence: 0.85,\n    averageUndernourishment: averageUndernourishment,\n    countries: Object.keys(foodSecurityData.data)\n  };\n  console.log(`[PredictionEngine] Famine Risk Index updated to ${riskValue} based on average undernourishment of ${averageUndernourishment.toFixed(2)}%.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Famine Risk Index:', error.message);\n  }\n}\n\n/**\n * Updates the Geophysical Risk Index based on the latest seismic activity.\n */\nasync function updateGeophysicalRiskIndex() {\n  console.log('[PredictionEngine] Updating Geophysical Risk Index...');\n  try {\n    const seismicEvents = await fetchInternalData('/api/seismic/activity');\n\n    if (!Array.isArray(seismicEvents)) {\n      console.warn('[PredictionEngine] Invalid seismic data received. Skipping update.');\n      return;\n    }\n\n  predictionState.riskIndices.geophysicalRisk.significantEvents = seismicEvents;\n\n  if (seismicEvents.length === 0) {\n    predictionState.riskIndices.geophysicalRisk.value = 0;\n    predictionState.riskIndices.geophysicalRisk.confidence = 0.95; // High confidence in no risk\n    console.log('[PredictionEngine] No significant seismic events detected. Geophysical Risk is 0.');\n    return;\n  }\n\n  // Simplified risk: scale of 0-100 based on the max magnitude of the day.\n  // A magnitude of 8.0 or higher is considered catastrophic (100).\n  const maxMagnitude = Math.max(...seismicEvents.map(e => e.magnitude));\n  const riskValue = Math.min(100, parseFloat(((maxMagnitude / 8.0) * 100).toFixed(2)));\n\n  predictionState.riskIndices.geophysicalRisk.value = riskValue;\n  predictionState.riskIndices.geophysicalRisk.confidence = 0.90; // Static confidence\n\n  console.log(`[PredictionEngine] Geophysical Risk Index updated to ${riskValue} based on max magnitude of ${maxMagnitude}.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Geophysical Risk Index:', error.message);\n  }\n}\n\n/**\n * Updates the Supply Chain Risk Index based on seismic activity that could disrupt logistics.\n */\nasync function updateSupplyChainRiskIndex() {\n  console.log('[PredictionEngine] Updating Supply Chain Risk Index...');\n  try {\n    const seismicEvents = await fetchInternalData('/api/seismic/activity');\n\n    if (!Array.isArray(seismicEvents)) {\n      console.warn('[PredictionEngine] Invalid seismic data received for supply chain analysis. Skipping update.');\n      return;\n    }\n\n  if (seismicEvents.length === 0) {\n    predictionState.riskIndices.supplyChainRisk.value = 0;\n    predictionState.riskIndices.supplyChainRisk.confidence = 0.95;\n    predictionState.riskIndices.supplyChainRisk.affectedRegions = [];\n    console.log('[PredictionEngine] No significant seismic events detected. Supply Chain Risk is 0.');\n    return;\n  }\n\n  // Identify regions with significant seismic activity that could affect supply chains\n  const affectedRegions = seismicEvents\n    .filter(event => event.magnitude >= 6.0) // Events >= 6.0 magnitude can disrupt logistics\n    .map(event => ({\n      location: event.place,\n      magnitude: event.magnitude,\n      coordinates: event.coordinates,\n      potentialImpact: event.magnitude >= 7.0 ? 'High' : 'Medium'\n    }));\n\n  // Calculate risk based on number and severity of events\n  let riskValue = 0;\n  if (affectedRegions.length > 0) {\n    const avgMagnitude = affectedRegions.reduce((sum, region) => sum + region.magnitude, 0) / affectedRegions.length;\n    const eventCountFactor = Math.min(affectedRegions.length * 10, 50); // Up to 50 points for multiple events\n    const magnitudeFactor = Math.min((avgMagnitude - 6.0) * 25, 50); // Scale from 6.0+\n    riskValue = Math.min(100, eventCountFactor + magnitudeFactor);\n  }\n\n  predictionState.riskIndices.supplyChainRisk.value = riskValue;\n  predictionState.riskIndices.supplyChainRisk.confidence = 0.88;\n  predictionState.riskIndices.supplyChainRisk.affectedRegions = affectedRegions;\n\n  console.log(`[PredictionEngine] Supply Chain Risk Index updated to ${riskValue} based on ${affectedRegions.length} significant seismic events.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Supply Chain Risk Index:', error.message);\n  }\n}\n\n/**\n * Updates the Climate Extremes Risk Index based on extreme weather events.\n */\nasync function updateClimateExtremesRiskIndex() {\n  console.log('[PredictionEngine] Updating Climate Extremes Risk Index...');\n  try {\n    const climateData = await fetchInternalData('/api/global-risk/climate-extremes');\n\n    if (!climateData || !climateData.data || !Array.isArray(climateData.data)) {\n      console.warn('[PredictionEngine] Invalid climate extremes data received. Skipping update.');\n      return;\n    }\n\n  const data = climateData.data;\n  const extremeEvents = data.filter(item => item.extremeEvents > 0);\n  const affectedCountries = data.filter(item => item.riskLevel === 'high' || item.riskLevel === 'medium');\n\n  // Calculate summary\n  const totalExtremeEvents = data.reduce((sum, item) => sum + (item.extremeEvents || 0), 0);\n  const highRiskCountries = data.filter(item => item.riskLevel === 'high').length;\n  const mediumRiskCountries = data.filter(item => item.riskLevel === 'medium').length;\n\n  // Calculate risk based on extreme events and high-risk countries\n  let riskValue = 0;\n  if (totalExtremeEvents > 0) {\n    riskValue += Math.min(totalExtremeEvents * 5, 50); // Up to 50 points for extreme events\n  }\n  if (highRiskCountries > 0) {\n    riskValue += Math.min(highRiskCountries * 15, 50); // Up to 50 points for high-risk countries\n  }\n  if (mediumRiskCountries > 0) {\n    riskValue += Math.min(mediumRiskCountries * 5, 25); // Up to 25 points for medium-risk countries\n  }\n\n  riskValue = Math.min(100, riskValue);\n\n  predictionState.riskIndices.climateExtremesRisk.value = riskValue;\n  predictionState.riskIndices.climateExtremesRisk.confidence = 0.85;\n  predictionState.riskIndices.climateExtremesRisk.extremeEvents = extremeEvents;\n  predictionState.riskIndices.climateExtremesRisk.affectedCountries = affectedCountries;\n\n  console.log(`[PredictionEngine] Climate Extremes Risk Index updated to ${riskValue} based on ${totalExtremeEvents} extreme events, ${highRiskCountries} high-risk countries, and ${mediumRiskCountries} medium-risk countries.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Climate Extremes Risk Index:', error.message);\n  }\n}\n\n/**\n   * Updates the Community Resilience Risk Index based on community resilience data.\n   */\nasync function updateCommunityResilienceRiskIndex() {\n  console.log('[PredictionEngine] Updating Community Resilience Risk Index...');\n  try {\n    const resilienceData = await fetchInternalData('/api/global-risk/community-resilience');\n\n    if (!resilienceData || !resilienceData.resilienceAnalysis) {\n      console.warn('[PredictionEngine] Invalid community resilience data received. Skipping update.');\n      return;\n    }\n\n  const { globalResilienceAssessment, resilienceAnalysis } = resilienceData;\n\n  // Calculate risk: lower resilience = higher risk\n  // Risk is 100 - average resilience score\n  const averageResilience = globalResilienceAssessment.averageResilience || 0;\n  const riskValue = Math.max(0, 100 - averageResilience);\n\n  // Identify countries with low resilience (below 60)\n  const lowResilienceCountries = Object.entries(resilienceAnalysis)\n    .filter(([country, data]) => data.resilienceScore < 60)\n    .map(([country]) => country);\n\n  predictionState.riskIndices.communityResilienceRisk.value = riskValue;\n  predictionState.riskIndices.communityResilienceRisk.confidence = 0.80;\n  predictionState.riskIndices.communityResilienceRisk.lowResilienceCountries = lowResilienceCountries;\n  predictionState.riskIndices.communityResilienceRisk.averageResilience = averageResilience;\n\n  console.log(`[PredictionEngine] Community Resilience Risk Index updated to ${riskValue} based on average resilience of ${averageResilience.toFixed(1)}. Low resilience countries: ${lowResilienceCountries.join(', ')}`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Community Resilience Risk Index:', error.message);\n  }\n}\n\n/**\n   * Updates the Crypto Volatility Risk Index based on cryptocurrency market data.\n   */\nasync function updateCryptoVolatilityRiskIndex() {\n  console.log('[PredictionEngine] Updating Crypto Volatility Risk Index...');\n  try {\n    const cryptoData = await fetchInternalData('/api/global-risk/crypto-volatility');\n\n    if (!cryptoData || cryptoData.volatilityIndex === undefined) {\n      console.warn('[PredictionEngine] Invalid crypto volatility data received. Skipping update.');\n      return;\n    }\n\n  const { volatilityIndex, analysis, marketData } = cryptoData;\n\n  // The volatility index is already calculated by the service (0-100 scale)\n  // We use it directly as the risk value\n  const riskValue = Math.min(100, Math.max(0, volatilityIndex));\n\n  predictionState.riskIndices.cryptoVolatilityRisk.value = riskValue;\n  predictionState.riskIndices.cryptoVolatilityRisk.confidence = 0.85;\n  predictionState.riskIndices.cryptoVolatilityRisk.volatilityIndex = volatilityIndex;\n  predictionState.riskIndices.cryptoVolatilityRisk.riskAssessment = analysis?.riskAssessment || 'Unknown';\n  predictionState.riskIndices.cryptoVolatilityRisk.marketData = marketData || [];\n\n  console.log(`[PredictionEngine] Crypto Volatility Risk Index updated to ${riskValue} (${analysis?.riskAssessment || 'Unknown'} risk) based on ${analysis?.totalCryptos || 0} cryptocurrencies.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Crypto Volatility Risk Index:', error.message);\n  }\n}\n\n/**\n   * Updates the Biodiversity Risk Index based on global biodiversity data.\n   */\nasync function updateBiodiversityRiskIndex() {\n  console.log('[PredictionEngine] Updating Biodiversity Risk Index...');\n  try {\n    const biodiversityData = await fetchInternalData('/api/global-risk/biodiversity');\n\n    if (!biodiversityData || biodiversityData.riskIndex === undefined) {\n      console.warn('[PredictionEngine] Invalid biodiversity data received. Skipping update.');\n      return;\n    }\n\n  const { riskIndex, analysis, biodiversityData: bioData } = biodiversityData;\n\n  // The risk index is already calculated by the service (0-100 scale)\n  // We use it directly as the risk value\n  const riskValue = Math.min(100, Math.max(0, riskIndex));\n\n  predictionState.riskIndices.biodiversityRisk.value = riskValue;\n  predictionState.riskIndices.biodiversityRisk.confidence = 0.80;\n  predictionState.riskIndices.biodiversityRisk.riskIndex = riskIndex;\n  predictionState.riskIndices.biodiversityRisk.riskAssessment = analysis?.riskAssessment || 'Unknown';\n  predictionState.riskIndices.biodiversityRisk.regions = bioData?.regions ? Object.keys(bioData.regions) : [];\n\n  console.log(`[PredictionEngine] Biodiversity Risk Index updated to ${riskValue} (${analysis?.riskAssessment || 'Unknown'} risk) based on ${analysis?.totalRegions || 0} regions.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Biodiversity Risk Index:', error.message);\n  }\n}\n\n/**\n   * Updates the Pandemics Risk Index based on global health data.\n   */\nasync function updatePandemicsRiskIndex() {\n  console.log('[PredictionEngine] Updating Pandemics Risk Index...');\n  try {\n    const pandemicsData = await fetchInternalData('/api/global-risk/pandemics');\n\n    if (!pandemicsData || pandemicsData.riskIndex === undefined) {\n      console.warn('[PredictionEngine] Invalid pandemics data received. Skipping update.');\n      return;\n    }\n\n  const { riskIndex, analysis, regions } = pandemicsData;\n\n  // The risk index is already calculated by the service (0-100 scale)\n  // We use it directly as the risk value\n  const riskValue = Math.min(100, Math.max(0, riskIndex));\n\n  predictionState.riskIndices.pandemicsRisk.value = riskValue;\n  predictionState.riskIndices.pandemicsRisk.confidence = 0.75;\n  predictionState.riskIndices.pandemicsRisk.riskIndex = riskIndex;\n  predictionState.riskIndices.pandemicsRisk.riskLevel = analysis?.riskLevel || 'Unknown';\n  predictionState.riskIndices.pandemicsRisk.regions = regions || [];\n\n  console.log(`[PredictionEngine] Pandemics Risk Index updated to ${riskValue} (${analysis?.riskLevel || 'Unknown'} risk) based on ${regions?.length || 0} regions.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Pandemics Risk Index:', error.message);\n  }\n}\n\n/**\n   * Updates the Cybersecurity Risk Index based on global cyber threat data.\n   */\nasync function updateCybersecurityRiskIndex() {\n  console.log('[PredictionEngine] Updating Cybersecurity Risk Index...');\n  try {\n    const cybersecurityData = await fetchInternalData('/api/global-risk/cybersecurity');\n\n    if (!cybersecurityData || cybersecurityData.riskIndex === undefined) {\n      console.warn('[PredictionEngine] Invalid cybersecurity data received. Skipping update.');\n      return;\n    }\n\n  const { riskIndex, analysis, sectors } = cybersecurityData;\n\n  // The risk index is already calculated by the service (0-100 scale)\n  // We use it directly as the risk value\n  const riskValue = Math.min(100, Math.max(0, riskIndex));\n\n  predictionState.riskIndices.cybersecurityRisk.value = riskValue;\n  predictionState.riskIndices.cybersecurityRisk.confidence = 0.85;\n  predictionState.riskIndices.cybersecurityRisk.riskIndex = riskIndex;\n  predictionState.riskIndices.cybersecurityRisk.riskLevel = analysis?.riskLevel || 'Unknown';\n  predictionState.riskIndices.cybersecurityRisk.sectors = sectors || [];\n\n  console.log(`[PredictionEngine] Cybersecurity Risk Index updated to ${riskValue} (${analysis?.riskLevel || 'Unknown'} risk) based on ${sectors?.length || 0} sectors.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Cybersecurity Risk Index:', error.message);\n  }\n}\n\n/**\n   * Updates the Economic Instability Risk Index based on global economic data.\n   */\nasync function updateEconomicInstabilityRiskIndex() {\n  console.log('[PredictionEngine] Updating Economic Instability Risk Index...');\n  try {\n    const economicData = await fetchInternalData('/api/global-risk/economic-instability');\n\n    if (!economicData || economicData.riskIndex === undefined) {\n      console.warn('[PredictionEngine] Invalid economic instability data received. Skipping update.');\n      return;\n    }\n\n  const { riskIndex, analysis, regions } = economicData;\n\n  // The risk index is already calculated by the service (0-100 scale)\n  // We use it directly as the risk value\n  const riskValue = Math.min(100, Math.max(0, riskIndex));\n\n  predictionState.riskIndices.economicInstabilityRisk.value = riskValue;\n  predictionState.riskIndices.economicInstabilityRisk.confidence = 0.80;\n  predictionState.riskIndices.economicInstabilityRisk.riskIndex = riskIndex;\n  predictionState.riskIndices.economicInstabilityRisk.riskLevel = analysis?.riskLevel || 'Unknown';\n  predictionState.riskIndices.economicInstabilityRisk.regions = regions || [];\n\n  console.log(`[PredictionEngine] Economic Instability Risk Index updated to ${riskValue} (${analysis?.riskLevel || 'Unknown'} risk) based on ${regions?.length || 0} regions.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Economic Instability Risk Index:', error.message);\n  }\n}\n\n/**\n   * Updates the Geopolitical Instability Risk Index based on global conflict data.\n   */\nasync function updateGeopoliticalInstabilityRiskIndex() {\n  console.log('[PredictionEngine] Updating Geopolitical Instability Risk Index...');\n  try {\n    const geopoliticalData = await fetchInternalData('/api/global-risk/geopolitical-instability');\n\n    if (!geopoliticalData || geopoliticalData.riskIndex === undefined) {\n      console.warn('[PredictionEngine] Invalid geopolitical instability data received. Skipping update.');\n      return;\n    }\n\n  const { riskIndex, analysis, regions } = geopoliticalData;\n\n  // The risk index is already calculated by the service (0-100 scale)\n  // We use it directly as the risk value\n  const riskValue = Math.min(100, Math.max(0, riskIndex));\n\n  predictionState.riskIndices.geopoliticalInstabilityRisk.value = riskValue;\n  predictionState.riskIndices.geopoliticalInstabilityRisk.confidence = 0.75;\n  predictionState.riskIndices.geopoliticalInstabilityRisk.riskIndex = riskIndex;\n  predictionState.riskIndices.geopoliticalInstabilityRisk.riskLevel = analysis?.riskLevel || 'Unknown';\n  predictionState.riskIndices.geopoliticalInstabilityRisk.regions = regions || [];\n\n  console.log(`[PredictionEngine] Geopolitical Instability Risk Index updated to ${riskValue} (${analysis?.riskLevel || 'Unknown'} risk) based on ${regions?.length || 0} regions.`);\n  } catch (error) {\n    console.warn('[PredictionEngine] Error updating Geopolitical Instability Risk Index:', error.message);\n  }\n}\n\n/**\n  * Calculates the Multi-Domain Risk Index based on all individual risk indices.\n  * This is a weighted average for demonstration.\n  */\nfunction updateMultiDomainRiskIndex() {\n  console.log('[PredictionEngine] Calculating Multi-Domain Risk Index...');\n  const { famineRisk, geophysicalRisk, supplyChainRisk, climateExtremesRisk, communityResilienceRisk, cryptoVolatilityRisk, biodiversityRisk, pandemicsRisk, cybersecurityRisk, economicInstabilityRisk, geopoliticalInstabilityRisk } = predictionState.riskIndices;\n\n  const famineWeight = 0.08;\n  const geoWeight = 0.08;\n  const supplyChainWeight = 0.08;\n  const climateWeight = 0.08;\n  const resilienceWeight = 0.08;\n  const cryptoWeight = 0.10; // Adjusted weight for crypto volatility\n  const biodiversityWeight = 0.10; // Adjusted weight for biodiversity\n  const pandemicsWeight = 0.10; // New weight for pandemics risk\n  const cybersecurityWeight = 0.10; // New weight for cybersecurity risk\n  const economicInstabilityWeight = 0.10; // New weight for economic instability\n  const geopoliticalInstabilityWeight = 0.10; // New weight for geopolitical instability\n\n  const famineValue = famineRisk.value || 0;\n  const geoValue = geophysicalRisk.value || 0;\n  const supplyChainValue = supplyChainRisk.value || 0;\n  const climateValue = climateExtremesRisk.value || 0;\n  const resilienceValue = communityResilienceRisk.value || 0;\n  const cryptoValue = cryptoVolatilityRisk.value || 0;\n  const biodiversityValue = biodiversityRisk.value || 0;\n  const pandemicsValue = pandemicsRisk.value || 0;\n  const cybersecurityValue = cybersecurityRisk.value || 0;\n  const economicInstabilityValue = economicInstabilityRisk.value || 0;\n  const geopoliticalInstabilityValue = geopoliticalInstabilityRisk.value || 0;\n\n  const totalRisk = (famineValue * famineWeight) + (geoValue * geoWeight) + (supplyChainValue * supplyChainWeight) + (climateValue * climateWeight) + (resilienceValue * resilienceWeight) + (cryptoValue * cryptoWeight) + (biodiversityValue * biodiversityWeight) + (pandemicsValue * pandemicsWeight) + (cybersecurityValue * cybersecurityWeight) + (economicInstabilityValue * economicInstabilityWeight) + (geopoliticalInstabilityValue * geopoliticalInstabilityWeight);\n  const weightedConfidence = (famineRisk.confidence * famineWeight) + (geophysicalRisk.confidence * geoWeight) + (supplyChainRisk.confidence * supplyChainWeight) + (climateExtremesRisk.confidence * climateWeight) + (communityResilienceRisk.confidence * resilienceWeight) + (cryptoVolatilityRisk.confidence * cryptoWeight) + (biodiversityRisk.confidence * biodiversityWeight) + (pandemicsRisk.confidence * pandemicsWeight) + (cybersecurityRisk.confidence * cybersecurityWeight) + (economicInstabilityRisk.confidence * economicInstabilityWeight) + (geopoliticalInstabilityRisk.confidence * geopoliticalInstabilityWeight);\n\n  predictionState.multiDomainRiskIndex = {\n    value: parseFloat(totalRisk.toFixed(2)),\n    confidence: parseFloat(weightedConfidence.toFixed(2)),\n  };\n\n  console.log(`[PredictionEngine] Multi-Domain Risk Index updated to ${predictionState.multiDomainRiskIndex.value}.`);\n}\n\n/**\n * Generates generative AI analysis for the current risk state.\n */\nasync function updateGenerativeAnalysis() {\n  console.log('[PredictionEngine] Generating Generative AI Analysis...');\n  try {\n    const service = await getGenerativeAIService();\n    const currentRiskData = {\n      riskIndices: predictionState.riskIndices,\n      multiDomainRiskIndex: predictionState.multiDomainRiskIndex,\n      ethicalAssessment: predictionState.ethicalAssessment,\n    };\n\n    // Generate predictive narrative\n    const narrative = await service.generatePredictiveNarrative(currentRiskData, {\n      focusAreas: ['climate', 'economic', 'social', 'geopolitical'],\n      timeHorizon: '6months',\n      detailLevel: 'comprehensive',\n      language: 'es'\n    });\n\n    // Generate correlation analysis\n    const correlations = await service.analyzeRiskCorrelations(predictionState.riskIndices);\n\n    predictionState.generativeAnalysis = {\n      narrative,\n      correlations,\n      lastGenerated: new Date().toISOString(),\n      confidence: 0.85, // Base confidence for generative analysis\n    };\n\n    console.log('[PredictionEngine] Generative AI Analysis completed successfully.');\n  } catch (error) {\n    console.warn('[PredictionEngine] Error generating AI analysis:', error.message);\n    predictionState.generativeAnalysis = {\n      narrative: null,\n      correlations: null,\n      lastGenerated: new Date().toISOString(),\n      confidence: 0.0,\n      error: error.message,\n    };\n  }\n}\n\n/**\n * Updates the Ethical Assessment based on current risk indices.\n * Evaluates predictions against human impact, environmental sustainability, and social equity.\n */\nfunction updateEthicalAssessment() {\n  console.log('[PredictionEngine] Updating Ethical Assessment...');\n\n  const ethicalVector = calculateEthicalVector(predictionState.riskIndices);\n  predictionState.ethicalAssessment = ethicalVector;\n\n  console.log(`[PredictionEngine] Ethical Assessment updated: ${ethicalVector.assessment} (Score: ${ethicalVector.overallScore.toFixed(2)}).`);\n}\n\n/**\n * Retrieves the current state of all risk indices.\n * @returns {object} The current prediction state.\n */\nfunction getRiskIndices() {\n  return predictionState;\n}\n\n/**\n * Initiates the perpetual prophecy cycle.\n */\nasync function runProphecyCycle() {\n  try {\n    await Promise.all([\n      updateFamineRiskIndex(),\n      updateGeophysicalRiskIndex(),\n      updateSupplyChainRiskIndex(),\n      updateClimateExtremesRiskIndex(),\n      updateCommunityResilienceRiskIndex(),\n      updateCryptoVolatilityRiskIndex(),\n      updateBiodiversityRiskIndex(),\n      updatePandemicsRiskIndex(),\n      updateCybersecurityRiskIndex(),\n      updateEconomicInstabilityRiskIndex(),\n      updateGeopoliticalInstabilityRiskIndex(),\n    ]);\n\n    updateMultiDomainRiskIndex();\n    updateEthicalAssessment();\n\n    // Generate generative AI analysis (non-blocking to avoid delaying the cycle)\n    updateGenerativeAnalysis().catch(error => {\n      console.warn('[PredictionEngine] Generative analysis failed but cycle continues:', error.message);\n    });\n\n    predictionState.lastUpdated = new Date().toISOString();\n    console.log('[PredictionEngine] Prophecy cycle complete. All risk indices, ethical assessment, and AI analysis updated.');\n\n  } catch (error) {\n    console.error('[PredictionEngine] Error during prophecy cycle:', error.message);\n  }\n}\n\nexport {\n  runProphecyCycle,\n  getRiskIndices,\n};\n"],"mappings":"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","ignoreList":[]}