{"version":3,"names":["HttpResponse_exports","__export","HttpResponse","bodyType","module","exports","__toCommonJS","import_interceptors","require","import_decorators","Symbol","FetchResponse","constructor","body","init","responseInit","normalizeResponseInit","decorateResponse","error","text","headers","has","set","Blob","size","toString","json","responseText","JSON","stringify","xml","html","arrayBuffer","byteLength","formData"],"sources":["../../src/core/HttpResponse.ts"],"sourcesContent":["import { FetchResponse } from '@mswjs/interceptors'\nimport type { DefaultBodyType, JsonBodyType } from './handlers/RequestHandler'\nimport type { NoInfer } from './typeUtils'\nimport {\n  decorateResponse,\n  normalizeResponseInit,\n} from './utils/HttpResponse/decorators'\n\nexport interface HttpResponseInit extends ResponseInit {\n  type?: ResponseType\n}\n\nexport const bodyType: unique symbol = Symbol('bodyType')\nexport type DefaultUnsafeFetchResponse = Response & {\n  [bodyType]?: never\n}\n\nexport interface StrictRequest<BodyType extends JsonBodyType> extends Request {\n  json(): Promise<BodyType>\n  clone(): StrictRequest<BodyType>\n}\n\n/**\n * Opaque `Response` type that supports strict body type.\n *\n * @deprecated Please use {@link HttpResponse} instead.\n */\nexport type StrictResponse<BodyType extends DefaultBodyType> =\n  HttpResponse<BodyType>\n\n/**\n * A drop-in replacement for the standard `Response` class\n * to allow additional features, like mocking the response `Set-Cookie` header.\n *\n * @example\n * new HttpResponse('Hello world', { status: 201 })\n * HttpResponse.json({ name: 'John' })\n * HttpResponse.formData(form)\n *\n * @see {@link https://mswjs.io/docs/api/http-response `HttpResponse` API reference}\n */\nexport class HttpResponse<\n  BodyType extends DefaultBodyType,\n> extends FetchResponse {\n  readonly [bodyType]: BodyType = null as any\n\n  constructor(body?: NoInfer<BodyType> | null, init?: HttpResponseInit) {\n    const responseInit = normalizeResponseInit(init)\n    super(body as BodyInit, responseInit)\n    decorateResponse(this, responseInit)\n  }\n\n  static error(): HttpResponse<any> {\n    return super.error() as HttpResponse<any>\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n  static text<BodyType extends string>(\n    body?: NoInfer<BodyType> | null,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/plain')\n    }\n\n    // Automatically set the \"Content-Length\" response header\n    // for non-empty text responses. This enforces consistency and\n    // brings mocked responses closer to production.\n    if (!responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set(\n        'Content-Length',\n        body ? new Blob([body]).size.toString() : '0',\n      )\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n  static json<BodyType extends JsonBodyType>(\n    body?: NoInfer<BodyType> | null | undefined,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'application/json')\n    }\n\n    /**\n     * @note TypeScript is incorrect here.\n     * Stringifying undefined will return undefined.\n     */\n    const responseText = JSON.stringify(body) as string | undefined\n\n    if (!responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set(\n        'Content-Length',\n        responseText ? new Blob([responseText]).size.toString() : '0',\n      )\n    }\n\n    return new HttpResponse(responseText as BodyType, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n  static xml<BodyType extends string>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/xml')\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"text/html\"` body.\n   * @example\n   * HttpResponse.html(`<p class=\"author\">Jane Doe</p>`)\n   * HttpResponse.html(`<main id=\"abc-123\">Main text</main>`, { status: 201 })\n   */\n  static html<BodyType extends string>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/html')\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n  static arrayBuffer<BodyType extends ArrayBuffer | SharedArrayBuffer>(\n    body?: BodyType,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'application/octet-stream')\n    }\n\n    if (body && !responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set('Content-Length', body.byteLength.toString())\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n  static formData(\n    body?: FormData,\n    init?: HttpResponseInit,\n  ): HttpResponse<FormData> {\n    return new HttpResponse(body, normalizeResponseInit(init))\n  }\n}\n"],"mappings":"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","ignoreList":[]}