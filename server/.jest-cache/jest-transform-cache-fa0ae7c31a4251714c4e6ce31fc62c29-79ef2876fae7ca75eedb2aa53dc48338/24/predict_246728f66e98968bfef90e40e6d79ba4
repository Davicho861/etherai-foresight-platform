1adadfdcf445ff64c61e9caf28daf4c5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = _interopRequireDefault(require("express"));
var _cache = _interopRequireDefault(require("../cache.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const router = _express.default.Router();
function makeId(prefix = 'id') {
  return `${prefix}_${Math.random().toString(36).slice(2, 8)}`;
}
function computePrediction(country, parameters) {
  // simple weighted logic for demo purposes
  const {
    infectionRate = 0,
    protestIndex = 0,
    economicIndex = 0,
    temperature = 0
  } = parameters;
  const score = infectionRate * 0.5 + protestIndex * 0.3 + economicIndex * 0.15 + temperature * 0.05;
  let risk = 'low';
  if (score >= 70) risk = 'high';else if (score >= 30) risk = 'medium';
  const confidence = Math.max(0.5, Math.min(0.95, 1 - Math.abs(50 - score) / 100));
  const factors = [];
  const total = infectionRate + protestIndex + economicIndex + temperature || 1;
  if (infectionRate) factors.push({
    name: 'Infection rate',
    weight: +(infectionRate / total).toFixed(2),
    value: infectionRate
  });
  if (protestIndex) factors.push({
    name: 'Protest index',
    weight: +(protestIndex / total).toFixed(2),
    value: protestIndex
  });
  if (economicIndex) factors.push({
    name: 'Economic index',
    weight: +(economicIndex / total).toFixed(2),
    value: economicIndex
  });
  if (temperature) factors.push({
    name: 'Temperature',
    weight: +(temperature / total).toFixed(2),
    value: temperature
  });
  return {
    predictionId: makeId('pred'),
    country,
    risk,
    confidence: Number(confidence.toFixed(2)),
    factors,
    generatedAt: new Date().toISOString(),
    score: Math.round(score)
  };
}
router.post('/', (req, res) => {
  const {
    country,
    parameters
  } = req.body || {};
  if (!country || !parameters) {
    return res.status(400).json({
      error: 'country and parameters are required'
    });
  }

  // Create cache key based on prediction parameters
  const cacheKey = `prediction:${country}:${JSON.stringify(parameters)}`;

  // Check cache first (TTL: 10 minutes for predictions)
  const cachedResult = _cache.default.get(cacheKey);
  if (cachedResult) {
    return res.status(200).json(cachedResult);
  }
  const result = computePrediction(country, parameters);

  // Cache result for 10 minutes
  _cache.default.set(cacheKey, result, 600000);
  return res.status(200).json(result);
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NhY2hlIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwicm91dGVyIiwiZXhwcmVzcyIsIlJvdXRlciIsIm1ha2VJZCIsInByZWZpeCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInNsaWNlIiwiY29tcHV0ZVByZWRpY3Rpb24iLCJjb3VudHJ5IiwicGFyYW1ldGVycyIsImluZmVjdGlvblJhdGUiLCJwcm90ZXN0SW5kZXgiLCJlY29ub21pY0luZGV4IiwidGVtcGVyYXR1cmUiLCJzY29yZSIsInJpc2siLCJjb25maWRlbmNlIiwibWF4IiwibWluIiwiYWJzIiwiZmFjdG9ycyIsInRvdGFsIiwicHVzaCIsIm5hbWUiLCJ3ZWlnaHQiLCJ0b0ZpeGVkIiwidmFsdWUiLCJwcmVkaWN0aW9uSWQiLCJOdW1iZXIiLCJnZW5lcmF0ZWRBdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInJvdW5kIiwicG9zdCIsInJlcSIsInJlcyIsImJvZHkiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJjYWNoZUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYWNoZWRSZXN1bHQiLCJjYWNoZSIsImdldCIsInJlc3VsdCIsInNldCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInByZWRpY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgY2FjaGUgZnJvbSAnLi4vY2FjaGUuanMnO1xuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG5mdW5jdGlvbiBtYWtlSWQocHJlZml4ID0gJ2lkJykge1xuICByZXR1cm4gYCR7cHJlZml4fV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIsOCl9YDtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVByZWRpY3Rpb24oY291bnRyeSwgcGFyYW1ldGVycykge1xuICAvLyBzaW1wbGUgd2VpZ2h0ZWQgbG9naWMgZm9yIGRlbW8gcHVycG9zZXNcbiAgY29uc3QgeyBpbmZlY3Rpb25SYXRlID0gMCwgcHJvdGVzdEluZGV4ID0gMCwgZWNvbm9taWNJbmRleCA9IDAsIHRlbXBlcmF0dXJlID0gMCB9ID0gcGFyYW1ldGVycztcbiAgY29uc3Qgc2NvcmUgPSAoaW5mZWN0aW9uUmF0ZSAqIDAuNSkgKyAocHJvdGVzdEluZGV4ICogMC4zKSArIChlY29ub21pY0luZGV4ICogMC4xNSkgKyAodGVtcGVyYXR1cmUgKiAwLjA1KTtcbiAgbGV0IHJpc2sgPSAnbG93JztcbiAgaWYgKHNjb3JlID49IDcwKSByaXNrID0gJ2hpZ2gnO1xuICBlbHNlIGlmIChzY29yZSA+PSAzMCkgcmlzayA9ICdtZWRpdW0nO1xuXG4gIGNvbnN0IGNvbmZpZGVuY2UgPSBNYXRoLm1heCgwLjUsIE1hdGgubWluKDAuOTUsIDEgLSBNYXRoLmFicyg1MCAtIHNjb3JlKSAvIDEwMCkpO1xuXG4gIGNvbnN0IGZhY3RvcnMgPSBbXTtcbiAgY29uc3QgdG90YWwgPSBpbmZlY3Rpb25SYXRlICsgcHJvdGVzdEluZGV4ICsgZWNvbm9taWNJbmRleCArIHRlbXBlcmF0dXJlIHx8IDE7XG4gIGlmIChpbmZlY3Rpb25SYXRlKSBmYWN0b3JzLnB1c2goeyBuYW1lOiAnSW5mZWN0aW9uIHJhdGUnLCB3ZWlnaHQ6ICsoaW5mZWN0aW9uUmF0ZS90b3RhbCkudG9GaXhlZCgyKSwgdmFsdWU6IGluZmVjdGlvblJhdGUgfSk7XG4gIGlmIChwcm90ZXN0SW5kZXgpIGZhY3RvcnMucHVzaCh7IG5hbWU6ICdQcm90ZXN0IGluZGV4Jywgd2VpZ2h0OiArKHByb3Rlc3RJbmRleC90b3RhbCkudG9GaXhlZCgyKSwgdmFsdWU6IHByb3Rlc3RJbmRleCB9KTtcbiAgaWYgKGVjb25vbWljSW5kZXgpIGZhY3RvcnMucHVzaCh7IG5hbWU6ICdFY29ub21pYyBpbmRleCcsIHdlaWdodDogKyhlY29ub21pY0luZGV4L3RvdGFsKS50b0ZpeGVkKDIpLCB2YWx1ZTogZWNvbm9taWNJbmRleCB9KTtcbiAgaWYgKHRlbXBlcmF0dXJlKSBmYWN0b3JzLnB1c2goeyBuYW1lOiAnVGVtcGVyYXR1cmUnLCB3ZWlnaHQ6ICsodGVtcGVyYXR1cmUvdG90YWwpLnRvRml4ZWQoMiksIHZhbHVlOiB0ZW1wZXJhdHVyZSB9KTtcblxuICByZXR1cm4ge1xuICAgIHByZWRpY3Rpb25JZDogbWFrZUlkKCdwcmVkJyksXG4gICAgY291bnRyeSxcbiAgICByaXNrLFxuICAgIGNvbmZpZGVuY2U6IE51bWJlcihjb25maWRlbmNlLnRvRml4ZWQoMikpLFxuICAgIGZhY3RvcnMsXG4gICAgZ2VuZXJhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICBzY29yZTogTWF0aC5yb3VuZChzY29yZSlcbiAgfTtcbn1cblxucm91dGVyLnBvc3QoJy8nLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgeyBjb3VudHJ5LCBwYXJhbWV0ZXJzIH0gPSByZXEuYm9keSB8fCB7fTtcbiAgaWYgKCFjb3VudHJ5IHx8ICFwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdjb3VudHJ5IGFuZCBwYXJhbWV0ZXJzIGFyZSByZXF1aXJlZCcgfSk7XG4gIH1cblxuICAvLyBDcmVhdGUgY2FjaGUga2V5IGJhc2VkIG9uIHByZWRpY3Rpb24gcGFyYW1ldGVyc1xuICBjb25zdCBjYWNoZUtleSA9IGBwcmVkaWN0aW9uOiR7Y291bnRyeX06JHtKU09OLnN0cmluZ2lmeShwYXJhbWV0ZXJzKX1gO1xuXG4gIC8vIENoZWNrIGNhY2hlIGZpcnN0IChUVEw6IDEwIG1pbnV0ZXMgZm9yIHByZWRpY3Rpb25zKVxuICBjb25zdCBjYWNoZWRSZXN1bHQgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoY2FjaGVkUmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGNhY2hlZFJlc3VsdCk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBjb21wdXRlUHJlZGljdGlvbihjb3VudHJ5LCBwYXJhbWV0ZXJzKTtcblxuICAvLyBDYWNoZSByZXN1bHQgZm9yIDEwIG1pbnV0ZXNcbiAgY2FjaGUuc2V0KGNhY2hlS2V5LCByZXN1bHQsIDYwMDAwMCk7XG5cbiAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3VsdCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBZ0MsU0FBQUQsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFaEMsTUFBTUcsTUFBTSxHQUFHQyxnQkFBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQztBQUUvQixTQUFTQyxNQUFNQSxDQUFDQyxNQUFNLEdBQUcsSUFBSSxFQUFFO0VBQzdCLE9BQU8sR0FBR0EsTUFBTSxJQUFJQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRTtBQUM3RDtBQUVBLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLEVBQUU7RUFDOUM7RUFDQSxNQUFNO0lBQUVDLGFBQWEsR0FBRyxDQUFDO0lBQUVDLFlBQVksR0FBRyxDQUFDO0lBQUVDLGFBQWEsR0FBRyxDQUFDO0lBQUVDLFdBQVcsR0FBRztFQUFFLENBQUMsR0FBR0osVUFBVTtFQUM5RixNQUFNSyxLQUFLLEdBQUlKLGFBQWEsR0FBRyxHQUFHLEdBQUtDLFlBQVksR0FBRyxHQUFJLEdBQUlDLGFBQWEsR0FBRyxJQUFLLEdBQUlDLFdBQVcsR0FBRyxJQUFLO0VBQzFHLElBQUlFLElBQUks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