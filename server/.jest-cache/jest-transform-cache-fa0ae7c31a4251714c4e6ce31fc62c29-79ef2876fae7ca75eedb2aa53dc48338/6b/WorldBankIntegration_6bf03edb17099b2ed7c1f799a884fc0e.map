{"version":3,"names":["_safeFetch","_interopRequireDefault","require","_forceMocks","e","__esModule","default","WorldBankIntegration","constructor","baseUrl","process","env","TEST_MODE","getEconomicIndicators","country","indicators","startYear","endYear","results","indicator","url","toLowerCase","data","safeFetch","headers","Accept","timeout","retries","err","console","warn","message","error","Array","isArray","length","broaderUrl","fallback","sortedData","sort","a","b","parseInt","date","latest","value","year","lastAvailable","anyEntry","find","d","undefined","note","Promise","resolve","setTimeout","period","forceMocksEnabled","mockData","getMockEconomicIndicators","Error","String","getKeyEconomicData","getFoodSecurityData","countries","fallbackUrl","getMockFoodSecurityData","mockIndicators","mockValues","forEach","Math","random","isMock","_default","exports"],"sources":["WorldBankIntegration.js"],"sourcesContent":["import safeFetch from '../lib/safeFetch.js';\nimport { forceMocksEnabled } from '../lib/force-mocks.js';\n\nclass WorldBankIntegration {\n  constructor() {\n    this.baseUrl = process.env.TEST_MODE === 'true'\n      ? 'http://mock-api-server:3001/world-bank'\n      : 'https://api.worldbank.org/v2';\n  }\n\n  async getEconomicIndicators(country, indicators, startYear, endYear) {\n    try {\n      const results = {};\n\n      for (const indicator of indicators) {\n        const url = `${this.baseUrl}/country/${country.toLowerCase()}/indicator/${indicator}?format=json&date=${startYear}:${endYear}&per_page=1000`;\n\n        let data;\n        try {\n          data = await safeFetch(url, { headers: { 'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)', Accept: 'application/json' } }, { timeout: 10000, retries: 3 });\n        } catch (err) {\n          console.warn(`World Bank API error for ${indicator}: ${err.message}`);\n          results[indicator] = { error: `API error: ${err.message}` };\n          continue;\n        }\n        // If no data for the requested year range, retry once with a broader window (safe fallback)\n        if (!(data && Array.isArray(data) && data[1] && data[1].length > 0)) {\n          try {\n            const broaderUrl = `${this.baseUrl}/country/${country.toLowerCase()}/indicator/${indicator}?format=json&date=2010:${endYear}&per_page=1000`;\n            const fallback = await safeFetch(broaderUrl, { headers: { 'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)', Accept: 'application/json' } }, { timeout: 10000, retries: 2 });\n            if (fallback && Array.isArray(fallback) && fallback[1] && fallback[1].length > 0) {\n              data = fallback;\n            }\n          } catch (err) {\n            // swallow fallback error and continue with original empty result\n            console.warn(`World Bank fallback error for ${indicator}: ${err.message}`);\n          }\n        }\n\n        if (data && data[1] && data[1].length > 0) {\n          // Get the most recent value\n          const sortedData = data[1].sort((a, b) => parseInt(b.date) - parseInt(a.date));\n          const latest = sortedData[0];\n          results[indicator] = {\n            value: latest.value,\n            year: latest.date,\n            country: latest.country.value\n          };\n        } else {\n          // No data in requested range - attempt to report last available year/value if present in data[1]\n          let lastAvailable = null;\n          try {\n            if (data && data[1] && data[1].length === 0) {\n              // nothing\n            } else if (data && data[1]) {\n              const anyEntry = data[1].find(d => d && (d.value !== null && d.value !== undefined));\n              if (anyEntry) lastAvailable = anyEntry;\n            }\n          } catch (e) {\n            // ignore\n          }\n\n          if (lastAvailable) {\n            results[indicator] = {\n              value: lastAvailable.value,\n              year: lastAvailable.date,\n              country: lastAvailable.country ? lastAvailable.country.value : country,\n              note: 'No data for requested range â€” returning last available value'\n            };\n            console.warn(`WorldBank: no data in ${startYear}:${endYear} for ${indicator} (${country}), returning last available year ${lastAvailable.date}`);\n          } else {\n            results[indicator] = { value: null, note: 'No data available' };\n            console.warn(`WorldBank: no data in ${startYear}:${endYear} for ${indicator} (${country}) and no fallback available`);\n          }\n        }\n\n        // Rate limiting: small delay between requests\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      return {\n        country,\n        period: { startYear, endYear },\n        indicators: results\n      };\n    } catch (error) {\n      console.error('Error fetching World Bank data:', error);\n      // Only return mock data when explicitly forced (tests or demo). Otherwise\n      // propagate the error so callers can handle the failure and we don't silently\n      // pretend we have real data.\n      if (forceMocksEnabled()) {\n        const mockData = this.getMockEconomicIndicators(country, indicators, startYear, endYear);\n        return mockData;\n      }\n      throw new Error(`WorldBank API failure: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n  // Helper method for common economic indicators relevant to social instability\n  async getKeyEconomicData(country, startYear = '2020', endYear = '2024') {\n    const indicators = [\n      'NY.GDP.PCAP.CD', // GDP per capita (current US$)\n      'FP.CPI.TOTL.ZG', // Inflation, consumer prices (annual %)\n      'SL.UEM.TOTL.ZS', // Unemployment, total (% of total labor force)\n      'PA.NUS.FCRF',    // Official exchange rate (LCU per US$, period average)\n      'DT.DOD.DECT.CD', // External debt stocks, total (DOD, current US$)\n      'FI.RES.TOTL.CD'  // Total reserves (includes gold, current US$)\n    ];\n\n    return await this.getEconomicIndicators(country, indicators, startYear, endYear);\n  }\n\n  // Method for food security data\n  async getFoodSecurityData(countries = ['COL', 'PER', 'ARG'], startYear = '2020', endYear = '2024') {\n    const indicator = 'SN.ITK.DEFC.ZS'; // Prevalence of undernourishment (% of population)\n    try {\n      const results = {};\n\n      for (const country of countries) {\n        const url = `${this.baseUrl}/country/${country.toLowerCase()}/indicator/${indicator}?format=json&date=${startYear}:${endYear}&per_page=1000`;\n\n        let data;\n        try {\n          data = await safeFetch(url, { headers: { 'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)', Accept: 'application/json' } }, { timeout: 10000, retries: 3 });\n        } catch (err) {\n          console.warn(`World Bank API error for food security ${country}: ${err.message}`);\n          results[country] = { error: `API error: ${err.message}` };\n          continue;\n        }\n        // Retry with broader date range if no data found\n        if (!(data && Array.isArray(data) && data[1] && data[1].length > 0)) {\n          try {\n            const fallbackUrl = `${this.baseUrl}/country/${country.toLowerCase()}/indicator/${indicator}?format=json&date=2010:${endYear}&per_page=1000`;\n            const fallback = await safeFetch(fallbackUrl, { headers: { 'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)', Accept: 'application/json' } }, { timeout: 10000, retries: 2 });\n            if (fallback && Array.isArray(fallback) && fallback[1] && fallback[1].length > 0) {\n              data = fallback;\n            }\n          } catch (err) {\n            console.warn(`World Bank fallback error for food security ${country}: ${err.message}`);\n          }\n        }\n        if (data && data[1] && data[1].length > 0) {\n          // Get the most recent value\n          const sortedData = data[1].sort((a, b) => parseInt(b.date) - parseInt(a.date));\n          const latest = sortedData[0];\n          results[country] = {\n            value: latest.value,\n            year: latest.date,\n            country: latest.country.value,\n            indicator: 'Prevalence of undernourishment (% of population)'\n          };\n        } else {\n          results[country] = { value: null, note: 'No data available' };\n        }\n\n        // Rate limiting\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      return {\n        countries,\n        period: { startYear, endYear },\n        indicator: 'SN.ITK.DEFC.ZS',\n        data: results\n      };\n    } catch (error) {\n      console.error('Error fetching food security data:', error);\n      // Fallback to high-fidelity mock data\n      const mockData = this.getMockFoodSecurityData(countries, startYear, endYear);\n      return mockData;\n    }\n  }\n\n  // High-fidelity mock data for fallback when API fails\n  getMockEconomicIndicators(country, indicators, startYear, endYear) {\n    const mockIndicators = {};\n\n    // Mock data for common indicators\n    const mockValues = {\n      'NY.GDP.PCAP.CD': { value: 6500, year: endYear, country: country },\n      'FP.CPI.TOTL.ZG': { value: 4.2, year: endYear, country: country },\n      'SL.UEM.TOTL.ZS': { value: 8.5, year: endYear, country: country },\n      'PA.NUS.FCRF': { value: 1.15, year: endYear, country: country },\n      'DT.DOD.DECT.CD': { value: 45000000000, year: endYear, country: country },\n      'FI.RES.TOTL.CD': { value: 12000000000, year: endYear, country: country }\n    };\n\n    indicators.forEach(indicator => {\n      if (mockValues[indicator]) {\n        mockIndicators[indicator] = mockValues[indicator];\n      } else {\n        // Generic mock for unknown indicators\n        mockIndicators[indicator] = {\n          value: Math.random() * 100,\n          year: endYear,\n          country: country,\n          note: 'Mock data - API unavailable'\n        };\n      }\n    });\n\n    return {\n      country,\n      period: { startYear, endYear },\n      indicators: mockIndicators,\n      isMock: true,\n      note: 'High-fidelity mock data - API unavailable'\n    };\n  }\n\n  // High-fidelity mock data for food security fallback\n  getMockFoodSecurityData(countries, startYear, endYear) {\n    const mockData = {};\n\n    countries.forEach(country => {\n      mockData[country] = {\n        value: 5.2 + Math.random() * 2, // Random value between 5.2-7.2\n        year: endYear,\n        country: country,\n        indicator: 'Prevalence of undernourishment (% of population)'\n      };\n    });\n\n    return {\n      countries,\n      period: { startYear, endYear },\n      indicator: 'SN.ITK.DEFC.ZS',\n      data: mockData,\n      isMock: true,\n      note: 'High-fidelity mock data - API unavailable'\n    };\n  }\n}\n\nexport default WorldBankIntegration;"],"mappings":"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","ignoreList":[]}