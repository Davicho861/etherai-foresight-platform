0a9f38cc18627a30cbd244e1030d9820
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _safeFetch = _interopRequireDefault(require("../lib/safeFetch.js"));
var _forceMocks = require("../lib/force-mocks.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class WorldBankIntegration {
  constructor() {
    this.baseUrl = process.env.TEST_MODE === 'true' ? 'http://mock-api-server:3001/world-bank' : 'https://api.worldbank.org/v2';
  }
  async getEconomicIndicators(country, indicators, startYear, endYear) {
    try {
      const results = {};
      for (const indicator of indicators) {
        const url = `${this.baseUrl}/country/${country.toLowerCase()}/indicator/${indicator}?format=json&date=${startYear}:${endYear}&per_page=1000`;
        let data;
        try {
          data = await (0, _safeFetch.default)(url, {
            headers: {
              'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)',
              Accept: 'application/json'
            }
          }, {
            timeout: 10000,
            retries: 3
          });
        } catch (err) {
          console.warn(`World Bank API error for ${indicator}: ${err.message}`);
          results[indicator] = {
            error: `API error: ${err.message}`
          };
          continue;
        }
        // If no data for the requested year range, retry once with a broader window (safe fallback)
        if (!(data && Array.isArray(data) && data[1] && data[1].length > 0)) {
          try {
            const broaderUrl = `${this.baseUrl}/country/${country.toLowerCase()}/indicator/${indicator}?format=json&date=2010:${endYear}&per_page=1000`;
            const fallback = await (0, _safeFetch.default)(broaderUrl, {
              headers: {
                'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)',
                Accept: 'application/json'
              }
            }, {
              timeout: 10000,
              retries: 2
            });
            if (fallback && Array.isArray(fallback) && fallback[1] && fallback[1].length > 0) {
              data = fallback;
            }
          } catch (err) {
            // swallow fallback error and continue with original empty result
            console.warn(`World Bank fallback error for ${indicator}: ${err.message}`);
          }
        }
        if (data && data[1] && data[1].length > 0) {
          // Get the most recent value
          const sortedData = data[1].sort((a, b) => parseInt(b.date) - parseInt(a.date));
          const latest = sortedData[0];
          results[indicator] = {
            value: latest.value,
            year: latest.date,
            country: latest.country.value
          };
        } else {
          // No data in requested range - attempt to report last available year/value if present in data[1]
          let lastAvailable = null;
          try {
            if (data && data[1] && data[1].length === 0) {
              // nothing
            } else if (data && data[1]) {
              const anyEntry = data[1].find(d => d && d.value !== null && d.value !== undefined);
              if (anyEntry) lastAvailable = anyEntry;
            }
          } catch (e) {
            // ignore
          }
          if (lastAvailable) {
            results[indicator] = {
              value: lastAvailable.value,
              year: lastAvailable.date,
              country: lastAvailable.country ? lastAvailable.country.value : country,
              note: 'No data for requested range â€” returning last available value'
            };
            console.warn(`WorldBank: no data in ${startYear}:${endYear} for ${indicator} (${country}), returning last available year ${lastAvailable.date}`);
          } else {
            results[indicator] = {
              value: null,
              note: 'No data available'
            };
            console.warn(`WorldBank: no data in ${startYear}:${endYear} for ${indicator} (${country}) and no fallback available`);
          }
        }

        // Rate limiting: small delay between requests
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      return {
        country,
        period: {
          startYear,
          endYear
        },
        indicators: results
      };
    } catch (error) {
      console.error('Error fetching World Bank data:', error);
      // Only return mock data when explicitly forced (tests or demo). Otherwise
      // propagate the error so callers can handle the failure and we don't silently
      // pretend we have real data.
      if ((0, _forceMocks.forceMocksEnabled)()) {
        const mockData = this.getMockEconomicIndicators(country, indicators, startYear, endYear);
        return mockData;
      }
      throw new Error(`WorldBank API failure: ${error && error.message ? error.message : String(error)}`);
    }
  }

  // Helper method for common economic indicators relevant to social instability
  async getKeyEconomicData(country, startYear = '2020', endYear = '2024') {
    const indicators = ['NY.GDP.PCAP.CD',
    // GDP per capita (current US$)
    'FP.CPI.TOTL.ZG',
    // Inflation, consumer prices (annual %)
    'SL.UEM.TOTL.ZS',
    // Unemployment, total (% of total labor force)
    'PA.NUS.FCRF',
    // Official exchange rate (LCU per US$, period average)
    'DT.DOD.DECT.CD',
    // External debt stocks, total (DOD, current US$)
    'FI.RES.TOTL.CD' // Total reserves (includes gold, current US$)
    ];
    return await this.getEconomicIndicators(country, indicators, startYear, endYear);
  }

  // Method for food security data
  async getFoodSecurityData(countries = ['COL', 'PER', 'ARG'], startYear = '2020', endYear = '2024') {
    const indicator = 'SN.ITK.DEFC.ZS'; // Prevalence of undernourishment (% of population)
    try {
      const results = {};
      for (const country of countries) {
        const url = `${this.baseUrl}/country/${country.toLowerCase()}/indicator/${indicator}?format=json&date=${startYear}:${endYear}&per_page=1000`;
        let data;
        try {
          data = await (0, _safeFetch.default)(url, {
            headers: {
              'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)',
              Accept: 'application/json'
            }
          }, {
            timeout: 10000,
            retries: 3
          });
        } catch (err) {
          console.warn(`World Bank API error for food security ${country}: ${err.message}`);
          results[country] = {
            error: `API error: ${err.message}`
          };
          continue;
        }
        // Retry with broader date range if no data found
        if (!(data && Array.isArray(data) && data[1] && data[1].length > 0)) {
          try {
            const fallbackUrl = `${this.baseUrl}/country/${country.toLowerCase()}/indicator/${indicator}?format=json&date=2010:${endYear}&per_page=1000`;
            const fallback = await (0, _safeFetch.default)(fallbackUrl, {
              headers: {
                'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)',
                Accept: 'application/json'
              }
            }, {
              timeout: 10000,
              retries: 2
            });
            if (fallback && Array.isArray(fallback) && fallback[1] && fallback[1].length > 0) {
              data = fallback;
            }
          } catch (err) {
            console.warn(`World Bank fallback error for food security ${country}: ${err.message}`);
          }
        }
        if (data && data[1] && data[1].length > 0) {
          // Get the most recent value
          const sortedData = data[1].sort((a, b) => parseInt(b.date) - parseInt(a.date));
          const latest = sortedData[0];
          results[country] = {
            value: latest.value,
            year: latest.date,
            country: latest.country.value,
            indicator: 'Prevalence of undernourishment (% of population)'
          };
        } else {
          results[country] = {
            value: null,
            note: 'No data available'
          };
        }

        // Rate limiting
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      return {
        countries,
        period: {
          startYear,
          endYear
        },
        indicator: 'SN.ITK.DEFC.ZS',
        data: results
      };
    } catch (error) {
      console.error('Error fetching food security data:', error);
      // Fallback to high-fidelity mock data
      const mockData = this.getMockFoodSecurityData(countries, startYear, endYear);
      return mockData;
    }
  }

  // High-fidelity mock data for fallback when API fails
  getMockEconomicIndicators(country, indicators, startYear, endYear) {
    const mockIndicators = {};

    // Mock data for common indicators
    const mockValues = {
      'NY.GDP.PCAP.CD': {
        value: 6500,
        year: endYear,
        country: country
      },
      'FP.CPI.TOTL.ZG': {
        value: 4.2,
        year: endYear,
        country: country
      },
      'SL.UEM.TOTL.ZS': {
        value: 8.5,
        year: endYear,
        country: country
      },
      'PA.NUS.FCRF': {
        value: 1.15,
        year: endYear,
        country: country
      },
      'DT.DOD.DECT.CD': {
        value: 45000000000,
        year: endYear,
        country: country
      },
      'FI.RES.TOTL.CD': {
        value: 12000000000,
        year: endYear,
        country: country
      }
    };
    indicators.forEach(indicator => {
      if (mockValues[indicator]) {
        mockIndicators[indicator] = mockValues[indicator];
      } else {
        // Generic mock for unknown indicators
        mockIndicators[indicator] = {
          value: Math.random() * 100,
          year: endYear,
          country: country,
          note: 'Mock data - API unavailable'
        };
      }
    });
    return {
      country,
      period: {
        startYear,
        endYear
      },
      indicators: mockIndicators,
      isMock: true,
      note: 'High-fidelity mock data - API unavailable'
    };
  }

  // High-fidelity mock data for food security fallback
  getMockFoodSecurityData(countries, startYear, endYear) {
    const mockData = {};
    countries.forEach(country => {
      mockData[country] = {
        value: 5.2 + Math.random() * 2,
        // Random value between 5.2-7.2
        year: endYear,
        country: country,
        indicator: 'Prevalence of undernourishment (% of population)'
      };
    });
    return {
      countries,
      period: {
        startYear,
        endYear
      },
      indicator: 'SN.ITK.DEFC.ZS',
      data: mockData,
      isMock: true,
      note: 'High-fidelity mock data - API unavailable'
    };
  }
}
var _default = exports.default = WorldBankIntegration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,