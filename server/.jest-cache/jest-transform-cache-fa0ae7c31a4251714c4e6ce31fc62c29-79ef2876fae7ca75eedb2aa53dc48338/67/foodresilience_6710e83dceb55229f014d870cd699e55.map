{"version":3,"names":["_express","_interopRequireDefault","require","_SIMIntegration","_MINAGRIIntegration","_INEIIntegration","e","__esModule","default","cov_1lkvnei5gp","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","router","express","Router","simIntegration","SIMIntegration","minagriIntegration","MINAGRIIntegration","ineiIntegration","INEIIntegration","get","req","res","products","prices","product","priceResult","getFoodPrices","volatilityResult","getVolatilityIndex","priceData","Error","currentPrice","volatility","volatilityIndex","predictedPrice","push","confidence","source","isMock","productError","console","error","averageVolatility","reduce","sum","p","length","riskLevel","highRiskProducts","filter","map","json","country","timestamp","Date","summary","Math","round","recommendation","join","err","status","regions","routes","region","capacityResult","getSupplyChainCapacity","capacityData","capacity","distance","cost","efficiency","regionError","optimizedRoutes","sort","a","optimization","totalCapacity","r","averageCost","recommendedRoutes","slice","post","timeframe","body","targetRegion","Promise","all","productionResult","getAgriculturalProduction","getFullYear","baseChange","productionAdjustment","productionData","production","factors","prediction","max","dataSources","usedMockData","_default","exports"],"sources":["food-resilience.js"],"sourcesContent":["import express from 'express';\nimport SIMIntegration from '../integrations/SIMIntegration.js';\nimport MINAGRIIntegration from '../integrations/MINAGRIIntegration.js';\nimport INEIIntegration from '../integrations/INEIIntegration.js';\n\nconst router = express.Router();\n\n// Initialize integrations\nconst simIntegration = new SIMIntegration();\nconst minagriIntegration = new MINAGRIIntegration();\nconst ineiIntegration = new INEIIntegration();\n\n// GET /api/food-resilience/prices\nrouter.get('/prices', async (req, res) => {\n  try {\n    const products = ['rice', 'potatoes', 'corn', 'beans'];\n    const prices = [];\n\n    for (const product of products) {\n      try {\n        // Get current price from SIM\n        const priceResult = await simIntegration.getFoodPrices(product, 'Lima');\n        const volatilityResult = await simIntegration.getVolatilityIndex(product, 'Lima');\n\n        if (!priceResult || !priceResult.priceData || !volatilityResult) {\n          throw new Error('Invalid integration response');\n        }\n\n        // Simple prediction model based on volatility\n        const currentPrice = priceResult.priceData.currentPrice;\n        const volatility = volatilityResult.volatilityIndex;\n        const predictedPrice = currentPrice * (1 + volatility * 0.1);\n\n        prices.push({\n          product,\n          currentPrice,\n          predictedPrice,\n          volatilityIndex: volatility,\n          confidence: 0.87,\n          source: priceResult.isMock ? 'Mock SIM Data' : 'SIM MINAGRI',\n          isMock: priceResult.isMock\n        });\n      } catch (productError) {\n        console.error(`Error fetching data for ${product}:`, productError);\n        // Add fallback data\n        prices.push({\n          product,\n          currentPrice: 3.00,\n          predictedPrice: 3.15,\n          volatilityIndex: 0.15,\n          confidence: 0.5,\n          source: 'Fallback Data'\n        });\n      }\n    }\n\n    // Calculate summary statistics\n    const averageVolatility = prices.reduce((sum, p) => sum + p.volatilityIndex, 0) / prices.length;\n    const riskLevel = averageVolatility > 0.15 ? 'high' : averageVolatility > 0.10 ? 'medium' : 'low';\n    const highRiskProducts = prices.filter(p => p.volatilityIndex > 0.15).map(p => p.product);\n\n    res.json({\n      country: 'Peru',\n      timestamp: new Date(),\n      prices,\n      summary: {\n        averageVolatility: Math.round(averageVolatility * 1000) / 1000,\n        riskLevel,\n        recommendation: highRiskProducts.length > 0\n          ? `Implement buffer stocks for ${highRiskProducts.join(', ')}`\n          : 'Market conditions stable'\n      }\n    });\n  } catch (err) {\n    console.error('Error fetching food prices:', err);\n    res.status(500).json({ error: 'internal_error' });\n  }\n});\n\n// GET /api/food-resilience/supply-chain\nrouter.get('/supply-chain', async (req, res) => {\n  try {\n    const regions = ['Lima', 'Arequipa', 'Cusco', 'Trujillo'];\n    const routes = [];\n\n    for (const region of regions) {\n      try {\n        // Get supply chain capacity from MINAGRI\n        const capacityResult = await minagriIntegration.getSupplyChainCapacity(region);\n\n        if (!capacityResult || !capacityResult.capacityData || !capacityResult.capacityData[0]) {\n          throw new Error('Invalid capacity data');\n        }\n\n        const capacityData = capacityResult.capacityData[0];\n\n        routes.push({\n            region,\n            capacity: capacityData.capacity,\n            distance: capacityData.distance,\n            isMock: capacityResult.isMock,\n          cost: capacityData.cost,\n          efficiency: capacityData.capacity / capacityData.cost,\n          source: capacityResult.isMock ? 'Mock MINAGRI Data' : 'MINAGRI'\n        });\n      } catch (regionError) {\n        console.error(`Error fetching capacity for ${region}:`, regionError);\n        // Add fallback data\n        routes.push({\n          region,\n          capacity: 75,\n          distance: 400,\n          cost: 1.8,\n          efficiency: 75 / 1.8,\n          source: 'Fallback Data'\n        });\n      }\n    }\n\n    // Sort by cost efficiency\n    const optimizedRoutes = routes.sort((a, b) => b.efficiency - a.efficiency);\n\n    res.json({\n      country: 'Peru',\n      timestamp: new Date(),\n      routes: optimizedRoutes,\n      optimization: {\n        totalCapacity: optimizedRoutes.reduce((sum, r) => sum + r.capacity, 0),\n        averageCost: Math.round((optimizedRoutes.reduce((sum, r) => sum + r.cost, 0) / optimizedRoutes.length) * 100) / 100,\n        recommendedRoutes: optimizedRoutes.slice(0, 2).map(r => r.region)\n      }\n    });\n  } catch (err) {\n    console.error('Error fetching supply chain data:', err);\n    res.status(500).json({ error: 'internal_error' });\n  }\n});\n\n// POST /api/food-resilience/predict\nrouter.post('/predict', async (req, res) => {\n  try {\n    const { product, timeframe, region } = req.body;\n\n    if (!product) {\n      return res.status(400).json({ error: 'invalid_product' });\n    }\n\n    const targetRegion = region || 'Lima';\n\n    // Get current price and volatility from SIM\n    const [priceResult, volatilityResult] = await Promise.all([\n      simIntegration.getFoodPrices(product, targetRegion),\n      simIntegration.getVolatilityIndex(product, targetRegion)\n    ]);\n\n    if (!priceResult || !priceResult.priceData || !volatilityResult) {\n      throw new Error('Invalid price or volatility data');\n    }\n\n    const currentPrice = priceResult.priceData.currentPrice;\n    const volatility = volatilityResult.volatilityIndex;\n\n    // Get production data from MINAGRI for context\n    const productionResult = await minagriIntegration.getAgriculturalProduction(product, new Date().getFullYear());\n\n    // Enhanced prediction model considering multiple factors\n    const baseChange = volatility * 0.1; // Base change from volatility\n    const productionAdjustment = (productionResult && productionResult.productionData && productionResult.productionData[0]?.production > 2000000) ? -0.02 : 0.02; // Supply effect\n    const predictedPrice = currentPrice * (1 + baseChange + productionAdjustment);\n\n    // Determine factors based on data\n    const factors = [\n      'Weather patterns',\n      'Import costs',\n      'Local production',\n      'Market demand'\n    ];\n\n    if (volatility > 0.15) {\n      factors.push('High market volatility');\n    }\n\n      if (productionResult && productionResult.productionData && productionResult.productionData[0]?.production < 1500000) {\n        factors.push('Limited local production');\n      }\n\n      const prediction = {\n        product,\n        region: targetRegion,\n        currentPrice,\n        predictedPrice: Math.round(predictedPrice * 100) / 100,\n        timeframe: timeframe || '30_days',\n        confidence: Math.max(0.7, 0.9 - volatility * 2), // Lower confidence for high volatility\n        factors,\n        dataSources: {\n          prices: priceResult.isMock ? 'Mock SIM Data' : 'SIM MINAGRI',\n          production: (productionResult && productionResult.isMock) ? 'Mock MINAGRI Data' : 'MINAGRI',\n          volatility: volatilityResult.isMock ? 'Mock SIM Data' : 'SIM MINAGRI'\n        },\n        usedMockData: priceResult.isMock || volatilityResult.isMock || (productionResult && productionResult.isMock)\n      };    res.json(prediction);\n  } catch (err) {\n    console.error('Error generating prediction:', err);\n    res.status(500).json({ error: 'internal_error' });\n  }\n});\n\nexport default router;"],"mappings":"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","ignoreList":[]}