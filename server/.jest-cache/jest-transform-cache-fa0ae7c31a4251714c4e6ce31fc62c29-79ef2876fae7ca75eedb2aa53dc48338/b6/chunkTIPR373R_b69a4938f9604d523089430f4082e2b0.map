{"version":3,"names":["_logger","require","_stricteventemitter","INTERNAL_REQUEST_ID_HEADER_NAME","getGlobalSymbol","symbol","globalThis","setGlobalSymbol","value","deleteGlobalSymbol","InterceptorReadyState","InterceptorReadyState2","Interceptor","constructor","readyState","emitter","Emitter","subscriptions","logger","Logger","description","setMaxListeners","info","checkEnvironment","apply","extend","shouldApply","runningInstance","getInstance","on","event","listener","addListener","push","removeListener","setup","setInstance","once","off","removeAllListeners","dispose","clearInstance","length","_a","instance","name","createRequestId","Math","random","toString","slice"],"sources":["../../src/Interceptor.ts","../../src/createRequestId.ts"],"sourcesContent":["import { Logger } from '@open-draft/logger'\nimport { Emitter, Listener } from 'strict-event-emitter'\n\nexport type InterceptorEventMap = Record<string, any>\nexport type InterceptorSubscription = () => void\n\n/**\n * Request header name to detect when a single request\n * is being handled by nested interceptors (XHR -> ClientRequest).\n * Obscure by design to prevent collisions with user-defined headers.\n * Ideally, come up with the Interceptor-level mechanism for this.\n * @see https://github.com/mswjs/interceptors/issues/378\n */\nexport const INTERNAL_REQUEST_ID_HEADER_NAME =\n  'x-interceptors-internal-request-id'\n\nexport function getGlobalSymbol<V>(symbol: Symbol): V | undefined {\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || undefined\n  )\n}\n\nfunction setGlobalSymbol(symbol: Symbol, value: any): void {\n  // @ts-ignore\n  globalThis[symbol] = value\n}\n\nexport function deleteGlobalSymbol(symbol: Symbol): void {\n  // @ts-ignore\n  delete globalThis[symbol]\n}\n\nexport enum InterceptorReadyState {\n  INACTIVE = 'INACTIVE',\n  APPLYING = 'APPLYING',\n  APPLIED = 'APPLIED',\n  DISPOSING = 'DISPOSING',\n  DISPOSED = 'DISPOSED',\n}\n\nexport type ExtractEventNames<Events extends Record<string, any>> =\n  Events extends Record<infer EventName, any> ? EventName : never\n\nexport class Interceptor<Events extends InterceptorEventMap> {\n  protected emitter: Emitter<Events>\n  protected subscriptions: Array<InterceptorSubscription>\n  protected logger: Logger\n\n  public readyState: InterceptorReadyState\n\n  constructor(private readonly symbol: symbol) {\n    this.readyState = InterceptorReadyState.INACTIVE\n\n    this.emitter = new Emitter()\n    this.subscriptions = []\n    this.logger = new Logger(symbol.description!)\n\n    // Do not limit the maximum number of listeners\n    // so not to limit the maximum amount of parallel events emitted.\n    this.emitter.setMaxListeners(0)\n\n    this.logger.info('constructing the interceptor...')\n  }\n\n  /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */\n  protected checkEnvironment(): boolean {\n    return true\n  }\n\n  /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */\n  public apply(): void {\n    const logger = this.logger.extend('apply')\n    logger.info('applying the interceptor...')\n\n    if (this.readyState === InterceptorReadyState.APPLIED) {\n      logger.info('intercepted already applied!')\n      return\n    }\n\n    const shouldApply = this.checkEnvironment()\n\n    if (!shouldApply) {\n      logger.info('the interceptor cannot be applied in this environment!')\n      return\n    }\n\n    this.readyState = InterceptorReadyState.APPLYING\n\n    // Whenever applying a new interceptor, check if it hasn't been applied already.\n    // This enables to apply the same interceptor multiple times, for example from a different\n    // interceptor, only proxying events but keeping the stubs in a single place.\n    const runningInstance = this.getInstance()\n\n    if (runningInstance) {\n      logger.info('found a running instance, reusing...')\n\n      // Proxy any listeners you set on this instance to the running instance.\n      this.on = (event, listener) => {\n        logger.info('proxying the \"%s\" listener', event)\n\n        // Add listeners to the running instance so they appear\n        // at the top of the event listeners list and are executed first.\n        runningInstance.emitter.addListener(event, listener)\n\n        // Ensure that once this interceptor instance is disposed,\n        // it removes all listeners it has appended to the running interceptor instance.\n        this.subscriptions.push(() => {\n          runningInstance.emitter.removeListener(event, listener)\n          logger.info('removed proxied \"%s\" listener!', event)\n        })\n\n        return this\n      }\n\n      this.readyState = InterceptorReadyState.APPLIED\n\n      return\n    }\n\n    logger.info('no running instance found, setting up a new instance...')\n\n    // Setup the interceptor.\n    this.setup()\n\n    // Store the newly applied interceptor instance globally.\n    this.setInstance()\n\n    this.readyState = InterceptorReadyState.APPLIED\n  }\n\n  /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */\n  protected setup(): void {}\n\n  /**\n   * Listen to the interceptor's public events.\n   */\n  public on<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    const logger = this.logger.extend('on')\n\n    if (\n      this.readyState === InterceptorReadyState.DISPOSING ||\n      this.readyState === InterceptorReadyState.DISPOSED\n    ) {\n      logger.info('cannot listen to events, already disposed!')\n      return this\n    }\n\n    logger.info('adding \"%s\" event listener:', event, listener)\n\n    this.emitter.on(event, listener)\n    return this\n  }\n\n  public once<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    this.emitter.once(event, listener)\n    return this\n  }\n\n  public off<EventName extends ExtractEventNames<Events>>(\n    event: EventName,\n    listener: Listener<Events[EventName]>\n  ): this {\n    this.emitter.off(event, listener)\n    return this\n  }\n\n  public removeAllListeners<EventName extends ExtractEventNames<Events>>(\n    event?: EventName\n  ): this {\n    this.emitter.removeAllListeners(event)\n    return this\n  }\n\n  /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */\n  public dispose(): void {\n    const logger = this.logger.extend('dispose')\n\n    if (this.readyState === InterceptorReadyState.DISPOSED) {\n      logger.info('cannot dispose, already disposed!')\n      return\n    }\n\n    logger.info('disposing the interceptor...')\n    this.readyState = InterceptorReadyState.DISPOSING\n\n    if (!this.getInstance()) {\n      logger.info('no interceptors running, skipping dispose...')\n      return\n    }\n\n    // Delete the global symbol as soon as possible,\n    // indicating that the interceptor is no longer running.\n    this.clearInstance()\n\n    logger.info('global symbol deleted:', getGlobalSymbol(this.symbol))\n\n    if (this.subscriptions.length > 0) {\n      logger.info('disposing of %d subscriptions...', this.subscriptions.length)\n\n      for (const dispose of this.subscriptions) {\n        dispose()\n      }\n\n      this.subscriptions = []\n\n      logger.info('disposed of all subscriptions!', this.subscriptions.length)\n    }\n\n    this.emitter.removeAllListeners()\n    logger.info('destroyed the listener!')\n\n    this.readyState = InterceptorReadyState.DISPOSED\n  }\n\n  private getInstance(): this | undefined {\n    const instance = getGlobalSymbol<this>(this.symbol)\n    this.logger.info('retrieved global instance:', instance?.constructor?.name)\n    return instance\n  }\n\n  private setInstance(): void {\n    setGlobalSymbol(this.symbol, this)\n    this.logger.info('set global instance!', this.symbol.description)\n  }\n\n  private clearInstance(): void {\n    deleteGlobalSymbol(this.symbol)\n    this.logger.info('cleared global instance!', this.symbol.description)\n  }\n}\n","/**\n * Generate a random ID string to represent a request.\n * @example\n * createRequestId()\n * // \"f774b6c9c600f\"\n */\nexport function createRequestId(): string {\n  return Math.random().toString(16).slice(2)\n}\n"],"mappings":";;;;;AAAA,IAAAA,OAAS,GAAAC,OAAA,qBAAc;AACvB,IAAAC,mBAAS,GAAyBD,OAAA;AAY3B,IAAME,+BAAA,GACX;AAEK,SAASC,gBAAmBC,MAAA,EAA+B;EAChE;IAAA;IAEEC,UAAA,CAAWD,MAAM,KAAK;EAAA;AAE1B;AAEA,SAASE,gBAAgBF,MAAA,EAAgBG,KAAA,EAAkB;EAEzDF,UAAA,CAAWD,MAAM,IAAIG,KAAA;AACvB;AAEO,SAASC,mBAAmBJ,MAAA,EAAsB;EAEvD,OAAOC,UAAA,CAAWD,MAAM;AAC1B;AAEO,IAAKK,qBAAA,GAAL,gBAAKC,sBAAA,IAAL;EACLA,sBAAA,eAAW;EACXA,sBAAA,eAAW;EACXA,sBAAA,cAAU;EACVA,sBAAA,gBAAY;EACZA,sBAAA,eAAW;EALD,OAAAA,sBAAA;AAAA,GAAAD,qBAAA;AAWL,IAAME,WAAA,GAAN,MAAsD;EAO3DC,YAA6BR,MAAA,EAAgB;IAAhB,KAAAA,MAAA,GAAAA,MAAA;IAC3B,KAAKS,UAAA,GAAa;IAElB,KAAKC,OAAA,GAAU,KAAI,GAAAb,mBAAQ,CAAAc,OAAA;IAC3B,KAAKC,aAAA,GAAgB,EAAC;IACtB,KAAKC,MAAA,GAAS,KAAI,GAAAlB,OAAO,CAAAmB,MAAO,EAAAd,MAAY,CAAAe,WAAA;IAI5C,KAAKL,OAAA,CAAQM,eAAA,CAAgB,CAAC;IAE9B,KAAKH,MAAA,CAAOI,IAAA,CAAK,iCAAiC;EACpD;EAAA;AAAA;AAAA;AAAA;EAMUC,iBAAA,EAA4B;IACpC,OAAO;EACT;EAAA;AAAA;AAAA;AAAA;EAMOC,MAAA,EAAc;IACnB,MAAMN,MAAA,GAAS,KAAKA,MAAA,CAAOO,MAAA,CAAO,OAAO;IACzCP,MAAA,CAAOI,IAAA,CAAK,6BAA6B;IAEzC,IAAI,KAAKR,UAAA,KAAe,yBAA+B;MACrDI,MAAA,CAAOI,IAAA,CAAK,8BAA8B;MAC1C;IACF;IAEA,MAAMI,WAAA,GAAc,KAAKH,gBAAA,CAAiB;IAE1C,IAAI,CAACG,WAAA,EAAa;MAChBR,MAAA,CAAOI,IAAA,CAAK,wDAAwD;MACpE;IACF;IAEA,KAAKR,UAAA,GAAa;IAKlB,MAAMa,eAAA,GAAkB,KAAKC,WAAA,CAAY;IAEzC,IAAID,eAAA,EAAiB;MACnBT,MAAA,CAAOI,IAAA,CAAK,sCAAsC;MAGlD,KAAKO,EAAA,GAAK,CAACC,KAAA,EAAOC,QAAA,KAAa;QAC7Bb,MAAA,CAAOI,IAAA,CAAK,8BAA8BQ,KAAK;QAI/CH,eAAA,CAAgBZ,OAAA,CAAQiB,WAAA,CAAYF,KAAA,EAAOC,QAAQ;QAInD,KAAKd,aAAA,CAAcgB,IAAA,CAAK,MAAM;UAC5BN,eAAA,CAAgBZ,OAAA,CAAQmB,cAAA,CAAeJ,KAAA,EAAOC,QAAQ;UACtDb,MAAA,CAAOI,IAAA,CAAK,kCAAkCQ,KAAK;QACrD,CAAC;QAED,OAAO;MACT;MAEA,KAAKhB,UAAA,GAAa;MAElB;IACF;IAEAI,MAAA,CAAOI,IAAA,CAAK,yDAAyD;IAGrE,KAAKa,KAAA,CAAM;IAGX,KAAKC,WAAA,CAAY;IAEjB,KAAKtB,UAAA,GAAa;EACpB;EAAA;AAAA;AAAA;AAAA;AAAA;EAOUqB,MAAA,EAAc,CAAC;EAAA;AAAA;AAAA;EAKlBN,GACLC,KAAA,EACAC,QAAA,EACM;IACN,MAAMb,MAAA,GAAS,KAAKA,MAAA,CAAOO,MAAA,CAAO,IAAI;IAEtC,IACE,KAAKX,UAAA,KAAe,+BACpB,KAAKA,UAAA,KAAe,2BACpB;MACAI,MAAA,CAAOI,IAAA,CAAK,4CAA4C;MACxD,OAAO;IACT;IAEAJ,MAAA,CAAOI,IAAA,CAAK,+BAA+BQ,KAAA,EAAOC,QAAQ;IAE1D,KAAKhB,OAAA,CAAQc,EAAA,CAAGC,KAAA,EAAOC,QAAQ;IAC/B,OAAO;EACT;EAEOM,KACLP,KAAA,EACAC,QAAA,EACM;IACN,KAAKhB,OAAA,CAAQsB,IAAA,CAAKP,KAAA,EAAOC,QAAQ;IACjC,OAAO;EACT;EAEOO,IACLR,KAAA,EACAC,QAAA,EACM;IACN,KAAKhB,OAAA,CAAQuB,GAAA,CAAIR,KAAA,EAAOC,QAAQ;IAChC,OAAO;EACT;EAEOQ,mBACLT,KAAA,EACM;IACN,KAAKf,OAAA,CAAQwB,kBAAA,CAAmBT,KAAK;IACrC,OAAO;EACT;EAAA;AAAA;AAAA;EAKOU,QAAA,EAAgB;IACrB,MAAMtB,MAAA,GAAS,KAAKA,MAAA,CAAOO,MAAA,CAAO,SAAS;IAE3C,IAAI,KAAKX,UAAA,KAAe,2BAAgC;MACtDI,MAAA,CAAOI,IAAA,CAAK,mCAAmC;MAC/C;IACF;IAEAJ,MAAA,CAAOI,IAAA,CAAK,8BAA8B;IAC1C,KAAKR,UAAA,GAAa;IAElB,IAAI,CAAC,KAAKc,WAAA,CAAY,GAAG;MACvBV,MAAA,CAAOI,IAAA,CAAK,8CAA8C;MAC1D;IACF;IAIA,KAAKmB,aAAA,CAAc;IAEnBvB,MAAA,CAAOI,IAAA,CAAK,0BAA0BlB,eAAA,CAAgB,KAAKC,MAAM,CAAC;IAElE,IAAI,KAAKY,aAAA,CAAcyB,MAAA,GAAS,GAAG;MACjCxB,MAAA,CAAOI,IAAA,CAAK,oCAAoC,KAAKL,aAAA,CAAcyB,MAAM;MAEzE,WAAWF,OAAA,IAAW,KAAKvB,aAAA,EAAe;QACxCuB,OAAA,CAAQ;MACV;MAEA,KAAKvB,aAAA,GAAgB,EAAC;MAEtBC,MAAA,CAAOI,IAAA,CAAK,kCAAkC,KAAKL,aAAA,CAAcyB,MAAM;IACzE;IAEA,KAAK3B,OAAA,CAAQwB,kBAAA,CAAmB;IAChCrB,MAAA,CAAOI,IAAA,CAAK,yBAAyB;IAErC,KAAKR,UAAA,GAAa;EACpB;EAEQc,YAAA,EAAgC;IAzO1C,IAAAe,EAAA;IA0OI,MAAMC,QAAA,GAAWxC,eAAA,CAAsB,KAAKC,MAAM;IAClD,KAAKa,MAAA,CAAOI,IAAA,CAAK,+BAA8BqB,EAAA,GAAAC,QAAA,oBAAAA,QAAA,CAAU/B,WAAA,KAAV,gBAAA8B,EAAA,CAAuBE,IAAI;IAC1E,OAAOD,QAAA;EACT;EAEQR,YAAA,EAAoB;IAC1B7B,eAAA,CAAgB,KAAKF,MAAA,EAAQ,IAAI;IACjC,KAAKa,MAAA,CAAOI,IAAA,CAAK,wBAAwB,KAAKjB,MAAA,CAAOe,WAAW;EAClE;EAEQqB,cAAA,EAAsB;IAC5BhC,kBAAA,CAAmB,KAAKJ,MAAM;IAC9B,KAAKa,MAAA,CAAOI,IAAA,CAAK,4BAA4B,KAAKjB,MAAA,CAAOe,WAAW;EACtE;AACF;;;AClPO,SAAS0B,gBAAA,EAA0B;EACxC,OAAOC,IAAA,CAAKC,MAAA,CAAO,EAAEC,QAAA,CAAS,EAAE,EAAEC,KAAA,CAAM,CAAC;AAC3C","ignoreList":[]}