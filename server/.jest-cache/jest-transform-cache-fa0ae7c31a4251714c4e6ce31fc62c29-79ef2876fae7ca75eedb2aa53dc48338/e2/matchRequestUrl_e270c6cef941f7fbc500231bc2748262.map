{"version":3,"names":["matchRequestUrl_exports","__export","coercePath","isPath","matchRequestUrl","module","exports","__toCommonJS","import_path_to_regexp","require","import_interceptors","import_normalizePath","path","replace","_","parameterName","wildcard","expression","startsWith","url","baseUrl","normalizedPath","normalizePath","cleanPath","cleanUrl","getCleanUrl","result","match","decode","decodeURIComponent","params","matches","value","RegExp"],"sources":["../../../../src/core/utils/matching/matchRequestUrl.ts"],"sourcesContent":["import { match } from 'path-to-regexp'\nimport { getCleanUrl } from '@mswjs/interceptors'\nimport { normalizePath } from './normalizePath'\n\nexport type Path = string | RegExp\nexport type PathParams<KeyType extends keyof any = string> = {\n  [ParamName in KeyType]?: string | ReadonlyArray<string>\n}\n\nexport interface Match {\n  matches: boolean\n  params?: PathParams\n}\n\n/**\n * Coerce a path supported by MSW into a path\n * supported by \"path-to-regexp\".\n */\nexport function coercePath(path: string): string {\n  return (\n    path\n      /**\n       * Replace wildcards (\"*\") with unnamed capturing groups\n       * because \"path-to-regexp\" doesn't support wildcards.\n       * Ignore path parameter' modifiers (i.e. \":name*\").\n       */\n      .replace(\n        /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n        (_, parameterName: string | undefined, wildcard: string) => {\n          const expression = '(.*)'\n\n          if (!parameterName) {\n            return expression\n          }\n\n          return parameterName.startsWith(':')\n            ? `${parameterName}${wildcard}`\n            : `${parameterName}${expression}`\n        },\n      )\n      /**\n       * Escape the port so that \"path-to-regexp\" can match\n       * absolute URLs including port numbers.\n       */\n      .replace(/([^/])(:)(?=\\d+)/, '$1\\\\$2')\n      /**\n       * Escape the protocol so that \"path-to-regexp\" could match\n       * absolute URL.\n       * @see https://github.com/pillarjs/path-to-regexp/issues/259\n       */\n      .replace(/^([^/]+)(:)(?=\\/\\/)/, '$1\\\\$2')\n  )\n}\n\n/**\n * Returns the result of matching given request URL against a mask.\n */\nexport function matchRequestUrl(url: URL, path: Path, baseUrl?: string): Match {\n  const normalizedPath = normalizePath(path, baseUrl)\n  const cleanPath =\n    typeof normalizedPath === 'string'\n      ? coercePath(normalizedPath)\n      : normalizedPath\n\n  const cleanUrl = getCleanUrl(url)\n  const result = match(cleanPath, { decode: decodeURIComponent })(cleanUrl)\n  const params = (result && (result.params as PathParams)) || {}\n\n  return {\n    matches: result !== false,\n    params,\n  }\n}\n\nexport function isPath(value: unknown): value is Path {\n  return typeof value === 'string' || value instanceof RegExp\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,uBAAA;AAAAC,QAAA,CAAAD,uBAAA;EAAAE,UAAA,EAAAA,CAAA,KAAAA,UAAA;EAAAC,MAAA,EAAAA,CAAA,KAAAA,MAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAP,uBAAA;AAAA,IAAAQ,qBAAA,GAAsBC,OAAA;AACtB,IAAAC,mBAAA,GAA4BD,OAAA;AAC5B,IAAAE,oBAAA,GAA8BF,OAAA;AAgBvB,SAASP,WAAWU,IAAA,EAAsB;EAC/C,OACEA,IAAA,CAMGC,OAAA,CACC,6BACA,CAACC,CAAA,EAAGC,aAAA,EAAmCC,QAAA,KAAqB;IAC1D,MAAMC,UAAA,GAAa;IAEnB,IAAI,CAACF,aAAA,EAAe;MAClB,OAAOE,UAAA;IACT;IAEA,OAAOF,aAAA,CAAcG,UAAA,CAAW,GAAG,IAC/B,GAAGH,aAAa,GAAGC,QAAQ,KAC3B,GAAGD,aAAa,GAAGE,UAAU;EACnC,CACF,EAKCJ,OAAA,CAAQ,oBAAoB,QAAQ,EAMpCA,OAAA,CAAQ,uBAAuB,QAAQ;AAE9C;AAKO,SAAST,gBAAgBe,GAAA,EAAUP,IAAA,EAAYQ,OAAA,EAAyB;EAC7E,MAAMC,cAAA,OAAiBV,oBAAA,CAAAW,aAAA,EAAcV,IAAA,EAAMQ,OAAO;EAClD,MAAMG,SAAA,GACJ,OAAOF,cAAA,KAAmB,WACtBnB,UAAA,CAAWmB,cAAc,IACzBA,cAAA;EAEN,MAAMG,QAAA,OAAWd,mBAAA,CAAAe,WAAA,EAAYN,GAAG;EAChC,MAAMO,MAAA,OAASlB,qBAAA,CAAAmB,KAAA,EAAMJ,SAAA,EAAW;IAAEK,MAAA,EAAQC;EAAmB,CAAC,EAAEL,QAAQ;EACxE,MAAMM,MAAA,GAAUJ,MAAA,IAAWA,MAAA,CAAOI,MAAA,IAA0B,CAAC;EAE7D,OAAO;IACLC,OAAA,EAASL,MAAA,KAAW;IACpBI;EACF;AACF;AAEO,SAAS3B,OAAO6B,KAAA,EAA+B;EACpD,OAAO,OAAOA,KAAA,KAAU,YAAYA,KAAA,YAAiBC,MAAA;AACvD","ignoreList":[]}