{"version":3,"names":["http","HttpResponse","require","generateMockTimestamp","Date","toISOString","generateMockId","Math","random","toString","substr","DEFAULT_MOCKS","source","error","timestamp","handlers","get","request","mockData","events","id","magnitude","place","time","now","coordinates","url","tsunami","significance","summary","totalEvents","maxMagnitude","lastUpdated","isMock","note","json","extremes","country","countryCode","avgMaxTemp","avgMinTemp","avgHumidity","totalPrecipitation","extremeEvents","riskLevel","period","countries","data","COL","value","year","PER","ARG","globalAverage","success","marketData","price_change_percentage_24h","analysis","totalCryptos","averageVolatility","riskAssessment","URL","searchParams","split","indicators","socialCohesion","infrastructureQuality","economicStability","healthcareAccess","map","code","deploymentFrequency","trend","unit","leadTime","changeFailureRate","timeToRestore","post","body","product","predictedPrice","confidence","factors","name","impact","headers","includes","Response","status","statusText","token","expiresAt","kpis","riskIndex","resilienceScore","alertCount","risks","food","climate","geopolitical","params","productLower","toLowerCase","mapping","corn","precio_actual","unidad","fecha","fuente","beans","region","priceData","currentPrice","date","averagePrice","maxPrice","round","minPrice","base","rice","potatoes","precios","fixedBase","today","i","d","setDate","getDate","push","precio","volumen","vols","indice_volatilidad","nivel_riesgo","v","indicator","page","pages","per_page","toUpperCase","forEach","c","startYear","endYear","ids","list","symbol","slice","current_price","prices","start","end","temperature_2m_max","temperature_2m_min","daily","query","articles","title","tone","eventCount","values","features","properties","mag","getTime","geometry","path","pathname","imagery","ndviData","Array","from","length","_","ndvi","lat","lon","precipitation_sum","startDate","endDate","parameter","T2M_MAX","Object","fromEntries","replace","T2M_MIN","PRECTOTCORR","type","sig","location","riskScore","overallRisk","highRiskZones","price","volatility","routes","origin","destination","cost","optimization","recommendedRoutes","currency","segments","default","plans","u","host","hostname","undefined","e","console","log","module","exports"],"sources":["handlers.js"],"sourcesContent":["// CommonJS MSW handlers - Sistema de mocks optimizado\nconst { http, HttpResponse } = require('msw');\n\n/**\n * Sistema de Mocks Optimizado\n * - Handlers deterministas\n * - Respuestas consistentes\n * - Manejo de errores robusto\n */\n\n// Utilidades para mocks\nconst generateMockTimestamp = () => new Date().toISOString();\nconst generateMockId = () => `mock-${Math.random().toString(36).substr(2, 9)}`;\n\n// Mocks predefinidos para servicios\nconst DEFAULT_MOCKS = {\n  // Servicios externos\n  'PandemicsService': {\n    source: 'PandemicsService - Error Fallback',\n    error: 'Service unavailable',\n    timestamp: generateMockTimestamp()\n  },\n  'GeopoliticalInstabilityService': {\n    source: 'GeopoliticalInstabilityService - Error Fallback',\n    error: 'Service unavailable',\n    timestamp: generateMockTimestamp()\n  },\n  'EconomicInstabilityService': {\n    source: 'EconomicInstabilityService - Error Fallback',\n    error: 'Service unavailable',\n    timestamp: generateMockTimestamp()\n  },\n  'CybersecurityService': {\n    source: 'CybersecurityService - Error Fallback',\n    error: 'Service unavailable',\n    timestamp: generateMockTimestamp()\n  }\n};\n// Handlers optimizados\nconst handlers = [\n  // USGS Seismic Activity\n  http.get('https://earthquake.usgs.gov/fdsnws/event/1/query', async ({ request }) => {\n    const mockData = {\n      events: [\n        {\n          id: 'mock-1',\n          magnitude: 4.5,\n          place: 'Mock Seismic Region - Test Location',\n          time: Date.now(),\n          coordinates: [-74.2973, 4.5709, 10],\n          url: 'https://example.com/mock-earthquake-1',\n          tsunami: 0,\n          significance: 50\n        },\n        {\n          id: 'mock-2',\n          magnitude: 3.2,\n          place: 'Another Mock Location',\n          time: Date.now() - 3600000,\n          coordinates: [-75, -10, 15],\n          url: 'https://example.com/mock-earthquake-2',\n          tsunami: 0,\n          significance: 25\n        }\n      ],\n      summary: {\n        totalEvents: 2,\n        maxMagnitude: 4.5,\n        lastUpdated: new Date().toISOString(),\n        source: 'High-Fidelity Mock Data - USGS API Unavailable'\n      },\n      isMock: true,\n      note: 'Real-time seismic data simulation - API unavailable'\n    };\n\n    return HttpResponse.json(mockData);\n  }),\n\n  // Climate Extremes\n  http.get('*/api/climate-extremes', async () => {\n    const mockData = {\n      extremes: [\n        {\n          country: 'Colombia',\n          countryCode: 'COL',\n          avgMaxTemp: 28.5,\n          avgMinTemp: 18.2,\n          avgHumidity: 75.2,\n          totalPrecipitation: 150.3,\n          extremeEvents: 3,\n          riskLevel: 'medium',\n          timestamp: '2025-10-10T18:00:00.000Z',\n          period: 'Last 30 days'\n        },\n        {\n          country: 'Peru',\n          countryCode: 'PER',\n          avgMaxTemp: 25.8,\n          avgMinTemp: 15.6,\n          avgHumidity: 68.9,\n          totalPrecipitation: 85.7,\n          extremeEvents: 2,\n          riskLevel: 'low',\n          timestamp: '2025-10-10T18:00:00.000Z',\n          period: 'Last 30 days'\n        }\n      ]\n    };\n\n    return HttpResponse.json(mockData);\n  }),\n\n  // Food Security\n  http.get('*/api/global-risk/food-security', async () => {\n    const mockData = {\n      countries: ['COL', 'PER', 'ARG'],\n      data: {\n        COL: {\n          country: 'Colombia',\n          value: 5.2,\n          year: '2024'\n        },\n        PER: {\n          country: 'Peru',\n          value: 7.1,\n          year: '2024'\n        },\n        ARG: {\n          country: 'Argentina',\n          value: 4.8,\n          year: '2024'\n        }\n      },\n      globalAverage: 5.7,\n      source: 'World Bank API - SN.ITK.DEFC.ZS',\n      year: 2024\n    };\n\n    return HttpResponse.json(mockData);\n  }),\n\n  // Crypto Volatility\n  http.get('*/api/global-risk/crypto-volatility', async () => {\n    const mockData = {\n      success: true,\n      data: {\n        value: 45,\n        marketData: [\n          { id: 'bitcoin', price_change_percentage_24h: -2.5 },\n          { id: 'ethereum', price_change_percentage_24h: 1.2 }\n        ],\n        analysis: {\n          totalCryptos: 2,\n          averageVolatility: 1.85,\n          riskAssessment: 'Moderate'\n        },\n        timestamp: new Date().toISOString()\n      },\n      source: 'CryptoService',\n      timestamp: new Date().toISOString()\n    };\n\n    return HttpResponse.json(mockData);\n  }),\n\n  // Community Resilience\n  http.get('*/api/global-risk/community-resilience', async ({ request }) => {\n    const url = new URL(request.url);\n    const countries = url.searchParams.get('countries')?.split(',') || ['COL'];\n    \n    const mockData = {\n      success: true,\n      data: {\n        value: 30,\n        indicators: {\n          socialCohesion: 0.75,\n          infrastructureQuality: 0.65,\n          economicStability: 0.70,\n          healthcareAccess: 0.80\n        },\n        countries: countries.map(code => ({\n          code,\n          indicators: {\n            socialCohesion: Math.random() * 0.3 + 0.5,\n            infrastructureQuality: Math.random() * 0.3 + 0.5,\n            economicStability: Math.random() * 0.3 + 0.5,\n            healthcareAccess: Math.random() * 0.3 + 0.5\n          }\n        }))\n      },\n      timestamp: new Date().toISOString()\n    };\n\n    return HttpResponse.json(mockData);\n  }),\n\n  // SDLC Deployment Metrics\n  http.get('*/api/sdlc/deployment', async () => {\n    const mockData = {\n      success: true,\n      data: {\n        deploymentFrequency: {\n          value: 8.5,\n          trend: 'increasing',\n          unit: 'deployments/week'\n        },\n        leadTime: {\n          value: 2.3,\n          trend: 'stable',\n          unit: 'days'\n        },\n        changeFailureRate: {\n          value: 3.2,\n          trend: 'decreasing',\n          unit: 'percentage'\n        },\n        timeToRestore: {\n          value: 45,\n          trend: 'improving',\n          unit: 'minutes'\n        }\n      }\n    };\n\n    return HttpResponse.json(mockData);\n  }),\n\n  // Price Prediction\n  http.post('*/api/food-resilience/predict', async ({ request }) => {\n    const body = await request.json();\n    \n    const mockData = {\n      success: true,\n      product: body.product,\n      predictedPrice: 4.8,\n      confidence: 0.85,\n      factors: [\n        { name: 'seasonality', impact: 0.3 },\n        { name: 'weather', impact: 0.2 },\n        { name: 'supply', impact: 0.25 }\n      ],\n      timestamp: new Date().toISOString()\n    };\n\n    return HttpResponse.json(mockData);\n  }),\n\n  // SSE Stream Authentication\n  http.get('*/api/eternal-vigilance/stream', async ({ request }) => {\n    const headers = request.headers;\n    if (!headers.get('Cookie')?.includes('sse_token=')) {\n      return new Response(null, {\n        status: 401,\n        statusText: 'Unauthorized'\n      });\n    }\n\n    return new Response(\n      'data: {\"event\":\"init\",\"data\":{\"authenticated\":true}}\\n\\n',\n      {\n        headers: {\n          'Content-Type': 'text/event-stream',\n          'Connection': 'keep-alive',\n          'Cache-Control': 'no-cache'\n        }\n      }\n    );\n  }),\n\n  // Token Generation\n  http.post('*/api/eternal-vigilance/token', async () => {\n    return HttpResponse.json({\n      success: true,\n      token: 'GEN-TOKEN',\n      expiresAt: new Date(Date.now() + 3600000).toISOString()\n    });\n  }),\n\n  // Demo Full State\n  http.get('*/api/demo/full-state', async () => {\n    const mockData = {\n      kpis: {\n        riskIndex: 65,\n        resilienceScore: 75,\n        alertCount: 3\n      },\n      countries: [\n        {\n          code: 'COL',\n          name: 'Colombia',\n          risks: {\n            food: 45,\n            climate: 60,\n            geopolitical: 55\n          }\n        },\n        {\n          code: 'PER',\n          name: 'Peru',\n          risks: {\n            food: 40,\n            climate: 50,\n            geopolitical: 45\n          }\n        }\n      ],\n      timestamp: new Date().toISOString()\n    };\n\n    return HttpResponse.json(mockData);\n  }),\n  \n  http.get('*/api/prices/:product', ({ params }) => {\n    const { product } = params;\n    const productLower = product.toLowerCase();\n    const mapping = {\n      corn: { precio_actual: 3.1, unidad: 'PEN/kg', fecha: '2024-10-07', fuente: 'SIM MINAGRI' },\n      beans: { precio_actual: 5.8, unidad: 'PEN/kg', fecha: '2024-10-07', fuente: 'SIM MINAGRI' }\n    };\n    const data = mapping[productLower] || { precio_actual: 3.0, unidad: 'PEN/kg', fecha: '2024-10-07', fuente: 'SIM MINAGRI' };\n    return HttpResponse.json({\n      product,\n      region: 'Lima', \n      priceData: {\n        currentPrice: data.precio_actual,\n         unit: data.unidad,\n         date: data.fecha,\n         source: data.fuente,\n         averagePrice: data.precio_actual,\n         maxPrice: Math.round(data.precio_actual * 1.2 * 100) / 100,\n         minPrice: Math.round(data.precio_actual * 0.8 * 100) / 100,\n         isMock: true\n       }\n     });\n   }),\n\n  // SIM history\n   http.get('https://sim.minagri.gob.pe/api/v1/precios/historico', ({ request }) => {\n     const url = new URL(request.url);\n     const product = url.searchParams.get('producto') || '';\n     const productLower = product.toLowerCase();\n     const base = { rice: 4.5, potatoes: 2.2, corn: 3.1, beans: 5.8 }[productLower] || 3.0;\n     // deterministic historic series (stable for tests)\n     const precios = [];\n     const fixedBase = base;\n     const today = new Date('2025-10-10');\n     for (let i = 5; i >= 0; i--) {\n       const d = new Date(today);\n       d.setDate(d.getDate() - i);\n       precios.push({ fecha: d.toISOString().split('T')[0], precio: Math.round((fixedBase + 0.05 * (i - 2)) * 100) / 100, volumen: 200 + i * 10 });\n     }\n     return HttpResponse.json({ precios, isMock: true });\n   }),\n\n  // SIM volatility\n   http.get('https://sim.minagri.gob.pe/api/v1/volatilidad', ({ request }) => {\n     const url = new URL(request.url);\n     const product = url.searchParams.get('producto') || '';\n     const productLower = product.toLowerCase();\n    const vols = { rice: { indice_volatilidad: 0.12, nivel_riesgo: 'medium' }, potatoes: { indice_volatilidad: 0.18, nivel_riesgo: 'high' }, corn: { indice_volatilidad: 0.15, nivel_riesgo: 'medium' }, beans: { indice_volatilidad: 0.09, nivel_riesgo: 'low' } };\n    const v = vols[productLower] || { indice_volatilidad: 0.15, nivel_riesgo: 'medium' };\n    return HttpResponse.json({ ...v, isMock: true });\n   }),\n\n  // World Bank generic indicator (array [meta, data])\n  http.get('https://api.worldbank.org/v2/country/:country/indicator/:indicator', ({ params }) => {\n    const { country, indicator } = params;\n    const data = [ { page: 1, pages: 1, per_page: 50 }, [ { country: { id: country.toUpperCase(), value: 'MockCountry' }, indicator: { id: indicator, value: indicator }, date: '2023', value: 7.5 } ] ];\n    return HttpResponse.json({ data, isMock: true });\n  }),\n\n  // World Bank food security data for service\n  http.get('https://api.worldbank.org/v2/country/:country/indicator/SN.ITK.DEFC.ZS', ({ params }) => {\n    const { country } = params;\n    // Return a structured data mapping expected by server handlers/tests\n    const countries = ['ARG', 'COL', 'PER', 'BRA', 'CHL', 'ECU'];\n    const data = {};\n    countries.forEach((c) => {\n      data[c] = { country: c === 'ARG' ? 'Argentina' : c === 'COL' ? 'Colombia' : c === 'PER' ? 'Peru' : 'MockCountry', value: 5.0, year: '2024' };\n    });\n    return HttpResponse.json({ countries, data, indicator: 'SN.ITK.DEFC.ZS', period: { startYear: '2020', endYear: '2024' }, isMock: true });\n  }),\n\n\n  // CoinGecko markets list\n  http.get('https://api.coingecko.com/api/v3/coins/markets', ({ request }) => {\n    const url = new URL(request.url);\n    const ids = url.searchParams.get('ids') || 'bitcoin';\n    const list = ids.split(',').map((id) => ({ id, symbol: id.slice(0, 3).toLowerCase(), current_price: id === 'bitcoin' ? 50000 : 2500, price_change_percentage_24h: id === 'bitcoin' ? -2.5 : 1.2 }));\n    return HttpResponse.json({ list, isMock: true });\n  }),\n\n  // CoinGecko market chart (historical)\n  http.get('https://api.coingecko.com/api/v3/coins/:id/market_chart', () => {\n    const prices = [[1609459200000, 50000], [1609545600000, 51000]];\n    return HttpResponse.json({ prices, isMock: true });\n  }),\n\n  // Open-Meteo minimal daily shape\n  http.get('https://api.open-meteo.com/v1/forecast', ({ request }) => {\n    const url = new URL(request.url);\n    const start = url.searchParams.get('start_date') || '2024-01-01';\n    const end = url.searchParams.get('end_date') || '2024-01-02';\n    const time = [start, end];\n    const temperature_2m_max = [25, 26];\n    const temperature_2m_min = [15, 14];\n    return HttpResponse.json({ daily: { time, temperature_2m_max, temperature_2m_min } });\n  }),\n\n  // GDELT\n  http.get('https://api.gdeltproject.org/api/v2/doc/doc', ({ request }) => {\n    const url = new URL(request.url);\n    const query = url.searchParams.get('query') || '';\n    return HttpResponse.json({\n      articles: [{ title: 'Sample', url: 'https://example.com', date: '2024-10-07', tone: 2.5 }],\n      isMock: true,\n      eventCount: 12,\n      note: 'Mock data for testing'\n    });\n  }),\n\n  // IMF minimal\n  http.get('https://www.imf.org/external/datamapper/api/v1/:path*', () => HttpResponse.json({ values: { PER: { 2023: 268.5 } } })),\n\n  // USGS earthquake\n  // USGS earthquake - provide 'place' field and deterministic time\n  http.get('https://earthquake.usgs.gov/fdsnws/event/1/query', () => HttpResponse.json({ features: [{ properties: { mag: 5.2, place: 'Test Location', time: new Date('2025-10-10T12:00:00.000Z').getTime(), tsunami: 0 }, geometry: { coordinates: [-75.0, -10.0, 10.0] } }] , isMock: true })),\n\n  // NASA imagery minimal\n  http.get('https://api.nasa.gov/planetary/earth/:path*', ({ request }) => {\n    const url = new URL(request.url);\n    const path = url.pathname;\n    if (path.includes('imagery')) {\n      return HttpResponse.json({\n        imagery: { url: 'https://example.com/satellite-image.jpg', date: '2024-10-07' },\n        isMock: true,\n        ndviData: Array.from({ length: 3 }, (_, i) => ({ date: `2024-01-0${i + 1}`, ndvi: Math.random() }))\n      });\n    }\n    return HttpResponse.json({ imagery: { url: 'https://example.com/satellite-image.jpg', date: '2024-10-07' } });\n  }),\n\n  // NASA POWER API for climate data (used by SatelliteIntegration)\n  http.get('https://power.larc.nasa.gov/api/temporal/daily/point', ({ request }) => {\n    const url = new URL(request.url);\n    const start = url.searchParams.get('start') || '20240101';\n    const end = url.searchParams.get('end') || '20240102';\n    const lat = url.searchParams.get('latitude') || '4.7110';\n    const lon = url.searchParams.get('longitude') || '-74.0721';\n\n    // Generate mock climate data\n    const time = [];\n    const temperature_2m_max = [];\n    const temperature_2m_min = [];\n    const precipitation_sum = [];\n\n    const startDate = new Date(start.slice(0,4), start.slice(4,6)-1, start.slice(6,8));\n    const endDate = new Date(end.slice(0,4), end.slice(4,6)-1, end.slice(6,8));\n\n    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n      time.push(d.toISOString().split('T')[0]);\n      temperature_2m_max.push(25 + Math.random() * 10); // 25-35°C\n      temperature_2m_min.push(15 + Math.random() * 10); // 15-25°C\n      precipitation_sum.push(Math.random() * 20); // 0-20mm\n    }\n\n    return HttpResponse.json({\n      properties: {\n        parameter: {\n          T2M_MAX: Object.fromEntries(temperature_2m_max.map((v, i) => [time[i].replace(/-/g, ''), v])),\n          T2M_MIN: Object.fromEntries(temperature_2m_min.map((v, i) => [time[i].replace(/-/g, ''), v])),\n          PRECTOTCORR: Object.fromEntries(precipitation_sum.map((v, i) => [time[i].replace(/-/g, ''), v]))\n        }\n      }\n    });\n  }),\n\n  // USGS Earthquake API (detailed version for seismic routes)\n  http.get('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson', () => HttpResponse.json({\n    type: 'FeatureCollection',\n    features: [\n      {\n        type: 'Feature',\n        properties: {\n          mag: 5.2,\n          place: '100km S of Lima, Peru',\n          time: Date.now(),\n          tsunami: 0,\n          sig: 650,\n          url: 'https://earthquake.usgs.gov/earthquakes/eventpage/test123'\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: [-76.5, -12.0, 10.0]\n        }\n      },\n      {\n        type: 'Feature',\n        properties: {\n          mag: 4.8,\n          place: 'Offshore Colombia',\n          time: Date.now() - 86400000,\n          tsunami: 0,\n          sig: 350,\n          url: 'https://earthquake.usgs.gov/earthquakes/eventpage/test456'\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: [-75.0, 4.0, 5.0]\n        }\n      }\n    ]\n  })),\n\n  // (moved) Generic API fallback for any unmatched requests is at the end of this file\n\n  // Local app endpoints are intentionally NOT mocked here so route handlers inside\n  // the app can be exercised directly by tests. External integrations remain mocked above.\n\n  // Internal app endpoints should be handled by the express app during tests.\n  // Keep external integration handlers above; do NOT mock internal routes here.\n\n  // Seismic activity (match any host/port)\n  // Seismic activity (match any host/port) - include 'place' for compatibility\n  http.get('*/api/seismic/activity', () => HttpResponse.json([\n    { id: 'test1', magnitude: 5.2, place: 'Test Location', location: 'Test Location', riskScore: 0.8 }\n  ],), { status: 200 }),\n\n  // Seismic risk (match any host/port)\n  http.get('*/api/seismic/risk', () => HttpResponse.json({\n    overallRisk: 0.5,\n    eventCount: 1,\n    maxMagnitude: 6.0,\n    highRiskZones: []\n  })),\n\n  // Food resilience prices (match any host/port)\n  http.get('*/api/food-resilience/prices', () => HttpResponse.json({\n    country: 'Peru',\n    prices: [\n      { product: 'rice', price: 4.5, volatility: 0.1 },\n      { product: 'potatoes', price: 2.2, volatility: 0.15 },\n      { product: 'corn', price: 3.1, volatility: 0.12 },\n      { product: 'beans', price: 5.8, volatility: 0.08 }\n    ],\n    summary: { averageVolatility: 0.1125 }\n  })),\n\n  // Food resilience supply chain (match any host/port)\n  http.get('*/api/food-resilience/supply-chain', () => HttpResponse.json({\n    country: 'Peru',\n    routes: [\n      { origin: 'Lima', destination: 'Cusco', cost: 100, time: 5 },\n      { origin: 'Cusco', destination: 'Arequipa', cost: 80, time: 3 },\n      { origin: 'Arequipa', destination: 'Tacna', cost: 120, time: 4 },\n      { origin: 'Tacna', destination: 'Puno', cost: 90, time: 6 }\n    ],\n    optimization: { recommendedRoutes: [] }\n  })),\n\n  // Global risk food security (match any host/port)\n  http.get('*/api/global-risk/food-security', () => HttpResponse.json({\n    success: true,\n    source: 'Praevisio-Aion-Simulated-WorldBank',\n    data: { countries: ['COL', 'PER', 'ARG', 'BRA', 'CHL', 'ECU'] }\n  })),\n\n  // Global risk climate extremes (match any host/port)\n  http.get('*/api/global-risk/climate-extremes', () => HttpResponse.json({\n    success: true,\n    source: 'Praevisio-Aion-NASA-POWER-Integration',\n    data: { extremes: [] }\n  })),\n\n  // GDELT events (match any host/port)\n  http.get('*/api/gdelt/events', ({ request }) => {\n    const url = new URL(request.url);\n    const country = url.searchParams.get('country') || 'COL';\n    const startDate = url.searchParams.get('startDate') || '2025-01-01';\n    const endDate = url.searchParams.get('endDate') || '2025-01-02';\n    return HttpResponse.json({\n      country,\n      articles: [{ title: 'Test Article', url: 'https://example.com', date: startDate, tone: 2.5 }]\n    });\n  }),\n\n  // Eternal vigilance stream (SSE)\n  http.get('*/api/eternal-vigilance/stream', () => {\n    return new HttpResponse('data: {\"event\":\"init\",\"data\":{\"indices\":{\"globalRisk\":0.5}}}\\n\\n', {\n      status: 200,\n      headers: {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive'\n      }\n    });\n  }),\n\n  // Eternal vigilance token (match any host/port)\n  http.post('*/api/eternal-vigilance/token', () => HttpResponse.json({ token: 'temp-token-123' })),\n\n  // Pricing plans (match any host/port)\n  http.get('*/api/pricing-plans', () => HttpResponse.json({\n    currency: 'EUR',\n    segments: {\n      default: {\n        plans: [{ id: 'p1', name: 'Basic', price: 10 }]\n      }\n    }\n  })),\n\n  // Pricing (match any host/port)\n  http.get('*/api/pricing', () => HttpResponse.json({\n    currency: 'USD',\n    segments: {\n      default: { name: 'Default' }\n    }\n  })),\n\n  // USGS significant day\n  http.get('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_day.geojson', () => HttpResponse.json({\n    type: 'FeatureCollection',\n    features: [{ properties: { mag: 5.2, place: 'Test Location' }, geometry: { coordinates: [-75.0, -10.0, 10.0] } }]\n  }))\n\n  // Generic API fallback for any unmatched requests (returns mock data)\n  , http.get('*', ({ request }) => {\n    try {\n      const u = new URL(request.url);\n      const host = u.hostname;\n      if (host === '127.0.0.1' || host === 'localhost' || host === '::1') {\n        // do not mock requests to the local app - let them hit the real Express server\n        return undefined;\n      }\n    } catch (e) {\n      // if URL parsing fails, fall through to logging\n    }\n    console.log(`MSW: Unhandled external request to ${request.url}`);\n    return HttpResponse.json({ error: 'Mock not implemented', url: request.url });\n  })\n];\n\nmodule.exports = { handlers };"],"mappings":"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","ignoreList":[]}