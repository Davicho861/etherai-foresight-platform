{"version":3,"names":["decorators_exports","__export","decorateResponse","kSetCookie","normalizeResponseInit","module","exports","__toCommonJS","import_statuses","__toESM","require","import_headers_polyfill","message","default","Symbol","init","status","statusText","headers","Headers","response","type","Object","defineProperty","value","enumerable","writable","responseCookies","get","document","responseCookiePairs","prototype","getSetCookie","call","cookieString","cookie"],"sources":["../../../../src/core/utils/HttpResponse/decorators.ts"],"sourcesContent":["import statuses from '../../../shims/statuses'\nimport { Headers as HeadersPolyfill } from 'headers-polyfill'\nimport type { HttpResponseInit } from '../../HttpResponse'\n\nconst { message } = statuses\n\nexport const kSetCookie = Symbol('kSetCookie')\n\nexport interface HttpResponseDecoratedInit extends HttpResponseInit {\n  status: number\n  statusText: string\n  headers: Headers\n}\n\nexport function normalizeResponseInit(\n  init: HttpResponseInit = {},\n): HttpResponseDecoratedInit {\n  const status = init?.status || 200\n  const statusText = init?.statusText || message[status] || ''\n  const headers = new Headers(init?.headers)\n\n  return {\n    ...init,\n    headers,\n    status,\n    statusText,\n  }\n}\n\nexport function decorateResponse(\n  response: Response,\n  init: HttpResponseDecoratedInit,\n): Response {\n  // Allow to mock the response type.\n  if (init.type) {\n    Object.defineProperty(response, 'type', {\n      value: init.type,\n      enumerable: true,\n      writable: false,\n    })\n  }\n\n  const responseCookies = init.headers.get('set-cookie')\n\n  if (responseCookies) {\n    // Record the raw \"Set-Cookie\" response header provided\n    // in the HeadersInit. This is later used to store these cookies\n    // in cookie jar and return the right cookies in the \"cookies\"\n    // response resolver argument.\n    Object.defineProperty(response, kSetCookie, {\n      value: responseCookies,\n      enumerable: false,\n      writable: false,\n    })\n\n    // Cookie forwarding is only relevant in the browser.\n    if (typeof document !== 'undefined') {\n      // Write the mocked response cookies to the document.\n      // Use `headers-polyfill` to get the Set-Cookie header value correctly.\n      // This is an alternative until TypeScript 5.2\n      // and Node.js v20 become the minimum supported version\n      // and getSetCookie in Headers can be used directly.\n      const responseCookiePairs = HeadersPolyfill.prototype.getSetCookie.call(\n        init.headers,\n      )\n\n      for (const cookieString of responseCookiePairs) {\n        // No need to parse the cookie headers because it's defined\n        // as the valid cookie string to begin with.\n        document.cookie = cookieString\n      }\n    }\n  }\n\n  return response\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,kBAAA;AAAAC,QAAA,CAAAD,kBAAA;EAAAE,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAC,UAAA,EAAAA,CAAA,KAAAA,UAAA;EAAAC,qBAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAP,kBAAA;AAAA,IAAAQ,eAAA,GAAqBC,OAAA,CAAAC,OAAA;AACrB,IAAAC,uBAAA,GAA2CD,OAAA;AAG3C,MAAM;EAAEE;AAAQ,IAAIJ,eAAA,CAAAK,OAAA;AAEb,MAAMV,UAAA,GAAaW,MAAA,CAAO,YAAY;AAQtC,SAASV,sBACdW,IAAA,GAAyB,CAAC,GACC;EAC3B,MAAMC,MAAA,GAASD,IAAA,EAAMC,MAAA,IAAU;EAC/B,MAAMC,UAAA,GAAaF,IAAA,EAAME,UAAA,IAAcL,OAAA,CAAQI,MAAM,KAAK;EAC1D,MAAME,OAAA,GAAU,IAAIC,OAAA,CAAQJ,IAAA,EAAMG,OAAO;EAEzC,OAAO;IACL,GAAGH,IAAA;IACHG,OAAA;IACAF,MAAA;IACAC;EACF;AACF;AAEO,SAASf,iBACdkB,QAAA,EACAL,IAAA,EACU;EAEV,IAAIA,IAAA,CAAKM,IAAA,EAAM;IACbC,MAAA,CAAOC,cAAA,CAAeH,QAAA,EAAU,QAAQ;MACtCI,KAAA,EAAOT,IAAA,CAAKM,IAAA;MACZI,UAAA,EAAY;MACZC,QAAA,EAAU;IACZ,CAAC;EACH;EAEA,MAAMC,eAAA,GAAkBZ,IAAA,CAAKG,OAAA,CAAQU,GAAA,CAAI,YAAY;EAErD,IAAID,eAAA,EAAiB;IAKnBL,MAAA,CAAOC,cAAA,CAAeH,QAAA,EAAUjB,UAAA,EAAY;MAC1CqB,KAAA,EAAOG,eAAA;MACPF,UAAA,EAAY;MACZC,QAAA,EAAU;IACZ,CAAC;IAGD,IAAI,OAAOG,QAAA,KAAa,aAAa;MAMnC,MAAMC,mBAAA,GAAsBnB,uBAAA,CAAAQ,OAAA,CAAgBY,SAAA,CAAUC,YAAA,CAAaC,IAAA,CACjElB,IAAA,CAAKG,OACP;MAEA,WAAWgB,YAAA,IAAgBJ,mBAAA,EAAqB;QAG9CD,QAAA,CAASM,MAAA,GAASD,YAAA;MACpB;IACF;EACF;EAEA,OAAOd,QAAA;AACT","ignoreList":[]}