4f008f8824daf3ef79d3e014e8707ef7
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.analyzeRiskCorrelations = analyzeRiskCorrelations;
exports.generatePredictiveNarrative = generatePredictiveNarrative;
exports.switchProvider = switchProvider;
var
/* istanbul ignore next */
_axios = _interopRequireDefault(require("axios"));
/* istanbul ignore next */ function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function cov_15a5vm2wjm() {
  var path = "/home/davicho/etherai-foresight-platform-main/server/src/services/generativeAIService.js";
  var hash = "1ee0a4da199eee831ed132f07521050e38278785";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/davicho/etherai-foresight-platform-main/server/src/services/generativeAIService.js",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 29
        },
        end: {
          line: 30,
          column: 1
        }
      },
      "1": {
        start: {
          line: 33,
          column: 21
        },
        end: {
          line: 33,
          column: 29
        }
      },
      "2": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 79
        }
      },
      "3": {
        start: {
          line: 40,
          column: 66
        },
        end: {
          line: 40,
          column: 78
        }
      },
      "4": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 56
        }
      },
      "5": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 57
        }
      },
      "6": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 43,
          column: 40
        }
      },
      "7": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 44,
          column: 79
        }
      },
      "8": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 24
        }
      },
      "9": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "10": {
        start: {
          line: 62,
          column: 17
        },
        end: {
          line: 62,
          column: 99
        }
      },
      "11": {
        start: {
          line: 64,
          column: 2
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "12": {
        start: {
          line: 65,
          column: 21
        },
        end: {
          line: 65,
          column: 52
        }
      },
      "13": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 44
        }
      },
      "14": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 108
        }
      },
      "15": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "16": {
        start: {
          line: 72,
          column: 6
        },
        end: {
          line: 72,
          column: 23
        }
      },
      "17": {
        start: {
          line: 73,
          column: 6
        },
        end: {
          line: 78,
          column: 7
        }
      },
      "18": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 56
        }
      },
      "19": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 48
        }
      },
      "20": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 95
        }
      },
      "21": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "22": {
        start: {
          line: 93,
          column: 61
        },
        end: {
          line: 93,
          column: 68
        }
      },
      "23": {
        start: {
          line: 95,
          column: 2
        },
        end: {
          line: 127,
          column: 3
        }
      },
      "24": {
        start: {
          line: 136,
          column: 17
        },
        end: {
          line: 136,
          column: 53
        }
      },
      "25": {
        start: {
          line: 138,
          column: 2
        },
        end: {
          line: 140,
          column: 3
        }
      },
      "26": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 139,
          column: 78
        }
      },
      "27": {
        start: {
          line: 142,
          column: 2
        },
        end: {
          line: 156,
          column: 3
        }
      },
      "28": {
        start: {
          line: 143,
          column: 21
        },
        end: {
          line: 153,
          column: 6
        }
      },
      "29": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 155,
          column: 52
        }
      },
      "30": {
        start: {
          line: 158,
          column: 2
        },
        end: {
          line: 173,
          column: 3
        }
      },
      "31": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 170,
          column: 6
        }
      },
      "32": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 172,
          column: 41
        }
      },
      "33": {
        start: {
          line: 175,
          column: 2
        },
        end: {
          line: 175,
          column: 61
        }
      },
      "34": {
        start: {
          line: 184,
          column: 2
        },
        end: {
          line: 211,
          column: 3
        }
      },
      "35": {
        start: {
          line: 186,
          column: 19
        },
        end: {
          line: 186,
          column: 39
        }
      },
      "36": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 192,
          column: 6
        }
      },
      "37": {
        start: {
          line: 195,
          column: 4
        },
        end: {
          line: 195,
          column: 101
        }
      },
      "38": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 210,
          column: 6
        }
      },
      "39": {
        start: {
          line: 222,
          column: 2
        },
        end: {
          line: 222,
          column: 93
        }
      },
      "40": {
        start: {
          line: 222,
          column: 31
        },
        end: {
          line: 222,
          column: 91
        }
      },
      "41": {
        start: {
          line: 224,
          column: 35
        },
        end: {
          line: 224,
          column: 43
        }
      },
      "42": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 225,
          column: 115
        }
      },
      "43": {
        start: {
          line: 227,
          column: 2
        },
        end: {
          line: 260,
          column: 4
        }
      },
      "44": {
        start: {
          line: 269,
          column: 17
        },
        end: {
          line: 279,
          column: 92
        }
      },
      "45": {
        start: {
          line: 281,
          column: 2
        },
        end: {
          line: 292,
          column: 3
        }
      },
      "46": {
        start: {
          line: 282,
          column: 21
        },
        end: {
          line: 282,
          column: 52
        }
      },
      "47": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 283,
          column: 32
        }
      },
      "48": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 291,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "switchProvider",
        decl: {
          start: {
            line: 39,
            column: 9
          },
          end: {
            line: 39,
            column: 23
          }
        },
        loc: {
          start: {
            line: 39,
            column: 26
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 39
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 40,
            column: 61
          },
          end: {
            line: 40,
            column: 62
          }
        },
        loc: {
          start: {
            line: 40,
            column: 66
          },
          end: {
            line: 40,
            column: 78
          }
        },
        line: 40
      },
      "2": {
        name: "generatePredictiveNarrative",
        decl: {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 54,
            column: 42
          }
        },
        loc: {
          start: {
            line: 54,
            column: 67
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 54
      },
      "3": {
        name: "buildNarrativePrompt",
        decl: {
          start: {
            line: 92,
            column: 9
          },
          end: {
            line: 92,
            column: 29
          }
        },
        loc: {
          start: {
            line: 92,
            column: 49
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 92
      },
      "4": {
        name: "callGenerativeAPI",
        decl: {
          start: {
            line: 135,
            column: 15
          },
          end: {
            line: 135,
            column: 32
          }
        },
        loc: {
          start: {
            line: 135,
            column: 41
          },
          end: {
            line: 176,
            column: 1
          }
        },
        line: 135
      },
      "5": {
        name: "parseNarrativeResponse",
        decl: {
          start: {
            line: 183,
            column: 9
          },
          end: {
            line: 183,
            column: 31
          }
        },
        loc: {
          start: {
            line: 183,
            column: 42
          },
          end: {
            line: 212,
            column: 1
          }
        },
        line: 183
      },
      "6": {
        name: "generateMockNarrative",
        decl: {
          start: {
            line: 220,
            column: 15
          },
          end: {
            line: 220,
            column: 36
          }
        },
        loc: {
          start: {
            line: 220,
            column: 56
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 220
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 222,
            column: 20
          },
          end: {
            line: 222,
            column: 21
          }
        },
        loc: {
          start: {
            line: 222,
            column: 31
          },
          end: {
            line: 222,
            column: 91
          }
        },
        line: 222
      },
      "8": {
        name: "analyzeRiskCorrelations",
        decl: {
          start: {
            line: 268,
            column: 15
          },
          end: {
            line: 268,
            column: 38
          }
        },
        loc: {
          start: {
            line: 268,
            column: 52
          },
          end: {
            line: 293,
            column: 1
          }
        },
        line: 268
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 54,
            column: 53
          },
          end: {
            line: 54,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 63
          },
          end: {
            line: 54,
            column: 65
          }
        }],
        line: 54
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 56,
            column: 50
          }
        }],
        line: 56
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 18
          },
          end: {
            line: 57,
            column: 27
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 58,
            column: 18
          },
          end: {
            line: 58,
            column: 33
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 19
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 19
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 32
          },
          end: {
            line: 104,
            column: 41
          }
        }, {
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 52
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 138,
            column: 2
          },
          end: {
            line: 140,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 2
          },
          end: {
            line: 140,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "8": {
        loc: {
          start: {
            line: 138,
            column: 6
          },
          end: {
            line: 138,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 6
          },
          end: {
            line: 138,
            column: 20
          }
        }, {
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 49
          }
        }],
        line: 138
      },
      "9": {
        loc: {
          start: {
            line: 142,
            column: 2
          },
          end: {
            line: 156,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 2
          },
          end: {
            line: 156,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "10": {
        loc: {
          start: {
            line: 158,
            column: 2
          },
          end: {
            line: 173,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 2
          },
          end: {
            line: 173,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "11": {
        loc: {
          start: {
            line: 225,
            column: 20
          },
          end: {
            line: 225,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 55
          },
          end: {
            line: 225,
            column: 61
          }
        }, {
          start: {
            line: 225,
            column: 64
          },
          end: {
            line: 225,
            column: 115
          }
        }],
        line: 225
      },
      "12": {
        loc: {
          start: {
            line: 225,
            column: 64
          },
          end: {
            line: 225,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 99
          },
          end: {
            line: 225,
            column: 106
          }
        }, {
          start: {
            line: 225,
            column: 109
          },
          end: {
            line: 225,
            column: 115
          }
        }],
        line: 225
      },
      "13": {
        loc: {
          start: {
            line: 228,
            column: 98
          },
          end: {
            line: 228,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 98
          },
          end: {
            line: 228,
            column: 137
          }
        }, {
          start: {
            line: 228,
            column: 141
          },
          end: {
            line: 228,
            column: 146
          }
        }],
        line: 228
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1ee0a4da199eee831ed132f07521050e38278785"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15a5vm2wjm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15a5vm2wjm();
/**
 * @fileoverview Generative AI Service for Praevisio AI.
 * This service integrates generative AI capabilities to provide narrative analysis
 * and contextual explanations for risk predictions.
 */
// Configuration for generative AI providers
const GENERATIVE_AI_CONFIG =
/* istanbul ignore next */
(cov_15a5vm2wjm().s[0]++, {
  openai: {
    apiKey: process.env.OPENAI_API_KEY,
    baseURL: 'https://api.openai.com/v1',
    model: 'gpt-4o-mini',
    maxTokens: 1000,
    temperature: 0.7
  },
  anthropic: {
    apiKey: process.env.ANTHROPIC_API_KEY,
    baseURL: 'https://api.anthropic.com/v1',
    model: 'claude-3-haiku-20240307',
    maxTokens: 1000,
    temperature: 0.7
  },
  // Fallback to mock responses if no API keys are available
  mock: {
    enabled: true,
    responseDelay: 500 // ms
  }
});

// Current active provider (can be switched based on availability/performance)
let activeProvider =
/* istanbul ignore next */
(cov_15a5vm2wjm().s[1]++, 'openai');

/**
 * Switches to the next available generative AI provider.
 * @returns {string} The new active provider.
 */
function switchProvider() {
  /* istanbul ignore next */
  cov_15a5vm2wjm().f[0]++;
  const providers =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[2]++, Object.keys(GENERATIVE_AI_CONFIG).filter(p => {
    /* istanbul ignore next */
    cov_15a5vm2wjm().f[1]++;
    cov_15a5vm2wjm().s[3]++;
    return p !== 'mock';
  }));
  const currentIndex =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[4]++, providers.indexOf(activeProvider));
  const nextIndex =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[5]++, (currentIndex + 1) % providers.length);
  /* istanbul ignore next */
  cov_15a5vm2wjm().s[6]++;
  activeProvider = providers[nextIndex];
  /* istanbul ignore next */
  cov_15a5vm2wjm().s[7]++;
  console.log(`[GenerativeAIService] Switched to provider: ${activeProvider}`);
  /* istanbul ignore next */
  cov_15a5vm2wjm().s[8]++;
  return activeProvider;
}

/**
 * Generates a predictive narrative based on risk indices and data patterns.
 * @param {object} riskData - Current risk indices and related data.
 * @param {object} options - Options for narrative generation.
 * @returns {Promise<object>} Generated narrative with analysis and scenarios.
 */
async function generatePredictiveNarrative(riskData, options =
/* istanbul ignore next */
(cov_15a5vm2wjm().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_15a5vm2wjm().f[2]++;
  const {
    focusAreas =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().b[1][0]++, ['climate', 'economic', 'social']),
    timeHorizon =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().b[2][0]++, '6months'),
    detailLevel =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().b[3][0]++, 'comprehensive'),
    language =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().b[4][0]++, 'es')
  } =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[9]++, options);
  const prompt =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[10]++, buildNarrativePrompt(riskData, {
    focusAreas,
    timeHorizon,
    detailLevel,
    language
  }));
  /* istanbul ignore next */
  cov_15a5vm2wjm().s[11]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().s[12]++, await callGenerativeAPI(prompt));
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[13]++;
    return parseNarrativeResponse(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[14]++;
    console.warn(`[GenerativeAIService] Error generating narrative with ${activeProvider}:`, error.message);

    // Try switching provider
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[15]++;
    if (activeProvider !== 'mock') {
      /* istanbul ignore next */
      cov_15a5vm2wjm().b[5][0]++;
      cov_15a5vm2wjm().s[16]++;
      switchProvider();
      /* istanbul ignore next */
      cov_15a5vm2wjm().s[17]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_15a5vm2wjm().s[18]++, await callGenerativeAPI(prompt));
        /* istanbul ignore next */
        cov_15a5vm2wjm().s[19]++;
        return parseNarrativeResponse(response);
      } catch (secondError) {
        /* istanbul ignore next */
        cov_15a5vm2wjm().s[20]++;
        console.warn(`[GenerativeAIService] Second provider also failed, using mock response`);
      }
    } else
    /* istanbul ignore next */
    {
      cov_15a5vm2wjm().b[5][1]++;
    }

    // Fallback to mock response
    cov_15a5vm2wjm().s[21]++;
    return generateMockNarrative(riskData, options);
  }
}

/**
 * Builds a comprehensive prompt for narrative generation.
 * @param {object} riskData - Risk indices and data.
 * @param {object} options - Generation options.
 * @returns {string} The complete prompt.
 */
function buildNarrativePrompt(riskData, options) {
  /* istanbul ignore next */
  cov_15a5vm2wjm().f[3]++;
  const {
    focusAreas,
    timeHorizon,
    detailLevel,
    language
  } =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[22]++, options);
  /* istanbul ignore next */
  cov_15a5vm2wjm().s[23]++;
  return `Como analista de inteligencia artificial especializado en predicción de riesgos globales, genera un análisis narrativo comprehensivo basado en los siguientes datos de riesgo:

DATOS DE RIESGO ACTUALES:
${JSON.stringify(riskData, null, 2)}

ENFOQUE SOLICITADO:
- Áreas: ${focusAreas.join(', ')}
- Horizonte temporal: ${timeHorizon}
- Nivel de detalle: ${detailLevel}
- Idioma: ${language === 'es' ?
  /* istanbul ignore next */
  (cov_15a5vm2wjm().b[6][0]++, 'Español') :
  /* istanbul ignore next */
  (cov_15a5vm2wjm().b[6][1]++, 'Inglés')}

INSTRUCCIONES:
1. Proporciona un resumen ejecutivo de la situación actual
2. Identifica patrones emergentes y correlaciones críticas
3. Genera 3 escenarios hipotéticos (optimista, moderado, pesimista) para los próximos ${timeHorizon}
4. Evalúa impactos potenciales en cadenas de suministro, estabilidad social y desarrollo sostenible
5. Recomienda acciones estratégicas basadas en el análisis
6. Incluye indicadores de confianza para cada predicción

El análisis debe ser objetivo, basado en datos, y proporcionar insights accionables para toma de decisiones estratégicas.

FORMATO DE RESPUESTA (JSON):
{
  "resumenEjecutivo": "string",
  "patronesEmergentes": ["string"],
  "escenarios": {
    "optimista": {"descripcion": "string", "probabilidad": number, "impactos": ["string"]},
    "moderado": {"descripcion": "string", "probabilidad": number, "impactos": ["string"]},
    "pesimista": {"descripcion": "string", "probabilidad": number, "impactos": ["string"]}
  },
  "recomendacionesEstrategicas": ["string"],
  "indicadoresConfianza": {"general": number, "escenarios": number}
}`;
}

/**
 * Calls the active generative AI provider.
 * @param {string} prompt - The prompt to send.
 * @returns {Promise<string>} The API response.
 */
async function callGenerativeAPI(prompt) {
  /* istanbul ignore next */
  cov_15a5vm2wjm().f[4]++;
  const config =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[24]++, GENERATIVE_AI_CONFIG[activeProvider]);
  /* istanbul ignore next */
  cov_15a5vm2wjm().s[25]++;
  if (
  /* istanbul ignore next */
  (cov_15a5vm2wjm().b[8][0]++, !config.apiKey) &&
  /* istanbul ignore next */
  (cov_15a5vm2wjm().b[8][1]++, activeProvider !== 'mock')) {
    /* istanbul ignore next */
    cov_15a5vm2wjm().b[7][0]++;
    cov_15a5vm2wjm().s[26]++;
    throw new Error(`API key not configured for provider: ${activeProvider}`);
  } else
  /* istanbul ignore next */
  {
    cov_15a5vm2wjm().b[7][1]++;
  }
  cov_15a5vm2wjm().s[27]++;
  if (activeProvider === 'openai') {
    /* istanbul ignore next */
    cov_15a5vm2wjm().b[9][0]++;
    const response =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().s[28]++, await
    /* istanbul ignore next */
    _axios.
    /* istanbul ignore next */
    default.post(`${config.baseURL}/chat/completions`, {
      model: config.model,
      messages: [{
        role: 'user',
        content: prompt
      }],
      max_tokens: config.maxTokens,
      temperature: config.temperature
    }, {
      headers: {
        'Authorization': `Bearer ${config.apiKey}`,
        'Content-Type': 'application/json'
      }
    }));
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[29]++;
    return response.data.choices[0].message.content;
  } else
  /* istanbul ignore next */
  {
    cov_15a5vm2wjm().b[9][1]++;
  }
  cov_15a5vm2wjm().s[30]++;
  if (activeProvider === 'anthropic') {
    /* istanbul ignore next */
    cov_15a5vm2wjm().b[10][0]++;
    const response =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().s[31]++, await
    /* istanbul ignore next */
    _axios.
    /* istanbul ignore next */
    default.post(`${config.baseURL}/messages`, {
      model: config.model,
      max_tokens: config.maxTokens,
      temperature: config.temperature,
      messages: [{
        role: 'user',
        content: prompt
      }]
    }, {
      headers: {
        'x-api-key': config.apiKey,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      }
    }));
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[32]++;
    return response.data.content[0].text;
  } else
  /* istanbul ignore next */
  {
    cov_15a5vm2wjm().b[10][1]++;
  }
  cov_15a5vm2wjm().s[33]++;
  throw new Error(`Unsupported provider: ${activeProvider}`);
}

/**
 * Parses the narrative response from the AI provider.
 * @param {string} response - Raw response from the API.
 * @returns {object} Parsed narrative object.
 */
function parseNarrativeResponse(response) {
  /* istanbul ignore next */
  cov_15a5vm2wjm().f[5]++;
  cov_15a5vm2wjm().s[34]++;
  try {
    // Try to parse as JSON first
    const parsed =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().s[35]++, JSON.parse(response));
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[36]++;
    return {
      ...parsed,
      timestamp: new Date().toISOString(),
      provider: activeProvider,
      success: true
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[37]++;
    // If JSON parsing fails, create a structured response from text
    console.warn('[GenerativeAIService] Failed to parse JSON response, creating fallback structure');
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[38]++;
    return {
      resumenEjecutivo: response.substring(0, 500) + '...',
      patronesEmergentes: ['Análisis generado pero formato no estructurado'],
      escenarios: {
        optimista: {
          descripcion: 'Escenario optimista no disponible',
          probabilidad: 0.3,
          impactos: []
        },
        moderado: {
          descripcion: 'Escenario moderado no disponible',
          probabilidad: 0.4,
          impactos: []
        },
        pesimista: {
          descripcion: 'Escenario pesimista no disponible',
          probabilidad: 0.3,
          impactos: []
        }
      },
      recomendacionesEstrategicas: ['Revisar formato de respuesta de IA generativa'],
      indicadoresConfianza: {
        general: 0.5,
        escenarios: 0.5
      },
      timestamp: new Date().toISOString(),
      provider: activeProvider,
      success: false,
      rawResponse: response
    };
  }
}

/**
 * Generates a mock narrative response for fallback scenarios.
 * @param {object} riskData - Risk data for mock generation.
 * @param {object} options - Generation options.
 * @returns {Promise<object>} Mock narrative.
 */
async function generateMockNarrative(riskData, options) {
  /* istanbul ignore next */
  cov_15a5vm2wjm().f[6]++;
  cov_15a5vm2wjm().s[39]++;
  // Simulate API delay
  await new Promise(resolve => {
    /* istanbul ignore next */
    cov_15a5vm2wjm().f[7]++;
    cov_15a5vm2wjm().s[40]++;
    return setTimeout(resolve, GENERATIVE_AI_CONFIG.mock.responseDelay);
  });
  const {
    multiDomainRiskIndex
  } =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[41]++, riskData);
  const riskLevel =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[42]++, multiDomainRiskIndex?.value > 70 ?
  /* istanbul ignore next */
  (cov_15a5vm2wjm().b[11][0]++, 'alto') :
  /* istanbul ignore next */
  (cov_15a5vm2wjm().b[11][1]++, multiDomainRiskIndex?.value > 40 ?
  /* istanbul ignore next */
  (cov_15a5vm2wjm().b[12][0]++, 'medio') :
  /* istanbul ignore next */
  (cov_15a5vm2wjm().b[12][1]++, 'bajo')));
  /* istanbul ignore next */
  cov_15a5vm2wjm().s[43]++;
  return {
    resumenEjecutivo: `Análisis narrativo simulado: El índice de riesgo multi-dominio actual es ${
    /* istanbul ignore next */
    (cov_15a5vm2wjm().b[13][0]++, multiDomainRiskIndex?.value?.toFixed(1)) ||
    /* istanbul ignore next */
    (cov_15a5vm2wjm().b[13][1]++, 'N/A')}, indicando un nivel de riesgo ${riskLevel}.`,
    patronesEmergentes: ['Correlación entre eventos climáticos extremos y volatilidad económica', 'Aumento en riesgos de ciberseguridad en sectores críticos', 'Tendencias de resiliencia comunitaria variables por región'],
    escenarios: {
      optimista: {
        descripcion: 'Estabilización global con reducción de riesgos en todos los dominios',
        probabilidad: 0.25,
        impactos: ['Mejora en cadenas de suministro', 'Reducción de volatilidad económica']
      },
      moderado: {
        descripcion: 'Mantención de niveles actuales de riesgo con fluctuaciones regionales',
        probabilidad: 0.50,
        impactos: ['Impactos localizados en sectores específicos', 'Oportunidades de adaptación']
      },
      pesimista: {
        descripcion: 'Escalada de riesgos múltiples con eventos disruptivos en cascada',
        probabilidad: 0.25,
        impactos: ['Disrupciones mayores en suministro global', 'Inestabilidad social amplificada']
      }
    },
    recomendacionesEstrategicas: ['Implementar monitoreo continuo de indicadores clave', 'Desarrollar planes de contingencia multi-dominio', 'Fortalecer capacidades de respuesta rápida'],
    indicadoresConfianza: {
      general: 0.7,
      escenarios: 0.6
    },
    timestamp: new Date().toISOString(),
    provider: 'mock',
    success: true
  };
}

/**
 * Analyzes risk correlations using generative AI.
 * @param {object} riskIndices - Current risk indices.
 * @returns {Promise<object>} Correlation analysis.
 */
async function analyzeRiskCorrelations(riskIndices) {
  /* istanbul ignore next */
  cov_15a5vm2wjm().f[8]++;
  const prompt =
  /* istanbul ignore next */
  (cov_15a5vm2wjm().s[44]++, `Analiza las correlaciones entre los siguientes índices de riesgo y proporciona insights sobre patrones emergentes:

${JSON.stringify(riskIndices, null, 2)}

Enfócate en:
1. Correlaciones fuertes entre diferentes tipos de riesgo
2. Patrones regionales
3. Tendencias temporales
4. Implicaciones para la predicción

Proporciona el análisis en formato JSON con campos: correlaciones, patrones, implicaciones.`);
  /* istanbul ignore next */
  cov_15a5vm2wjm().s[45]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_15a5vm2wjm().s[46]++, await callGenerativeAPI(prompt));
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[47]++;
    return JSON.parse(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_15a5vm2wjm().s[48]++;
    return {
      correlaciones: ['Análisis de correlaciones no disponible'],
      patrones: ['Patrones emergentes requieren análisis de IA'],
      implicaciones: ['Implementar análisis más detallado cuando IA esté disponible'],
      timestamp: new Date().toISOString(),
      provider: 'error'
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,