dc3955589992453a2e53fb6758e79a34
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);
var delay_exports = {};
__export(delay_exports, {
  MAX_SERVER_RESPONSE_TIME: () => MAX_SERVER_RESPONSE_TIME,
  MIN_SERVER_RESPONSE_TIME: () => MIN_SERVER_RESPONSE_TIME,
  NODE_SERVER_RESPONSE_TIME: () => NODE_SERVER_RESPONSE_TIME,
  SET_TIMEOUT_MAX_ALLOWED_INT: () => SET_TIMEOUT_MAX_ALLOWED_INT,
  delay: () => delay
});
module.exports = __toCommonJS(delay_exports);
var import_is_node_process = require("is-node-process");
const SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;
const MIN_SERVER_RESPONSE_TIME = 100;
const MAX_SERVER_RESPONSE_TIME = 400;
const NODE_SERVER_RESPONSE_TIME = 5;
function getRealisticResponseTime() {
  if ((0, import_is_node_process.isNodeProcess)()) {
    return NODE_SERVER_RESPONSE_TIME;
  }
  return Math.floor(Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) + MIN_SERVER_RESPONSE_TIME);
}
async function delay(durationOrMode) {
  let delayTime;
  if (typeof durationOrMode === "string") {
    switch (durationOrMode) {
      case "infinite":
        {
          delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;
          break;
        }
      case "real":
        {
          delayTime = getRealisticResponseTime();
          break;
        }
      default:
        {
          throw new Error(`Failed to delay a response: unknown delay mode "${durationOrMode}". Please make sure you provide one of the supported modes ("real", "infinite") or a number.`);
        }
    }
  } else if (typeof durationOrMode === "undefined") {
    delayTime = getRealisticResponseTime();
  } else {
    if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {
      throw new Error(`Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for "setTimeout" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`);
    }
    delayTime = durationOrMode;
  }
  return new Promise(resolve => setTimeout(resolve, delayTime));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWxheV9leHBvcnRzIiwiX19leHBvcnQiLCJNQVhfU0VSVkVSX1JFU1BPTlNFX1RJTUUiLCJNSU5fU0VSVkVSX1JFU1BPTlNFX1RJTUUiLCJOT0RFX1NFUlZFUl9SRVNQT05TRV9USU1FIiwiU0VUX1RJTUVPVVRfTUFYX0FMTE9XRURfSU5UIiwiZGVsYXkiLCJtb2R1bGUiLCJleHBvcnRzIiwiX190b0NvbW1vbkpTIiwiaW1wb3J0X2lzX25vZGVfcHJvY2VzcyIsInJlcXVpcmUiLCJnZXRSZWFsaXN0aWNSZXNwb25zZVRpbWUiLCJpc05vZGVQcm9jZXNzIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZHVyYXRpb25Pck1vZGUiLCJkZWxheVRpbWUiLCJFcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2RlbGF5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9kZVByb2Nlc3MgfSBmcm9tICdpcy1ub2RlLXByb2Nlc3MnXG5cbmV4cG9ydCBjb25zdCBTRVRfVElNRU9VVF9NQVhfQUxMT1dFRF9JTlQgPSAyMTQ3NDgzNjQ3XG5leHBvcnQgY29uc3QgTUlOX1NFUlZFUl9SRVNQT05TRV9USU1FID0gMTAwXG5leHBvcnQgY29uc3QgTUFYX1NFUlZFUl9SRVNQT05TRV9USU1FID0gNDAwXG5leHBvcnQgY29uc3QgTk9ERV9TRVJWRVJfUkVTUE9OU0VfVElNRSA9IDVcblxuZnVuY3Rpb24gZ2V0UmVhbGlzdGljUmVzcG9uc2VUaW1lKCk6IG51bWJlciB7XG4gIGlmIChpc05vZGVQcm9jZXNzKCkpIHtcbiAgICByZXR1cm4gTk9ERV9TRVJWRVJfUkVTUE9OU0VfVElNRVxuICB9XG5cbiAgcmV0dXJuIE1hdGguZmxvb3IoXG4gICAgTWF0aC5yYW5kb20oKSAqIChNQVhfU0VSVkVSX1JFU1BPTlNFX1RJTUUgLSBNSU5fU0VSVkVSX1JFU1BPTlNFX1RJTUUpICtcbiAgICAgIE1JTl9TRVJWRVJfUkVTUE9OU0VfVElNRSxcbiAgKVxufVxuXG5leHBvcnQgdHlwZSBEZWxheU1vZGUgPSAncmVhbCcgfCAnaW5maW5pdGUnXG5cbi8qKlxuICogRGVsYXlzIHRoZSByZXNwb25zZSBieSB0aGUgZ2l2ZW4gZHVyYXRpb24gKG1zKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYXdhaXQgZGVsYXkoKSAvLyBlbXVsYXRlIHJlYWxpc3RpYyBzZXJ2ZXIgcmVzcG9uc2UgdGltZVxuICogYXdhaXQgZGVsYXkoMTIwMCkgLy8gZGVsYXkgcmVzcG9uc2UgYnkgMTIwMG1zXG4gKiBhd2FpdCBkZWxheSgnaW5maW5pdGUnKSAvLyBkZWxheSByZXNwb25zZSBpbmZpbml0ZWx5XG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9tc3dqcy5pby9kb2NzL2FwaS9kZWxheSBgZGVsYXkoKWAgQVBJIHJlZmVyZW5jZX1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGF5KFxuICBkdXJhdGlvbk9yTW9kZT86IERlbGF5TW9kZSB8IG51bWJlcixcbik6IFByb21pc2U8dm9pZD4ge1xuICBsZXQgZGVsYXlUaW1lOiBudW1iZXJcblxuICBpZiAodHlwZW9mIGR1cmF0aW9uT3JNb2RlID09PSAnc3RyaW5nJykge1xuICAgIHN3aXRjaCAoZHVyYXRpb25Pck1vZGUpIHtcbiAgICAgIGNhc2UgJ2luZmluaXRlJzoge1xuICAgICAgICAvLyBVc2luZyBgSW5maW5pdHlgIGFzIGEgZGVsYXkgdmFsdWUgZXhlY3V0ZXMgdGhlIHJlc3BvbnNlIHRpbWVvdXQgaW1tZWRpYXRlbHkuXG4gICAgICAgIC8vIEluc3RlYWQsIHVzZSB0aGUgbWF4aW11bSBhbGxvd2VkIGludGVnZXIgZm9yIGBzZXRUaW1lb3V0YC5cbiAgICAgICAgZGVsYXlUaW1lID0gU0VUX1RJTUVPVVRfTUFYX0FMTE9XRURfSU5UXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdyZWFsJzoge1xuICAgICAgICBkZWxheVRpbWUgPSBnZXRSZWFsaXN0aWNSZXNwb25zZVRpbWUoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYEZhaWxlZCB0byBkZWxheSBhIHJlc3BvbnNlOiB1bmtub3duIGRlbGF5IG1vZGUgXCIke2R1cmF0aW9uT3JNb2RlfVwiLiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBwcm92aWRlIG9uZSBvZiB0aGUgc3VwcG9ydGVkIG1vZGVzIChcInJlYWxcIiwgXCJpbmZpbml0ZVwiKSBvciBhIG51bWJlci5gLFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbk9yTW9kZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBVc2UgcmFuZG9tIHJlYWxpc3RpYyBzZXJ2ZXIgcmVzcG9uc2UgdGltZSB3aGVuIG5vIGV4cGxpY2l0IGRlbGF5IGR1cmF0aW9uIHdhcyBwcm92aWRlZC5cbiAgICBkZWxheVRpbWUgPSBnZXRSZWFsaXN0aWNSZXNwb25zZVRpbWUoKVxuICB9IGVsc2Uge1xuICAgIC8vIEd1YXJkIGFnYWluc3QgcGFzc2luZyB2YWx1ZXMgbGlrZSBgSW5maW5pdHlgIG9yIGBOdW1iZXIuTUFYX1ZBTFVFYFxuICAgIC8vIGFzIHRoZSByZXNwb25zZSBkZWxheSBkdXJhdGlvbi4gVGhleSBkb24ndCBwcm9kdWNlIHRoZSByZXN1bHQgeW91IG1heSBleHBlY3QuXG4gICAgaWYgKGR1cmF0aW9uT3JNb2RlID4gU0VUX1RJTUVPVVRfTUFYX0FMTE9XRURfSU5UKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gZGVsYXkgYSByZXNwb25zZTogcHJvdmlkZWQgZGVsYXkgZHVyYXRpb24gKCR7ZHVyYXRpb25Pck1vZGV9KSBleGNlZWRzIHRoZSBtYXhpbXVtIGFsbG93ZWQgZHVyYXRpb24gZm9yIFwic2V0VGltZW91dFwiICgke1NFVF9USU1FT1VUX01BWF9BTExPV0VEX0lOVH0pLiBUaGlzIHdpbGwgY2F1c2UgdGhlIHJlc3BvbnNlIHRvIGJlIHJldHVybmVkIGltbWVkaWF0ZWx5LiBQbGVhc2UgdXNlIGEgbnVtYmVyIHdpdGhpbiB0aGUgYWxsb3dlZCByYW5nZSB0byBkZWxheSB0aGUgcmVzcG9uc2UgYnkgZXhhY3QgZHVyYXRpb24sIG9yIGNvbnNpZGVyIHRoZSBcImluZmluaXRlXCIgZGVsYXkgbW9kZSB0byBkZWxheSB0aGUgcmVzcG9uc2UgaW5kZWZpbml0ZWx5LmAsXG4gICAgICApXG4gICAgfVxuXG4gICAgZGVsYXlUaW1lID0gZHVyYXRpb25Pck1vZGVcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheVRpbWUpKVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxhQUFBO0FBQUFDLFFBQUEsQ0FBQUQsYUFBQTtFQUFBRSx3QkFBQSxFQUFBQSxDQUFBLEtBQUFBLHdCQUFBO0VBQUFDLHdCQUFBLEVBQUFBLENBQUEsS0FBQUEsd0JBQUE7RUFBQUMseUJBQUEsRUFBQUEsQ0FBQSxLQUFBQSx5QkFBQTtFQUFBQywyQkFBQSxFQUFBQSxDQUFBLEtBQUFBLDJCQUFBO0VBQUFDLEtBQUEsRUFBQUEsQ0FBQSxLQUFBQTtBQUFBO0FBQUFDLE1BQUEsQ0FBQUMsT0FBQSxHQUFBQyxZQUFBLENBQUFULGFBQUE7QUFBQSxJQUFBVSxzQkFBQSxHQUE4QkMsT0FBQTtBQUV2QixNQUFNTiwyQkFBQSxHQUE4QjtBQUNwQyxNQUFNRix3QkFBQSxHQUEyQjtBQUNqQyxNQUFNRCx3QkFBQSxHQUEyQjtBQUNqQyxNQUFNRSx5QkFBQSxHQUE0QjtBQUV6QyxTQUFTUSx5QkFBQSxFQUFtQztFQUMxQyxRQUFJRixzQkFBQSxDQUFBRyxhQUFBLEVBQWMsR0FBRztJQUNuQixPQUFPVCx5QkFBQTtFQUNUO0VBRUEsT0FBT1UsSUFBQSxDQUFLQyxLQUFBLENBQ1ZELElBQUEsQ0FBS0UsTUFBQSxDQUFPLEtBQUtkLHdCQUFBLEdBQTJCQyx3QkFBQSxJQUMxQ0Esd0JBQ0o7QUFDRjtBQWNBLGVBQXNCRyxNQUNwQlcsY0FBQSxFQUNlO0VBQ2YsSUFBSUMsU0FBQTtFQUVKLElBQUksT0FBT0QsY0FBQSxLQUFtQixVQUFVO0lBQ3RDLFFBQVFBLGNBQUE7TUFDTixLQUFLO1FBQVk7VUFHZkMsU0FBQSxHQUFZYiwyQkFBQTtVQUNaO1FBQ0Y7TUFDQSxLQUFLO1FBQVE7VUFDWGEsU0FBQSxHQUFZTix3QkFBQSxDQUF5QjtVQUNyQztRQUNGO01BQ0E7UUFBUztVQUNQLE1BQU0sSUFBSU8sS0FBQSxDQUNSLG1EQUFtREYsY0FBYyw4RkFDbkU7UUFDRjtJQUNGO0VBQ0YsV0FBVyxPQUFPQSxjQUFBLEtBQW1CLGFBQWE7SUFFaERDLFNBQUEsR0FBWU4sd0JBQUEsQ0FBeUI7RUFDdkMsT0FBTztJQUdMLElBQUlLLGNBQUEsR0FBaUJaLDJCQUFBLEVBQTZCO01BQ2hELE1BQU0sSUFBSWMsS0FBQSxDQUNSLHdEQUF3REYsY0FBYyw0REFBNERaLDJCQUEyQiw2TkFDL0o7SUFDRjtJQUVBYSxTQUFBLEdBQVlELGNBQUE7RUFDZDtFQUVBLE9BQU8sSUFBSUcsT0FBQSxDQUFTQyxPQUFBLElBQVlDLFVBQUEsQ0FBV0QsT0FBQSxFQUFTSCxTQUFTLENBQUM7QUFDaEUiLCJpZ25vcmVMaXN0IjpbXX0=