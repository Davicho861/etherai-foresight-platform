4a2033d99a4dd56a698bc79f356051bd
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OllamaLLM = void 0;
exports.getLLM = getLLM;
function _openai() {
  const data = require("@langchain/openai");
  _openai = function () {
    return data;
  };
  return data;
}
require("dotenv/config");
class OllamaLLM {
  constructor(opts = {}) {
    this.model = opts.model || process.env.OLLAMA_MODEL || 'llama3';
    this.url = opts.url || process.env.OLLAMA_URL || 'http://ollama-mock:11434/api/generate';
  }
  async _callOllama(prompt) {
    const body = {
      model: this.model,
      prompt,
      temperature: Number(process.env.OLLAMA_TEMPERATURE || 0.2),
      max_tokens: Number(process.env.OLLAMA_MAX_TOKENS || 1024)
    };
    const resp = await fetch(this.url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    });
    if (!resp.ok) {
      const txt = await resp.text().catch(() => '');
      throw new Error(`Ollama API error ${resp.status}: ${txt}`);
    }
    const data = await resp.json();
    if (data?.results && data.results[0]?.content) return data.results[0].content;
    if (data?.output) return data.output;
    if (typeof data === 'string') return data;
    return JSON.stringify(data);
  }
  async generate(messages) {
    let prompt = '';
    if (Array.isArray(messages)) {
      prompt = messages.map(m => m.content || m).join('\n');
    } else if (typeof messages === 'string') {
      prompt = messages;
    } else if (messages && messages[0] && messages[0].text) {
      prompt = messages.map(m => m.text).join('\n');
    }
    const text = await this._callOllama(prompt);
    return {
      generations: [[{
        text
      }]]
    };
  }
  async call(input) {
    const prompt = typeof input === 'string' ? input : input?.prompt || JSON.stringify(input);
    return await this._callOllama(prompt);
  }
}
exports.OllamaLLM = OllamaLLM;
function getLLM() {
  if (process.env.OPENAI_API_KEY) {
    return new (_openai().ChatOpenAI)({
      openAIApiKey: process.env.OPENAI_API_KEY,
      modelName: process.env.OPENAI_MODEL || 'gpt-4o-mini'
    });
  }
  return new OllamaLLM({
    model: process.env.OLLAMA_MODEL || 'llama3',
    url: process.env.OLLAMA_URL
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb3BlbmFpIiwiZGF0YSIsInJlcXVpcmUiLCJPbGxhbWFMTE0iLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJtb2RlbCIsInByb2Nlc3MiLCJlbnYiLCJPTExBTUFfTU9ERUwiLCJ1cmwiLCJPTExBTUFfVVJMIiwiX2NhbGxPbGxhbWEiLCJwcm9tcHQiLCJib2R5IiwidGVtcGVyYXR1cmUiLCJOdW1iZXIiLCJPTExBTUFfVEVNUEVSQVRVUkUiLCJtYXhfdG9rZW5zIiwiT0xMQU1BX01BWF9UT0tFTlMiLCJyZXNwIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9rIiwidHh0IiwidGV4dCIsImNhdGNoIiwiRXJyb3IiLCJzdGF0dXMiLCJqc29uIiwicmVzdWx0cyIsImNvbnRlbnQiLCJvdXRwdXQiLCJnZW5lcmF0ZSIsIm1lc3NhZ2VzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwibSIsImpvaW4iLCJnZW5lcmF0aW9ucyIsImNhbGwiLCJpbnB1dCIsImV4cG9ydHMiLCJnZXRMTE0iLCJPUEVOQUlfQVBJX0tFWSIsIkNoYXRPcGVuQUkiLCJvcGVuQUlBcGlLZXkiLCJtb2RlbE5hbWUiLCJPUEVOQUlfTU9ERUwiXSwic291cmNlcyI6WyJsbG0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdE9wZW5BSSB9IGZyb20gJ0BsYW5nY2hhaW4vb3BlbmFpJztcbmltcG9ydCAnZG90ZW52L2NvbmZpZyc7XG5cbmNsYXNzIE9sbGFtYUxMTSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHRoaXMubW9kZWwgPSBvcHRzLm1vZGVsIHx8IHByb2Nlc3MuZW52Lk9MTEFNQV9NT0RFTCB8fCAnbGxhbWEzJztcbiAgICB0aGlzLnVybCA9IG9wdHMudXJsIHx8IHByb2Nlc3MuZW52Lk9MTEFNQV9VUkwgfHwgJ2h0dHA6Ly9vbGxhbWEtbW9jazoxMTQzNC9hcGkvZ2VuZXJhdGUnO1xuICB9XG5cbiAgYXN5bmMgX2NhbGxPbGxhbWEocHJvbXB0KSB7XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxuICAgICAgcHJvbXB0LFxuICAgICAgdGVtcGVyYXR1cmU6IE51bWJlcihwcm9jZXNzLmVudi5PTExBTUFfVEVNUEVSQVRVUkUgfHwgMC4yKSxcbiAgICAgIG1heF90b2tlbnM6IE51bWJlcihwcm9jZXNzLmVudi5PTExBTUFfTUFYX1RPS0VOUyB8fCAxMDI0KVxuICAgIH07XG5cbiAgICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2godGhpcy51cmwsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KVxuICAgIH0pO1xuICAgIGlmICghcmVzcC5vaykge1xuICAgICAgY29uc3QgdHh0ID0gYXdhaXQgcmVzcC50ZXh0KCkuY2F0Y2goKCkgPT4gJycpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPbGxhbWEgQVBJIGVycm9yICR7cmVzcC5zdGF0dXN9OiAke3R4dH1gKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3AuanNvbigpO1xuICAgIGlmIChkYXRhPy5yZXN1bHRzICYmIGRhdGEucmVzdWx0c1swXT8uY29udGVudCkgcmV0dXJuIGRhdGEucmVzdWx0c1swXS5jb250ZW50O1xuICAgIGlmIChkYXRhPy5vdXRwdXQpIHJldHVybiBkYXRhLm91dHB1dDtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSByZXR1cm4gZGF0YTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZShtZXNzYWdlcykge1xuICAgIGxldCBwcm9tcHQgPSAnJztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlcykpIHtcbiAgICAgIHByb21wdCA9IG1lc3NhZ2VzLm1hcChtID0+IChtLmNvbnRlbnQgfHwgbSkpLmpvaW4oJ1xcbicpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2VzID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvbXB0ID0gbWVzc2FnZXM7XG4gICAgfSBlbHNlIGlmIChtZXNzYWdlcyAmJiBtZXNzYWdlc1swXSAmJiBtZXNzYWdlc1swXS50ZXh0KSB7XG4gICAgICBwcm9tcHQgPSBtZXNzYWdlcy5tYXAobSA9PiBtLnRleHQpLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0ID0gYXdhaXQgdGhpcy5fY2FsbE9sbGFtYShwcm9tcHQpO1xuICAgIHJldHVybiB7IGdlbmVyYXRpb25zOiBbW3sgdGV4dCB9XV0gfTtcbiAgfVxuXG4gIGFzeW5jIGNhbGwoaW5wdXQpIHtcbiAgICBjb25zdCBwcm9tcHQgPSB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnID8gaW5wdXQgOiAoaW5wdXQ/LnByb21wdCB8fCBKU09OLnN0cmluZ2lmeShpbnB1dCkpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9jYWxsT2xsYW1hKHByb21wdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TExNKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkpIHtcbiAgICByZXR1cm4gbmV3IENoYXRPcGVuQUkoe1xuICAgICAgb3BlbkFJQXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSxcbiAgICAgIG1vZGVsTmFtZTogcHJvY2Vzcy5lbnYuT1BFTkFJX01PREVMIHx8ICdncHQtNG8tbWluaScsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBPbGxhbWFMTE0oeyBtb2RlbDogcHJvY2Vzcy5lbnYuT0xMQU1BX01PREVMIHx8ICdsbGFtYTMnLCB1cmw6IHByb2Nlc3MuZW52Lk9MTEFNQV9VUkwgfSk7XG59XG5cbmV4cG9ydCB7IGdldExMTSwgT2xsYW1hTExNIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFB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