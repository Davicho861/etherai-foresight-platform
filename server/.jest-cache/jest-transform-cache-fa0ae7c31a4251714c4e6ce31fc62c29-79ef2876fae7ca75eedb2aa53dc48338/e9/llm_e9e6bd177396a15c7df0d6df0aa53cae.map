{"version":3,"names":["_openai","data","require","OllamaLLM","constructor","opts","model","process","env","OLLAMA_MODEL","url","OLLAMA_URL","_callOllama","prompt","body","temperature","Number","OLLAMA_TEMPERATURE","max_tokens","OLLAMA_MAX_TOKENS","resp","fetch","method","headers","JSON","stringify","ok","txt","text","catch","Error","status","json","results","content","output","generate","messages","Array","isArray","map","m","join","generations","call","input","exports","getLLM","OPENAI_API_KEY","ChatOpenAI","openAIApiKey","modelName","OPENAI_MODEL"],"sources":["llm.js"],"sourcesContent":["import { ChatOpenAI } from '@langchain/openai';\nimport 'dotenv/config';\n\nclass OllamaLLM {\n  constructor(opts = {}) {\n    this.model = opts.model || process.env.OLLAMA_MODEL || 'llama3';\n    this.url = opts.url || process.env.OLLAMA_URL || 'http://ollama-mock:11434/api/generate';\n  }\n\n  async _callOllama(prompt) {\n    const body = {\n      model: this.model,\n      prompt,\n      temperature: Number(process.env.OLLAMA_TEMPERATURE || 0.2),\n      max_tokens: Number(process.env.OLLAMA_MAX_TOKENS || 1024)\n    };\n\n    const resp = await fetch(this.url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body)\n    });\n    if (!resp.ok) {\n      const txt = await resp.text().catch(() => '');\n      throw new Error(`Ollama API error ${resp.status}: ${txt}`);\n    }\n    const data = await resp.json();\n    if (data?.results && data.results[0]?.content) return data.results[0].content;\n    if (data?.output) return data.output;\n    if (typeof data === 'string') return data;\n    return JSON.stringify(data);\n  }\n\n  async generate(messages) {\n    let prompt = '';\n    if (Array.isArray(messages)) {\n      prompt = messages.map(m => (m.content || m)).join('\\n');\n    } else if (typeof messages === 'string') {\n      prompt = messages;\n    } else if (messages && messages[0] && messages[0].text) {\n      prompt = messages.map(m => m.text).join('\\n');\n    }\n    const text = await this._callOllama(prompt);\n    return { generations: [[{ text }]] };\n  }\n\n  async call(input) {\n    const prompt = typeof input === 'string' ? input : (input?.prompt || JSON.stringify(input));\n    return await this._callOllama(prompt);\n  }\n}\n\nfunction getLLM() {\n  if (process.env.OPENAI_API_KEY) {\n    return new ChatOpenAI({\n      openAIApiKey: process.env.OPENAI_API_KEY,\n      modelName: process.env.OPENAI_MODEL || 'gpt-4o-mini',\n    });\n  }\n  return new OllamaLLM({ model: process.env.OLLAMA_MODEL || 'llama3', url: process.env.OLLAMA_URL });\n}\n\nexport { getLLM, OllamaLLM };\n"],"mappings":"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","ignoreList":[]}