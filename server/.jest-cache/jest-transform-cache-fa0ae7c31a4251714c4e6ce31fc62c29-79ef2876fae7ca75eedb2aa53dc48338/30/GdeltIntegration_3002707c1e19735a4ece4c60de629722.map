{"version":3,"names":["_resilience","require","_safeFetch","_interopRequireDefault","_forceMocks","e","__esModule","default","GdeltIntegration","constructor","native","process","env","NATIVE_DEV_MODE","FORCE_MOCKS","gdeltMockPort","GDELT_MOCK_PORT","baseUrl","TEST_MODE","console","log","isTest","NODE_ENV","circuitBreaker","CircuitBreaker","getSocialEvents","country","startDate","endDate","forceMocksEnabled","getMockSocialEvents","result","execute","CI","retries","baseDelay","maxDelay","retryWithBackoff","query","iso3ToIso2","iso3","map","COL","PER","BRA","MEX","ARG","CHL","c","String","toUpperCase","slice","countryFilter","startDateTime","replace","endDateTime","url","encodeURIComponent","data","safeFetch","headers","Accept","timeout","err","message","includes","Error","events","articles","eventCount","length","intensity","forEach","article","themes","split","period","start","end","socialIntensity","isMock","error","mockEvents","id","date","type","title","event","note","_default","exports"],"sources":["GdeltIntegration.js"],"sourcesContent":["import { CircuitBreaker, retryWithBackoff, fetchWithTimeout, isJsonResponse } from '../utils/resilience.js';\nimport safeFetch from '../lib/safeFetch.js';\nimport { forceMocksEnabled } from '../lib/force-mocks.js';\n\nclass GdeltIntegration {\n  constructor() {\n    const native = process.env.NATIVE_DEV_MODE === 'true' || process.env.FORCE_MOCKS === 'true';\n    const gdeltMockPort = process.env.GDELT_MOCK_PORT || 4020;\n    this.baseUrl = native\n      ? `http://localhost:${gdeltMockPort}/gdelt/events`\n      : (process.env.TEST_MODE === 'true'\n        ? 'http://mock-api-server:3001/gdelt' // internal mock server used in CI\n        : 'https://api.gdeltproject.org/api/v2/doc/doc');\n    // Debug: log which baseUrl is being used to help troubleshoot native dev mode\n\n    console.log(`[GdeltIntegration] NATIVE_DEV_MODE=${process.env.NATIVE_DEV_MODE}; using baseUrl=${this.baseUrl}`);\n    // Use shorter circuit breaker window in tests to avoid long waits/logs\n    const isTest = process.env.NODE_ENV === 'test' || process.env.TEST_MODE === 'true';\n    this.circuitBreaker = new CircuitBreaker(isTest ? 1 : 5, isTest ? 1000 : 600000); // failures, recovery ms\n  }\n\n  async getSocialEvents(country, startDate, endDate) {\n    // Check if FORCE_MOCKS is enabled for testing\n    if (forceMocksEnabled()) {\n      return this.getMockSocialEvents(country, startDate, endDate);\n    }\n\n    // PRAEVISIO ELITE EXPERIENCE: ZERO MOCKS ALLOWED\n    // La belleza sin verdad es una ilusión. Los datos sin explicación son ruido.\n    // Esta integración siempre intenta obtener datos reales, nunca usa mocks.\n\n    try {\n      const result = await this.circuitBreaker.execute(async () => {\n        // Reduce retries/delays when running tests to keep test suites fast and deterministic\n        const isTest = process.env.NODE_ENV === 'test' || process.env.TEST_MODE === 'true' || process.env.CI === 'true';\n        const retries = isTest ? 1 : 3;\n        const baseDelay = isTest ? 50 : 5000; // ms\n        const maxDelay = isTest ? 200 : 30000; // ms\n\n        return await retryWithBackoff(async () => {\n          // GDELT API query for social unrest events\n          // Using keywords like protest, riot, etc.\n          const query = `(protest OR riot OR strike OR demonstration)`;\n          // GDELT expects two-letter country codes in many queries; map common ISO3 -> ISO2\n          const iso3ToIso2 = (iso3) => {\n            if (!iso3) return '';\n            const map = {\n              COL: 'CO', PER: 'PE', BRA: 'BR', MEX: 'MX', ARG: 'AR', CHL: 'CL'\n            };\n            const c = String(iso3).toUpperCase();\n            return map[c] || c.slice(0, 2);\n          };\n          const countryFilter = `sourcecountry:${iso3ToIso2(country)}`;\n\n          const startDateTime = startDate.replace(/-/g, '') + '000000';\n          const endDateTime = endDate.replace(/-/g, '') + '235959';\n\n          const url = `${this.baseUrl}?query=${encodeURIComponent(`${query} ${countryFilter}`)}&startdatetime=${startDateTime}&enddatetime=${endDateTime}&mode=artlist&format=json&maxrecords=250`;\n\n          // Use safeFetch to get parsed JSON with retries and timeout. Add Accept header to favor JSON responses.\n          let data;\n          try {\n            data = await safeFetch(url, { headers: { 'User-Agent': 'Praevisio/1.0 (+https://praevisio.local)', Accept: 'application/json' } }, { timeout: 20000, retries });\n          } catch (err) {\n            // convert known cases into expressive errors for retry logic\n            if (err.message && err.message.includes('429')) {\n              throw new Error(`GDELT API rate limit exceeded: ${err.message}`);\n            }\n            throw err;\n          }\n\n          // Validate data structure\n          if (!data || typeof data !== 'object') {\n            throw new Error('GDELT API returned invalid data structure');\n          }\n\n          // Process articles to count events\n          const events = data.articles || [];\n          const eventCount = events.length;\n\n          // Calculate intensity based on number of articles and themes\n          let intensity = 0;\n          events.forEach(article => {\n            if (article.themes) {\n              const themes = article.themes.split(';');\n              if (themes.includes('PROTEST')) intensity += 2;\n              if (themes.includes('RIOT')) intensity += 3;\n              if (themes.includes('STRIKE')) intensity += 1.5;\n              if (themes.includes('DEMONSTRATION')) intensity += 1;\n            }\n          });\n\n          return {\n            country,\n            period: { start: startDate, end: endDate },\n            eventCount,\n            socialIntensity: intensity,\n            articles: events.slice(0, 10), // Top 10 articles\n            isMock: false\n          };\n        }, retries, baseDelay, maxDelay); // configurable retries/delays (shorter in tests)\n      });\n\n      return result;\n\n    } catch (error) {\n      console.log(`GDELT API failed for ${country} (${startDate}-${endDate}): ${error.message}.`);\n\n      // Check if FORCE_MOCKS is enabled for fallback in tests\n      if (forceMocksEnabled()) {\n        return this.getMockSocialEvents(country, startDate, endDate);\n      }\n\n      // PRAEVISIO ELITE EXPERIENCE: ZERO MOCKS ALLOWED\n      // Si falla la API real, propagar el error - no usar mocks\n      throw new Error(`GDELT API failed for ${country} (${startDate}-${endDate}): ${error && error.message ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // High-fidelity mock data for fallback when API fails\n  getMockSocialEvents(country, startDate, endDate) {\n    const mockEvents = [\n      {\n        id: 'mock-event-1',\n        date: startDate,\n        country: country,\n        type: 'protest',\n        themes: 'PROTEST;DEMONSTRATION',\n        title: 'Mock Social Protest Event',\n        url: 'https://example.com/mock-event-1'\n      },\n      {\n        id: 'mock-event-2',\n        date: endDate,\n        country: country,\n        type: 'strike',\n        themes: 'STRIKE;LABOR',\n        title: 'Mock Labor Strike Event',\n        url: 'https://example.com/mock-event-2'\n      }\n    ];\n\n    // Calculate intensity based on mock events\n    let intensity = 0;\n    mockEvents.forEach(event => {\n      if (event.themes) {\n        const themes = event.themes.split(';');\n        if (themes.includes('PROTEST')) intensity += 2;\n        if (themes.includes('RIOT')) intensity += 3;\n        if (themes.includes('STRIKE')) intensity += 1.5;\n        if (themes.includes('DEMONSTRATION')) intensity += 1;\n      }\n    });\n\n    return {\n      country,\n      period: { start: startDate, end: endDate },\n      eventCount: mockEvents.length,\n      socialIntensity: intensity,\n      articles: mockEvents.slice(0, 10),\n      isMock: true,\n      note: 'High-fidelity mock data - API unavailable'\n    };\n  }\n}\n\nexport default GdeltIntegration;"],"mappings":";;;;;;AAAA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,WAAA,GAAAH,OAAA;AAA0D,SAAAE,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE1D,MAAMG,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe,KAAK,MAAM,IAAIF,OAAO,CAACC,GAAG,CAACE,WAAW,KAAK,MAAM;IAC3F,MAAMC,aAAa,GAAGJ,OAAO,CAACC,GAAG,CAACI,eAAe,IAAI,IAAI;IACzD,IAAI,CAACC,OAAO,GAAGP,MAAM,GACjB,oBAAoBK,aAAa,eAAe,GAC/CJ,OAAO,CAACC,GAAG,CAACM,SAAS,KAAK,MAAM,GAC/B,mCAAmC,CAAC;IAAA,EACpC,6CAA8C;IACpD;;IAEAC,OAAO,CAACC,GAAG,CAAC,sCAAsCT,OAAO,CAACC,GAAG,CAACC,eAAe,mBAAmB,IAAI,CAACI,OAAO,EAAE,CAAC;IAC/G;IACA,MAAMI,MAAM,GAAGV,OAAO,CAACC,GAAG,CAACU,QAAQ,KAAK,MAAM,IAAIX,OAAO,CAACC,GAAG,CAACM,SAAS,KAAK,MAAM;IAClF,IAAI,CAACK,cAAc,GAAG,IAAIC,0BAAc,CAACH,MAAM,GAAG,CAAC,GAAG,CAAC,EAAEA,MAAM,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;EACpF;EAEA,MAAMI,eAAeA,CAACC,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACjD;IACA,IAAI,IAAAC,6BAAiB,EAAC,CAAC,EAAE;MACvB,OAAO,IAAI,CAACC,mBAAmB,CAACJ,OAAO,EAAEC,SAAS,EAAEC,OAAO,CAAC;IAC9D;;IAEA;IACA;IACA;;IAEA,IAAI;MACF,MAAMG,MAAM,GAAG,MAAM,IAAI,CAACR,cAAc,CAACS,OAAO,CAAC,YAAY;QAC3D;QACA,MAAMX,MAAM,GAAGV,OAAO,CAACC,GAAG,CAACU,QAAQ,KAAK,MAAM,IAAIX,OAAO,CAACC,GAAG,CAACM,SAAS,KAAK,MAAM,IAAIP,OAAO,CAACC,GAAG,CAACqB,EAAE,KAAK,MAAM;QAC/G,MAAMC,OAAO,GAAGb,MAAM,GAAG,CAAC,GAAG,CAAC;QAC9B,MAAMc,SAAS,GAAGd,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACtC,MAAMe,QAAQ,GAAGf,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC;;QAEvC,OAAO,MAAM,IAAAgB,4BAAgB,EAAC,YAAY;UACxC;UACA;UACA,MAAMC,KAAK,GAAG,8CAA8C;UAC5D;UACA,MAAMC,UAAU,GAAIC,IAAI,IAAK;YAC3B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;YACpB,MAAMC,GAAG,GAAG;cACVC,GAAG,EAAE,IAAI;cAAEC,GAAG,EAAE,IAAI;cAAEC,GAAG,EAAE,IAAI;cAAEC,GAAG,EAAE,IAAI;cAAEC,GAAG,EAAE,IAAI;cAAEC,GAAG,EAAE;YAC9D,CAAC;YACD,MAAMC,CAAC,GAAGC,MAAM,CAACT,IAAI,CAAC,CAACU,WAAW,CAAC,CAAC;YACpC,OAAOT,GAAG,CAACO,CAAC,CAAC,IAAIA,CAAC,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UAChC,CAAC;UACD,MAAMC,aAAa,GAAG,iBAAiBb,UAAU,CAACb,OAAO,CAAC,EAAE;UAE5D,MAAM2B,aAAa,GAAG1B,SAAS,CAAC2B,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,QAAQ;UAC5D,MAAMC,WAAW,GAAG3B,OAAO,CAAC0B,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,QAAQ;UAExD,MAAME,GAAG,GAAG,GAAG,IAAI,CAACvC,OAAO,UAAUwC,kBAAkB,CAAC,GAAGnB,KAAK,IAAIc,aAAa,EAAE,CAAC,kBAAkBC,aAAa,gBAAgBE,WAAW,0CAA0C;;UAExL;UACA,IAAIG,IAAI;UACR,IAAI;YACFA,IAAI,GAAG,MAAM,IAAAC,kBAAS,EAACH,GAAG,EAAE;cAAEI,OAAO,EAAE;gBAAE,YAAY,EAAE,0CAA0C;gBAAEC,MAAM,EAAE;cAAmB;YAAE,CAAC,EAAE;cAAEC,OAAO,EAAE,KAAK;cAAE5B;YAAQ,CAAC,CAAC;UACjK,CAAC,CAAC,OAAO6B,GAAG,EAAE;YACZ;YACA,IAAIA,GAAG,CAACC,OAAO,IAAID,GAAG,CAACC,OAAO,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;cAC9C,MAAM,IAAIC,KAAK,CAAC,kCAAkCH,GAAG,CAACC,OAAO,EAAE,CAAC;YAClE;YACA,MAAMD,GAAG;UACX;;UAEA;UACA,IAAI,CAACL,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;YACrC,MAAM,IAAIQ,KAAK,CAAC,2CAA2C,CAAC;UAC9D;;UAEA;UACA,MAAMC,MAAM,GAAGT,IAAI,CAACU,QAAQ,IAAI,EAAE;UAClC,MAAMC,UAAU,GAAGF,MAAM,CAACG,MAAM;;UAEhC;UACA,IAAIC,SAAS,GAAG,CAAC;UACjBJ,MAAM,CAACK,OAAO,CAACC,OAAO,IAAI;YACxB,IAAIA,OAAO,CAACC,MAAM,EAAE;cAClB,MAAMA,MAAM,GAAGD,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;cACxC,IAAID,MAAM,CAACT,QAAQ,CAAC,SAAS,CAAC,EAAEM,SAAS,IAAI,CAAC;cAC9C,IAAIG,MAAM,CAACT,QAAQ,CAAC,MAAM,CAAC,EAAEM,SAAS,IAAI,CAAC;cAC3C,IAAIG,MAAM,CAACT,QAAQ,CAAC,QAAQ,CAAC,EAAEM,SAAS,IAAI,GAAG;cAC/C,IAAIG,MAAM,CAACT,QAAQ,CAAC,eAAe,CAAC,EAAEM,SAAS,IAAI,CAAC;YACtD;UACF,CAAC,CAAC;UAEF,OAAO;YACL7C,OAAO;YACPkD,MAAM,EAAE;cAAEC,KAAK,EAAElD,SAAS;cAAEmD,GAAG,EAAElD;YAAQ,CAAC;YAC1CyC,UAAU;YACVU,eAAe,EAAER,SAAS;YAC1BH,QAAQ,EAAED,MAAM,CAAChB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;YAAE;YAC/B6B,MAAM,EAAE;UACV,CAAC;QACH,CAAC,EAAE9C,OAAO,EAAEC,SAAS,EAAEC,QAAQ,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC;MAEF,OAAOL,MAAM;IAEf,CAAC,CAAC,OAAOkD,KAAK,EAAE;MACd9D,OAAO,CAACC,GAAG,CAAC,wBAAwBM,OAAO,KAAKC,SAAS,IAAIC,OAAO,MAAMqD,KAAK,CAACjB,OAAO,GAAG,CAAC;;MAE3F;MACA,IAAI,IAAAnC,6BAAiB,EAAC,CAAC,EAAE;QACvB,OAAO,IAAI,CAACC,mBAAmB,CAACJ,OAAO,EAAEC,SAAS,EAAEC,OAAO,CAAC;MAC9D;;MAEA;MACA;MACA,MAAM,IAAIsC,KAAK,CAAC,wBAAwBxC,OAAO,KAAKC,SAAS,IAAIC,OAAO,MAAMqD,KAAK,IAAIA,KAAK,CAACjB,OAAO,GAAGiB,KAAK,CAACjB,OAAO,GAAG,eAAe,EAAE,CAAC;IAC3I;EACF;;EAEA;EACAlC,mBAAmBA,CAACJ,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAE;IAC/C,MAAMsD,UAAU,GAAG,CACjB;MACEC,EAAE,EAAE,cAAc;MAClBC,IAAI,EAAEzD,SAAS;MACfD,OAAO,EAAEA,OAAO;MAChB2D,IAAI,EAAE,SAAS;MACfX,MAAM,EAAE,uBAAuB;MAC/BY,KAAK,EAAE,2BAA2B;MAClC9B,GAAG,EAAE;IACP,CAAC,EACD;MACE2B,EAAE,EAAE,cAAc;MAClBC,IAAI,EAAExD,OAAO;MACbF,OAAO,EAAEA,OAAO;MAChB2D,IAAI,EAAE,QAAQ;MACdX,MAAM,EAAE,cAAc;MACtBY,KAAK,EAAE,yBAAyB;MAChC9B,GAAG,EAAE;IACP,CAAC,CACF;;IAED;IACA,IAAIe,SAAS,GAAG,CAAC;IACjBW,UAAU,CAACV,OAAO,CAACe,KAAK,IAAI;MAC1B,IAAIA,KAAK,CAACb,MAAM,EAAE;QAChB,MAAMA,MAAM,GAAGa,KAAK,CAACb,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;QACtC,IAAID,MAAM,CAACT,QAAQ,CAAC,SAAS,CAAC,EAAEM,SAAS,IAAI,CAAC;QAC9C,IAAIG,MAAM,CAACT,QAAQ,CAAC,MAAM,CAAC,EAAEM,SAAS,IAAI,CAAC;QAC3C,IAAIG,MAAM,CAACT,QAAQ,CAAC,QAAQ,CAAC,EAAEM,SAAS,IAAI,GAAG;QAC/C,IAAIG,MAAM,CAACT,QAAQ,CAAC,eAAe,CAAC,EAAEM,SAAS,IAAI,CAAC;MACtD;IACF,CAAC,CAAC;IAEF,OAAO;MACL7C,OAAO;MACPkD,MAAM,EAAE;QAAEC,KAAK,EAAElD,SAAS;QAAEmD,GAAG,EAAElD;MAAQ,CAAC;MAC1CyC,UAAU,EAAEa,UAAU,CAACZ,MAAM;MAC7BS,eAAe,EAAER,SAAS;MAC1BH,QAAQ,EAAEc,UAAU,CAAC/B,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MACjC6B,MAAM,EAAE,IAAI;MACZQ,IAAI,EAAE;IACR,CAAC;EACH;AACF;AAAC,IAAAC,QAAA,GAAAC,OAAA,CAAAnF,OAAA,GAEcC,gBAAgB","ignoreList":[]}