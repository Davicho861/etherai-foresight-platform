79a9e179c1231add0a43866d97675eca
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);
var checkGlobals_exports = {};
__export(checkGlobals_exports, {
  checkGlobals: () => checkGlobals
});
module.exports = __toCommonJS(checkGlobals_exports);
var import_outvariant = require("outvariant");
var import_devUtils = require("./devUtils");
function checkGlobals() {
  (0, import_outvariant.invariant)(typeof URL !== "undefined", import_devUtils.devUtils.formatMessage(`Global "URL" class is not defined. This likely means that you're running MSW in an environment that doesn't support all Node.js standard API (e.g. React Native). If that's the case, please use an appropriate polyfill for the "URL" class, like "react-native-url-polyfill".`));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGVja0dsb2JhbHNfZXhwb3J0cyIsIl9fZXhwb3J0IiwiY2hlY2tHbG9iYWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fdG9Db21tb25KUyIsImltcG9ydF9vdXR2YXJpYW50IiwicmVxdWlyZSIsImltcG9ydF9kZXZVdGlscyIsImludmFyaWFudCIsIlVSTCIsImRldlV0aWxzIiwiZm9ybWF0TWVzc2FnZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL3V0aWxzL2ludGVybmFsL2NoZWNrR2xvYmFscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdvdXR2YXJpYW50J1xuaW1wb3J0IHsgZGV2VXRpbHMgfSBmcm9tICcuL2RldlV0aWxzJ1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tHbG9iYWxzKCkge1xuICAvKipcbiAgICogTVNXIGV4cGVjdHMgdGhlIFwiVVJMXCIgY29uc3RydWN0b3IgdG8gYmUgZGVmaW5lZC5cbiAgICogSXQncyBub3QgcHJlc2VudCBpbiBSZWFjdCBOYXRpdmUgc28gc3VnZ2VzdCBhIHBvbHlmaWxsXG4gICAqIGluc3RlYWQgb2YgZmFpbGluZyBzaWxlbnRseS5cbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXN3anMvbXN3L2lzc3Vlcy8xNDA4XG4gICAqL1xuICBpbnZhcmlhbnQoXG4gICAgdHlwZW9mIFVSTCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgZGV2VXRpbHMuZm9ybWF0TWVzc2FnZShcbiAgICAgIGBHbG9iYWwgXCJVUkxcIiBjbGFzcyBpcyBub3QgZGVmaW5lZC4gVGhpcyBsaWtlbHkgbWVhbnMgdGhhdCB5b3UncmUgcnVubmluZyBNU1cgaW4gYW4gZW52aXJvbm1lbnQgdGhhdCBkb2Vzbid0IHN1cHBvcnQgYWxsIE5vZGUuanMgc3RhbmRhcmQgQVBJIChlLmcuIFJlYWN0IE5hdGl2ZSkuIElmIHRoYXQncyB0aGUgY2FzZSwgcGxlYXNlIHVzZSBhbiBhcHByb3ByaWF0ZSBwb2x5ZmlsbCBmb3IgdGhlIFwiVVJMXCIgY2xhc3MsIGxpa2UgXCJyZWFjdC1uYXRpdmUtdXJsLXBvbHlmaWxsXCIuYCxcbiAgICApLFxuICApXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLG9CQUFBO0FBQUFDLFFBQUEsQ0FBQUQsb0JBQUE7RUFBQUUsWUFBQSxFQUFBQSxDQUFBLEtBQUFBO0FBQUE7QUFBQUMsTUFBQSxDQUFBQyxPQUFBLEdBQUFDLFlBQUEsQ0FBQUwsb0JBQUE7QUFBQSxJQUFBTSxpQkFBQSxHQUEwQkMsT0FBQTtBQUMxQixJQUFBQyxlQUFBLEdBQXlCRCxPQUFBO0FBRWxCLFNBQVNMLGFBQUEsRUFBZTtFQU83QixJQUFBSSxpQkFBQSxDQUFBRyxTQUFBLEVBQ0UsT0FBT0MsR0FBQSxLQUFRLGFBQ2ZGLGVBQUEsQ0FBQUcsUUFBQSxDQUFTQyxhQUFBLENBQ1AsaVJBQ0YsQ0FDRjtBQUNGIiwiaWdub3JlTGlzdCI6W119