{"version":3,"names":["getCallFrame_exports","__export","getCallFrame","module","exports","__toCommonJS","SOURCE_FRAME","BUILD_FRAME","error","stack","frames","split","slice","declarationFrame","find","frame","test","declarationPath","replace"],"sources":["../../../../src/core/utils/internal/getCallFrame.ts"],"sourcesContent":["// Ignore the source files traces for local testing.\nconst SOURCE_FRAME = /[/\\\\]msw[/\\\\]src[/\\\\](.+)/\n\nconst BUILD_FRAME =\n  /(node_modules)?[/\\\\]lib[/\\\\](core|browser|node|native|iife)[/\\\\]|^[^/\\\\]*$/\n\n/**\n * Return the stack trace frame of a function's invocation.\n */\nexport function getCallFrame(error: Error) {\n  // In <IE11, new Error may return an undefined stack\n  const stack = error.stack\n\n  if (!stack) {\n    return\n  }\n\n  const frames: string[] = stack.split('\\n').slice(1)\n\n  // Get the first frame that doesn't reference the library's internal trace.\n  // Assume that frame is the invocation frame.\n  const declarationFrame = frames.find((frame) => {\n    return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame))\n  })\n\n  if (!declarationFrame) {\n    return\n  }\n\n  // Extract file reference from the stack frame.\n  const declarationPath = declarationFrame\n    .replace(/\\s*at [^()]*\\(([^)]+)\\)/, '$1')\n    .replace(/^@/, '')\n  return declarationPath\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,oBAAA;AAAAC,QAAA,CAAAD,oBAAA;EAAAE,YAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,oBAAA;AACA,MAAMM,YAAA,GAAe;AAErB,MAAMC,WAAA,GACJ;AAKK,SAASL,aAAaM,KAAA,EAAc;EAEzC,MAAMC,KAAA,GAAQD,KAAA,CAAMC,KAAA;EAEpB,IAAI,CAACA,KAAA,EAAO;IACV;EACF;EAEA,MAAMC,MAAA,GAAmBD,KAAA,CAAME,KAAA,CAAM,IAAI,EAAEC,KAAA,CAAM,CAAC;EAIlD,MAAMC,gBAAA,GAAmBH,MAAA,CAAOI,IAAA,CAAMC,KAAA,IAAU;IAC9C,OAAO,EAAET,YAAA,CAAaU,IAAA,CAAKD,KAAK,KAAKR,WAAA,CAAYS,IAAA,CAAKD,KAAK;EAC7D,CAAC;EAED,IAAI,CAACF,gBAAA,EAAkB;IACrB;EACF;EAGA,MAAMI,eAAA,GAAkBJ,gBAAA,CACrBK,OAAA,CAAQ,2BAA2B,IAAI,EACvCA,OAAA,CAAQ,MAAM,EAAE;EACnB,OAAOD,eAAA;AACT","ignoreList":[]}