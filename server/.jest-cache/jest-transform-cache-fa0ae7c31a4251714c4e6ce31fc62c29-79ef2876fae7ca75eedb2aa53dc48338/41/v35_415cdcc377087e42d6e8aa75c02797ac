6b8319bfc21bdea1b566bb13130b5551
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = exports.DNS = void 0;
exports.default = v35;
var _stringify = require("./stringify.js");
var _parse = _interopRequireDefault(require("./parse.js"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
const DNS = exports.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
const URL = exports.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    }

    // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(bytes);
  }

  // Function#name is not settable on some platforms (#270)
  try {
    generateUUID.name = name;
  } catch (err) {}

  // For CommonJS default export support
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVSTCIsIkROUyIsImRlZmF1bHQiLCJ2MzUiLCJfc3RyaW5naWZ5IiwicmVxdWlyZSIsIl9wYXJzZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJlIiwiX19lc01vZHVsZSIsInN0cmluZ1RvQnl0ZXMiLCJzdHIiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImJ5dGVzIiwiaSIsImxlbmd0aCIsInB1c2giLCJjaGFyQ29kZUF0IiwibmFtZSIsInZlcnNpb24iLCJoYXNoZnVuYyIsImdlbmVyYXRlVVVJRCIsIm5hbWVzcGFjZSIsImJ1ZiIsIm9mZnNldCIsIl9uYW1lc3BhY2UiLCJUeXBlRXJyb3IiLCJVaW50OEFycmF5Iiwic2V0IiwidW5zYWZlU3RyaW5naWZ5IiwiZXJyIl0sInNvdXJjZXMiOlsidjM1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5VUkwgPSBleHBvcnRzLkROUyA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdCA9IHYzNTtcbnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xudmFyIF9wYXJzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcGFyc2UuanNcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IGRlZmF1bHQ6IGUgfTsgfVxuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgc3RyID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOyAvLyBVVEY4IGVzY2FwZVxuXG4gIGNvbnN0IGJ5dGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgYnl0ZXMucHVzaChzdHIuY2hhckNvZGVBdChpKSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuY29uc3QgRE5TID0gZXhwb3J0cy5ETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmNvbnN0IFVSTCA9IGV4cG9ydHMuVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5mdW5jdGlvbiB2MzUobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIF9uYW1lc3BhY2U7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZXNwYWNlID0gKDAsIF9wYXJzZS5kZWZhdWx0KShuYW1lc3BhY2UpO1xuICAgIH1cbiAgICBpZiAoKChfbmFtZXNwYWNlID0gbmFtZXNwYWNlKSA9PT0gbnVsbCB8fCBfbmFtZXNwYWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbmFtZXNwYWNlLmxlbmd0aCkgIT09IDE2KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ05hbWVzcGFjZSBtdXN0IGJlIGFycmF5LWxpa2UgKDE2IGl0ZXJhYmxlIGludGVnZXIgdmFsdWVzLCAwLTI1NSknKTtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KDE2ICsgdmFsdWUubGVuZ3RoKTtcbiAgICBieXRlcy5zZXQobmFtZXNwYWNlKTtcbiAgICBieXRlcy5zZXQodmFsdWUsIG5hbWVzcGFjZS5sZW5ndGgpO1xuICAgIGJ5dGVzID0gaGFzaGZ1bmMoYnl0ZXMpO1xuICAgIGJ5dGVzWzZdID0gYnl0ZXNbNl0gJiAweDBmIHwgdmVyc2lvbjtcbiAgICBieXRlc1s4XSA9IGJ5dGVzWzhdICYgMHgzZiB8IDB4ODA7XG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIF9zdHJpbmdpZnkudW5zYWZlU3RyaW5naWZ5KShieXRlcyk7XG4gIH1cblxuICAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcbiAgdHJ5IHtcbiAgICBnZW5lcmF0ZVVVSUQubmFtZSA9IG5hbWU7XG4gIH0gY2F0Y2ggKGVycikge31cblxuICAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuICBnZW5lcmF0ZVVVSUQuRE5TID0gRE5TO1xuICBnZW5lcmF0ZVVVSUQuVVJMID0gVVJMO1xuICByZXR1cm4gZ2VuZXJhdGVVVUlEO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLEdBQUcsR0FBR0YsT0FBTyxDQUFDRyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2xDSCxPQUFPLENBQUNJLE9BQU8sR0FBR0MsR0FBRztBQUNyQixJQUFJQyxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUMxQyxJQUFJQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUQsU0FBU0Usc0JBQXNCQSxDQUFDQyxDQUFDLEVBQUU7RUFBRSxPQUFPQSxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsVUFBVSxHQUFHRCxDQUFDLEdBQUc7SUFBRU4sT0FBTyxFQUFFTTtFQUFFLENBQUM7QUFBRTtBQUNwRixTQUFTRSxhQUFhQSxDQUFDQyxHQUFHLEVBQUU7RUFDMUJBLEdBQUcsR0FBR0MsUUFBUSxDQUFDQyxrQkFBa0IsQ0FBQ0YsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztFQUV6QyxNQUFNRyxLQUFLLEdBQUcsRUFBRTtFQUNoQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0osR0FBRyxDQUFDSyxNQUFNLEVBQUUsRUFBRUQsQ0FBQyxFQUFFO0lBQ25DRCxLQUFLLENBQUNHLElBQUksQ0FBQ04sR0FBRyxDQUFDTyxVQUFVLENBQUNILENBQUMsQ0FBQyxDQUFDO0VBQy9CO0VBQ0EsT0FBT0QsS0FBSztBQUNkO0FBQ0EsTUFBTWIsR0FBRyxHQUFHSCxPQUFPLENBQUNHLEdBQUcsR0FBRyxzQ0FBc0M7QUFDaEUsTUFBTUQsR0FBRyxHQUFHRixPQUFPLENBQUNFLEdBQUcsR0FBRyxzQ0FBc0M7QUFDaEUsU0FBU0csR0FBR0EsQ0FBQ2dCLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUU7RUFDcEMsU0FBU0MsWUFBWUEsQ0FBQ3ZCLEtBQUssRUFBRXdCLFNBQVMsRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUU7SUFDbkQsSUFBSUMsVUFBVTtJQUNkLElBQUksT0FBTzNCLEtBQUssS0FBSyxRQUFRLEVBQUU7TUFDN0JBLEtBQUssR0FBR1csYUFBYSxDQUFDWCxLQUFLLENBQUM7SUFDOUI7SUFDQSxJQUFJLE9BQU93QixTQUFTLEtBQUssUUFBUSxFQUFFO01BQ2pDQSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUVqQixNQUFNLENBQUNKLE9BQU8sRUFBRXFCLFNBQVMsQ0FBQztJQUM1QztJQUNBLElBQUksQ0FBQyxDQUFDRyxVQUFVLEdBQUdILFNBQVMsTUFBTSxJQUFJLElBQUlHLFVBQVUsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsVUFBVSxDQUFDVixNQUFNLE1BQU0sRUFBRSxFQUFFO01BQ3BHLE1BQU1XLFNBQVMsQ0FBQyxrRUFBa0UsQ0FBQztJQUNyRjs7SUFFQTtJQUNBO0lBQ0E7SUFDQSxJQUFJYixLQUFLLEdBQUcsSUFBSWMsVUFBVSxDQUFDLEVBQUUsR0FBRzdCLEtBQUssQ0FBQ2lCLE1BQU0sQ0FBQztJQUM3Q0YsS0FBSyxDQUFDZSxHQUFHLENBQUNOLFNBQVMsQ0FBQztJQUNwQlQsS0FBSyxDQUFDZSxHQUFHLENBQUM5QixLQUFLLEVBQUV3QixTQUFTLENBQUNQLE1BQU0sQ0FBQztJQUNsQ0YsS0FBSyxHQUFHTyxRQUFRLENBQUNQLEtBQUssQ0FBQztJQUN2QkEsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHTSxPQUFPO0lBQ3BDTixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUdBLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSTtJQUNqQyxJQUFJVSxHQUFHLEVBQUU7TUFDUEMsTUFBTSxHQUFHQSxNQUFNLElBQUksQ0FBQztNQUNwQixLQUFLLElBQUlWLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRUEsQ0FBQyxFQUFFO1FBQzNCUyxHQUFHLENBQUNDLE1BQU0sR0FBR1YsQ0FBQyxDQUFDLEdBQUdELEtBQUssQ0FBQ0MsQ0FBQyxDQUFDO01BQzVCO01BQ0EsT0FBT1MsR0FBRztJQUNaO0lBQ0EsT0FBTyxDQUFDLENBQUMsRUFBRXBCLFVBQVUsQ0FBQzBCLGVBQWUsRUFBRWhCLEtBQUssQ0FBQztFQUMvQzs7RUFFQTtFQUNBLElBQUk7SUFDRlEsWUFBWSxDQUFDSCxJQUFJLEdBQUdBLElBQUk7RUFDMUIsQ0FBQyxDQUFDLE9BQU9ZLEdBQUcsRUFBRSxDQUFDOztFQUVmO0VBQ0FULFlBQVksQ0FBQ3JCLEdBQUcsR0FBR0EsR0FBRztFQUN0QnFCLFlBQVksQ0FBQ3RCLEdBQUcsR0FBR0EsR0FBRztFQUN0QixPQUFPc0IsWUFBWTtBQUNyQiIsImlnbm9yZUxpc3QiOltdfQ==