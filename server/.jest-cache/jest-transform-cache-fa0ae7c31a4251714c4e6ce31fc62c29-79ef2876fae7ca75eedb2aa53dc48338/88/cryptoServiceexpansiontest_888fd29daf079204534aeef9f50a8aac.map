{"version":3,"names":["_getJestObj","mock","_cryptoService","_interopRequireDefault","require","_CryptoIntegration","e","__esModule","default","jest","describe","cryptoService","mockCryptoIntegration","beforeEach","clearAllMocks","getCryptoData","fn","getHistoricalData","CryptoIntegration","mockImplementation","CryptoService","test","mockCryptoData","id","price_change_percentage_24h","mockResolvedValue","result","getCryptoVolatilityIndex","expect","toBeGreaterThan","toBeLessThanOrEqual","toBeGreaterThanOrEqual","toHaveBeenCalledWith","toBeLessThan","symbol","name","current_price","market_cap","total_volume","getCryptoMarketAnalysis","toHaveProperty","marketData","length","toBe","volatilityIndex","analysis","riskAssessment","totalCryptos","mockRejectedValue","Error","source","volatilityResult","analysisResult"],"sources":["cryptoService.expansion.test.js"],"sourcesContent":["import CryptoService from '../../src/services/cryptoService.js';\nimport CryptoIntegration from '../../src/integrations/CryptoIntegration.js';\n\n// Mock the CryptoIntegration\njest.mock('../../src/integrations/CryptoIntegration.js');\n\ndescribe('CryptoService - Expansion Tests', () => {\n  let cryptoService;\n  let mockCryptoIntegration;\n\n  beforeEach(() => {\n    // Clear all mocks\n    jest.clearAllMocks();\n\n    // Create mock instance\n    mockCryptoIntegration = {\n      getCryptoData: jest.fn(),\n      getHistoricalData: jest.fn(),\n    };\n\n    // Make the constructor return our mock\n    CryptoIntegration.mockImplementation(() => mockCryptoIntegration);\n\n    // Create service instance\n    cryptoService = new CryptoService();\n  });\n\n  describe('getCryptoVolatilityIndex - Expansion Scenarios', () => {\n    test('should handle extreme volatility scenarios (>20% change)', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', price_change_percentage_24h: -25.0 },\n        { id: 'ethereum', price_change_percentage_24h: 18.5 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin', 'ethereum']);\n\n      expect(result).toBeGreaterThan(80); // Extreme volatility should result in very high risk\n      expect(result).toBeLessThanOrEqual(100);\n    });\n\n    test('should calculate volatility for diverse crypto portfolio', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', price_change_percentage_24h: -2.5 },\n        { id: 'ethereum', price_change_percentage_24h: 1.2 },\n        { id: 'solana', price_change_percentage_24h: 5.8 },\n        { id: 'cardano', price_change_percentage_24h: -1.1 },\n        { id: 'polygon', price_change_percentage_24h: 3.2 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin', 'ethereum', 'solana', 'cardano', 'polygon']);\n\n      expect(result).toBeGreaterThanOrEqual(0);\n      expect(result).toBeLessThanOrEqual(100);\n      expect(mockCryptoIntegration.getCryptoData).toHaveBeenCalledWith(['bitcoin', 'ethereum', 'solana', 'cardano', 'polygon']);\n    });\n\n    test('should handle mixed positive and negative changes', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', price_change_percentage_24h: 15.0 },\n        { id: 'ethereum', price_change_percentage_24h: -12.0 },\n        { id: 'solana', price_change_percentage_24h: 8.5 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin', 'ethereum', 'solana']);\n\n      expect(result).toBeGreaterThan(50); // Mixed volatility should be moderate-high\n      expect(result).toBeLessThanOrEqual(100);\n    });\n\n    test('should handle single cryptocurrency analysis', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', price_change_percentage_24h: 7.5 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin']);\n\n      expect(result).toBeGreaterThan(30); // Moderate volatility\n      expect(result).toBeLessThan(50);\n    });\n  });\n\n  describe('getCryptoMarketAnalysis - Expansion Features', () => {\n    test('should include market cap and trading volume in analysis', async () => {\n      const mockCryptoData = [\n        {\n          id: 'bitcoin',\n          symbol: 'btc',\n          name: 'Bitcoin',\n          current_price: 45000,\n          market_cap: 850000000000,\n          total_volume: 25000000000,\n          price_change_percentage_24h: -2.5\n        },\n        {\n          id: 'ethereum',\n          symbol: 'eth',\n          name: 'Ethereum',\n          current_price: 2800,\n          market_cap: 335000000000,\n          total_volume: 15000000000,\n          price_change_percentage_24h: 1.2\n        }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoMarketAnalysis(['bitcoin', 'ethereum']);\n\n      expect(result).toHaveProperty('marketData');\n      expect(result.marketData.length).toBe(2);\n      expect(result.marketData[0]).toHaveProperty('market_cap');\n      expect(result.marketData[0]).toHaveProperty('total_volume');\n    });\n\n    test('should handle large market cap cryptocurrencies', async () => {\n      const mockCryptoData = [\n        {\n          id: 'bitcoin',\n          symbol: 'btc',\n          name: 'Bitcoin',\n          current_price: 60000,\n          market_cap: 1200000000000, // 1.2 trillion\n          price_change_percentage_24h: 0.5\n        }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoMarketAnalysis(['bitcoin']);\n\n      expect(result.volatilityIndex).toBeLessThan(20); // Low volatility for stable large cap\n      expect(result.analysis.riskAssessment).toBe('Low');\n    });\n\n    test('should analyze altcoin volatility patterns', async () => {\n      const mockCryptoData = [\n        { id: 'solana', price_change_percentage_24h: 12.5 },\n        { id: 'avalanche-2', price_change_percentage_24h: -8.3 },\n        { id: 'polygon', price_change_percentage_24h: 6.7 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoMarketAnalysis(['solana', 'avalanche-2', 'polygon']);\n\n      expect(result.volatilityIndex).toBeGreaterThan(40); // Higher volatility for altcoins\n      expect(result.analysis.totalCryptos).toBe(3);\n    });\n  });\n\n  describe('Error Handling - Expansion', () => {\n    test('should handle partial data failures gracefully', async () => {\n      const mockCryptoData = [\n        { id: 'bitcoin', price_change_percentage_24h: -2.5 },\n        { id: 'ethereum' }, // Missing price_change_percentage_24h\n        { id: 'solana', price_change_percentage_24h: 5.8 }\n      ];\n\n      mockCryptoIntegration.getCryptoData.mockResolvedValue(mockCryptoData);\n\n      const result = await cryptoService.getCryptoVolatilityIndex(['bitcoin', 'ethereum', 'solana']);\n\n      expect(result).toBeGreaterThanOrEqual(0);\n      expect(result).toBeLessThanOrEqual(100);\n      // Should still calculate based on available data\n    });\n\n    test('should handle network timeouts during market analysis', async () => {\n      mockCryptoIntegration.getCryptoData.mockRejectedValue(new Error('Network timeout'));\n\n      const result = await cryptoService.getCryptoMarketAnalysis(['bitcoin']);\n\n      expect(result).toHaveProperty('volatilityIndex', 25);\n      expect(result).toHaveProperty('error');\n      expect(result.source).toBe('CryptoService - Error Fallback');\n    });\n\n    test('should maintain service availability during API outages', async () => {\n      mockCryptoIntegration.getCryptoData.mockRejectedValue(new Error('API unavailable'));\n\n      const volatilityResult = await cryptoService.getCryptoVolatilityIndex(['bitcoin']);\n      const analysisResult = await cryptoService.getCryptoMarketAnalysis(['bitcoin']);\n\n      expect(volatilityResult).toBe(25); // Default fallback\n      expect(analysisResult.volatilityIndex).toBe(25);\n      expect(analysisResult.source).toBe('CryptoService - Error Fallback');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}