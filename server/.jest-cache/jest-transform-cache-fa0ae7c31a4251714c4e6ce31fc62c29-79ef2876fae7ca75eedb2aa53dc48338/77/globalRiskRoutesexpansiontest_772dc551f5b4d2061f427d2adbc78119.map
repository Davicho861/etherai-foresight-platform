{"version":3,"names":["_getJestObj","mock","_supertest","data","_interopRequireDefault","require","_express","_globalRiskRoutes","_cryptoService","e","__esModule","default","jest","describe","app","mockCryptoService","beforeEach","clearAllMocks","getCryptoMarketAnalysis","fn","CryptoService","mockImplementation","express","use","json","globalRiskRoutes","test","cryptoIds","mockCryptoData","timestamp","volatilityIndex","marketData","map","id","price_change_percentage_24h","Math","random","analysis","totalCryptos","length","averageVolatility","riskAssessment","source","mockResolvedValue","response","request","get","join","expect","body","value","toBe","unit","toHaveBeenCalledWith","topic","mockGetCommunityResilienceIndex","getCommunityResilienceIndex","mockResilienceData","resilienceAnalysis","COL","resilienceScore","socialEvents","PER","ARG","BRA","globalResilienceAssessment","averageResilience","lowResilienceCountries","assessment","globalRecommendations","MEX","CHL","mockRejectedValue","Error","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toBeDefined","requests","Array","fill","responses","Promise","all","forEach","status","scenarios","expectedValue","scenario","mockResolvedValueOnce","toHaveProperty"],"sources":["globalRiskRoutes.expansion.test.js"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport globalRiskRoutes from '../../src/routes/globalRiskRoutes.js';\n\n// Mock the services\njest.mock('../../src/services/cryptoService.js');\njest.mock('../../src/services/worldBankService.js');\njest.mock('../../src/services/usgsService.js');\njest.mock('../../src/services/climateService.js');\njest.mock('../../src/services/communityResilienceService.js');\n\nimport CryptoService from '../../src/services/cryptoService.js';\n\ndescribe('Global Risk Routes - Expansion Tests', () => {\n  let app;\n  let mockCryptoService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Create mock crypto service\n    mockCryptoService = {\n      getCryptoMarketAnalysis: jest.fn(),\n    };\n    CryptoService.mockImplementation(() => mockCryptoService);\n\n    // Create express app with routes\n    app = express();\n    app.use(express.json());\n    app.use('/api/global-risk', globalRiskRoutes);\n  });\n\n  describe('GET /api/global-risk/crypto-volatility - Advanced Scenarios', () => {\n    test('should handle large cryptocurrency portfolios', async () => {\n      const cryptoIds = ['bitcoin', 'ethereum', 'solana', 'cardano', 'polygon', 'avalanche-2', 'chainlink', 'uniswap'];\n      const mockCryptoData = {\n        timestamp: '2025-10-13T00:28:00.000Z',\n        volatilityIndex: 65,\n        marketData: cryptoIds.map(id => ({ id, price_change_percentage_24h: Math.random() * 20 - 10 })),\n        analysis: {\n          totalCryptos: cryptoIds.length,\n          averageVolatility: 8.5,\n          riskAssessment: 'Moderate'\n        },\n        source: 'CryptoService'\n      };\n\n      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);\n\n      const response = await request(app)\n        .get(`/api/global-risk/crypto-volatility?cryptoIds=${cryptoIds.join(',')}`)\n        .expect(200);\n\n      expect(response.body.data.value).toBe(65);\n      expect(response.body.data.unit).toBe('%');\n      expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(cryptoIds);\n    });\n\n    test('should handle extreme volatility scenarios', async () => {\n      const mockCryptoData = {\n        timestamp: '2025-10-13T00:28:00.000Z',\n        volatilityIndex: 95,\n        marketData: [\n          { id: 'bitcoin', price_change_percentage_24h: -35.0 },\n          { id: 'ethereum', price_change_percentage_24h: 28.5 }\n        ],\n        analysis: {\n          totalCryptos: 2,\n          averageVolatility: 31.75,\n          riskAssessment: 'High'\n        },\n        source: 'CryptoService'\n      };\n\n      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);\n\n      const response = await request(app)\n        .get('/api/global-risk/crypto-volatility')\n        .expect(200);\n\n      expect(response.body.data.value).toBe(95);\n      expect(response.body.data.topic).toBe('crypto-volatility');\n    });\n\n    test('should provide stable low-volatility responses', async () => {\n      const mockCryptoData = {\n        timestamp: '2025-10-13T00:28:00.000Z',\n        volatilityIndex: 15,\n        marketData: [\n          { id: 'bitcoin', price_change_percentage_24h: 0.8 },\n          { id: 'ethereum', price_change_percentage_24h: -0.3 }\n        ],\n        analysis: {\n          totalCryptos: 2,\n          averageVolatility: 0.55,\n          riskAssessment: 'Low'\n        },\n        source: 'CryptoService'\n      };\n\n      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);\n\n      const response = await request(app)\n        .get('/api/global-risk/crypto-volatility')\n        .expect(200);\n\n      expect(response.body.data.value).toBe(15);\n      expect(response.body.data.unit).toBe('%');\n    });\n\n    test('should handle single cryptocurrency analysis', async () => {\n      const mockCryptoData = {\n        timestamp: '2025-10-13T00:28:00.000Z',\n        volatilityIndex: 42,\n        marketData: [{ id: 'solana', price_change_percentage_24h: 8.5 }],\n        analysis: {\n          totalCryptos: 1,\n          averageVolatility: 8.5,\n          riskAssessment: 'Moderate'\n        },\n        source: 'CryptoService'\n      };\n\n      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);\n\n      const response = await request(app)\n        .get('/api/global-risk/crypto-volatility?cryptoIds=solana')\n        .expect(200);\n\n      expect(response.body.data.value).toBe(42);\n      expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['solana']);\n    });\n  });\n\n  describe('GET /api/global-risk/community-resilience - Advanced Scenarios', () => {\n    test('should handle multi-country LATAM analysis', async () => {\n      // Mock the service function\n      const mockGetCommunityResilienceIndex = jest.fn();\n      require('../../src/services/communityResilienceService.js').getCommunityResilienceIndex = mockGetCommunityResilienceIndex;\n\n      const mockResilienceData = {\n        timestamp: '2025-10-13T00:28:00.000Z',\n        resilienceAnalysis: {\n          COL: { resilienceScore: 72, socialEvents: 8 },\n          PER: { resilienceScore: 65, socialEvents: 12 },\n          ARG: { resilienceScore: 78, socialEvents: 5 },\n          BRA: { resilienceScore: 58, socialEvents: 15 }\n        },\n        globalResilienceAssessment: {\n          averageResilience: 68.25,\n          lowResilienceCountries: ['BRA'],\n          assessment: 'Mixed resilience across LATAM countries',\n          globalRecommendations: ['Focus on Brazil', 'Monitor Peru']\n        },\n        source: 'CommunityResilienceAgent'\n      };\n\n      mockGetCommunityResilienceIndex.mockResolvedValue(mockResilienceData);\n\n      const response = await request(app)\n        .get('/api/global-risk/community-resilience?countries=COL,PER,ARG,BRA')\n        .expect(200);\n\n      expect(response.body.data.value).toBe(32); // 100 - 68.25 = 31.75, rounded to 32\n      expect(response.body.data.topic).toBe('community-resilience');\n      expect(mockGetCommunityResilienceIndex).toHaveBeenCalledWith(['COL', 'PER', 'ARG', 'BRA'], 30);\n    });\n\n    test('should handle extended analysis periods', async () => {\n      const mockGetCommunityResilienceIndex = jest.fn();\n      require('../../src/services/communityResilienceService.js').getCommunityResilienceIndex = mockGetCommunityResilienceIndex;\n\n      const mockResilienceData = {\n        timestamp: '2025-10-13T00:28:00.000Z',\n        resilienceAnalysis: {\n          MEX: { resilienceScore: 63, socialEvents: 25 }\n        },\n        globalResilienceAssessment: {\n          averageResilience: 63,\n          lowResilienceCountries: ['MEX'],\n          assessment: 'Extended period analysis shows concerning trends',\n          globalRecommendations: ['Long-term intervention strategies']\n        },\n        source: 'CommunityResilienceAgent'\n      };\n\n      mockGetCommunityResilienceIndex.mockResolvedValue(mockResilienceData);\n\n      const response = await request(app)\n        .get('/api/global-risk/community-resilience?countries=MEX&days=90')\n        .expect(200);\n\n      expect(response.body.data.value).toBe(37); // 100 - 63 = 37\n      expect(mockGetCommunityResilienceIndex).toHaveBeenCalledWith(['MEX'], 90);\n    });\n\n    test('should handle high resilience scenarios', async () => {\n      const mockGetCommunityResilienceIndex = jest.fn();\n      require('../../src/services/communityResilienceService.js').getCommunityResilienceIndex = mockGetCommunityResilienceIndex;\n\n      const mockResilienceData = {\n        timestamp: '2025-10-13T00:28:00.000Z',\n        resilienceAnalysis: {\n          CHL: { resilienceScore: 85, socialEvents: 3 }\n        },\n        globalResilienceAssessment: {\n          averageResilience: 85,\n          lowResilienceCountries: [],\n          assessment: 'High community resilience maintained',\n          globalRecommendations: ['Continue monitoring', 'Share best practices']\n        },\n        source: 'CommunityResilienceAgent'\n      };\n\n      mockGetCommunityResilienceIndex.mockResolvedValue(mockResilienceData);\n\n      const response = await request(app)\n        .get('/api/global-risk/community-resilience?countries=CHL')\n        .expect(200);\n\n      expect(response.body.data.value).toBe(15); // 100 - 85 = 15 (low risk)\n    });\n  });\n\n  describe('Error Handling and Resilience - Expansion', () => {\n    test('should provide fallback data during crypto service outages', async () => {\n      mockCryptoService.getCryptoMarketAnalysis.mockRejectedValue(new Error('API rate limit exceeded'));\n\n      const response = await request(app)\n        .get('/api/global-risk/crypto-volatility')\n        .expect(200);\n\n      expect(response.body.data.value).toBeGreaterThanOrEqual(40);\n      expect(response.body.data.value).toBeLessThanOrEqual(100);\n      expect(response.body.data.topic).toBe('crypto-volatility');\n      expect(response.body.data.unit).toBe('%');\n    });\n\n    test('should maintain service availability during community resilience failures', async () => {\n      const mockGetCommunityResilienceIndex = jest.fn();\n      require('../../src/services/communityResilienceService.js').getCommunityResilienceIndex = mockGetCommunityResilienceIndex;\n\n      mockGetCommunityResilienceIndex.mockRejectedValue(new Error('Agent system down'));\n\n      const response = await request(app)\n        .get('/api/global-risk/community-resilience?countries=COL')\n        .expect(200);\n\n      expect(response.body.data.value).toBeGreaterThanOrEqual(20);\n      expect(response.body.data.value).toBeLessThanOrEqual(40);\n      expect(response.body.data.topic).toBe('community-resilience');\n    });\n\n    test('should handle malformed query parameters gracefully', async () => {\n      const response = await request(app)\n        .get('/api/global-risk/crypto-volatility?cryptoIds=')\n        .expect(200);\n\n      expect(response.body.data.value).toBeDefined();\n      expect(response.body.data.unit).toBe('%');\n    });\n\n    test('should handle invalid country codes in community resilience', async () => {\n      const mockGetCommunityResilienceIndex = jest.fn();\n      require('../../src/services/communityResilienceService.js').getCommunityResilienceIndex = mockGetCommunityResilienceIndex;\n\n      mockGetCommunityResilienceIndex.mockResolvedValue({\n        timestamp: '2025-10-13T00:28:00.000Z',\n        resilienceAnalysis: {},\n        globalResilienceAssessment: {\n          averageResilience: 50,\n          lowResilienceCountries: [],\n          assessment: 'No valid countries provided',\n          globalRecommendations: []\n        },\n        source: 'CommunityResilienceAgent'\n      });\n\n      const response = await request(app)\n        .get('/api/global-risk/community-resilience?countries=INVALID')\n        .expect(200);\n\n      expect(response.body.data.value).toBe(50); // 100 - 50 = 50\n    });\n  });\n\n  describe('Performance and Scalability - Expansion', () => {\n    test('should handle rapid consecutive requests', async () => {\n      const mockCryptoData = {\n        timestamp: '2025-10-13T00:28:00.000Z',\n        volatilityIndex: 35,\n        marketData: [],\n        analysis: { totalCryptos: 2, averageVolatility: 2.5, riskAssessment: 'Low' },\n        source: 'CryptoService'\n      };\n\n      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);\n\n      // Make multiple concurrent requests\n      const requests = Array(5).fill().map(() =>\n        request(app).get('/api/global-risk/crypto-volatility')\n      );\n\n      const responses = await Promise.all(requests);\n\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(response.body.data.value).toBe(35);\n      });\n    });\n\n    test('should maintain response format consistency across different scenarios', async () => {\n      // Test various scenarios maintain consistent response structure\n      const scenarios = [\n        { cryptoIds: 'bitcoin', expectedValue: 25 },\n        { cryptoIds: 'bitcoin,ethereum', expectedValue: 45 },\n        { cryptoIds: 'solana,cardano,polygon', expectedValue: 55 }\n      ];\n\n      for (const scenario of scenarios) {\n        mockCryptoService.getCryptoMarketAnalysis.mockResolvedValueOnce({\n          timestamp: '2025-10-13T00:28:00.000Z',\n          volatilityIndex: scenario.expectedValue,\n          marketData: [],\n          analysis: { totalCryptos: 1, averageVolatility: 5, riskAssessment: 'Moderate' },\n          source: 'CryptoService'\n        });\n\n        const response = await request(app)\n          .get(`/api/global-risk/crypto-volatility?cryptoIds=${scenario.cryptoIds}`)\n          .expect(200);\n\n        expect(response.body).toHaveProperty('status', 'OK');\n        expect(response.body).toHaveProperty('data');\n        expect(response.body.data).toHaveProperty('topic', 'crypto-volatility');\n        expect(response.body.data).toHaveProperty('timestamp');\n        expect(response.body.data).toHaveProperty('value');\n        expect(response.body.data).toHaveProperty('unit', '%');\n      }\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}