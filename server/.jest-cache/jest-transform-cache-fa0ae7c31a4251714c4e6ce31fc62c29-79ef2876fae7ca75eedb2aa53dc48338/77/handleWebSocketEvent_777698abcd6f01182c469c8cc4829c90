8d82fee3bb7514d60ae98bf8d322a907
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);
var handleWebSocketEvent_exports = {};
__export(handleWebSocketEvent_exports, {
  handleWebSocketEvent: () => handleWebSocketEvent
});
module.exports = __toCommonJS(handleWebSocketEvent_exports);
var import_webSocketInterceptor = require("./webSocketInterceptor");
var import_onUnhandledRequest = require("../utils/request/onUnhandledRequest");
var import_isHandlerKind = require("../utils/internal/isHandlerKind");
function handleWebSocketEvent(options) {
  import_webSocketInterceptor.webSocketInterceptor.on("connection", async connection => {
    const handlers = options.getHandlers().filter((0, import_isHandlerKind.isHandlerKind)("EventHandler"));
    if (handlers.length > 0) {
      options?.onMockedConnection(connection);
      await Promise.all(handlers.map(handler => {
        return handler.run(connection);
      }));
      return;
    }
    const request = new Request(connection.client.url, {
      headers: {
        upgrade: "websocket",
        connection: "upgrade"
      }
    });
    await (0, import_onUnhandledRequest.onUnhandledRequest)(request, options.getUnhandledRequestStrategy()).catch(error => {
      const errorEvent = new Event("error");
      Object.defineProperty(errorEvent, "cause", {
        enumerable: true,
        configurable: false,
        value: error
      });
      connection.client.socket.dispatchEvent(errorEvent);
    });
    options?.onPassthroughConnection(connection);
    connection.server.connect();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYW5kbGVXZWJTb2NrZXRFdmVudF9leHBvcnRzIiwiX19leHBvcnQiLCJoYW5kbGVXZWJTb2NrZXRFdmVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3RvQ29tbW9uSlMiLCJpbXBvcnRfd2ViU29ja2V0SW50ZXJjZXB0b3IiLCJyZXF1aXJlIiwiaW1wb3J0X29uVW5oYW5kbGVkUmVxdWVzdCIsImltcG9ydF9pc0hhbmRsZXJLaW5kIiwib3B0aW9ucyIsIndlYlNvY2tldEludGVyY2VwdG9yIiwib24iLCJjb25uZWN0aW9uIiwiaGFuZGxlcnMiLCJnZXRIYW5kbGVycyIsImZpbHRlciIsImlzSGFuZGxlcktpbmQiLCJsZW5ndGgiLCJvbk1vY2tlZENvbm5lY3Rpb24iLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiaGFuZGxlciIsInJ1biIsInJlcXVlc3QiLCJSZXF1ZXN0IiwiY2xpZW50IiwidXJsIiwiaGVhZGVycyIsInVwZ3JhZGUiLCJvblVuaGFuZGxlZFJlcXVlc3QiLCJnZXRVbmhhbmRsZWRSZXF1ZXN0U3RyYXRlZ3kiLCJjYXRjaCIsImVycm9yIiwiZXJyb3JFdmVudCIsIkV2ZW50IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwidmFsdWUiLCJzb2NrZXQiLCJkaXNwYXRjaEV2ZW50Iiwib25QYXNzdGhyb3VnaENvbm5lY3Rpb24iLCJzZXJ2ZXIiLCJjb25uZWN0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcmUvd3MvaGFuZGxlV2ViU29ja2V0RXZlbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBXZWJTb2NrZXRDb25uZWN0aW9uRGF0YSB9IGZyb20gJ0Btc3dqcy9pbnRlcmNlcHRvcnMvV2ViU29ja2V0J1xuaW1wb3J0IHsgUmVxdWVzdEhhbmRsZXIgfSBmcm9tICcuLi9oYW5kbGVycy9SZXF1ZXN0SGFuZGxlcidcbmltcG9ydCB7IFdlYlNvY2tldEhhbmRsZXIgfSBmcm9tICcuLi9oYW5kbGVycy9XZWJTb2NrZXRIYW5kbGVyJ1xuaW1wb3J0IHsgd2ViU29ja2V0SW50ZXJjZXB0b3IgfSBmcm9tICcuL3dlYlNvY2tldEludGVyY2VwdG9yJ1xuaW1wb3J0IHtcbiAgb25VbmhhbmRsZWRSZXF1ZXN0LFxuICBVbmhhbmRsZWRSZXF1ZXN0U3RyYXRlZ3ksXG59IGZyb20gJy4uL3V0aWxzL3JlcXVlc3Qvb25VbmhhbmRsZWRSZXF1ZXN0J1xuaW1wb3J0IHsgaXNIYW5kbGVyS2luZCB9IGZyb20gJy4uL3V0aWxzL2ludGVybmFsL2lzSGFuZGxlcktpbmQnXG5cbmludGVyZmFjZSBIYW5kbGVXZWJTb2NrZXRFdmVudE9wdGlvbnMge1xuICBnZXRVbmhhbmRsZWRSZXF1ZXN0U3RyYXRlZ3k6ICgpID0+IFVuaGFuZGxlZFJlcXVlc3RTdHJhdGVneVxuICBnZXRIYW5kbGVyczogKCkgPT4gQXJyYXk8UmVxdWVzdEhhbmRsZXIgfCBXZWJTb2NrZXRIYW5kbGVyPlxuICBvbk1vY2tlZENvbm5lY3Rpb246IChjb25uZWN0aW9uOiBXZWJTb2NrZXRDb25uZWN0aW9uRGF0YSkgPT4gdm9pZFxuICBvblBhc3N0aHJvdWdoQ29ubmVjdGlvbjogKG9ubmVjdGlvbjogV2ViU29ja2V0Q29ubmVjdGlvbkRhdGEpID0+IHZvaWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVdlYlNvY2tldEV2ZW50KG9wdGlvbnM6IEhhbmRsZVdlYlNvY2tldEV2ZW50T3B0aW9ucykge1xuICB3ZWJTb2NrZXRJbnRlcmNlcHRvci5vbignY29ubmVjdGlvbicsIGFzeW5jIChjb25uZWN0aW9uKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBvcHRpb25zLmdldEhhbmRsZXJzKCkuZmlsdGVyKGlzSGFuZGxlcktpbmQoJ0V2ZW50SGFuZGxlcicpKVxuXG4gICAgLy8gSWdub3JlIHRoaXMgY29ubmVjdGlvbiBpZiB0aGUgdXNlciBoYXNuJ3QgZGVmaW5lZCBhbnkgaGFuZGxlcnMuXG4gICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIG9wdGlvbnM/Lm9uTW9ja2VkQ29ubmVjdGlvbihjb25uZWN0aW9uKVxuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgaGFuZGxlcnMubWFwKChoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBoYW5kbGVycyBhbmQgZm9yd2FyZCB0aGUgY29ubmVjdGlvblxuICAgICAgICAgIC8vIGV2ZW50IHRvIFdlYlNvY2tldCBldmVudCBoYW5kbGVycy4gVGhpcyBpcyBlcXVpdmFsZW50XG4gICAgICAgICAgLy8gdG8gZGlzcGF0Y2hpbmcgdGhhdCBldmVudCBvbnRvIG11bHRpcGxlIGxpc3RlbmVycy5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlci5ydW4oY29ubmVjdGlvbilcbiAgICAgICAgfSksXG4gICAgICApXG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIENvbnN0cnVjdCBhIHJlcXVlc3QgcmVwcmVzZW50aW5nIHRoaXMgV2ViU29ja2V0IGNvbm5lY3Rpb24uXG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGNvbm5lY3Rpb24uY2xpZW50LnVybCwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICB1cGdyYWRlOiAnd2Vic29ja2V0JyxcbiAgICAgICAgY29ubmVjdGlvbjogJ3VwZ3JhZGUnLFxuICAgICAgfSxcbiAgICB9KVxuICAgIGF3YWl0IG9uVW5oYW5kbGVkUmVxdWVzdChcbiAgICAgIHJlcXVlc3QsXG4gICAgICBvcHRpb25zLmdldFVuaGFuZGxlZFJlcXVlc3RTdHJhdGVneSgpLFxuICAgICkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zdCBlcnJvckV2ZW50ID0gbmV3IEV2ZW50KCdlcnJvcicpXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3JFdmVudCwgJ2NhdXNlJywge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogZXJyb3IsXG4gICAgICB9KVxuICAgICAgY29ubmVjdGlvbi5jbGllbnQuc29ja2V0LmRpc3BhdGNoRXZlbnQoZXJyb3JFdmVudClcbiAgICB9KVxuXG4gICAgb3B0aW9ucz8ub25QYXNzdGhyb3VnaENvbm5lY3Rpb24oY29ubmVjdGlvbilcblxuICAgIC8vIElmIG5vbmUgb2YgdGhlIFwid3NcIiBoYW5kbGVycyBtYXRjaGVkLFxuICAgIC8vIGVzdGFibGlzaCB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24gYXMtaXMuXG4gICAgY29ubmVjdGlvbi5zZXJ2ZXIuY29ubmVjdCgpXG4gIH0pXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLDRCQUFBO0FBQUFDLFFBQUEsQ0FBQUQsNEJBQUE7RUFBQUUsb0JBQUEsRUFBQUEsQ0FBQSxLQUFBQTtBQUFBO0FBQUFDLE1BQUEsQ0FBQUMsT0FBQSxHQUFBQyxZQUFBLENBQUFMLDRCQUFBO0FBR0EsSUFBQU0sMkJBQUEsR0FBcUNDLE9BQUE7QUFDckMsSUFBQUMseUJBQUEsR0FHT0QsT0FBQTtBQUNQLElBQUFFLG9CQUFBLEdBQThCRixPQUFBO0FBU3ZCLFNBQVNMLHFCQUFxQlEsT0FBQSxFQUFzQztFQUN6RUosMkJBQUEsQ0FBQUssb0JBQUEsQ0FBcUJDLEVBQUEsQ0FBRyxjQUFjLE1BQU9DLFVBQUEsSUFBZTtJQUMxRCxNQUFNQyxRQUFBLEdBQVdKLE9BQUEsQ0FBUUssV0FBQSxDQUFZLEVBQUVDLE1BQUEsS0FBT1Asb0JBQUEsQ0FBQVEsYUFBQSxFQUFjLGNBQWMsQ0FBQztJQUczRSxJQUFJSCxRQUFBLENBQVNJLE1BQUEsR0FBUyxHQUFHO01BQ3ZCUixPQUFBLEVBQVNTLGtCQUFBLENBQW1CTixVQUFVO01BRXRDLE1BQU1PLE9BQUEsQ0FBUUMsR0FBQSxDQUNaUCxRQUFBLENBQVNRLEdBQUEsQ0FBS0MsT0FBQSxJQUFZO1FBSXhCLE9BQU9BLE9BQUEsQ0FBUUMsR0FBQSxDQUFJWCxVQUFVO01BQy9CLENBQUMsQ0FDSDtNQUVBO0lBQ0Y7SUFHQSxNQUFNWSxPQUFBLEdBQVUsSUFBSUMsT0FBQSxDQUFRYixVQUFBLENBQVdjLE1BQUEsQ0FBT0MsR0FBQSxFQUFLO01BQ2pEQyxPQUFBLEVBQVM7UUFDUEMsT0FBQSxFQUFTO1FBQ1RqQixVQUFBLEVBQVk7TUFDZDtJQUNGLENBQUM7SUFDRCxVQUFNTCx5QkFBQSxDQUFBdUIsa0JBQUEsRUFDSk4sT0FBQSxFQUNBZixPQUFBLENBQVFzQiwyQkFBQSxDQUE0QixDQUN0QyxFQUFFQyxLQUFBLENBQU9DLEtBQUEsSUFBVTtNQUNqQixNQUFNQyxVQUFBLEdBQWEsSUFBSUMsS0FBQSxDQUFNLE9BQU87TUFDcENDLE1BQUEsQ0FBT0MsY0FBQSxDQUFlSCxVQUFBLEVBQVksU0FBUztRQUN6Q0ksVUFBQSxFQUFZO1FBQ1pDLFlBQUEsRUFBYztRQUNkQyxLQUFBLEVBQU9QO01BQ1QsQ0FBQztNQUNEckIsVUFBQSxDQUFXYyxNQUFBLENBQU9lLE1BQUEsQ0FBT0MsYUFBQSxDQUFjUixVQUFVO0lBQ25ELENBQUM7SUFFRHpCLE9BQUEsRUFBU2tDLHVCQUFBLENBQXdCL0IsVUFBVTtJQUkzQ0EsVUFBQSxDQUFXZ0MsTUFBQSxDQUFPQyxPQUFBLENBQVE7RUFDNUIsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119