{"version":3,"names":["_express","_interopRequireDefault","require","_SeismicIntegration","_GeophysicalRiskAgent","e","__esModule","default","cov_29onkg4l79","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","_coverageSchema","coverage","actualCoverage","router","express","Router","get","req","res","rawData","getSeismicData","processedData","analyzeSeismicActivity","json","error","console","status","events","eventCount","length","maxMagnitude","Math","max","map","magnitude","overallRisk","highRiskZones","filter","place","_default","exports"],"sources":["seismic.js"],"sourcesContent":["import express from 'express';\nimport { getSeismicData } from '../services/SeismicIntegration.js';\nimport { analyzeSeismicActivity } from '../agents/GeophysicalRiskAgent.js';\n\nconst router = express.Router();\n\n/**\n * @route GET /api/seismic/activity\n * @description Provides a stream of processed real-time seismic activity.\n * @access Protected\n */\nrouter.get('/activity', async (req, res) => {\n  try {\n    const rawData = await getSeismicData();\n    const processedData = analyzeSeismicActivity(rawData);\n    res.json(processedData);\n  } catch (error) {\n    console.error('Error in seismic activity route:', error);\n    res.status(500).json({ error: 'Failed to retrieve seismic activity.' });\n  }\n});\n\n/**\n * @route GET /api/seismic/risk\n * @description Provides geophysical risk assessment based on seismic activity.\n * @access Protected\n */\nrouter.get('/risk', async (req, res) => {\n  try {\n    const rawData = await getSeismicData();\n    const events = analyzeSeismicActivity(rawData);\n    const eventCount = events.length;\n    const maxMagnitude = eventCount > 0 ? Math.max(...events.map(e => e.magnitude)) : 0;\n    const overallRisk = eventCount > 0 ? (maxMagnitude * eventCount) / 10 : 0; // Simple risk calculation\n    const highRiskZones = events.filter(e => e.magnitude >= 5.0).map(e => e.place);\n\n    res.json({\n      overallRisk,\n      eventCount,\n      maxMagnitude,\n      highRiskZones\n    });\n  } catch (error) {\n    console.error('Error in seismic risk route:', error);\n    res.status(500).json({ error: 'Failed to retrieve seismic risk assessment.' });\n  }\n});\n\nexport default router;\n"],"mappings":"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","ignoreList":[]}