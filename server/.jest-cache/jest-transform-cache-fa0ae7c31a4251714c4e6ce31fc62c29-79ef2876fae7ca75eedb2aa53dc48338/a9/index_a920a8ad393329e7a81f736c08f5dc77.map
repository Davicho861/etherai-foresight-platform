{"version":3,"names":["index_exports","__export","SetupServerApi","setupServer","module","exports","__toCommonJS","import_node_async_hooks","require","import_ClientRequest","import_XMLHttpRequest","import_fetch","import_outvariant","import_interceptors","import_SetupApi","import_handleRequest","import_mergeRight","import_devUtils","import_handleWebSocketEvent","import_webSocketInterceptor","import_isHandlerKind","DEFAULT_LISTEN_OPTIONS","onUnhandledRequest","SetupServerCommonApi","SetupApi","interceptor","resolvedOptions","constructor","interceptors","handlers","BatchInterceptor","name","init","on","request","requestId","controller","response","handleRequest","handlersController","currentHandlers","filter","isHandlerKind","emitter","onPassthroughResponse","request2","acceptHeader","headers","get","nextAcceptHeader","replace","set","delete","respondWith","error","InternalError","isMockedResponse","emit","handleWebSocketEvent","getUnhandledRequestStrategy","getHandlers","onMockedConnection","onPassthroughConnection","listen","options","mergeRight","apply","subscriptions","push","dispose","webSocketInterceptor","invariant","InterceptorReadyState","APPLYING","APPLIED","includes","readyState","devUtils","formatMessage","close","store","AsyncLocalStorage","AsyncHandlersController","rootContext","initialHandlers","context","getStore","prepend","runtimeHandlers","unshift","reset","nextHandlers","length","concat","ClientRequestInterceptor","XMLHttpRequestInterceptor","FetchInterceptor","boundary","callback","args","run","disable"],"sources":["../../src/node/index.ts","../../src/node/SetupServerApi.ts","../../src/node/SetupServerCommonApi.ts","../../src/node/setupServer.ts"],"sourcesContent":["export type { SetupServer } from './glossary'\nexport { SetupServerApi } from './SetupServerApi'\nexport { setupServer } from './setupServer'\n","import { AsyncLocalStorage } from 'node:async_hooks'\nimport type { HttpRequestEventMap, Interceptor } from '@mswjs/interceptors'\nimport { ClientRequestInterceptor } from '@mswjs/interceptors/ClientRequest'\nimport { XMLHttpRequestInterceptor } from '@mswjs/interceptors/XMLHttpRequest'\nimport { FetchInterceptor } from '@mswjs/interceptors/fetch'\nimport { HandlersController } from '~/core/SetupApi'\nimport type { RequestHandler } from '~/core/handlers/RequestHandler'\nimport type { WebSocketHandler } from '~/core/handlers/WebSocketHandler'\nimport type { SetupServer } from './glossary'\nimport { SetupServerCommonApi } from './SetupServerCommonApi'\n\nconst store = new AsyncLocalStorage<RequestHandlersContext>()\n\ntype RequestHandlersContext = {\n  initialHandlers: Array<RequestHandler | WebSocketHandler>\n  handlers: Array<RequestHandler | WebSocketHandler>\n}\n\n/**\n * A handlers controller that utilizes `AsyncLocalStorage` in Node.js\n * to prevent the request handlers list from being a shared state\n * across multiple tests.\n */\nclass AsyncHandlersController implements HandlersController {\n  private rootContext: RequestHandlersContext\n\n  constructor(initialHandlers: Array<RequestHandler | WebSocketHandler>) {\n    this.rootContext = { initialHandlers, handlers: [] }\n  }\n\n  get context(): RequestHandlersContext {\n    return store.getStore() || this.rootContext\n  }\n\n  public prepend(runtimeHandlers: Array<RequestHandler | WebSocketHandler>) {\n    this.context.handlers.unshift(...runtimeHandlers)\n  }\n\n  public reset(nextHandlers: Array<RequestHandler | WebSocketHandler>) {\n    const context = this.context\n    context.handlers = []\n    context.initialHandlers =\n      nextHandlers.length > 0 ? nextHandlers : context.initialHandlers\n  }\n\n  public currentHandlers(): Array<RequestHandler | WebSocketHandler> {\n    const { initialHandlers, handlers } = this.context\n    return handlers.concat(initialHandlers)\n  }\n}\nexport class SetupServerApi\n  extends SetupServerCommonApi\n  implements SetupServer\n{\n  constructor(\n    handlers: Array<RequestHandler | WebSocketHandler>,\n    interceptors: Array<Interceptor<HttpRequestEventMap>> = [\n      new ClientRequestInterceptor(),\n      new XMLHttpRequestInterceptor(),\n      new FetchInterceptor(),\n    ],\n  ) {\n    super(interceptors, handlers)\n\n    this.handlersController = new AsyncHandlersController(handlers)\n  }\n\n  public boundary<Args extends Array<any>, R>(\n    callback: (...args: Args) => R,\n  ): (...args: Args) => R {\n    return (...args: Args): R => {\n      return store.run<any, any>(\n        {\n          initialHandlers: this.handlersController.currentHandlers(),\n          handlers: [],\n        },\n        callback,\n        ...args,\n      )\n    }\n  }\n\n  public close(): void {\n    super.close()\n    store.disable()\n  }\n}\n","/**\n * @note This API is extended by both \"msw/node\" and \"msw/native\"\n * so be minding about the things you import!\n */\nimport type { RequiredDeep } from 'type-fest'\nimport { invariant } from 'outvariant'\nimport {\n  BatchInterceptor,\n  InterceptorReadyState,\n  type HttpRequestEventMap,\n  type Interceptor,\n} from '@mswjs/interceptors'\nimport type { LifeCycleEventsMap, SharedOptions } from '~/core/sharedOptions'\nimport { SetupApi } from '~/core/SetupApi'\nimport { handleRequest } from '~/core/utils/handleRequest'\nimport type { RequestHandler } from '~/core/handlers/RequestHandler'\nimport type { WebSocketHandler } from '~/core/handlers/WebSocketHandler'\nimport { mergeRight } from '~/core/utils/internal/mergeRight'\nimport { InternalError, devUtils } from '~/core/utils/internal/devUtils'\nimport type { SetupServerCommon } from './glossary'\nimport { handleWebSocketEvent } from '~/core/ws/handleWebSocketEvent'\nimport { webSocketInterceptor } from '~/core/ws/webSocketInterceptor'\nimport { isHandlerKind } from '~/core/utils/internal/isHandlerKind'\n\nconst DEFAULT_LISTEN_OPTIONS: RequiredDeep<SharedOptions> = {\n  onUnhandledRequest: 'warn',\n}\n\nexport class SetupServerCommonApi\n  extends SetupApi<LifeCycleEventsMap>\n  implements SetupServerCommon\n{\n  protected readonly interceptor: BatchInterceptor<\n    Array<Interceptor<HttpRequestEventMap>>,\n    HttpRequestEventMap\n  >\n  private resolvedOptions: RequiredDeep<SharedOptions>\n\n  constructor(\n    interceptors: Array<Interceptor<HttpRequestEventMap>>,\n    handlers: Array<RequestHandler | WebSocketHandler>,\n  ) {\n    super(...handlers)\n\n    this.interceptor = new BatchInterceptor({\n      name: 'setup-server',\n      interceptors,\n    })\n\n    this.resolvedOptions = {} as RequiredDeep<SharedOptions>\n  }\n\n  /**\n   * Subscribe to all requests that are using the interceptor object\n   */\n  private init(): void {\n    this.interceptor.on(\n      'request',\n      async ({ request, requestId, controller }) => {\n        const response = await handleRequest(\n          request,\n          requestId,\n          this.handlersController\n            .currentHandlers()\n            .filter(isHandlerKind('RequestHandler')),\n          this.resolvedOptions,\n          this.emitter,\n          {\n            onPassthroughResponse(request) {\n              const acceptHeader = request.headers.get('accept')\n\n              /**\n               * @note Remove the internal bypass request header.\n               * In the browser, this is done by the worker script.\n               * In Node.js, it has to be done here.\n               */\n              if (acceptHeader) {\n                const nextAcceptHeader = acceptHeader.replace(\n                  /(,\\s+)?msw\\/passthrough/,\n                  '',\n                )\n\n                if (nextAcceptHeader) {\n                  request.headers.set('accept', nextAcceptHeader)\n                } else {\n                  request.headers.delete('accept')\n                }\n              }\n            },\n          },\n        )\n\n        if (response) {\n          controller.respondWith(response)\n        }\n\n        return\n      },\n    )\n\n    this.interceptor.on('unhandledException', ({ error }) => {\n      if (error instanceof InternalError) {\n        throw error\n      }\n    })\n\n    this.interceptor.on(\n      'response',\n      ({ response, isMockedResponse, request, requestId }) => {\n        this.emitter.emit(\n          isMockedResponse ? 'response:mocked' : 'response:bypass',\n          {\n            response,\n            request,\n            requestId,\n          },\n        )\n      },\n    )\n\n    // Preconfigure the WebSocket interception but don't enable it just yet.\n    // It will be enabled when the server starts.\n    handleWebSocketEvent({\n      getUnhandledRequestStrategy: () => {\n        return this.resolvedOptions.onUnhandledRequest\n      },\n      getHandlers: () => {\n        return this.handlersController.currentHandlers()\n      },\n      onMockedConnection: () => {},\n      onPassthroughConnection: () => {},\n    })\n  }\n\n  public listen(options: Partial<SharedOptions> = {}): void {\n    this.resolvedOptions = mergeRight(\n      DEFAULT_LISTEN_OPTIONS,\n      options,\n    ) as RequiredDeep<SharedOptions>\n\n    // Apply the interceptor when starting the server.\n    // Attach the event listeners to the interceptor here\n    // so they get re-attached whenever `.listen()` is called.\n    this.interceptor.apply()\n    this.init()\n    this.subscriptions.push(() => this.interceptor.dispose())\n\n    // Apply the WebSocket interception.\n    webSocketInterceptor.apply()\n    this.subscriptions.push(() => webSocketInterceptor.dispose())\n\n    // Assert that the interceptor has been applied successfully.\n    // Also guards us from forgetting to call \"interceptor.apply()\"\n    // as a part of the \"listen\" method.\n    invariant(\n      [InterceptorReadyState.APPLYING, InterceptorReadyState.APPLIED].includes(\n        this.interceptor.readyState,\n      ),\n      devUtils.formatMessage(\n        'Failed to start \"setupServer\": the interceptor failed to apply. This is likely an issue with the library and you should report it at \"%s\".',\n      ),\n      'https://github.com/mswjs/msw/issues/new/choose',\n    )\n  }\n\n  public close(): void {\n    this.dispose()\n  }\n}\n","import type { RequestHandler } from '~/core/handlers/RequestHandler'\nimport type { WebSocketHandler } from '~/core/handlers/WebSocketHandler'\nimport { SetupServerApi } from './SetupServerApi'\n\n/**\n * Sets up a requests interception in Node.js with the given request handlers.\n * @param {RequestHandler[]} handlers List of request handlers.\n *\n * @see {@link https://mswjs.io/docs/api/setup-server `setupServer()` API reference}\n */\nexport const setupServer = (\n  ...handlers: Array<RequestHandler | WebSocketHandler>\n): SetupServerApi => {\n  return new SetupServerApi(handlers)\n}\n"],"mappings":"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","ignoreList":[]}