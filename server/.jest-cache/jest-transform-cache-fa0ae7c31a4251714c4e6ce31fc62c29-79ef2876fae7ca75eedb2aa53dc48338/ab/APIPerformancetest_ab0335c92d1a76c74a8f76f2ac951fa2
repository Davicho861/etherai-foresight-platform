8d48e055ac711adfbd991417d9616551
"use strict";

// Mock kernel for agent routes
_getJestObj().mock('../../src/orchestrator.js', () => ({
  kernel: {
    getVigilanceStatus: jest.fn(() => ({
      flows: {
        autoPreservation: {
          active: true,
          lastRun: new Date().toISOString()
        },
        knowledge: {
          active: true,
          lastRun: new Date().toISOString()
        },
        prophecy: {
          active: true,
          lastRun: new Date().toISOString()
        }
      },
      riskIndices: {
        'Colombia': {
          riskScore: 3.2,
          level: 'medium'
        },
        'Argentina': {
          riskScore: 2.8,
          level: 'low'
        }
      },
      activityFeed: [{
        timestamp: new Date().toISOString(),
        flow: 'prophecy',
        message: 'Risk indices updated'
      }]
    }))
  }
}));
_getJestObj().mock('../../src/eventHub.js', () => ({
  subscribe: jest.fn(() => jest.fn())
}));
var _supertest = _interopRequireDefault(require("supertest"));
var _express = _interopRequireDefault(require("express"));
var _alerts = _interopRequireDefault(require("../../src/routes/alerts.js"));
var _agent = _interopRequireDefault(require("../../src/routes/agent.js"));
var _predict = _interopRequireDefault(require("../../src/routes/predict.js"));
var _cache = _interopRequireDefault(require("../../src/cache.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * API Performance Tests for MIS-020 Backend Optimization
 * Tests caching, response times, and performance improvements
 */
const app = (0, _express.default)();
app.use(_express.default.json());
app.use('/api/alerts', _alerts.default);
app.use('/api/agent', _agent.default);
app.use('/api/predict', _predict.default);
describe('API Performance Tests - MIS-020', () => {
  beforeEach(() => {
    // Clear cache before each test
    _cache.default.clear();
  });
  describe('Alerts API Performance', () => {
    test('should cache alerts responses and serve from cache on subsequent calls', async () => {
      const startTime = Date.now();

      // First request - should compute and cache
      const response1 = await (0, _supertest.default)(app).get('/api/alerts').expect(200);
      const firstRequestTime = Date.now() - startTime;
      const startTime2 = Date.now();

      // Second request - should serve from cache
      const response2 = await (0, _supertest.default)(app).get('/api/alerts').expect(200);
      const secondRequestTime = Date.now() - startTime2;

      // Response should be identical
      expect(response1.body).toEqual(response2.body);

      // Second request should be significantly faster (cached)
      expect(secondRequestTime).toBeLessThan(firstRequestTime * 0.7);

      // Verify cache hit
      const cacheKey = 'alerts:all:all:all';
      const cachedData = _cache.default.get(cacheKey);
      expect(cachedData).toEqual(response1.body);
    });
    test('should cache filtered alerts responses', async () => {
      // Test caching with filters
      const response1 = await (0, _supertest.default)(app).get('/api/alerts?region=Colombia').expect(200);
      const response2 = await (0, _supertest.default)(app).get('/api/alerts?region=Colombia').expect(200);
      expect(response1.body).toEqual(response2.body);

      // Verify cache with specific key
      const cacheKey = 'alerts:colombia:all:all';
      const cachedData = _cache.default.get(cacheKey);
      expect(cachedData).toBeDefined();
      expect(cachedData).toEqual(response1.body);
    });
    test('should handle concurrent requests efficiently', async () => {
      const promises = Array(10).fill().map(() => (0, _supertest.default)(app).get('/api/alerts'));
      const startTime = Date.now();
      const responses = await Promise.all(promises);
      const totalTime = Date.now() - startTime;

      // All responses should be successful
      responses.forEach(response => {
        expect(response.status).toBe(200);
        expect(response.body.alerts).toBeDefined();
      });

      // Concurrent requests should complete within reasonable time
      expect(totalTime).toBeLessThan(2000); // 2 seconds for 10 concurrent requests
    });
  });
  describe('Agent API Performance', () => {
    test('should cache vigilance status responses', async () => {
      const response1 = await (0, _supertest.default)(app).get('/api/agent/vigilance/status').expect(200);
      const response2 = await (0, _supertest.default)(app).get('/api/agent/vigilance/status').expect(200);

      // Responses should be identical
      expect(response1.body).toEqual(response2.body);

      // Verify cache hit
      const cacheKey = 'vigilance:status';
      const cachedData = _cache.default.get(cacheKey);
      expect(cachedData).toEqual(response1.body);
    });
  });
  describe('Prediction API Performance', () => {
    test('should cache prediction responses based on parameters', async () => {
      const predictionParams = {
        country: 'Colombia',
        parameters: {
          infectionRate: 25,
          protestIndex: 15,
          economicIndex: 10,
          temperature: 5
        }
      };
      const response1 = await (0, _supertest.default)(app).post('/api/predict').send(predictionParams).expect(200);
      const response2 = await (0, _supertest.default)(app).post('/api/predict').send(predictionParams).expect(200);

      // Responses should be identical
      expect(response1.body).toEqual(response2.body);
      expect(response1.body.country).toBe('Colombia');
      expect(response1.body.risk).toBeDefined();
      expect(response1.body.confidence).toBeDefined();
    });
    test('should not cache different prediction parameters', async () => {
      const params1 = {
        country: 'Colombia',
        parameters: {
          infectionRate: 25,
          protestIndex: 15,
          economicIndex: 10,
          temperature: 5
        }
      };
      const params2 = {
        country: 'Colombia',
        parameters: {
          infectionRate: 30,
          protestIndex: 15,
          economicIndex: 10,
          temperature: 5
        }
      };
      const response1 = await (0, _supertest.default)(app).post('/api/predict').send(params1).expect(200);
      const response2 = await (0, _supertest.default)(app).post('/api/predict').send(params2).expect(200);

      // Responses should be different due to different parameters
      expect(response1.body.score).not.toBe(response2.body.score);
    });
  });
  describe('Cache Performance Metrics', () => {
    test('should demonstrate significant performance improvement with caching', async () => {
      // Measure time without cache (simulate by clearing cache)
      _cache.default.clear();
      const startTime1 = process.hrtime.bigint();
      await (0, _supertest.default)(app).get('/api/alerts');
      const endTime1 = process.hrtime.bigint();
      const time1 = Number(endTime1 - startTime1) / 1000000; // Convert to milliseconds

      const startTime2 = process.hrtime.bigint();
      await (0, _supertest.default)(app).get('/api/alerts'); // Should hit cache
      const endTime2 = process.hrtime.bigint();
      const time2 = Number(endTime2 - startTime2) / 1000000;

      // Cached request should be at least 20% faster
      expect(time2).toBeLessThan(time1 * 0.8);
    });
    test('should maintain cache TTL and expiration', async () => {
      // Set a short TTL for testing
      const shortTTL = 100; // 100ms

      // Make request and cache it
      await (0, _supertest.default)(app).get('/api/alerts');

      // Modify cache to have short TTL
      const cacheKey = 'alerts:all:all:all';
      const cachedData = _cache.default.get(cacheKey);
      _cache.default.set(cacheKey, cachedData, shortTTL);

      // Wait for expiration
      await new Promise(resolve => setTimeout(resolve, shortTTL + 10));

      // Cache should be expired
      const expiredData = _cache.default.get(cacheKey);
      expect(expiredData).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,