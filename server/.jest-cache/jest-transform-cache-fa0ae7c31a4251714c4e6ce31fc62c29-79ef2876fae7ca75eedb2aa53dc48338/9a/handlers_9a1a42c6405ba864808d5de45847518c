300ea8a31297d5429517857ef6c85aea
// CommonJS MSW handlers - Sistema de mocks optimizado
const {
  http,
  HttpResponse
} = require('msw');

/**
 * Sistema de Mocks Optimizado
 * - Handlers deterministas
 * - Respuestas consistentes
 * - Manejo de errores robusto
 */

// Utilidades para mocks
const generateMockTimestamp = () => new Date().toISOString();
const generateMockId = () => `mock-${Math.random().toString(36).substr(2, 9)}`;

// Mocks predefinidos para servicios
const DEFAULT_MOCKS = {
  // Servicios externos
  'PandemicsService': {
    source: 'PandemicsService - Error Fallback',
    error: 'Service unavailable',
    timestamp: generateMockTimestamp()
  },
  'GeopoliticalInstabilityService': {
    source: 'GeopoliticalInstabilityService - Error Fallback',
    error: 'Service unavailable',
    timestamp: generateMockTimestamp()
  },
  'EconomicInstabilityService': {
    source: 'EconomicInstabilityService - Error Fallback',
    error: 'Service unavailable',
    timestamp: generateMockTimestamp()
  },
  'CybersecurityService': {
    source: 'CybersecurityService - Error Fallback',
    error: 'Service unavailable',
    timestamp: generateMockTimestamp()
  }
};
// Handlers optimizados
const handlers = [
// USGS Seismic Activity
http.get('https://earthquake.usgs.gov/fdsnws/event/1/query', async ({
  request
}) => {
  const mockData = {
    events: [{
      id: 'mock-1',
      magnitude: 4.5,
      place: 'Mock Seismic Region - Test Location',
      time: Date.now(),
      coordinates: [-74.2973, 4.5709, 10],
      url: 'https://example.com/mock-earthquake-1',
      tsunami: 0,
      significance: 50
    }, {
      id: 'mock-2',
      magnitude: 3.2,
      place: 'Another Mock Location',
      time: Date.now() - 3600000,
      coordinates: [-75, -10, 15],
      url: 'https://example.com/mock-earthquake-2',
      tsunami: 0,
      significance: 25
    }],
    summary: {
      totalEvents: 2,
      maxMagnitude: 4.5,
      lastUpdated: new Date().toISOString(),
      source: 'High-Fidelity Mock Data - USGS API Unavailable'
    },
    isMock: true,
    note: 'Real-time seismic data simulation - API unavailable'
  };
  return HttpResponse.json(mockData);
}),
// Climate Extremes
http.get('*/api/climate-extremes', async () => {
  const mockData = {
    extremes: [{
      country: 'Colombia',
      countryCode: 'COL',
      avgMaxTemp: 28.5,
      avgMinTemp: 18.2,
      avgHumidity: 75.2,
      totalPrecipitation: 150.3,
      extremeEvents: 3,
      riskLevel: 'medium',
      timestamp: '2025-10-10T18:00:00.000Z',
      period: 'Last 30 days'
    }, {
      country: 'Peru',
      countryCode: 'PER',
      avgMaxTemp: 25.8,
      avgMinTemp: 15.6,
      avgHumidity: 68.9,
      totalPrecipitation: 85.7,
      extremeEvents: 2,
      riskLevel: 'low',
      timestamp: '2025-10-10T18:00:00.000Z',
      period: 'Last 30 days'
    }]
  };
  return HttpResponse.json(mockData);
}),
// Food Security
http.get('*/api/global-risk/food-security', async () => {
  const mockData = {
    countries: ['COL', 'PER', 'ARG'],
    data: {
      COL: {
        country: 'Colombia',
        value: 5.2,
        year: '2024'
      },
      PER: {
        country: 'Peru',
        value: 7.1,
        year: '2024'
      },
      ARG: {
        country: 'Argentina',
        value: 4.8,
        year: '2024'
      }
    },
    globalAverage: 5.7,
    source: 'World Bank API - SN.ITK.DEFC.ZS',
    year: 2024
  };
  return HttpResponse.json(mockData);
}),
// Crypto Volatility
http.get('*/api/global-risk/crypto-volatility', async () => {
  const mockData = {
    success: true,
    data: {
      value: 45,
      marketData: [{
        id: 'bitcoin',
        price_change_percentage_24h: -2.5
      }, {
        id: 'ethereum',
        price_change_percentage_24h: 1.2
      }],
      analysis: {
        totalCryptos: 2,
        averageVolatility: 1.85,
        riskAssessment: 'Moderate'
      },
      timestamp: new Date().toISOString()
    },
    source: 'CryptoService',
    timestamp: new Date().toISOString()
  };
  return HttpResponse.json(mockData);
}),
// Community Resilience
http.get('*/api/global-risk/community-resilience', async ({
  request
}) => {
  const url = new URL(request.url);
  const countries = url.searchParams.get('countries')?.split(',') || ['COL'];
  const mockData = {
    success: true,
    data: {
      value: 30,
      indicators: {
        socialCohesion: 0.75,
        infrastructureQuality: 0.65,
        economicStability: 0.70,
        healthcareAccess: 0.80
      },
      countries: countries.map(code => ({
        code,
        indicators: {
          socialCohesion: Math.random() * 0.3 + 0.5,
          infrastructureQuality: Math.random() * 0.3 + 0.5,
          economicStability: Math.random() * 0.3 + 0.5,
          healthcareAccess: Math.random() * 0.3 + 0.5
        }
      }))
    },
    timestamp: new Date().toISOString()
  };
  return HttpResponse.json(mockData);
}),
// SDLC Deployment Metrics
http.get('*/api/sdlc/deployment', async () => {
  const mockData = {
    success: true,
    data: {
      deploymentFrequency: {
        value: 8.5,
        trend: 'increasing',
        unit: 'deployments/week'
      },
      leadTime: {
        value: 2.3,
        trend: 'stable',
        unit: 'days'
      },
      changeFailureRate: {
        value: 3.2,
        trend: 'decreasing',
        unit: 'percentage'
      },
      timeToRestore: {
        value: 45,
        trend: 'improving',
        unit: 'minutes'
      }
    }
  };
  return HttpResponse.json(mockData);
}),
// Price Prediction
http.post('*/api/food-resilience/predict', async ({
  request
}) => {
  const body = await request.json();
  const mockData = {
    success: true,
    product: body.product,
    predictedPrice: 4.8,
    confidence: 0.85,
    factors: [{
      name: 'seasonality',
      impact: 0.3
    }, {
      name: 'weather',
      impact: 0.2
    }, {
      name: 'supply',
      impact: 0.25
    }],
    timestamp: new Date().toISOString()
  };
  return HttpResponse.json(mockData);
}),
// SSE Stream Authentication
http.get('*/api/eternal-vigilance/stream', async ({
  request
}) => {
  const headers = request.headers;
  if (!headers.get('Cookie')?.includes('sse_token=')) {
    return new Response(null, {
      status: 401,
      statusText: 'Unauthorized'
    });
  }
  return new Response('data: {"event":"init","data":{"authenticated":true}}\n\n', {
    headers: {
      'Content-Type': 'text/event-stream',
      'Connection': 'keep-alive',
      'Cache-Control': 'no-cache'
    }
  });
}),
// Token Generation
http.post('*/api/eternal-vigilance/token', async () => {
  return HttpResponse.json({
    success: true,
    token: 'GEN-TOKEN',
    expiresAt: new Date(Date.now() + 3600000).toISOString()
  });
}),
// Demo Full State
http.get('*/api/demo/full-state', async () => {
  const mockData = {
    kpis: {
      riskIndex: 65,
      resilienceScore: 75,
      alertCount: 3
    },
    countries: [{
      code: 'COL',
      name: 'Colombia',
      risks: {
        food: 45,
        climate: 60,
        geopolitical: 55
      }
    }, {
      code: 'PER',
      name: 'Peru',
      risks: {
        food: 40,
        climate: 50,
        geopolitical: 45
      }
    }],
    timestamp: new Date().toISOString()
  };
  return HttpResponse.json(mockData);
}), http.get('*/api/prices/:product', ({
  params
}) => {
  const {
    product
  } = params;
  const productLower = product.toLowerCase();
  const mapping = {
    corn: {
      precio_actual: 3.1,
      unidad: 'PEN/kg',
      fecha: '2024-10-07',
      fuente: 'SIM MINAGRI'
    },
    beans: {
      precio_actual: 5.8,
      unidad: 'PEN/kg',
      fecha: '2024-10-07',
      fuente: 'SIM MINAGRI'
    }
  };
  const data = mapping[productLower] || {
    precio_actual: 3.0,
    unidad: 'PEN/kg',
    fecha: '2024-10-07',
    fuente: 'SIM MINAGRI'
  };
  return HttpResponse.json({
    product,
    region: 'Lima',
    priceData: {
      currentPrice: data.precio_actual,
      unit: data.unidad,
      date: data.fecha,
      source: data.fuente,
      averagePrice: data.precio_actual,
      maxPrice: Math.round(data.precio_actual * 1.2 * 100) / 100,
      minPrice: Math.round(data.precio_actual * 0.8 * 100) / 100,
      isMock: true
    }
  });
}),
// SIM history
http.get('https://sim.minagri.gob.pe/api/v1/precios/historico', ({
  request
}) => {
  const url = new URL(request.url);
  const product = url.searchParams.get('producto') || '';
  const productLower = product.toLowerCase();
  const base = {
    rice: 4.5,
    potatoes: 2.2,
    corn: 3.1,
    beans: 5.8
  }[productLower] || 3.0;
  // deterministic historic series (stable for tests)
  const precios = [];
  const fixedBase = base;
  const today = new Date('2025-10-10');
  for (let i = 5; i >= 0; i--) {
    const d = new Date(today);
    d.setDate(d.getDate() - i);
    precios.push({
      fecha: d.toISOString().split('T')[0],
      precio: Math.round((fixedBase + 0.05 * (i - 2)) * 100) / 100,
      volumen: 200 + i * 10
    });
  }
  return HttpResponse.json({
    precios,
    isMock: true
  });
}),
// SIM volatility
http.get('https://sim.minagri.gob.pe/api/v1/volatilidad', ({
  request
}) => {
  const url = new URL(request.url);
  const product = url.searchParams.get('producto') || '';
  const productLower = product.toLowerCase();
  const vols = {
    rice: {
      indice_volatilidad: 0.12,
      nivel_riesgo: 'medium'
    },
    potatoes: {
      indice_volatilidad: 0.18,
      nivel_riesgo: 'high'
    },
    corn: {
      indice_volatilidad: 0.15,
      nivel_riesgo: 'medium'
    },
    beans: {
      indice_volatilidad: 0.09,
      nivel_riesgo: 'low'
    }
  };
  const v = vols[productLower] || {
    indice_volatilidad: 0.15,
    nivel_riesgo: 'medium'
  };
  return HttpResponse.json({
    ...v,
    isMock: true
  });
}),
// World Bank generic indicator (array [meta, data])
http.get('https://api.worldbank.org/v2/country/:country/indicator/:indicator', ({
  params
}) => {
  const {
    country,
    indicator
  } = params;
  const data = [{
    page: 1,
    pages: 1,
    per_page: 50
  }, [{
    country: {
      id: country.toUpperCase(),
      value: 'MockCountry'
    },
    indicator: {
      id: indicator,
      value: indicator
    },
    date: '2023',
    value: 7.5
  }]];
  return HttpResponse.json({
    data,
    isMock: true
  });
}),
// World Bank food security data for service
http.get('https://api.worldbank.org/v2/country/:country/indicator/SN.ITK.DEFC.ZS', ({
  params
}) => {
  const {
    country
  } = params;
  // Return a structured data mapping expected by server handlers/tests
  const countries = ['ARG', 'COL', 'PER', 'BRA', 'CHL', 'ECU'];
  const data = {};
  countries.forEach(c => {
    data[c] = {
      country: c === 'ARG' ? 'Argentina' : c === 'COL' ? 'Colombia' : c === 'PER' ? 'Peru' : 'MockCountry',
      value: 5.0,
      year: '2024'
    };
  });
  return HttpResponse.json({
    countries,
    data,
    indicator: 'SN.ITK.DEFC.ZS',
    period: {
      startYear: '2020',
      endYear: '2024'
    },
    isMock: true
  });
}),
// CoinGecko markets list
http.get('https://api.coingecko.com/api/v3/coins/markets', ({
  request
}) => {
  const url = new URL(request.url);
  const ids = url.searchParams.get('ids') || 'bitcoin';
  const list = ids.split(',').map(id => ({
    id,
    symbol: id.slice(0, 3).toLowerCase(),
    current_price: id === 'bitcoin' ? 50000 : 2500,
    price_change_percentage_24h: id === 'bitcoin' ? -2.5 : 1.2
  }));
  return HttpResponse.json({
    list,
    isMock: true
  });
}),
// CoinGecko market chart (historical)
http.get('https://api.coingecko.com/api/v3/coins/:id/market_chart', () => {
  const prices = [[1609459200000, 50000], [1609545600000, 51000]];
  return HttpResponse.json({
    prices,
    isMock: true
  });
}),
// Open-Meteo minimal daily shape
http.get('https://api.open-meteo.com/v1/forecast', ({
  request
}) => {
  const url = new URL(request.url);
  const start = url.searchParams.get('start_date') || '2024-01-01';
  const end = url.searchParams.get('end_date') || '2024-01-02';
  const time = [start, end];
  const temperature_2m_max = [25, 26];
  const temperature_2m_min = [15, 14];
  return HttpResponse.json({
    daily: {
      time,
      temperature_2m_max,
      temperature_2m_min
    }
  });
}),
// GDELT
http.get('https://api.gdeltproject.org/api/v2/doc/doc', ({
  request
}) => {
  const url = new URL(request.url);
  const query = url.searchParams.get('query') || '';
  return HttpResponse.json({
    articles: [{
      title: 'Sample',
      url: 'https://example.com',
      date: '2024-10-07',
      tone: 2.5
    }],
    isMock: true,
    eventCount: 12,
    note: 'Mock data for testing'
  });
}),
// IMF minimal
http.get('https://www.imf.org/external/datamapper/api/v1/:path*', () => HttpResponse.json({
  values: {
    PER: {
      2023: 268.5
    }
  }
})),
// USGS earthquake
// USGS earthquake - provide 'place' field and deterministic time
http.get('https://earthquake.usgs.gov/fdsnws/event/1/query', () => HttpResponse.json({
  features: [{
    properties: {
      mag: 5.2,
      place: 'Test Location',
      time: new Date('2025-10-10T12:00:00.000Z').getTime(),
      tsunami: 0
    },
    geometry: {
      coordinates: [-75.0, -10.0, 10.0]
    }
  }],
  isMock: true
})),
// NASA imagery minimal
http.get('https://api.nasa.gov/planetary/earth/:path*', ({
  request
}) => {
  const url = new URL(request.url);
  const path = url.pathname;
  if (path.includes('imagery')) {
    return HttpResponse.json({
      imagery: {
        url: 'https://example.com/satellite-image.jpg',
        date: '2024-10-07'
      },
      isMock: true,
      ndviData: Array.from({
        length: 3
      }, (_, i) => ({
        date: `2024-01-0${i + 1}`,
        ndvi: Math.random()
      }))
    });
  }
  return HttpResponse.json({
    imagery: {
      url: 'https://example.com/satellite-image.jpg',
      date: '2024-10-07'
    }
  });
}),
// NASA POWER API for climate data (used by SatelliteIntegration)
http.get('https://power.larc.nasa.gov/api/temporal/daily/point', ({
  request
}) => {
  const url = new URL(request.url);
  const start = url.searchParams.get('start') || '20240101';
  const end = url.searchParams.get('end') || '20240102';
  const lat = url.searchParams.get('latitude') || '4.7110';
  const lon = url.searchParams.get('longitude') || '-74.0721';

  // Generate mock climate data
  const time = [];
  const temperature_2m_max = [];
  const temperature_2m_min = [];
  const precipitation_sum = [];
  const startDate = new Date(start.slice(0, 4), start.slice(4, 6) - 1, start.slice(6, 8));
  const endDate = new Date(end.slice(0, 4), end.slice(4, 6) - 1, end.slice(6, 8));
  for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
    time.push(d.toISOString().split('T')[0]);
    temperature_2m_max.push(25 + Math.random() * 10); // 25-35°C
    temperature_2m_min.push(15 + Math.random() * 10); // 15-25°C
    precipitation_sum.push(Math.random() * 20); // 0-20mm
  }
  return HttpResponse.json({
    properties: {
      parameter: {
        T2M_MAX: Object.fromEntries(temperature_2m_max.map((v, i) => [time[i].replace(/-/g, ''), v])),
        T2M_MIN: Object.fromEntries(temperature_2m_min.map((v, i) => [time[i].replace(/-/g, ''), v])),
        PRECTOTCORR: Object.fromEntries(precipitation_sum.map((v, i) => [time[i].replace(/-/g, ''), v]))
      }
    }
  });
}),
// USGS Earthquake API (detailed version for seismic routes)
http.get('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson', () => HttpResponse.json({
  type: 'FeatureCollection',
  features: [{
    type: 'Feature',
    properties: {
      mag: 5.2,
      place: '100km S of Lima, Peru',
      time: Date.now(),
      tsunami: 0,
      sig: 650,
      url: 'https://earthquake.usgs.gov/earthquakes/eventpage/test123'
    },
    geometry: {
      type: 'Point',
      coordinates: [-76.5, -12.0, 10.0]
    }
  }, {
    type: 'Feature',
    properties: {
      mag: 4.8,
      place: 'Offshore Colombia',
      time: Date.now() - 86400000,
      tsunami: 0,
      sig: 350,
      url: 'https://earthquake.usgs.gov/earthquakes/eventpage/test456'
    },
    geometry: {
      type: 'Point',
      coordinates: [-75.0, 4.0, 5.0]
    }
  }]
})),
// (moved) Generic API fallback for any unmatched requests is at the end of this file

// Local app endpoints are intentionally NOT mocked here so route handlers inside
// the app can be exercised directly by tests. External integrations remain mocked above.

// Internal app endpoints should be handled by the express app during tests.
// Keep external integration handlers above; do NOT mock internal routes here.

// Seismic activity (match any host/port)
// Seismic activity (match any host/port) - include 'place' for compatibility
http.get('*/api/seismic/activity', () => HttpResponse.json([{
  id: 'test1',
  magnitude: 5.2,
  place: 'Test Location',
  location: 'Test Location',
  riskScore: 0.8
}]), {
  status: 200
}),
// Seismic risk (match any host/port)
http.get('*/api/seismic/risk', () => HttpResponse.json({
  overallRisk: 0.5,
  eventCount: 1,
  maxMagnitude: 6.0,
  highRiskZones: []
})),
// Food resilience prices (match any host/port)
http.get('*/api/food-resilience/prices', () => HttpResponse.json({
  country: 'Peru',
  prices: [{
    product: 'rice',
    price: 4.5,
    volatility: 0.1
  }, {
    product: 'potatoes',
    price: 2.2,
    volatility: 0.15
  }, {
    product: 'corn',
    price: 3.1,
    volatility: 0.12
  }, {
    product: 'beans',
    price: 5.8,
    volatility: 0.08
  }],
  summary: {
    averageVolatility: 0.1125
  }
})),
// Food resilience supply chain (match any host/port)
http.get('*/api/food-resilience/supply-chain', () => HttpResponse.json({
  country: 'Peru',
  routes: [{
    origin: 'Lima',
    destination: 'Cusco',
    cost: 100,
    time: 5
  }, {
    origin: 'Cusco',
    destination: 'Arequipa',
    cost: 80,
    time: 3
  }, {
    origin: 'Arequipa',
    destination: 'Tacna',
    cost: 120,
    time: 4
  }, {
    origin: 'Tacna',
    destination: 'Puno',
    cost: 90,
    time: 6
  }],
  optimization: {
    recommendedRoutes: []
  }
})),
// Global risk food security (match any host/port)
http.get('*/api/global-risk/food-security', () => HttpResponse.json({
  success: true,
  source: 'Praevisio-Aion-Simulated-WorldBank',
  data: {
    countries: ['COL', 'PER', 'ARG', 'BRA', 'CHL', 'ECU']
  }
})),
// Global risk climate extremes (match any host/port)
http.get('*/api/global-risk/climate-extremes', () => HttpResponse.json({
  success: true,
  source: 'Praevisio-Aion-NASA-POWER-Integration',
  data: {
    extremes: []
  }
})),
// GDELT events (match any host/port)
http.get('*/api/gdelt/events', ({
  request
}) => {
  const url = new URL(request.url);
  const country = url.searchParams.get('country') || 'COL';
  const startDate = url.searchParams.get('startDate') || '2025-01-01';
  const endDate = url.searchParams.get('endDate') || '2025-01-02';
  return HttpResponse.json({
    country,
    articles: [{
      title: 'Test Article',
      url: 'https://example.com',
      date: startDate,
      tone: 2.5
    }]
  });
}),
// Eternal vigilance stream (SSE)
http.get('*/api/eternal-vigilance/stream', () => {
  return new HttpResponse('data: {"event":"init","data":{"indices":{"globalRisk":0.5}}}\n\n', {
    status: 200,
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive'
    }
  });
}),
// Eternal vigilance token (match any host/port)
http.post('*/api/eternal-vigilance/token', () => HttpResponse.json({
  token: 'temp-token-123'
})),
// Pricing plans (match any host/port)
http.get('*/api/pricing-plans', () => HttpResponse.json({
  currency: 'EUR',
  segments: {
    default: {
      plans: [{
        id: 'p1',
        name: 'Basic',
        price: 10
      }]
    }
  }
})),
// Pricing (match any host/port)
http.get('*/api/pricing', () => HttpResponse.json({
  currency: 'USD',
  segments: {
    default: {
      name: 'Default'
    }
  }
})),
// USGS significant day
http.get('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_day.geojson', () => HttpResponse.json({
  type: 'FeatureCollection',
  features: [{
    properties: {
      mag: 5.2,
      place: 'Test Location'
    },
    geometry: {
      coordinates: [-75.0, -10.0, 10.0]
    }
  }]
}))

// Generic API fallback for any unmatched requests (returns mock data)
, http.get('*', ({
  request
}) => {
  try {
    const u = new URL(request.url);
    const host = u.hostname;
    if (host === '127.0.0.1' || host === 'localhost' || host === '::1') {
      // do not mock requests to the local app - let them hit the real Express server
      return undefined;
    }
  } catch (e) {
    // if URL parsing fails, fall through to logging
  }
  console.log(`MSW: Unhandled external request to ${request.url}`);
  return HttpResponse.json({
    error: 'Mock not implemented',
    url: request.url
  });
})];
module.exports = {
  handlers
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodHRwIiwiSHR0cFJlc3BvbnNlIiwicmVxdWlyZSIsImdlbmVyYXRlTW9ja1RpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImdlbmVyYXRlTW9ja0lkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwiREVGQVVMVF9NT0NLUyIsInNvdXJjZSIsImVycm9yIiwidGltZXN0YW1wIiwiaGFuZGxlcnMiLCJnZXQiLCJyZXF1ZXN0IiwibW9ja0RhdGEiLCJldmVudHMiLCJpZCIsIm1hZ25pdHVkZSIsInBsYWNlIiwidGltZSIsIm5vdyIsImNvb3JkaW5hdGVzIiwidXJsIiwidHN1bmFtaSIsInNpZ25pZmljYW5jZSIsInN1bW1hcnkiLCJ0b3RhbEV2ZW50cyIsIm1heE1hZ25pdHVkZSIsImxhc3RVcGRhdGVkIiwiaXNNb2NrIiwibm90ZSIsImpzb24iLCJleHRyZW1lcyIsImNvdW50cnkiLCJjb3VudHJ5Q29kZSIsImF2Z01heFRlbXAiLCJhdmdNaW5UZW1wIiwiYXZnSHVtaWRpdHkiLCJ0b3RhbFByZWNpcGl0YXRpb24iLCJleHRyZW1lRXZlbnRzIiwicmlza0xldmVsIiwicGVyaW9kIiwiY291bnRyaWVzIiwiZGF0YSIsIkNPTCIsInZhbHVlIiwieWVhciIsIlBFUiIsIkFSRyIsImdsb2JhbEF2ZXJhZ2UiLCJzdWNjZXNzIiwibWFya2V0RGF0YSIsInByaWNlX2NoYW5nZV9wZXJjZW50YWdlXzI0aCIsImFuYWx5c2lzIiwidG90YWxDcnlwdG9zIiwiYXZlcmFnZVZvbGF0aWxpdHkiLCJyaXNrQXNzZXNzbWVudCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInNwbGl0IiwiaW5kaWNhdG9ycyIsInNvY2lhbENvaGVzaW9uIiwiaW5mcmFzdHJ1Y3R1cmVRdWFsaXR5IiwiZWNvbm9taWNTdGFiaWxpdHkiLCJoZWFsdGhjYXJlQWNjZXNzIiwibWFwIiwiY29kZSIsImRlcGxveW1lbnRGcmVxdWVuY3kiLCJ0cmVuZCIsInVuaXQiLCJsZWFkVGltZSIsImNoYW5nZUZhaWx1cmVSYXRlIiwidGltZVRvUmVzdG9yZSIsInBvc3QiLCJib2R5IiwicHJvZHVjdCIsInByZWRpY3RlZFByaWNlIiwiY29uZmlkZW5jZSIsImZhY3RvcnMiLCJuYW1lIiwiaW1wYWN0IiwiaGVhZGVycyIsImluY2x1ZGVzIiwiUmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwidG9rZW4iLCJleHBpcmVzQXQiLCJrcGlzIiwicmlza0luZGV4IiwicmVzaWxpZW5jZVNjb3JlIiwiYWxlcnRDb3VudCIsInJpc2tzIiwiZm9vZCIsImNsaW1hdGUiLCJnZW9wb2xpdGljYWwiLCJwYXJhbXMiLCJwcm9kdWN0TG93ZXIiLCJ0b0xvd2VyQ2FzZSIsIm1hcHBpbmciLCJjb3JuIiwicHJlY2lvX2FjdHVhbCIsInVuaWRhZCIsImZlY2hhIiwiZnVlbnRlIiwiYmVhbnMiLCJyZWdpb24iLCJwcmljZURhdGEiLCJjdXJyZW50UHJpY2UiLCJkYXRlIiwiYXZlcmFnZVByaWNlIiwibWF4UHJpY2UiLCJyb3VuZCIsIm1pblByaWNlIiwiYmFzZSIsInJpY2UiLCJwb3RhdG9lcyIsInByZWNpb3MiLCJmaXhlZEJhc2UiLCJ0b2RheSIsImkiLCJkIiwic2V0RGF0ZSIsImdldERhdGUiLCJwdXNoIiwicHJlY2lvIiwidm9sdW1lbiIsInZvbHMiLCJpbmRpY2Vfdm9sYXRpbGlkYWQiLCJuaXZlbF9yaWVzZ28iLCJ2IiwiaW5kaWNhdG9yIiwicGFnZSIsInBhZ2VzIiwicGVyX3BhZ2UiLCJ0b1VwcGVyQ2FzZSIsImZvckVhY2giLCJjIiwic3RhcnRZZWFyIiwiZW5kWWVhciIsImlkcyIsImxpc3QiLCJzeW1ib2wiLCJzbGljZSIsImN1cnJlbnRfcHJpY2UiLCJwcmljZXMiLCJzdGFydCIsImVuZCIsInRlbXBlcmF0dXJlXzJtX21heCIsInRlbXBlcmF0dXJlXzJtX21pbiIsImRhaWx5IiwicXVlcnkiLCJhcnRpY2xlcyIsInRpdGxlIiwidG9uZSIsImV2ZW50Q291bnQiLCJ2YWx1ZXMiLCJmZWF0dXJlcyIsInByb3BlcnRpZXMiLCJtYWciLCJnZXRUaW1lIiwiZ2VvbWV0cnkiLCJwYXRoIiwicGF0aG5hbWUiLCJpbWFnZXJ5IiwibmR2aURhdGEiLCJBcnJheSIsImZyb20iLCJsZW5ndGgiLCJfIiwibmR2aSIsImxhdCIsImxvbiIsInByZWNpcGl0YXRpb25fc3VtIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInBhcmFtZXRlciIsIlQyTV9NQVgiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsInJlcGxhY2UiLCJUMk1fTUlOIiwiUFJFQ1RPVENPUlIiLCJ0eXBlIiwic2lnIiwibG9jYXRpb24iLCJyaXNrU2NvcmUiLCJvdmVyYWxsUmlzayIsImhpZ2hSaXNrWm9uZXMiLCJwcmljZSIsInZvbGF0aWxpdHkiLCJyb3V0ZXMiLCJvcmlnaW4iLCJkZXN0aW5hdGlvbiIsImNvc3QiLCJvcHRpbWl6YXRpb24iLCJyZWNvbW1lbmRlZFJvdXRlcyIsImN1cnJlbmN5Iiwic2VnbWVudHMiLCJkZWZhdWx0IiwicGxhbnMiLCJ1IiwiaG9zdCIsImhvc3RuYW1lIiwidW5kZWZpbmVkIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaGFuZGxlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29tbW9uSlMgTVNXIGhhbmRsZXJzIC0gU2lzdGVtYSBkZSBtb2NrcyBvcHRpbWl6YWRvXG5jb25zdCB7IGh0dHAsIEh0dHBSZXNwb25zZSB9ID0gcmVxdWlyZSgnbXN3Jyk7XG5cbi8qKlxuICogU2lzdGVtYSBkZSBNb2NrcyBPcHRpbWl6YWRvXG4gKiAtIEhhbmRsZXJzIGRldGVybWluaXN0YXNcbiAqIC0gUmVzcHVlc3RhcyBjb25zaXN0ZW50ZXNcbiAqIC0gTWFuZWpvIGRlIGVycm9yZXMgcm9idXN0b1xuICovXG5cbi8vIFV0aWxpZGFkZXMgcGFyYSBtb2Nrc1xuY29uc3QgZ2VuZXJhdGVNb2NrVGltZXN0YW1wID0gKCkgPT4gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuY29uc3QgZ2VuZXJhdGVNb2NrSWQgPSAoKSA9PiBgbW9jay0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xuXG4vLyBNb2NrcyBwcmVkZWZpbmlkb3MgcGFyYSBzZXJ2aWNpb3NcbmNvbnN0IERFRkFVTFRfTU9DS1MgPSB7XG4gIC8vIFNlcnZpY2lvcyBleHRlcm5vc1xuICAnUGFuZGVtaWNzU2VydmljZSc6IHtcbiAgICBzb3VyY2U6ICdQYW5kZW1pY3NTZXJ2aWNlIC0gRXJyb3IgRmFsbGJhY2snLFxuICAgIGVycm9yOiAnU2VydmljZSB1bmF2YWlsYWJsZScsXG4gICAgdGltZXN0YW1wOiBnZW5lcmF0ZU1vY2tUaW1lc3RhbXAoKVxuICB9LFxuICAnR2VvcG9saXRpY2FsSW5zdGFiaWxpdHlTZXJ2aWNlJzoge1xuICAgIHNvdXJjZTogJ0dlb3BvbGl0aWNhbEluc3RhYmlsaXR5U2VydmljZSAtIEVycm9yIEZhbGxiYWNrJyxcbiAgICBlcnJvcjogJ1NlcnZpY2UgdW5hdmFpbGFibGUnLFxuICAgIHRpbWVzdGFtcDogZ2VuZXJhdGVNb2NrVGltZXN0YW1wKClcbiAgfSxcbiAgJ0Vjb25vbWljSW5zdGFiaWxpdHlTZXJ2aWNlJzoge1xuICAgIHNvdXJjZTogJ0Vjb25vbWljSW5zdGFiaWxpdHlTZXJ2aWNlIC0gRXJyb3IgRmFsbGJhY2snLFxuICAgIGVycm9yOiAnU2VydmljZSB1bmF2YWlsYWJsZScsXG4gICAgdGltZXN0YW1wOiBnZW5lcmF0ZU1vY2tUaW1lc3RhbXAoKVxuICB9LFxuICAnQ3liZXJzZWN1cml0eVNlcnZpY2UnOiB7XG4gICAgc291cmNlOiAnQ3liZXJzZWN1cml0eVNlcnZpY2UgLSBFcnJvciBGYWxsYmFjaycsXG4gICAgZXJyb3I6ICdTZXJ2aWNlIHVuYXZhaWxhYmxlJyxcbiAgICB0aW1lc3RhbXA6IGdlbmVyYXRlTW9ja1RpbWVzdGFtcCgpXG4gIH1cbn07XG4vLyBIYW5kbGVycyBvcHRpbWl6YWRvc1xuY29uc3QgaGFuZGxlcnMgPSBbXG4gIC8vIFVTR1MgU2Vpc21pYyBBY3Rpdml0eVxuICBodHRwLmdldCgnaHR0cHM6Ly9lYXJ0aHF1YWtlLnVzZ3MuZ292L2Zkc253cy9ldmVudC8xL3F1ZXJ5JywgYXN5bmMgKHsgcmVxdWVzdCB9KSA9PiB7XG4gICAgY29uc3QgbW9ja0RhdGEgPSB7XG4gICAgICBldmVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnbW9jay0xJyxcbiAgICAgICAgICBtYWduaXR1ZGU6IDQuNSxcbiAgICAgICAgICBwbGFjZTogJ01vY2sgU2Vpc21pYyBSZWdpb24gLSBUZXN0IExvY2F0aW9uJyxcbiAgICAgICAgICB0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgICAgIGNvb3JkaW5hdGVzOiBbLTc0LjI5NzMsIDQuNTcwOSwgMTBdLFxuICAgICAgICAgIHVybDogJ2h0dHBzOi8vZXhhbXBsZS5jb20vbW9jay1lYXJ0aHF1YWtlLTEnLFxuICAgICAgICAgIHRzdW5hbWk6IDAsXG4gICAgICAgICAgc2lnbmlmaWNhbmNlOiA1MFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdtb2NrLTInLFxuICAgICAgICAgIG1hZ25pdHVkZTogMy4yLFxuICAgICAgICAgIHBsYWNlOiAnQW5vdGhlciBNb2NrIExvY2F0aW9uJyxcbiAgICAgICAgICB0aW1lOiBEYXRlLm5vdygpIC0gMzYwMDAwMCxcbiAgICAgICAgICBjb29yZGluYXRlczogWy03NSwgLTEwLCAxNV0sXG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9tb2NrLWVhcnRocXVha2UtMicsXG4gICAgICAgICAgdHN1bmFtaTogMCxcbiAgICAgICAgICBzaWduaWZpY2FuY2U6IDI1XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBzdW1tYXJ5OiB7XG4gICAgICAgIHRvdGFsRXZlbnRzOiAyLFxuICAgICAgICBtYXhNYWduaXR1ZGU6IDQuNSxcbiAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgc291cmNlOiAnSGlnaC1GaWRlbGl0eSBNb2NrIERhdGEgLSBVU0dTIEFQSSBVbmF2YWlsYWJsZSdcbiAgICAgIH0sXG4gICAgICBpc01vY2s6IHRydWUsXG4gICAgICBub3RlOiAnUmVhbC10aW1lIHNlaXNtaWMgZGF0YSBzaW11bGF0aW9uIC0gQVBJIHVuYXZhaWxhYmxlJ1xuICAgIH07XG5cbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24obW9ja0RhdGEpO1xuICB9KSxcblxuICAvLyBDbGltYXRlIEV4dHJlbWVzXG4gIGh0dHAuZ2V0KCcqL2FwaS9jbGltYXRlLWV4dHJlbWVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tEYXRhID0ge1xuICAgICAgZXh0cmVtZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvdW50cnk6ICdDb2xvbWJpYScsXG4gICAgICAgICAgY291bnRyeUNvZGU6ICdDT0wnLFxuICAgICAgICAgIGF2Z01heFRlbXA6IDI4LjUsXG4gICAgICAgICAgYXZnTWluVGVtcDogMTguMixcbiAgICAgICAgICBhdmdIdW1pZGl0eTogNzUuMixcbiAgICAgICAgICB0b3RhbFByZWNpcGl0YXRpb246IDE1MC4zLFxuICAgICAgICAgIGV4dHJlbWVFdmVudHM6IDMsXG4gICAgICAgICAgcmlza0xldmVsOiAnbWVkaXVtJyxcbiAgICAgICAgICB0aW1lc3RhbXA6ICcyMDI1LTEwLTEwVDE4OjAwOjAwLjAwMFonLFxuICAgICAgICAgIHBlcmlvZDogJ0xhc3QgMzAgZGF5cydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNvdW50cnk6ICdQZXJ1JyxcbiAgICAgICAgICBjb3VudHJ5Q29kZTogJ1BFUicsXG4gICAgICAgICAgYXZnTWF4VGVtcDogMjUuOCxcbiAgICAgICAgICBhdmdNaW5UZW1wOiAxNS42LFxuICAgICAgICAgIGF2Z0h1bWlkaXR5OiA2OC45LFxuICAgICAgICAgIHRvdGFsUHJlY2lwaXRhdGlvbjogODUuNyxcbiAgICAgICAgICBleHRyZW1lRXZlbnRzOiAyLFxuICAgICAgICAgIHJpc2tMZXZlbDogJ2xvdycsXG4gICAgICAgICAgdGltZXN0YW1wOiAnMjAyNS0xMC0xMFQxODowMDowMC4wMDBaJyxcbiAgICAgICAgICBwZXJpb2Q6ICdMYXN0IDMwIGRheXMnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKG1vY2tEYXRhKTtcbiAgfSksXG5cbiAgLy8gRm9vZCBTZWN1cml0eVxuICBodHRwLmdldCgnKi9hcGkvZ2xvYmFsLXJpc2svZm9vZC1zZWN1cml0eScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrRGF0YSA9IHtcbiAgICAgIGNvdW50cmllczogWydDT0wnLCAnUEVSJywgJ0FSRyddLFxuICAgICAgZGF0YToge1xuICAgICAgICBDT0w6IHtcbiAgICAgICAgICBjb3VudHJ5OiAnQ29sb21iaWEnLFxuICAgICAgICAgIHZhbHVlOiA1LjIsXG4gICAgICAgICAgeWVhcjogJzIwMjQnXG4gICAgICAgIH0sXG4gICAgICAgIFBFUjoge1xuICAgICAgICAgIGNvdW50cnk6ICdQZXJ1JyxcbiAgICAgICAgICB2YWx1ZTogNy4xLFxuICAgICAgICAgIHllYXI6ICcyMDI0J1xuICAgICAgICB9LFxuICAgICAgICBBUkc6IHtcbiAgICAgICAgICBjb3VudHJ5OiAnQXJnZW50aW5hJyxcbiAgICAgICAgICB2YWx1ZTogNC44LFxuICAgICAgICAgIHllYXI6ICcyMDI0J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2xvYmFsQXZlcmFnZTogNS43LFxuICAgICAgc291cmNlOiAnV29ybGQgQmFuayBBUEkgLSBTTi5JVEsuREVGQy5aUycsXG4gICAgICB5ZWFyOiAyMDI0XG4gICAgfTtcblxuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbihtb2NrRGF0YSk7XG4gIH0pLFxuXG4gIC8vIENyeXB0byBWb2xhdGlsaXR5XG4gIGh0dHAuZ2V0KCcqL2FwaS9nbG9iYWwtcmlzay9jcnlwdG8tdm9sYXRpbGl0eScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrRGF0YSA9IHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHZhbHVlOiA0NSxcbiAgICAgICAgbWFya2V0RGF0YTogW1xuICAgICAgICAgIHsgaWQ6ICdiaXRjb2luJywgcHJpY2VfY2hhbmdlX3BlcmNlbnRhZ2VfMjRoOiAtMi41IH0sXG4gICAgICAgICAgeyBpZDogJ2V0aGVyZXVtJywgcHJpY2VfY2hhbmdlX3BlcmNlbnRhZ2VfMjRoOiAxLjIgfVxuICAgICAgICBdLFxuICAgICAgICBhbmFseXNpczoge1xuICAgICAgICAgIHRvdGFsQ3J5cHRvczogMixcbiAgICAgICAgICBhdmVyYWdlVm9sYXRpbGl0eTogMS44NSxcbiAgICAgICAgICByaXNrQXNzZXNzbWVudDogJ01vZGVyYXRlJ1xuICAgICAgICB9LFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSxcbiAgICAgIHNvdXJjZTogJ0NyeXB0b1NlcnZpY2UnLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9O1xuXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKG1vY2tEYXRhKTtcbiAgfSksXG5cbiAgLy8gQ29tbXVuaXR5IFJlc2lsaWVuY2VcbiAgaHR0cC5nZXQoJyovYXBpL2dsb2JhbC1yaXNrL2NvbW11bml0eS1yZXNpbGllbmNlJywgYXN5bmMgKHsgcmVxdWVzdCB9KSA9PiB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgY29uc3QgY291bnRyaWVzID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2NvdW50cmllcycpPy5zcGxpdCgnLCcpIHx8IFsnQ09MJ107XG5cbiAgICBjb25zdCBtb2NrRGF0YSA9IHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHZhbHVlOiAzMCxcbiAgICAgICAgaW5kaWNhdG9yczoge1xuICAgICAgICAgIHNvY2lhbENvaGVzaW9uOiAwLjc1LFxuICAgICAgICAgIGluZnJhc3RydWN0dXJlUXVhbGl0eTogMC42NSxcbiAgICAgICAgICBlY29ub21pY1N0YWJpbGl0eTogMC43MCxcbiAgICAgICAgICBoZWFsdGhjYXJlQWNjZXNzOiAwLjgwXG4gICAgICAgIH0sXG4gICAgICAgIGNvdW50cmllczogY291bnRyaWVzLm1hcChjb2RlID0+ICh7XG4gICAgICAgICAgY29kZSxcbiAgICAgICAgICBpbmRpY2F0b3JzOiB7XG4gICAgICAgICAgICBzb2NpYWxDb2hlc2lvbjogTWF0aC5yYW5kb20oKSAqIDAuMyArIDAuNSxcbiAgICAgICAgICAgIGluZnJhc3RydWN0dXJlUXVhbGl0eTogTWF0aC5yYW5kb20oKSAqIDAuMyArIDAuNSxcbiAgICAgICAgICAgIGVjb25vbWljU3RhYmlsaXR5OiBNYXRoLnJhbmRvbSgpICogMC4zICsgMC41LFxuICAgICAgICAgICAgaGVhbHRoY2FyZUFjY2VzczogTWF0aC5yYW5kb20oKSAqIDAuMyArIDAuNVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpXG4gICAgICB9LFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9O1xuXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKG1vY2tEYXRhKTtcbiAgfSksXG5cbiAgLy8gU0RMQyBEZXBsb3ltZW50IE1ldHJpY3NcbiAgaHR0cC5nZXQoJyovYXBpL3NkbGMvZGVwbG95bWVudCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrRGF0YSA9IHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGRlcGxveW1lbnRGcmVxdWVuY3k6IHtcbiAgICAgICAgICB2YWx1ZTogOC41LFxuICAgICAgICAgIHRyZW5kOiAnaW5jcmVhc2luZycsXG4gICAgICAgICAgdW5pdDogJ2RlcGxveW1lbnRzL3dlZWsnXG4gICAgICAgIH0sXG4gICAgICAgIGxlYWRUaW1lOiB7XG4gICAgICAgICAgdmFsdWU6IDIuMyxcbiAgICAgICAgICB0cmVuZDogJ3N0YWJsZScsXG4gICAgICAgICAgdW5pdDogJ2RheXMnXG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZUZhaWx1cmVSYXRlOiB7XG4gICAgICAgICAgdmFsdWU6IDMuMixcbiAgICAgICAgICB0cmVuZDogJ2RlY3JlYXNpbmcnLFxuICAgICAgICAgIHVuaXQ6ICdwZXJjZW50YWdlJ1xuICAgICAgICB9LFxuICAgICAgICB0aW1lVG9SZXN0b3JlOiB7XG4gICAgICAgICAgdmFsdWU6IDQ1LFxuICAgICAgICAgIHRyZW5kOiAnaW1wcm92aW5nJyxcbiAgICAgICAgICB1bml0OiAnbWludXRlcydcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24obW9ja0RhdGEpO1xuICB9KSxcblxuICAvLyBQcmljZSBQcmVkaWN0aW9uXG4gIGh0dHAucG9zdCgnKi9hcGkvZm9vZC1yZXNpbGllbmNlL3ByZWRpY3QnLCBhc3luYyAoeyByZXF1ZXN0IH0pID0+IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG5cbiAgICBjb25zdCBtb2NrRGF0YSA9IHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBwcm9kdWN0OiBib2R5LnByb2R1Y3QsXG4gICAgICBwcmVkaWN0ZWRQcmljZTogNC44LFxuICAgICAgY29uZmlkZW5jZTogMC44NSxcbiAgICAgIGZhY3RvcnM6IFtcbiAgICAgICAgeyBuYW1lOiAnc2Vhc29uYWxpdHknLCBpbXBhY3Q6IDAuMyB9LFxuICAgICAgICB7IG5hbWU6ICd3ZWF0aGVyJywgaW1wYWN0OiAwLjIgfSxcbiAgICAgICAgeyBuYW1lOiAnc3VwcGx5JywgaW1wYWN0OiAwLjI1IH1cbiAgICAgIF0sXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG5cbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24obW9ja0RhdGEpO1xuICB9KSxcblxuICAvLyBTU0UgU3RyZWFtIEF1dGhlbnRpY2F0aW9uXG4gIGh0dHAuZ2V0KCcqL2FwaS9ldGVybmFsLXZpZ2lsYW5jZS9zdHJlYW0nLCBhc3luYyAoeyByZXF1ZXN0IH0pID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gcmVxdWVzdC5oZWFkZXJzO1xuICAgIGlmICghaGVhZGVycy5nZXQoJ0Nvb2tpZScpPy5pbmNsdWRlcygnc3NlX3Rva2VuPScpKSB7XG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDEsXG4gICAgICAgIHN0YXR1c1RleHQ6ICdVbmF1dGhvcml6ZWQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFxuICAgICAgJ2RhdGE6IHtcImV2ZW50XCI6XCJpbml0XCIsXCJkYXRhXCI6e1wiYXV0aGVudGljYXRlZFwiOnRydWV9fVxcblxcbicsXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvZXZlbnQtc3RyZWFtJyxcbiAgICAgICAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJyxcbiAgICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH0pLFxuXG4gIC8vIFRva2VuIEdlbmVyYXRpb25cbiAgaHR0cC5wb3N0KCcqL2FwaS9ldGVybmFsLXZpZ2lsYW5jZS90b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHRva2VuOiAnR0VOLVRPS0VOJyxcbiAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoRGF0ZS5ub3coKSArIDM2MDAwMDApLnRvSVNPU3RyaW5nKClcbiAgICB9KTtcbiAgfSksXG5cbiAgLy8gRGVtbyBGdWxsIFN0YXRlXG4gIGh0dHAuZ2V0KCcqL2FwaS9kZW1vL2Z1bGwtc3RhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0RhdGEgPSB7XG4gICAgICBrcGlzOiB7XG4gICAgICAgIHJpc2tJbmRleDogNjUsXG4gICAgICAgIHJlc2lsaWVuY2VTY29yZTogNzUsXG4gICAgICAgIGFsZXJ0Q291bnQ6IDNcbiAgICAgIH0sXG4gICAgICBjb3VudHJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6ICdDT0wnLFxuICAgICAgICAgIG5hbWU6ICdDb2xvbWJpYScsXG4gICAgICAgICAgcmlza3M6IHtcbiAgICAgICAgICAgIGZvb2Q6IDQ1LFxuICAgICAgICAgICAgY2xpbWF0ZTogNjAsXG4gICAgICAgICAgICBnZW9wb2xpdGljYWw6IDU1XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgY29kZTogJ1BFUicsXG4gICAgICAgICAgbmFtZTogJ1BlcnUnLFxuICAgICAgICAgIHJpc2tzOiB7XG4gICAgICAgICAgICBmb29kOiA0MCxcbiAgICAgICAgICAgIGNsaW1hdGU6IDUwLFxuICAgICAgICAgICAgZ2VvcG9saXRpY2FsOiA0NVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfTtcblxuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbihtb2NrRGF0YSk7XG4gIH0pLFxuXG4gIGh0dHAuZ2V0KCcqL2FwaS9wcmljZXMvOnByb2R1Y3QnLCAoeyBwYXJhbXMgfSkgPT4ge1xuICAgIGNvbnN0IHsgcHJvZHVjdCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHByb2R1Y3RMb3dlciA9IHByb2R1Y3QudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBtYXBwaW5nID0ge1xuICAgICAgY29ybjogeyBwcmVjaW9fYWN0dWFsOiAzLjEsIHVuaWRhZDogJ1BFTi9rZycsIGZlY2hhOiAnMjAyNC0xMC0wNycsIGZ1ZW50ZTogJ1NJTSBNSU5BR1JJJyB9LFxuICAgICAgYmVhbnM6IHsgcHJlY2lvX2FjdHVhbDogNS44LCB1bmlkYWQ6ICdQRU4va2cnLCBmZWNoYTogJzIwMjQtMTAtMDcnLCBmdWVudGU6ICdTSU0gTUlOQUdSSScgfVxuICAgIH07XG4gICAgY29uc3QgZGF0YSA9IG1hcHBpbmdbcHJvZHVjdExvd2VyXSB8fCB7IHByZWNpb19hY3R1YWw6IDMuMCwgdW5pZGFkOiAnUEVOL2tnJywgZmVjaGE6ICcyMDI0LTEwLTA3JywgZnVlbnRlOiAnU0lNIE1JTkFHUkknIH07XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIHByb2R1Y3QsXG4gICAgICByZWdpb246ICdMaW1hJyxcbiAgICAgIHByaWNlRGF0YToge1xuICAgICAgICBjdXJyZW50UHJpY2U6IGRhdGEucHJlY2lvX2FjdHVhbCxcbiAgICAgICAgICB1bml0OiBkYXRhLnVuaWRhZCxcbiAgICAgICAgICBkYXRlOiBkYXRhLmZlY2hhLFxuICAgICAgICAgIHNvdXJjZTogZGF0YS5mdWVudGUsXG4gICAgICAgICAgYXZlcmFnZVByaWNlOiBkYXRhLnByZWNpb19hY3R1YWwsXG4gICAgICAgICAgbWF4UHJpY2U6IE1hdGgucm91bmQoZGF0YS5wcmVjaW9fYWN0dWFsICogMS4yICogMTAwKSAvIDEwMCxcbiAgICAgICAgICBtaW5QcmljZTogTWF0aC5yb3VuZChkYXRhLnByZWNpb19hY3R1YWwgKiAwLjggKiAxMDApIC8gMTAwLFxuICAgICAgICAgIGlzTW9jazogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSxcblxuICAvLyBTSU0gaGlzdG9yeVxuICAgIGh0dHAuZ2V0KCdodHRwczovL3NpbS5taW5hZ3JpLmdvYi5wZS9hcGkvdjEvcHJlY2lvcy9oaXN0b3JpY28nLCAoeyByZXF1ZXN0IH0pID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgY29uc3QgcHJvZHVjdCA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdwcm9kdWN0bycpIHx8ICcnO1xuICAgICAgY29uc3QgcHJvZHVjdExvd2VyID0gcHJvZHVjdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3QgYmFzZSA9IHsgcmljZTogNC41LCBwb3RhdG9lczogMi4yLCBjb3JuOiAzLjEsIGJlYW5zOiA1LjggfVtwcm9kdWN0TG93ZXJdIHx8IDMuMDtcbiAgICAgIC8vIGRldGVybWluaXN0aWMgaGlzdG9yaWMgc2VyaWVzIChzdGFibGUgZm9yIHRlc3RzKVxuICAgICAgY29uc3QgcHJlY2lvcyA9IFtdO1xuICAgICAgY29uc3QgZml4ZWRCYXNlID0gYmFzZTtcbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoJzIwMjUtMTAtMTAnKTtcbiAgICAgIGZvciAobGV0IGkgPSA1OyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBkID0gbmV3IERhdGUodG9kYXkpO1xuICAgICAgICBkLnNldERhdGUoZC5nZXREYXRlKCkgLSBpKTtcbiAgICAgICAgcHJlY2lvcy5wdXNoKHsgZmVjaGE6IGQudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdLCBwcmVjaW86IE1hdGgucm91bmQoKGZpeGVkQmFzZSArIDAuMDUgKiAoaSAtIDIpKSAqIDEwMCkgLyAxMDAsIHZvbHVtZW46IDIwMCArIGkgKiAxMCB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7IHByZWNpb3MsIGlzTW9jazogdHJ1ZSB9KTtcbiAgICB9KSxcblxuICAvLyBTSU0gdm9sYXRpbGl0eVxuICAgIGh0dHAuZ2V0KCdodHRwczovL3NpbS5taW5hZ3JpLmdvYi5wZS9hcGkvdjEvdm9sYXRpbGlkYWQnLCAoeyByZXF1ZXN0IH0pID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgY29uc3QgcHJvZHVjdCA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdwcm9kdWN0bycpIHx8ICcnO1xuICAgICAgY29uc3QgcHJvZHVjdExvd2VyID0gcHJvZHVjdC50b0xvd2VyQ2FzZSgpO1xuICAgICBjb25zdCB2b2xzID0geyByaWNlOiB7IGluZGljZV92b2xhdGlsaWRhZDogMC4xMiwgbml2ZWxfcmllc2dvOiAnbWVkaXVtJyB9LCBwb3RhdG9lczogeyBpbmRpY2Vfdm9sYXRpbGlkYWQ6IDAuMTgsIG5pdmVsX3JpZXNnbzogJ2hpZ2gnIH0sIGNvcm46IHsgaW5kaWNlX3ZvbGF0aWxpZGFkOiAwLjE1LCBuaXZlbF9yaWVzZ286ICdtZWRpdW0nIH0sIGJlYW5zOiB7IGluZGljZV92b2xhdGlsaWRhZDogMC4wOSwgbml2ZWxfcmllc2dvOiAnbG93JyB9IH07XG4gICAgIGNvbnN0IHYgPSB2b2xzW3Byb2R1Y3RMb3dlcl0gfHwgeyBpbmRpY2Vfdm9sYXRpbGlkYWQ6IDAuMTUsIG5pdmVsX3JpZXNnbzogJ21lZGl1bScgfTtcbiAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHsgLi4udiwgaXNNb2NrOiB0cnVlIH0pO1xuICAgIH0pLFxuXG4gIC8vIFdvcmxkIEJhbmsgZ2VuZXJpYyBpbmRpY2F0b3IgKGFycmF5IFttZXRhLCBkYXRhXSlcbiAgaHR0cC5nZXQoJ2h0dHBzOi8vYXBpLndvcmxkYmFuay5vcmcvdjIvY291bnRyeS86Y291bnRyeS9pbmRpY2F0b3IvOmluZGljYXRvcicsICh7IHBhcmFtcyB9KSA9PiB7XG4gICAgY29uc3QgeyBjb3VudHJ5LCBpbmRpY2F0b3IgfSA9IHBhcmFtcztcbiAgICBjb25zdCBkYXRhID0gWyB7IHBhZ2U6IDEsIHBhZ2VzOiAxLCBwZXJfcGFnZTogNTAgfSwgWyB7IGNvdW50cnk6IHsgaWQ6IGNvdW50cnkudG9VcHBlckNhc2UoKSwgdmFsdWU6ICdNb2NrQ291bnRyeScgfSwgaW5kaWNhdG9yOiB7IGlkOiBpbmRpY2F0b3IsIHZhbHVlOiBpbmRpY2F0b3IgfSwgZGF0ZTogJzIwMjMnLCB2YWx1ZTogNy41IH0gXSBdO1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7IGRhdGEsIGlzTW9jazogdHJ1ZSB9KTtcbiAgfSksXG5cbiAgLy8gV29ybGQgQmFuayBmb29kIHNlY3VyaXR5IGRhdGEgZm9yIHNlcnZpY2VcbiAgaHR0cC5nZXQoJ2h0dHBzOi8vYXBpLndvcmxkYmFuay5vcmcvdjIvY291bnRyeS86Y291bnRyeS9pbmRpY2F0b3IvU04uSVRLLkRFRkMuWlMnLCAoeyBwYXJhbXMgfSkgPT4ge1xuICAgIGNvbnN0IHsgY291bnRyeSB9ID0gcGFyYW1zO1xuICAgIC8vIFJldHVybiBhIHN0cnVjdHVyZWQgZGF0YSBtYXBwaW5nIGV4cGVjdGVkIGJ5IHNlcnZlciBoYW5kbGVycy90ZXN0c1xuICAgIGNvbnN0IGNvdW50cmllcyA9IFsnQVJHJywgJ0NPTCcsICdQRVInLCAnQlJBJywgJ0NITCcsICdFQ1UnXTtcbiAgICBjb25zdCBkYXRhID0ge307XG4gICAgY291bnRyaWVzLmZvckVhY2goKGMpID0+IHtcbiAgICAgIGRhdGFbY10gPSB7IGNvdW50cnk6IGMgPT09ICdBUkcnID8gJ0FyZ2VudGluYScgOiBjID09PSAnQ09MJyA/ICdDb2xvbWJpYScgOiBjID09PSAnUEVSJyA/ICdQZXJ1JyA6ICdNb2NrQ291bnRyeScsIHZhbHVlOiA1LjAsIHllYXI6ICcyMDI0JyB9O1xuICAgIH0pO1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7IGNvdW50cmllcywgZGF0YSwgaW5kaWNhdG9yOiAnU04uSVRLLkRFRkMuWlMnLCBwZXJpb2Q6IHsgc3RhcnRZZWFyOiAnMjAyMCcsIGVuZFllYXI6ICcyMDI0JyB9LCBpc01vY2s6IHRydWUgfSk7XG4gIH0pLFxuXG5cbiAgLy8gQ29pbkdlY2tvIG1hcmtldHMgbGlzdFxuICBodHRwLmdldCgnaHR0cHM6Ly9hcGkuY29pbmdlY2tvLmNvbS9hcGkvdjMvY29pbnMvbWFya2V0cycsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGNvbnN0IGlkcyA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdpZHMnKSB8fCAnYml0Y29pbic7XG4gICAgY29uc3QgbGlzdCA9IGlkcy5zcGxpdCgnLCcpLm1hcCgoaWQpID0+ICh7IGlkLCBzeW1ib2w6IGlkLnNsaWNlKDAsIDMpLnRvTG93ZXJDYXNlKCksIGN1cnJlbnRfcHJpY2U6IGlkID09PSAnYml0Y29pbicgPyA1MDAwMCA6IDI1MDAsIHByaWNlX2NoYW5nZV9wZXJjZW50YWdlXzI0aDogaWQgPT09ICdiaXRjb2luJyA/IC0yLjUgOiAxLjIgfSkpO1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7IGxpc3QsIGlzTW9jazogdHJ1ZSB9KTtcbiAgfSksXG5cbiAgLy8gQ29pbkdlY2tvIG1hcmtldCBjaGFydCAoaGlzdG9yaWNhbClcbiAgaHR0cC5nZXQoJ2h0dHBzOi8vYXBpLmNvaW5nZWNrby5jb20vYXBpL3YzL2NvaW5zLzppZC9tYXJrZXRfY2hhcnQnLCAoKSA9PiB7XG4gICAgY29uc3QgcHJpY2VzID0gW1sxNjA5NDU5MjAwMDAwLCA1MDAwMF0sIFsxNjA5NTQ1NjAwMDAwLCA1MTAwMF1dO1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7IHByaWNlcywgaXNNb2NrOiB0cnVlIH0pO1xuICB9KSxcblxuICAvLyBPcGVuLU1ldGVvIG1pbmltYWwgZGFpbHkgc2hhcGVcbiAgaHR0cC5nZXQoJ2h0dHBzOi8vYXBpLm9wZW4tbWV0ZW8uY29tL3YxL2ZvcmVjYXN0JywgKHsgcmVxdWVzdCB9KSA9PiB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgY29uc3Qgc3RhcnQgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnc3RhcnRfZGF0ZScpIHx8ICcyMDI0LTAxLTAxJztcbiAgICBjb25zdCBlbmQgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnZW5kX2RhdGUnKSB8fCAnMjAyNC0wMS0wMic7XG4gICAgY29uc3QgdGltZSA9IFtzdGFydCwgZW5kXTtcbiAgICBjb25zdCB0ZW1wZXJhdHVyZV8ybV9tYXggPSBbMjUsIDI2XTtcbiAgICBjb25zdCB0ZW1wZXJhdHVyZV8ybV9taW4gPSBbMTUsIDE0XTtcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oeyBkYWlseTogeyB0aW1lLCB0ZW1wZXJhdHVyZV8ybV9tYXgsIHRlbXBlcmF0dXJlXzJtX21pbiB9IH0pO1xuICB9KSxcblxuICAvLyBHREVMVFxuICBodHRwLmdldCgnaHR0cHM6Ly9hcGkuZ2RlbHRwcm9qZWN0Lm9yZy9hcGkvdjIvZG9jL2RvYycsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3F1ZXJ5JykgfHwgJyc7XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIGFydGljbGVzOiBbeyB0aXRsZTogJ1NhbXBsZScsIHVybDogJ2h0dHBzOi8vZXhhbXBsZS5jb20nLCBkYXRlOiAnMjAyNC0xMC0wNycsIHRvbmU6IDIuNSB9XSxcbiAgICAgIGlzTW9jazogdHJ1ZSxcbiAgICAgIGV2ZW50Q291bnQ6IDEyLFxuICAgICAgbm90ZTogJ01vY2sgZGF0YSBmb3IgdGVzdGluZydcbiAgICB9KTtcbiAgfSksXG5cbiAgLy8gSU1GIG1pbmltYWxcbiAgaHR0cC5nZXQoJ2h0dHBzOi8vd3d3LmltZi5vcmcvZXh0ZXJuYWwvZGF0YW1hcHBlci9hcGkvdjEvOnBhdGgqJywgKCkgPT4gSHR0cFJlc3BvbnNlLmpzb24oeyB2YWx1ZXM6IHsgUEVSOiB7IDIwMjM6IDI2OC41IH0gfSB9KSksXG5cbiAgLy8gVVNHUyBlYXJ0aHF1YWtlXG4gIC8vIFVTR1MgZWFydGhxdWFrZSAtIHByb3ZpZGUgJ3BsYWNlJyBmaWVsZCBhbmQgZGV0ZXJtaW5pc3RpYyB0aW1lXG4gIGh0dHAuZ2V0KCdodHRwczovL2VhcnRocXVha2UudXNncy5nb3YvZmRzbndzL2V2ZW50LzEvcXVlcnknLCAoKSA9PiBIdHRwUmVzcG9uc2UuanNvbih7IGZlYXR1cmVzOiBbeyBwcm9wZXJ0aWVzOiB7IG1hZzogNS4yLCBwbGFjZTogJ1Rlc3QgTG9jYXRpb24nLCB0aW1lOiBuZXcgRGF0ZSgnMjAyNS0xMC0xMFQxMjowMDowMC4wMDBaJykuZ2V0VGltZSgpLCB0c3VuYW1pOiAwIH0sIGdlb21ldHJ5OiB7IGNvb3JkaW5hdGVzOiBbLTc1LjAsIC0xMC4wLCAxMC4wXSB9IH1dICwgaXNNb2NrOiB0cnVlIH0pKSxcblxuICAvLyBOQVNBIGltYWdlcnkgbWluaW1hbFxuICBodHRwLmdldCgnaHR0cHM6Ly9hcGkubmFzYS5nb3YvcGxhbmV0YXJ5L2VhcnRoLzpwYXRoKicsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGNvbnN0IHBhdGggPSB1cmwucGF0aG5hbWU7XG4gICAgaWYgKHBhdGguaW5jbHVkZXMoJ2ltYWdlcnknKSkge1xuICAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgICAgaW1hZ2VyeTogeyB1cmw6ICdodHRwczovL2V4YW1wbGUuY29tL3NhdGVsbGl0ZS1pbWFnZS5qcGcnLCBkYXRlOiAnMjAyNC0xMC0wNycgfSxcbiAgICAgICAgaXNNb2NrOiB0cnVlLFxuICAgICAgICBuZHZpRGF0YTogQXJyYXkuZnJvbSh7IGxlbmd0aDogMyB9LCAoXywgaSkgPT4gKHsgZGF0ZTogYDIwMjQtMDEtMCR7aSArIDF9YCwgbmR2aTogTWF0aC5yYW5kb20oKSB9KSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oeyBpbWFnZXJ5OiB7IHVybDogJ2h0dHBzOi8vZXhhbXBsZS5jb20vc2F0ZWxsaXRlLWltYWdlLmpwZycsIGRhdGU6ICcyMDI0LTEwLTA3JyB9IH0pO1xuICB9KSxcblxuICAvLyBOQVNBIFBPV0VSIEFQSSBmb3IgY2xpbWF0ZSBkYXRhICh1c2VkIGJ5IFNhdGVsbGl0ZUludGVncmF0aW9uKVxuICBodHRwLmdldCgnaHR0cHM6Ly9wb3dlci5sYXJjLm5hc2EuZ292L2FwaS90ZW1wb3JhbC9kYWlseS9wb2ludCcsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGNvbnN0IHN0YXJ0ID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3N0YXJ0JykgfHwgJzIwMjQwMTAxJztcbiAgICBjb25zdCBlbmQgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnZW5kJykgfHwgJzIwMjQwMTAyJztcbiAgICBjb25zdCBsYXQgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnbGF0aXR1ZGUnKSB8fCAnNC43MTEwJztcbiAgICBjb25zdCBsb24gPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnbG9uZ2l0dWRlJykgfHwgJy03NC4wNzIxJztcblxuICAgIC8vIEdlbmVyYXRlIG1vY2sgY2xpbWF0ZSBkYXRhXG4gICAgY29uc3QgdGltZSA9IFtdO1xuICAgIGNvbnN0IHRlbXBlcmF0dXJlXzJtX21heCA9IFtdO1xuICAgIGNvbnN0IHRlbXBlcmF0dXJlXzJtX21pbiA9IFtdO1xuICAgIGNvbnN0IHByZWNpcGl0YXRpb25fc3VtID0gW107XG5cbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZShzdGFydC5zbGljZSgwLDQpLCBzdGFydC5zbGljZSg0LDYpLTEsIHN0YXJ0LnNsaWNlKDYsOCkpO1xuICAgIGNvbnN0IGVuZERhdGUgPSBuZXcgRGF0ZShlbmQuc2xpY2UoMCw0KSwgZW5kLnNsaWNlKDQsNiktMSwgZW5kLnNsaWNlKDYsOCkpO1xuXG4gICAgZm9yIChsZXQgZCA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSk7IGQgPD0gZW5kRGF0ZTsgZC5zZXREYXRlKGQuZ2V0RGF0ZSgpICsgMSkpIHtcbiAgICAgIHRpbWUucHVzaChkLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXSk7XG4gICAgICB0ZW1wZXJhdHVyZV8ybV9tYXgucHVzaCgyNSArIE1hdGgucmFuZG9tKCkgKiAxMCk7IC8vIDI1LTM1wrBDXG4gICAgICB0ZW1wZXJhdHVyZV8ybV9taW4ucHVzaCgxNSArIE1hdGgucmFuZG9tKCkgKiAxMCk7IC8vIDE1LTI1wrBDXG4gICAgICBwcmVjaXBpdGF0aW9uX3N1bS5wdXNoKE1hdGgucmFuZG9tKCkgKiAyMCk7IC8vIDAtMjBtbVxuICAgIH1cblxuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHBhcmFtZXRlcjoge1xuICAgICAgICAgIFQyTV9NQVg6IE9iamVjdC5mcm9tRW50cmllcyh0ZW1wZXJhdHVyZV8ybV9tYXgubWFwKCh2LCBpKSA9PiBbdGltZVtpXS5yZXBsYWNlKC8tL2csICcnKSwgdl0pKSxcbiAgICAgICAgICBUMk1fTUlOOiBPYmplY3QuZnJvbUVudHJpZXModGVtcGVyYXR1cmVfMm1fbWluLm1hcCgodiwgaSkgPT4gW3RpbWVbaV0ucmVwbGFjZSgvLS9nLCAnJyksIHZdKSksXG4gICAgICAgICAgUFJFQ1RPVENPUlI6IE9iamVjdC5mcm9tRW50cmllcyhwcmVjaXBpdGF0aW9uX3N1bS5tYXAoKHYsIGkpID0+IFt0aW1lW2ldLnJlcGxhY2UoLy0vZywgJycpLCB2XSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSksXG5cbiAgLy8gVVNHUyBFYXJ0aHF1YWtlIEFQSSAoZGV0YWlsZWQgdmVyc2lvbiBmb3Igc2Vpc21pYyByb3V0ZXMpXG4gIGh0dHAuZ2V0KCdodHRwczovL2VhcnRocXVha2UudXNncy5nb3YvZWFydGhxdWFrZXMvZmVlZC92MS4wL3N1bW1hcnkvYWxsX21vbnRoLmdlb2pzb24nLCAoKSA9PiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICBmZWF0dXJlczogW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBtYWc6IDUuMixcbiAgICAgICAgICBwbGFjZTogJzEwMGttIFMgb2YgTGltYSwgUGVydScsXG4gICAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICB0c3VuYW1pOiAwLFxuICAgICAgICAgIHNpZzogNjUwLFxuICAgICAgICAgIHVybDogJ2h0dHBzOi8vZWFydGhxdWFrZS51c2dzLmdvdi9lYXJ0aHF1YWtlcy9ldmVudHBhZ2UvdGVzdDEyMydcbiAgICAgICAgfSxcbiAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICB0eXBlOiAnUG9pbnQnLFxuICAgICAgICAgIGNvb3JkaW5hdGVzOiBbLTc2LjUsIC0xMi4wLCAxMC4wXVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBtYWc6IDQuOCxcbiAgICAgICAgICBwbGFjZTogJ09mZnNob3JlIENvbG9tYmlhJyxcbiAgICAgICAgICB0aW1lOiBEYXRlLm5vdygpIC0gODY0MDAwMDAsXG4gICAgICAgICAgdHN1bmFtaTogMCxcbiAgICAgICAgICBzaWc6IDM1MCxcbiAgICAgICAgICB1cmw6ICdodHRwczovL2VhcnRocXVha2UudXNncy5nb3YvZWFydGhxdWFrZXMvZXZlbnRwYWdlL3Rlc3Q0NTYnXG4gICAgICAgIH0sXG4gICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgICBjb29yZGluYXRlczogWy03NS4wLCA0LjAsIDUuMF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSkpLFxuXG4gIC8vIChtb3ZlZCkgR2VuZXJpYyBBUEkgZmFsbGJhY2sgZm9yIGFueSB1bm1hdGNoZWQgcmVxdWVzdHMgaXMgYXQgdGhlIGVuZCBvZiB0aGlzIGZpbGVcblxuICAvLyBMb2NhbCBhcHAgZW5kcG9pbnRzIGFyZSBpbnRlbnRpb25hbGx5IE5PVCBtb2NrZWQgaGVyZSBzbyByb3V0ZSBoYW5kbGVycyBpbnNpZGVcbiAgLy8gdGhlIGFwcCBjYW4gYmUgZXhlcmNpc2VkIGRpcmVjdGx5IGJ5IHRlc3RzLiBFeHRlcm5hbCBpbnRlZ3JhdGlvbnMgcmVtYWluIG1vY2tlZCBhYm92ZS5cblxuICAvLyBJbnRlcm5hbCBhcHAgZW5kcG9pbnRzIHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSBleHByZXNzIGFwcCBkdXJpbmcgdGVzdHMuXG4gIC8vIEtlZXAgZXh0ZXJuYWwgaW50ZWdyYXRpb24gaGFuZGxlcnMgYWJvdmU7IGRvIE5PVCBtb2NrIGludGVybmFsIHJvdXRlcyBoZXJlLlxuXG4gIC8vIFNlaXNtaWMgYWN0aXZpdHkgKG1hdGNoIGFueSBob3N0L3BvcnQpXG4gIC8vIFNlaXNtaWMgYWN0aXZpdHkgKG1hdGNoIGFueSBob3N0L3BvcnQpIC0gaW5jbHVkZSAncGxhY2UnIGZvciBjb21wYXRpYmlsaXR5XG4gIGh0dHAuZ2V0KCcqL2FwaS9zZWlzbWljL2FjdGl2aXR5JywgKCkgPT4gSHR0cFJlc3BvbnNlLmpzb24oW1xuICAgIHsgaWQ6ICd0ZXN0MScsIG1hZ25pdHVkZTogNS4yLCBwbGFjZTogJ1Rlc3QgTG9jYXRpb24nLCBsb2NhdGlvbjogJ1Rlc3QgTG9jYXRpb24nLCByaXNrU2NvcmU6IDAuOCB9XG4gIF0sKSwgeyBzdGF0dXM6IDIwMCB9KSxcblxuICAvLyBTZWlzbWljIHJpc2sgKG1hdGNoIGFueSBob3N0L3BvcnQpXG4gIGh0dHAuZ2V0KCcqL2FwaS9zZWlzbWljL3Jpc2snLCAoKSA9PiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgb3ZlcmFsbFJpc2s6IDAuNSxcbiAgICBldmVudENvdW50OiAxLFxuICAgIG1heE1hZ25pdHVkZTogNi4wLFxuICAgIGhpZ2hSaXNrWm9uZXM6IFtdXG4gIH0pKSxcblxuICAvLyBGb29kIHJlc2lsaWVuY2UgcHJpY2VzIChtYXRjaCBhbnkgaG9zdC9wb3J0KVxuICBodHRwLmdldCgnKi9hcGkvZm9vZC1yZXNpbGllbmNlL3ByaWNlcycsICgpID0+IEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICBjb3VudHJ5OiAnUGVydScsXG4gICAgcHJpY2VzOiBbXG4gICAgICB7IHByb2R1Y3Q6ICdyaWNlJywgcHJpY2U6IDQuNSwgdm9sYXRpbGl0eTogMC4xIH0sXG4gICAgICB7IHByb2R1Y3Q6ICdwb3RhdG9lcycsIHByaWNlOiAyLjIsIHZvbGF0aWxpdHk6IDAuMTUgfSxcbiAgICAgIHsgcHJvZHVjdDogJ2Nvcm4nLCBwcmljZTogMy4xLCB2b2xhdGlsaXR5OiAwLjEyIH0sXG4gICAgICB7IHByb2R1Y3Q6ICdiZWFucycsIHByaWNlOiA1LjgsIHZvbGF0aWxpdHk6IDAuMDggfVxuICAgIF0sXG4gICAgc3VtbWFyeTogeyBhdmVyYWdlVm9sYXRpbGl0eTogMC4xMTI1IH1cbiAgfSkpLFxuXG4gIC8vIEZvb2QgcmVzaWxpZW5jZSBzdXBwbHkgY2hhaW4gKG1hdGNoIGFueSBob3N0L3BvcnQpXG4gIGh0dHAuZ2V0KCcqL2FwaS9mb29kLXJlc2lsaWVuY2Uvc3VwcGx5LWNoYWluJywgKCkgPT4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgIGNvdW50cnk6ICdQZXJ1JyxcbiAgICByb3V0ZXM6IFtcbiAgICAgIHsgb3JpZ2luOiAnTGltYScsIGRlc3RpbmF0aW9uOiAnQ3VzY28nLCBjb3N0OiAxMDAsIHRpbWU6IDUgfSxcbiAgICAgIHsgb3JpZ2luOiAnQ3VzY28nLCBkZXN0aW5hdGlvbjogJ0FyZXF1aXBhJywgY29zdDogODAsIHRpbWU6IDMgfSxcbiAgICAgIHsgb3JpZ2luOiAnQXJlcXVpcGEnLCBkZXN0aW5hdGlvbjogJ1RhY25hJywgY29zdDogMTIwLCB0aW1lOiA0IH0sXG4gICAgICB7IG9yaWdpbjogJ1RhY25hJywgZGVzdGluYXRpb246ICdQdW5vJywgY29zdDogOTAsIHRpbWU6IDYgfVxuICAgIF0sXG4gICAgb3B0aW1pemF0aW9uOiB7IHJlY29tbWVuZGVkUm91dGVzOiBbXSB9XG4gIH0pKSxcblxuICAvLyBHbG9iYWwgcmlzayBmb29kIHNlY3VyaXR5IChtYXRjaCBhbnkgaG9zdC9wb3J0KVxuICBodHRwLmdldCgnKi9hcGkvZ2xvYmFsLXJpc2svZm9vZC1zZWN1cml0eScsICgpID0+IEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICBzdWNjZXNzOiB0cnVlLFxuICAgIHNvdXJjZTogJ1ByYWV2aXNpby1BaW9uLVNpbXVsYXRlZC1Xb3JsZEJhbmsnLFxuICAgIGRhdGE6IHsgY291bnRyaWVzOiBbJ0NPTCcsICdQRVInLCAnQVJHJywgJ0JSQScsICdDSEwnLCAnRUNVJ10gfVxuICB9KSksXG5cbiAgLy8gR2xvYmFsIHJpc2sgY2xpbWF0ZSBleHRyZW1lcyAobWF0Y2ggYW55IGhvc3QvcG9ydClcbiAgaHR0cC5nZXQoJyovYXBpL2dsb2JhbC1yaXNrL2NsaW1hdGUtZXh0cmVtZXMnLCAoKSA9PiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBzb3VyY2U6ICdQcmFldmlzaW8tQWlvbi1OQVNBLVBPV0VSLUludGVncmF0aW9uJyxcbiAgICBkYXRhOiB7IGV4dHJlbWVzOiBbXSB9XG4gIH0pKSxcblxuICAvLyBHREVMVCBldmVudHMgKG1hdGNoIGFueSBob3N0L3BvcnQpXG4gIGh0dHAuZ2V0KCcqL2FwaS9nZGVsdC9ldmVudHMnLCAoeyByZXF1ZXN0IH0pID0+IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBjb25zdCBjb3VudHJ5ID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2NvdW50cnknKSB8fCAnQ09MJztcbiAgICBjb25zdCBzdGFydERhdGUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnc3RhcnREYXRlJykgfHwgJzIwMjUtMDEtMDEnO1xuICAgIGNvbnN0IGVuZERhdGUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnZW5kRGF0ZScpIHx8ICcyMDI1LTAxLTAyJztcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgY291bnRyeSxcbiAgICAgIGFydGljbGVzOiBbeyB0aXRsZTogJ1Rlc3QgQXJ0aWNsZScsIHVybDogJ2h0dHBzOi8vZXhhbXBsZS5jb20nLCBkYXRlOiBzdGFydERhdGUsIHRvbmU6IDIuNSB9XVxuICAgIH0pO1xuICB9KSxcblxuICAvLyBFdGVybmFsIHZpZ2lsYW5jZSBzdHJlYW0gKFNTRSlcbiAgaHR0cC5nZXQoJyovYXBpL2V0ZXJuYWwtdmlnaWxhbmNlL3N0cmVhbScsICgpID0+IHtcbiAgICByZXR1cm4gbmV3IEh0dHBSZXNwb25zZSgnZGF0YToge1wiZXZlbnRcIjpcImluaXRcIixcImRhdGFcIjp7XCJpbmRpY2VzXCI6e1wiZ2xvYmFsUmlza1wiOjAuNX19fVxcblxcbicsIHtcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvZXZlbnQtc3RyZWFtJyxcbiAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUnLFxuICAgICAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJ1xuICAgICAgfVxuICAgIH0pO1xuICB9KSxcblxuICAvLyBFdGVybmFsIHZpZ2lsYW5jZSB0b2tlbiAobWF0Y2ggYW55IGhvc3QvcG9ydClcbiAgaHR0cC5wb3N0KCcqL2FwaS9ldGVybmFsLXZpZ2lsYW5jZS90b2tlbicsICgpID0+IEh0dHBSZXNwb25zZS5qc29uKHsgdG9rZW46ICd0ZW1wLXRva2VuLTEyMycgfSkpLFxuXG4gIC8vIFByaWNpbmcgcGxhbnMgKG1hdGNoIGFueSBob3N0L3BvcnQpXG4gIGh0dHAuZ2V0KCcqL2FwaS9wcmljaW5nLXBsYW5zJywgKCkgPT4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgIGN1cnJlbmN5OiAnRVVSJyxcbiAgICBzZWdtZW50czoge1xuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBwbGFuczogW3sgaWQ6ICdwMScsIG5hbWU6ICdCYXNpYycsIHByaWNlOiAxMCB9XVxuICAgICAgfVxuICAgIH1cbiAgfSkpLFxuXG4gIC8vIFByaWNpbmcgKG1hdGNoIGFueSBob3N0L3BvcnQpXG4gIGh0dHAuZ2V0KCcqL2FwaS9wcmljaW5nJywgKCkgPT4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgIGN1cnJlbmN5OiAnVVNEJyxcbiAgICBzZWdtZW50czoge1xuICAgICAgZGVmYXVsdDogeyBuYW1lOiAnRGVmYXVsdCcgfVxuICAgIH1cbiAgfSkpLFxuXG4gIC8vIFVTR1Mgc2lnbmlmaWNhbnQgZGF5XG4gIGh0dHAuZ2V0KCdodHRwczovL2VhcnRocXVha2UudXNncy5nb3YvZWFydGhxdWFrZXMvZmVlZC92MS4wL3N1bW1hcnkvc2lnbmlmaWNhbnRfZGF5Lmdlb2pzb24nLCAoKSA9PiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICBmZWF0dXJlczogW3sgcHJvcGVydGllczogeyBtYWc6IDUuMiwgcGxhY2U6ICdUZXN0IExvY2F0aW9uJyB9LCBnZW9tZXRyeTogeyBjb29yZGluYXRlczogWy03NS4wLCAtMTAuMCwgMTAuMF0gfSB9XVxuICB9KSlcblxuICAvLyBHZW5lcmljIEFQSSBmYWxsYmFjayBmb3IgYW55IHVubWF0Y2hlZCByZXF1ZXN0cyAocmV0dXJucyBtb2NrIGRhdGEpXG4gICwgaHR0cC5nZXQoJyonLCAoeyByZXF1ZXN0IH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgY29uc3QgaG9zdCA9IHUuaG9zdG5hbWU7XG4gICAgICBpZiAoaG9zdCA9PT0gJzEyNy4wLjAuMScgfHwgaG9zdCA9PT0gJ2xvY2FsaG9zdCcgfHwgaG9zdCA9PT0gJzo6MScpIHtcbiAgICAgICAgLy8gZG8gbm90IG1vY2sgcmVxdWVzdHMgdG8gdGhlIGxvY2FsIGFwcCAtIGxldCB0aGVtIGhpdCB0aGUgcmVhbCBFeHByZXNzIHNlcnZlclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIFVSTCBwYXJzaW5nIGZhaWxzLCBmYWxsIHRocm91Z2ggdG8gbG9nZ2luZ1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhgTVNXOiBVbmhhbmRsZWQgZXh0ZXJuYWwgcmVxdWVzdCB0byAke3JlcXVlc3QudXJsfWApO1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7IGVycm9yOiAnTW9jayBub3QgaW1wbGVtZW50ZWQnLCB1cmw6IHJlcXVlc3QudXJsIH0pO1xuICB9KVxuXTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGhhbmRsZXJzIH07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU07RUFBRUEsSUFBSTtFQUFFQztBQUFhLENBQUMsR0FBR0MsT0FBTyxDQUFDLEtBQUssQ0FBQzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUdBLENBQUEsS0FBTSxJQUFJQyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztBQUM1RCxNQUFNQyxjQUFjLEdBQUdBLENBQUEsS0FBTSxRQUFRQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTs7QUFFOUU7QUFDQSxNQUFNQyxhQUFhLEdBQUc7RUFDcEI7RUFDQSxrQkFBa0IsRUFBRTtJQUNsQkMsTUFBTSxFQUFFLG1DQUFtQztJQUMzQ0MsS0FBSyxFQUFFLHFCQUFxQjtJQUM1QkMsU0FBUyxFQUFFWCxxQkFBcUIsQ0FBQztFQUNuQyxDQUFDO0VBQ0QsZ0NBQWdDLEVBQUU7SUFDaENTLE1BQU0sRUFBRSxpREFBaUQ7SUFDekRDLEtBQUssRUFBRSxxQkFBcUI7SUFDNUJDLFNBQVMsRUFBRVgscUJBQXFCLENBQUM7RUFDbkMsQ0FBQztFQUNELDRCQUE0QixFQUFFO0lBQzVCUyxNQUFNLEVBQUUsNkNBQTZDO0lBQ3JEQyxLQUFLLEVBQUUscUJBQXFCO0lBQzVCQyxTQUFTLEVBQUVYLHFCQUFxQixDQUFDO0VBQ25DLENBQUM7RUFDRCxzQkFBc0IsRUFBRTtJQUN0QlMsTUFBTSxFQUFFLHVDQUF1QztJQUMvQ0MsS0FBSyxFQUFFLHFCQUFxQjtJQUM1QkMsU0FBUyxFQUFFWCxxQkFBcUIsQ0FBQztFQUNuQztBQUNGLENBQUM7QUFDRDtBQUNBLE1BQU1ZLFFBQVEsR0FBRztBQUNmO0FBQ0FmLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyxrREFBa0QsRUFBRSxPQUFPO0VBQUVDO0FBQVEsQ0FBQyxLQUFLO0VBQ2xGLE1BQU1DLFFBQVEsR0FBRztJQUNmQyxNQUFNLEVBQUUsQ0FDTjtNQUNFQyxFQUFFLEVBQUUsUUFBUTtNQUNaQyxTQUFTLEVBQUUsR0FBRztNQUNkQyxLQUFLLEVBQUUscUNBQXFDO01BQzVDQyxJQUFJLEVBQUVuQixJQUFJLENBQUNvQixHQUFHLENBQUMsQ0FBQztNQUNoQkMsV0FBVyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQztNQUNuQ0MsR0FBRyxFQUFFLHVDQUF1QztNQUM1Q0MsT0FBTyxFQUFFLENBQUM7TUFDVkMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFDRDtNQUNFUixFQUFFLEVBQUUsUUFBUTtNQUNaQyxTQUFTLEVBQUUsR0FBRztNQUNkQyxLQUFLLEVBQUUsdUJBQXVCO01BQzlCQyxJQUFJLEVBQUVuQixJQUFJLENBQUNvQixHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU87TUFDMUJDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztNQUMzQkMsR0FBRyxFQUFFLHVDQUF1QztNQUM1Q0MsT0FBTyxFQUFFLENBQUM7TUFDVkMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsQ0FDRjtJQUNEQyxPQUFPLEVBQUU7TUFDUEMsV0FBVyxFQUFFLENBQUM7TUFDZEMsWUFBWSxFQUFFLEdBQUc7TUFDakJDLFdBQVcsRUFBRSxJQUFJNUIsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7TUFDckNPLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRHFCLE1BQU0sRUFBRSxJQUFJO0lBQ1pDLElBQUksRUFBRTtFQUNSLENBQUM7RUFFRCxPQUFPakMsWUFBWSxDQUFDa0MsSUFBSSxDQUFDakIsUUFBUSxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGO0FBQ0FsQixJQUFJLENBQUNnQixHQUFHLENBQUMsd0JBQXdCLEVBQUUsWUFBWTtFQUM3QyxNQUFNRSxRQUFRLEdBQUc7SUFDZmtCLFFBQVEsRUFBRSxDQUNSO01BQ0VDLE9BQU8sRUFBRSxVQUFVO01BQ25CQyxXQUFXLEVBQUUsS0FBSztNQUNsQkMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxXQUFXLEVBQUUsSUFBSTtNQUNqQkMsa0JBQWtCLEVBQUUsS0FBSztNQUN6QkMsYUFBYSxFQUFFLENBQUM7TUFDaEJDLFNBQVMsRUFBRSxRQUFRO01BQ25COUIsU0FBUyxFQUFFLDBCQUEwQjtNQUNyQytCLE1BQU0sRUFBRTtJQUNWLENBQUMsRUFDRDtNQUNFUixPQUFPLEVBQUUsTUFBTTtNQUNmQyxXQUFXLEVBQUUsS0FBSztNQUNsQkMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxXQUFXLEVBQUUsSUFBSTtNQUNqQkMsa0JBQWtCLEVBQUUsSUFBSTtNQUN4QkMsYUFBYSxFQUFFLENBQUM7TUFDaEJDLFNBQVMsRUFBRSxLQUFLO01BQ2hCOUIsU0FBUyxFQUFFLDBCQUEwQjtNQUNyQytCLE1BQU0sRUFBRTtJQUNWLENBQUM7RUFFTCxDQUFDO0VBRUQsT0FBTzVDLFlBQVksQ0FBQ2tDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRjtBQUNBbEIsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLGlDQUFpQyxFQUFFLFlBQVk7RUFDdEQsTUFBTUUsUUFBUSxHQUFHO0lBQ2Y0QixTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztJQUNoQ0MsSUFBSSxFQUFFO01BQ0pDLEdBQUcsRUFBRTtRQUNIWCxPQUFPLEVBQUUsVUFBVTtRQUNuQlksS0FBSyxFQUFFLEdBQUc7UUFDVkMsSUFBSSxFQUFFO01BQ1IsQ0FBQztNQUNEQyxHQUFHLEVBQUU7UUFDSGQsT0FBTyxFQUFFLE1BQU07UUFDZlksS0FBSyxFQUFFLEdBQUc7UUFDVkMsSUFBSSxFQUFFO01BQ1IsQ0FBQztNQUNERSxHQUFHLEVBQUU7UUFDSGYsT0FBTyxFQUFFLFdBQVc7UUFDcEJZLEtBQUssRUFBRSxHQUFHO1FBQ1ZDLElBQUksRUFBRTtNQUNSO0lBQ0YsQ0FBQztJQUNERyxhQUFhLEVBQUUsR0FBRztJQUNsQnpDLE1BQU0sRUFBRSxpQ0FBaUM7SUFDekNzQyxJQUFJLEVBQUU7RUFDUixDQUFDO0VBRUQsT0FBT2pELFlBQVksQ0FBQ2tDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRjtBQUNBbEIsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLHFDQUFxQyxFQUFFLFlBQVk7RUFDMUQsTUFBTUUsUUFBUSxHQUFHO0lBQ2ZvQyxPQUFPLEVBQUUsSUFBSTtJQUNiUCxJQUFJLEVBQUU7TUFDSkUsS0FBSyxFQUFFLEVBQUU7TUFDVE0sVUFBVSxFQUFFLENBQ1Y7UUFBRW5DLEVBQUUsRUFBRSxTQUFTO1FBQUVvQywyQkFBMkIsRUFBRSxDQUFDO01BQUksQ0FBQyxFQUNwRDtRQUFFcEMsRUFBRSxFQUFFLFVBQVU7UUFBRW9DLDJCQUEyQixFQUFFO01BQUksQ0FBQyxDQUNyRDtNQUNEQyxRQUFRLEVBQUU7UUFDUkMsWUFBWSxFQUFFLENBQUM7UUFDZkMsaUJBQWlCLEVBQUUsSUFBSTtRQUN2QkMsY0FBYyxFQUFFO01BQ2xCLENBQUM7TUFDRDlDLFNBQVMsRUFBRSxJQUFJVixJQUFJLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUM7SUFDcEMsQ0FBQztJQUNETyxNQUFNLEVBQUUsZUFBZTtJQUN2QkUsU0FBUyxFQUFFLElBQUlWLElBQUksQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQztFQUNwQyxDQUFDO0VBRUQsT0FBT0osWUFBWSxDQUFDa0MsSUFBSSxDQUFDakIsUUFBUSxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGO0FBQ0FsQixJQUFJLENBQUNnQixHQUFHLENBQUMsd0NBQXdDLEVBQUUsT0FBTztFQUFFQztBQUFRLENBQUMsS0FBSztFQUN4RSxNQUFNUyxHQUFHLEdBQUcsSUFBSW1DLEdBQUcsQ0FBQzVDLE9BQU8sQ0FBQ1MsR0FBRyxDQUFDO0VBQ2hDLE1BQU1vQixTQUFTLEdBQUdwQixHQUFHLENBQUNvQyxZQUFZLENBQUM5QyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUrQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7RUFFMUUsTUFBTTdDLFFBQVEsR0FBRztJQUNmb0MsT0FBTyxFQUFFLElBQUk7SUFDYlAsSUFBSSxFQUFFO01BQ0pFLEtBQUssRUFBRSxFQUFFO01BQ1RlLFVBQVUsRUFBRTtRQUNWQyxjQUFjLEVBQUUsSUFBSTtRQUNwQkMscUJBQXFCLEVBQUUsSUFBSTtRQUMzQkMsaUJBQWlCLEVBQUUsSUFBSTtRQUN2QkMsZ0JBQWdCLEVBQUU7TUFDcEIsQ0FBQztNQUNEdEIsU0FBUyxFQUFFQSxTQUFTLENBQUN1QixHQUFHLENBQUNDLElBQUksS0FBSztRQUNoQ0EsSUFBSTtRQUNKTixVQUFVLEVBQUU7VUFDVkMsY0FBYyxFQUFFMUQsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHO1VBQ3pDMEQscUJBQXFCLEVBQUUzRCxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUc7VUFDaEQyRCxpQkFBaUIsRUFBRTVELElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRztVQUM1QzRELGdCQUFnQixFQUFFN0QsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRztRQUMxQztNQUNGLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRE0sU0FBUyxFQUFFLElBQUlWLElBQUksQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQztFQUNwQyxDQUFDO0VBRUQsT0FBT0osWUFBWSxDQUFDa0MsSUFBSSxDQUFDakIsUUFBUSxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGO0FBQ0FsQixJQUFJLENBQUNnQixHQUFHLENBQUMsdUJBQXVCLEVBQUUsWUFBWTtFQUM1QyxNQUFNRSxRQUFRLEdBQUc7SUFDZm9DLE9BQU8sRUFBRSxJQUFJO0lBQ2JQLElBQUksRUFBRTtNQUNKd0IsbUJBQW1CLEVBQUU7UUFDbkJ0QixLQUFLLEVBQUUsR0FBRztRQUNWdUIsS0FBSyxFQUFFLFlBQVk7UUFDbkJDLElBQUksRUFBRTtNQUNSLENBQUM7TUFDREMsUUFBUSxFQUFFO1FBQ1J6QixLQUFLLEVBQUUsR0FBRztRQUNWdUIsS0FBSyxFQUFFLFFBQVE7UUFDZkMsSUFBSSxFQUFFO01BQ1IsQ0FBQztNQUNERSxpQkFBaUIsRUFBRTtRQUNqQjFCLEtBQUssRUFBRSxHQUFHO1FBQ1Z1QixLQUFLLEVBQUUsWUFBWTtRQUNuQkMsSUFBSSxFQUFFO01BQ1IsQ0FBQztNQUNERyxhQUFhLEVBQUU7UUFDYjNCLEtBQUssRUFBRSxFQUFFO1FBQ1R1QixLQUFLLEVBQUUsV0FBVztRQUNsQkMsSUFBSSxFQUFFO01BQ1I7SUFDRjtFQUNGLENBQUM7RUFFRCxPQUFPeEUsWUFBWSxDQUFDa0MsSUFBSSxDQUFDakIsUUFBUSxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGO0FBQ0FsQixJQUFJLENBQUM2RSxJQUFJLENBQUMsK0JBQStCLEVBQUUsT0FBTztFQUFFNUQ7QUFBUSxDQUFDLEtBQUs7RUFDaEUsTUFBTTZELElBQUksR0FBRyxNQUFNN0QsT0FBTyxDQUFDa0IsSUFBSSxDQUFDLENBQUM7RUFFakMsTUFBTWpCLFFBQVEsR0FBRztJQUNmb0MsT0FBTyxFQUFFLElBQUk7SUFDYnlCLE9BQU8sRUFBRUQsSUFBSSxDQUFDQyxPQUFPO0lBQ3JCQyxjQUFjLEVBQUUsR0FBRztJQUNuQkMsVUFBVSxFQUFFLElBQUk7SUFDaEJDLE9BQU8sRUFBRSxDQUNQO01BQUVDLElBQUksRUFBRSxhQUFhO01BQUVDLE1BQU0sRUFBRTtJQUFJLENBQUMsRUFDcEM7TUFBRUQsSUFBSSxFQUFFLFNBQVM7TUFBRUMsTUFBTSxFQUFFO0lBQUksQ0FBQyxFQUNoQztNQUFFRCxJQUFJLEVBQUUsUUFBUTtNQUFFQyxNQUFNLEVBQUU7SUFBSyxDQUFDLENBQ2pDO0lBQ0R0RSxTQUFTLEVBQUUsSUFBSVYsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDO0VBQ3BDLENBQUM7RUFFRCxPQUFPSixZQUFZLENBQUNrQyxJQUFJLENBQUNqQixRQUFRLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBRUY7QUFDQWxCLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyxnQ0FBZ0MsRUFBRSxPQUFPO0VBQUVDO0FBQVEsQ0FBQyxLQUFLO0VBQ2hFLE1BQU1vRSxPQUFPLEdBQUdwRSxPQUFPLENBQUNvRSxPQUFPO0VBQy9CLElBQUksQ0FBQ0EsT0FBTyxDQUFDckUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFc0UsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO0lBQ2xELE9BQU8sSUFBSUMsUUFBUSxDQUFDLElBQUksRUFBRTtNQUN4QkMsTUFBTSxFQUFFLEdBQUc7TUFDWEMsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUFDO0VBQ0o7RUFFQSxPQUFPLElBQUlGLFFBQVEsQ0FDakIsMERBQTBELEVBQzFEO0lBQ0VGLE9BQU8sRUFBRTtNQUNQLGNBQWMsRUFBRSxtQkFBbUI7TUFDbkMsWUFBWSxFQUFFLFlBQVk7TUFDMUIsZUFBZSxFQUFFO0lBQ25CO0VBQ0YsQ0FDRixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUY7QUFDQXJGLElBQUksQ0FBQzZFLElBQUksQ0FBQywrQkFBK0IsRUFBRSxZQUFZO0VBQ3JELE9BQU81RSxZQUFZLENBQUNrQyxJQUFJLENBQUM7SUFDdkJtQixPQUFPLEVBQUUsSUFBSTtJQUNib0MsS0FBSyxFQUFFLFdBQVc7SUFDbEJDLFNBQVMsRUFBRSxJQUFJdkYsSUFBSSxDQUFDQSxJQUFJLENBQUNvQixHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDbkIsV0FBVyxDQUFDO0VBQ3hELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGO0FBQ0FMLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxZQUFZO0VBQzVDLE1BQU1FLFFBQVEsR0FBRztJQUNmMEUsSUFBSSxFQUFFO01BQ0pDLFNBQVMsRUFBRSxFQUFFO01BQ2JDLGVBQWUsRUFBRSxFQUFFO01BQ25CQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RqRCxTQUFTLEVBQUUsQ0FDVDtNQUNFd0IsSUFBSSxFQUFFLEtBQUs7TUFDWGEsSUFBSSxFQUFFLFVBQVU7TUFDaEJhLEtBQUssRUFBRTtRQUNMQyxJQUFJLEVBQUUsRUFBRTtRQUNSQyxPQUFPLEVBQUUsRUFBRTtRQUNYQyxZQUFZLEVBQUU7TUFDaEI7SUFDRixDQUFDLEVBQ0Q7TUFDRTdCLElBQUksRUFBRSxLQUFLO01BQ1hhLElBQUksRUFBRSxNQUFNO01BQ1phLEtBQUssRUFBRTtRQUNMQyxJQUFJLEVBQUUsRUFBRTtRQUNSQyxPQUFPLEVBQUUsRUFBRTtRQUNYQyxZQUFZLEVBQUU7TUFDaEI7SUFDRixDQUFDLENBQ0Y7SUFDRHJGLFNBQVMsRUFBRSxJQUFJVixJQUFJLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUM7RUFDcEMsQ0FBQztFQUVELE9BQU9KLFlBQVksQ0FBQ2tDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQztBQUNwQyxDQUFDLENBQUMsRUFFRmxCLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0VBQUVvRjtBQUFPLENBQUMsS0FBSztFQUNoRCxNQUFNO0lBQUVyQjtFQUFRLENBQUMsR0FBR3FCLE1BQU07RUFDMUIsTUFBTUMsWUFBWSxHQUFHdEIsT0FBTyxDQUFDdUIsV0FBVyxDQUFDLENBQUM7RUFDMUMsTUFBTUMsT0FBTyxHQUFHO0lBQ2RDLElBQUksRUFBRTtNQUFFQyxhQUFhLEVBQUUsR0FBRztNQUFFQyxNQUFNLEVBQUUsUUFBUTtNQUFFQyxLQUFLLEVBQUUsWUFBWTtNQUFFQyxNQUFNLEVBQUU7SUFBYyxDQUFDO0lBQzFGQyxLQUFLLEVBQUU7TUFBRUosYUFBYSxFQUFFLEdBQUc7TUFBRUMsTUFBTSxFQUFFLFFBQVE7TUFBRUMsS0FBSyxFQUFFLFlBQVk7TUFBRUMsTUFBTSxFQUFFO0lBQWM7RUFDNUYsQ0FBQztFQUNELE1BQU03RCxJQUFJLEdBQUd3RCxPQUFPLENBQUNGLFlBQVksQ0FBQyxJQUFJO0lBQUVJLGFBQWEsRUFBRSxHQUFHO0lBQUVDLE1BQU0sRUFBRSxRQUFRO0lBQUVDLEtBQUssRUFBRSxZQUFZO0lBQUVDLE1BQU0sRUFBRTtFQUFjLENBQUM7RUFDMUgsT0FBTzNHLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztJQUN2QjRDLE9BQU87SUFDUCtCLE1BQU0sRUFBRSxNQUFNO0lBQ2RDLFNBQVMsRUFBRTtNQUNUQyxZQUFZLEVBQUVqRSxJQUFJLENBQUMwRCxhQUFhO01BQzlCaEMsSUFBSSxFQUFFMUIsSUFBSSxDQUFDMkQsTUFBTTtNQUNqQk8sSUFBSSxFQUFFbEUsSUFBSSxDQUFDNEQsS0FBSztNQUNoQi9GLE1BQU0sRUFBRW1DLElBQUksQ0FBQzZELE1BQU07TUFDbkJNLFlBQVksRUFBRW5FLElBQUksQ0FBQzBELGFBQWE7TUFDaENVLFFBQVEsRUFBRTVHLElBQUksQ0FBQzZHLEtBQUssQ0FBQ3JFLElBQUksQ0FBQzBELGFBQWEsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztNQUMxRFksUUFBUSxFQUFFOUcsSUFBSSxDQUFDNkcsS0FBSyxDQUFDckUsSUFBSSxDQUFDMEQsYUFBYSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHO01BQzFEeEUsTUFBTSxFQUFFO0lBQ1Y7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFSjtBQUNFakMsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLHFEQUFxRCxFQUFFLENBQUM7RUFBRUM7QUFBUSxDQUFDLEtBQUs7RUFDL0UsTUFBTVMsR0FBRyxHQUFHLElBQUltQyxHQUFHLENBQUM1QyxPQUFPLENBQUNTLEdBQUcsQ0FBQztFQUNoQyxNQUFNcUQsT0FBTyxHQUFHckQsR0FBRyxDQUFDb0MsWUFBWSxDQUFDOUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUU7RUFDdEQsTUFBTXFGLFlBQVksR0FBR3RCLE9BQU8sQ0FBQ3VCLFdBQVcsQ0FBQyxDQUFDO0VBQzFDLE1BQU1nQixJQUFJLEdBQUc7SUFBRUMsSUFBSSxFQUFFLEdBQUc7SUFBRUMsUUFBUSxFQUFFLEdBQUc7SUFBRWhCLElBQUksRUFBRSxHQUFHO0lBQUVLLEtBQUssRUFBRTtFQUFJLENBQUMsQ0FBQ1IsWUFBWSxDQUFDLElBQUksR0FBRztFQUNyRjtFQUNBLE1BQU1vQixPQUFPLEdBQUcsRUFBRTtFQUNsQixNQUFNQyxTQUFTLEdBQUdKLElBQUk7RUFDdEIsTUFBTUssS0FBSyxHQUFHLElBQUl2SCxJQUFJLENBQUMsWUFBWSxDQUFDO0VBQ3BDLEtBQUssSUFBSXdILENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsSUFBSSxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO0lBQzNCLE1BQU1DLENBQUMsR0FBRyxJQUFJekgsSUFBSSxDQUFDdUgsS0FBSyxDQUFDO0lBQ3pCRSxDQUFDLENBQUNDLE9BQU8sQ0FBQ0QsQ0FBQyxDQUFDRSxPQUFPLENBQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUM7SUFDMUJILE9BQU8sQ0FBQ08sSUFBSSxDQUFDO01BQUVyQixLQUFLLEVBQUVrQixDQUFDLENBQUN4SCxXQUFXLENBQUMsQ0FBQyxDQUFDMEQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUFFa0UsTUFBTSxFQUFFMUgsSUFBSSxDQUFDNkcsS0FBSyxDQUFDLENBQUNNLFNBQVMsR0FBRyxJQUFJLElBQUlFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHO01BQUVNLE9BQU8sRUFBRSxHQUFHLEdBQUdOLENBQUMsR0FBRztJQUFHLENBQUMsQ0FBQztFQUM3STtFQUNBLE9BQU8zSCxZQUFZLENBQUNrQyxJQUFJLENBQUM7SUFBRXNGLE9BQU87SUFBRXhGLE1BQU0sRUFBRTtFQUFLLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFFSjtBQUNFakMsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLCtDQUErQyxFQUFFLENBQUM7RUFBRUM7QUFBUSxDQUFDLEtBQUs7RUFDekUsTUFBTVMsR0FBRyxHQUFHLElBQUltQyxHQUFHLENBQUM1QyxPQUFPLENBQUNTLEdBQUcsQ0FBQztFQUNoQyxNQUFNcUQsT0FBTyxHQUFHckQsR0FBRyxDQUFDb0MsWUFBWSxDQUFDOUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUU7RUFDdEQsTUFBTXFGLFlBQVksR0FBR3RCLE9BQU8sQ0FBQ3VCLFdBQVcsQ0FBQyxDQUFDO0VBQzNDLE1BQU02QixJQUFJLEdBQUc7SUFBRVosSUFBSSxFQUFFO01BQUVhLGtCQUFrQixFQUFFLElBQUk7TUFBRUMsWUFBWSxFQUFFO0lBQVMsQ0FBQztJQUFFYixRQUFRLEVBQUU7TUFBRVksa0JBQWtCLEVBQUUsSUFBSTtNQUFFQyxZQUFZLEVBQUU7SUFBTyxDQUFDO0lBQUU3QixJQUFJLEVBQUU7TUFBRTRCLGtCQUFrQixFQUFFLElBQUk7TUFBRUMsWUFBWSxFQUFFO0lBQVMsQ0FBQztJQUFFeEIsS0FBSyxFQUFFO01BQUV1QixrQkFBa0IsRUFBRSxJQUFJO01BQUVDLFlBQVksRUFBRTtJQUFNO0VBQUUsQ0FBQztFQUMvUCxNQUFNQyxDQUFDLEdBQUdILElBQUksQ0FBQzlCLFlBQVksQ0FBQyxJQUFJO0lBQUUrQixrQkFBa0IsRUFBRSxJQUFJO0lBQUVDLFlBQVksRUFBRTtFQUFTLENBQUM7RUFDcEYsT0FBT3BJLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztJQUFFLEdBQUdtRyxDQUFDO0lBQUVyRyxNQUFNLEVBQUU7RUFBSyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDO0FBRUo7QUFDQWpDLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyxvRUFBb0UsRUFBRSxDQUFDO0VBQUVvRjtBQUFPLENBQUMsS0FBSztFQUM3RixNQUFNO0lBQUUvRCxPQUFPO0lBQUVrRztFQUFVLENBQUMsR0FBR25DLE1BQU07RUFDckMsTUFBTXJELElBQUksR0FBRyxDQUFFO0lBQUV5RixJQUFJLEVBQUUsQ0FBQztJQUFFQyxLQUFLLEVBQUUsQ0FBQztJQUFFQyxRQUFRLEVBQUU7RUFBRyxDQUFDLEVBQUUsQ0FBRTtJQUFFckcsT0FBTyxFQUFFO01BQUVqQixFQUFFLEVBQUVpQixPQUFPLENBQUNzRyxXQUFXLENBQUMsQ0FBQztNQUFFMUYsS0FBSyxFQUFFO0lBQWMsQ0FBQztJQUFFc0YsU0FBUyxFQUFFO01BQUVuSCxFQUFFLEVBQUVtSCxTQUFTO01BQUV0RixLQUFLLEVBQUVzRjtJQUFVLENBQUM7SUFBRXRCLElBQUksRUFBRSxNQUFNO0lBQUVoRSxLQUFLLEVBQUU7RUFBSSxDQUFDLENBQUUsQ0FBRTtFQUNwTSxPQUFPaEQsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0lBQUVZLElBQUk7SUFBRWQsTUFBTSxFQUFFO0VBQUssQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQztBQUVGO0FBQ0FqQyxJQUFJLENBQUNnQixHQUFHLENBQUMsd0VBQXdFLEVBQUUsQ0FBQztFQUFFb0Y7QUFBTyxDQUFDLEtBQUs7RUFDakcsTUFBTTtJQUFFL0Q7RUFBUSxDQUFDLEdBQUcrRCxNQUFNO0VBQzFCO0VBQ0EsTUFBTXRELFNBQVMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0VBQzVELE1BQU1DLElBQUksR0FBRyxDQUFDLENBQUM7RUFDZkQsU0FBUyxDQUFDOEYsT0FBTyxDQUFFQyxDQUFDLElBQUs7SUFDdkI5RixJQUFJLENBQUM4RixDQUFDLENBQUMsR0FBRztNQUFFeEcsT0FBTyxFQUFFd0csQ0FBQyxLQUFLLEtBQUssR0FBRyxXQUFXLEdBQUdBLENBQUMsS0FBSyxLQUFLLEdBQUcsVUFBVSxHQUFHQSxDQUFDLEtBQUssS0FBSyxHQUFHLE1BQU0sR0FBRyxhQUFhO01BQUU1RixLQUFLLEVBQUUsR0FBRztNQUFFQyxJQUFJLEVBQUU7SUFBTyxDQUFDO0VBQzlJLENBQUMsQ0FBQztFQUNGLE9BQU9qRCxZQUFZLENBQUNrQyxJQUFJLENBQUM7SUFBRVcsU0FBUztJQUFFQyxJQUFJO0lBQUV3RixTQUFTLEVBQUUsZ0JBQWdCO0lBQUUxRixNQUFNLEVBQUU7TUFBRWlHLFNBQVMsRUFBRSxNQUFNO01BQUVDLE9BQU8sRUFBRTtJQUFPLENBQUM7SUFBRTlHLE1BQU0sRUFBRTtFQUFLLENBQUMsQ0FBQztBQUMxSSxDQUFDLENBQUM7QUFHRjtBQUNBakMsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLGdEQUFnRCxFQUFFLENBQUM7RUFBRUM7QUFBUSxDQUFDLEtBQUs7RUFDMUUsTUFBTVMsR0FBRyxHQUFHLElBQUltQyxHQUFHLENBQUM1QyxPQUFPLENBQUNTLEdBQUcsQ0FBQztFQUNoQyxNQUFNc0gsR0FBRyxHQUFHdEgsR0FBRyxDQUFDb0MsWUFBWSxDQUFDOUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLFNBQVM7RUFDcEQsTUFBTWlJLElBQUksR0FBR0QsR0FBRyxDQUFDakYsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDTSxHQUFHLENBQUVqRCxFQUFFLEtBQU07SUFBRUEsRUFBRTtJQUFFOEgsTUFBTSxFQUFFOUgsRUFBRSxDQUFDK0gsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzdDLFdBQVcsQ0FBQyxDQUFDO0lBQUU4QyxhQUFhLEVBQUVoSSxFQUFFLEtBQUssU0FBUyxHQUFHLEtBQUssR0FBRyxJQUFJO0lBQUVvQywyQkFBMkIsRUFBRXBDLEVBQUUsS0FBSyxTQUFTLEdBQUcsQ0FBQyxHQUFHLEdBQUc7RUFBSSxDQUFDLENBQUMsQ0FBQztFQUNuTSxPQUFPbkIsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0lBQUU4RyxJQUFJO0lBQUVoSCxNQUFNLEVBQUU7RUFBSyxDQUFDLENBQUM7QUFDbEQsQ0FBQyxDQUFDO0FBRUY7QUFDQWpDLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyx5REFBeUQsRUFBRSxNQUFNO0VBQ3hFLE1BQU1xSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztFQUMvRCxPQUFPcEosWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0lBQUVrSCxNQUFNO0lBQUVwSCxNQUFNLEVBQUU7RUFBSyxDQUFDLENBQUM7QUFDcEQsQ0FBQyxDQUFDO0FBRUY7QUFDQWpDLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyx3Q0FBd0MsRUFBRSxDQUFDO0VBQUVDO0FBQVEsQ0FBQyxLQUFLO0VBQ2xFLE1BQU1TLEdBQUcsR0FBRyxJQUFJbUMsR0FBRyxDQUFDNUMsT0FBTyxDQUFDUyxHQUFHLENBQUM7RUFDaEMsTUFBTTRILEtBQUssR0FBRzVILEdBQUcsQ0FBQ29DLFlBQVksQ0FBQzlDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxZQUFZO0VBQ2hFLE1BQU11SSxHQUFHLEdBQUc3SCxHQUFHLENBQUNvQyxZQUFZLENBQUM5QyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksWUFBWTtFQUM1RCxNQUFNTyxJQUFJLEdBQUcsQ0FBQytILEtBQUssRUFBRUMsR0FBRyxDQUFDO0VBQ3pCLE1BQU1DLGtCQUFrQixHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztFQUNuQyxNQUFNQyxrQkFBa0IsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7RUFDbkMsT0FBT3hKLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztJQUFFdUgsS0FBSyxFQUFFO01BQUVuSSxJQUFJO01BQUVpSSxrQkFBa0I7TUFBRUM7SUFBbUI7RUFBRSxDQUFDLENBQUM7QUFDdkYsQ0FBQyxDQUFDO0FBRUY7QUFDQXpKLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyw2Q0FBNkMsRUFBRSxDQUFDO0VBQUVDO0FBQVEsQ0FBQyxLQUFLO0VBQ3ZFLE1BQU1TLEdBQUcsR0FBRyxJQUFJbUMsR0FBRyxDQUFDNUMsT0FBTyxDQUFDUyxHQUFHLENBQUM7RUFDaEMsTUFBTWlJLEtBQUssR0FBR2pJLEdBQUcsQ0FBQ29DLFlBQVksQ0FBQzlDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO0VBQ2pELE9BQU9mLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztJQUN2QnlILFFBQVEsRUFBRSxDQUFDO01BQUVDLEtBQUssRUFBRSxRQUFRO01BQUVuSSxHQUFHLEVBQUUscUJBQXFCO01BQUV1RixJQUFJLEVBQUUsWUFBWTtNQUFFNkMsSUFBSSxFQUFFO0lBQUksQ0FBQyxDQUFDO0lBQzFGN0gsTUFBTSxFQUFFLElBQUk7SUFDWjhILFVBQVUsRUFBRSxFQUFFO0lBQ2Q3SCxJQUFJLEVBQUU7RUFDUixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjtBQUNBbEMsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLHVEQUF1RCxFQUFFLE1BQU1mLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztFQUFFNkgsTUFBTSxFQUFFO0lBQUU3RyxHQUFHLEVBQUU7TUFBRSxJQUFJLEVBQUU7SUFBTTtFQUFFO0FBQUUsQ0FBQyxDQUFDLENBQUM7QUFFaEk7QUFDQTtBQUNBbkQsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLGtEQUFrRCxFQUFFLE1BQU1mLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztFQUFFOEgsUUFBUSxFQUFFLENBQUM7SUFBRUMsVUFBVSxFQUFFO01BQUVDLEdBQUcsRUFBRSxHQUFHO01BQUU3SSxLQUFLLEVBQUUsZUFBZTtNQUFFQyxJQUFJLEVBQUUsSUFBSW5CLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDZ0ssT0FBTyxDQUFDLENBQUM7TUFBRXpJLE9BQU8sRUFBRTtJQUFFLENBQUM7SUFBRTBJLFFBQVEsRUFBRTtNQUFFNUksV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSTtJQUFFO0VBQUUsQ0FBQyxDQUFDO0VBQUdRLE1BQU0sRUFBRTtBQUFLLENBQUMsQ0FBQyxDQUFDO0FBRTdSO0FBQ0FqQyxJQUFJLENBQUNnQixHQUFHLENBQUMsNkNBQTZDLEVBQUUsQ0FBQztFQUFFQztBQUFRLENBQUMsS0FBSztFQUN2RSxNQUFNUyxHQUFHLEdBQUcsSUFBSW1DLEdBQUcsQ0FBQzVDLE9BQU8sQ0FBQ1MsR0FBRyxDQUFDO0VBQ2hDLE1BQU00SSxJQUFJLEdBQUc1SSxHQUFHLENBQUM2SSxRQUFRO0VBQ3pCLElBQUlELElBQUksQ0FBQ2hGLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtJQUM1QixPQUFPckYsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO01BQ3ZCcUksT0FBTyxFQUFFO1FBQUU5SSxHQUFHLEVBQUUseUNBQXlDO1FBQUV1RixJQUFJLEVBQUU7TUFBYSxDQUFDO01BQy9FaEYsTUFBTSxFQUFFLElBQUk7TUFDWndJLFFBQVEsRUFBRUMsS0FBSyxDQUFDQyxJQUFJLENBQUM7UUFBRUMsTUFBTSxFQUFFO01BQUUsQ0FBQyxFQUFFLENBQUNDLENBQUMsRUFBRWpELENBQUMsTUFBTTtRQUFFWCxJQUFJLEVBQUUsWUFBWVcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUFFa0QsSUFBSSxFQUFFdkssSUFBSSxDQUFDQyxNQUFNLENBQUM7TUFBRSxDQUFDLENBQUM7SUFDcEcsQ0FBQyxDQUFDO0VBQ0o7RUFDQSxPQUFPUCxZQUFZLENBQUNrQyxJQUFJLENBQUM7SUFBRXFJLE9BQU8sRUFBRTtNQUFFOUksR0FBRyxFQUFFLHlDQUF5QztNQUFFdUYsSUFBSSxFQUFFO0lBQWE7RUFBRSxDQUFDLENBQUM7QUFDL0csQ0FBQyxDQUFDO0FBRUY7QUFDQWpILElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyxzREFBc0QsRUFBRSxDQUFDO0VBQUVDO0FBQVEsQ0FBQyxLQUFLO0VBQ2hGLE1BQU1TLEdBQUcsR0FBRyxJQUFJbUMsR0FBRyxDQUFDNUMsT0FBTyxDQUFDUyxHQUFHLENBQUM7RUFDaEMsTUFBTTRILEtBQUssR0FBRzVILEdBQUcsQ0FBQ29DLFlBQVksQ0FBQzlDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxVQUFVO0VBQ3pELE1BQU11SSxHQUFHLEdBQUc3SCxHQUFHLENBQUNvQyxZQUFZLENBQUM5QyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksVUFBVTtFQUNyRCxNQUFNK0osR0FBRyxHQUFHckosR0FBRyxDQUFDb0MsWUFBWSxDQUFDOUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVE7RUFDeEQsTUFBTWdLLEdBQUcsR0FBR3RKLEdBQUcsQ0FBQ29DLFlBQVksQ0FBQzlDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxVQUFVOztFQUUzRDtFQUNBLE1BQU1PLElBQUksR0FBRyxFQUFFO0VBQ2YsTUFBTWlJLGtCQUFrQixHQUFHLEVBQUU7RUFDN0IsTUFBTUMsa0JBQWtCLEdBQUcsRUFBRTtFQUM3QixNQUFNd0IsaUJBQWlCLEdBQUcsRUFBRTtFQUU1QixNQUFNQyxTQUFTLEdBQUcsSUFBSTlLLElBQUksQ0FBQ2tKLEtBQUssQ0FBQ0gsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRUcsS0FBSyxDQUFDSCxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRUcsS0FBSyxDQUFDSCxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2xGLE1BQU1nQyxPQUFPLEdBQUcsSUFBSS9LLElBQUksQ0FBQ21KLEdBQUcsQ0FBQ0osS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRUksR0FBRyxDQUFDSixLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRUksR0FBRyxDQUFDSixLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0VBRTFFLEtBQUssSUFBSXRCLENBQUMsR0FBRyxJQUFJekgsSUFBSSxDQUFDOEssU0FBUyxDQUFDLEVBQUVyRCxDQUFDLElBQUlzRCxPQUFPLEVBQUV0RCxDQUFDLENBQUNDLE9BQU8sQ0FBQ0QsQ0FBQyxDQUFDRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzFFeEcsSUFBSSxDQUFDeUcsSUFBSSxDQUFDSCxDQUFDLENBQUN4SCxXQUFXLENBQUMsQ0FBQyxDQUFDMEQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hDeUYsa0JBQWtCLENBQUN4QixJQUFJLENBQUMsRUFBRSxHQUFHekgsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbERpSixrQkFBa0IsQ0FBQ3pCLElBQUksQ0FBQyxFQUFFLEdBQUd6SCxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRHlLLGlCQUFpQixDQUFDakQsSUFBSSxDQUFDekgsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDOUM7RUFFQSxPQUFPUCxZQUFZLENBQUNrQyxJQUFJLENBQUM7SUFDdkIrSCxVQUFVLEVBQUU7TUFDVmtCLFNBQVMsRUFBRTtRQUNUQyxPQUFPLEVBQUVDLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDL0Isa0JBQWtCLENBQUNuRixHQUFHLENBQUMsQ0FBQ2lFLENBQUMsRUFBRVYsQ0FBQyxLQUFLLENBQUNyRyxJQUFJLENBQUNxRyxDQUFDLENBQUMsQ0FBQzRELE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUVsRCxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdGbUQsT0FBTyxFQUFFSCxNQUFNLENBQUNDLFdBQVcsQ0FBQzlCLGtCQUFrQixDQUFDcEYsR0FBRyxDQUFDLENBQUNpRSxDQUFDLEVBQUVWLENBQUMsS0FBSyxDQUFDckcsSUFBSSxDQUFDcUcsQ0FBQyxDQUFDLENBQUM0RCxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFbEQsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3Rm9ELFdBQVcsRUFBRUosTUFBTSxDQUFDQyxXQUFXLENBQUNOLGlCQUFpQixDQUFDNUcsR0FBRyxDQUFDLENBQUNpRSxDQUFDLEVBQUVWLENBQUMsS0FBSyxDQUFDckcsSUFBSSxDQUFDcUcsQ0FBQyxDQUFDLENBQUM0RCxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFbEQsQ0FBQyxDQUFDLENBQUM7TUFDakc7SUFDRjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGO0FBQ0F0SSxJQUFJLENBQUNnQixHQUFHLENBQUMsNkVBQTZFLEVBQUUsTUFBTWYsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0VBQzlHd0osSUFBSSxFQUFFLG1CQUFtQjtFQUN6QjFCLFFBQVEsRUFBRSxDQUNSO0lBQ0UwQixJQUFJLEVBQUUsU0FBUztJQUNmekIsVUFBVSxFQUFFO01BQ1ZDLEdBQUcsRUFBRSxHQUFHO01BQ1I3SSxLQUFLLEVBQUUsdUJBQXVCO01BQzlCQyxJQUFJLEVBQUVuQixJQUFJLENBQUNvQixHQUFHLENBQUMsQ0FBQztNQUNoQkcsT0FBTyxFQUFFLENBQUM7TUFDVmlLLEdBQUcsRUFBRSxHQUFHO01BQ1JsSyxHQUFHLEVBQUU7SUFDUCxDQUFDO0lBQ0QySSxRQUFRLEVBQUU7TUFDUnNCLElBQUksRUFBRSxPQUFPO01BQ2JsSyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJO0lBQ2xDO0VBQ0YsQ0FBQyxFQUNEO0lBQ0VrSyxJQUFJLEVBQUUsU0FBUztJQUNmekIsVUFBVSxFQUFFO01BQ1ZDLEdBQUcsRUFBRSxHQUFHO01BQ1I3SSxLQUFLLEVBQUUsbUJBQW1CO01BQzFCQyxJQUFJLEVBQUVuQixJQUFJLENBQUNvQixHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7TUFDM0JHLE9BQU8sRUFBRSxDQUFDO01BQ1ZpSyxHQUFHLEVBQUUsR0FBRztNQUNSbEssR0FBRyxFQUFFO0lBQ1AsQ0FBQztJQUNEMkksUUFBUSxFQUFFO01BQ1JzQixJQUFJLEVBQUUsT0FBTztNQUNibEssV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUc7SUFDL0I7RUFDRixDQUFDO0FBRUwsQ0FBQyxDQUFDLENBQUM7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBekIsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLHdCQUF3QixFQUFFLE1BQU1mLFlBQVksQ0FBQ2tDLElBQUksQ0FBQyxDQUN6RDtFQUFFZixFQUFFLEVBQUUsT0FBTztFQUFFQyxTQUFTLEVBQUUsR0FBRztFQUFFQyxLQUFLLEVBQUUsZUFBZTtFQUFFdUssUUFBUSxFQUFFLGVBQWU7RUFBRUMsU0FBUyxFQUFFO0FBQUksQ0FBQyxDQUNsRyxDQUFDLEVBQUU7RUFBRXRHLE1BQU0sRUFBRTtBQUFJLENBQUMsQ0FBQztBQUVyQjtBQUNBeEYsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLG9CQUFvQixFQUFFLE1BQU1mLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztFQUNyRDRKLFdBQVcsRUFBRSxHQUFHO0VBQ2hCaEMsVUFBVSxFQUFFLENBQUM7RUFDYmhJLFlBQVksRUFBRSxHQUFHO0VBQ2pCaUssYUFBYSxFQUFFO0FBQ2pCLENBQUMsQ0FBQyxDQUFDO0FBRUg7QUFDQWhNLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxNQUFNZixZQUFZLENBQUNrQyxJQUFJLENBQUM7RUFDL0RFLE9BQU8sRUFBRSxNQUFNO0VBQ2ZnSCxNQUFNLEVBQUUsQ0FDTjtJQUFFdEUsT0FBTyxFQUFFLE1BQU07SUFBRWtILEtBQUssRUFBRSxHQUFHO0lBQUVDLFVBQVUsRUFBRTtFQUFJLENBQUMsRUFDaEQ7SUFBRW5ILE9BQU8sRUFBRSxVQUFVO0lBQUVrSCxLQUFLLEVBQUUsR0FBRztJQUFFQyxVQUFVLEVBQUU7RUFBSyxDQUFDLEVBQ3JEO0lBQUVuSCxPQUFPLEVBQUUsTUFBTTtJQUFFa0gsS0FBSyxFQUFFLEdBQUc7SUFBRUMsVUFBVSxFQUFFO0VBQUssQ0FBQyxFQUNqRDtJQUFFbkgsT0FBTyxFQUFFLE9BQU87SUFBRWtILEtBQUssRUFBRSxHQUFHO0lBQUVDLFVBQVUsRUFBRTtFQUFLLENBQUMsQ0FDbkQ7RUFDRHJLLE9BQU8sRUFBRTtJQUFFOEIsaUJBQWlCLEVBQUU7RUFBTztBQUN2QyxDQUFDLENBQUMsQ0FBQztBQUVIO0FBQ0EzRCxJQUFJLENBQUNnQixHQUFHLENBQUMsb0NBQW9DLEVBQUUsTUFBTWYsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0VBQ3JFRSxPQUFPLEVBQUUsTUFBTTtFQUNmOEosTUFBTSxFQUFFLENBQ047SUFBRUMsTUFBTSxFQUFFLE1BQU07SUFBRUMsV0FBVyxFQUFFLE9BQU87SUFBRUMsSUFBSSxFQUFFLEdBQUc7SUFBRS9LLElBQUksRUFBRTtFQUFFLENBQUMsRUFDNUQ7SUFBRTZLLE1BQU0sRUFBRSxPQUFPO0lBQUVDLFdBQVcsRUFBRSxVQUFVO0lBQUVDLElBQUksRUFBRSxFQUFFO0lBQUUvSyxJQUFJLEVBQUU7RUFBRSxDQUFDLEVBQy9EO0lBQUU2SyxNQUFNLEVBQUUsVUFBVTtJQUFFQyxXQUFXLEVBQUUsT0FBTztJQUFFQyxJQUFJLEVBQUUsR0FBRztJQUFFL0ssSUFBSSxFQUFFO0VBQUUsQ0FBQyxFQUNoRTtJQUFFNkssTUFBTSxFQUFFLE9BQU87SUFBRUMsV0FBVyxFQUFFLE1BQU07SUFBRUMsSUFBSSxFQUFFLEVBQUU7SUFBRS9LLElBQUksRUFBRTtFQUFFLENBQUMsQ0FDNUQ7RUFDRGdMLFlBQVksRUFBRTtJQUFFQyxpQkFBaUIsRUFBRTtFQUFHO0FBQ3hDLENBQUMsQ0FBQyxDQUFDO0FBRUg7QUFDQXhNLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyxpQ0FBaUMsRUFBRSxNQUFNZixZQUFZLENBQUNrQyxJQUFJLENBQUM7RUFDbEVtQixPQUFPLEVBQUUsSUFBSTtFQUNiMUMsTUFBTSxFQUFFLG9DQUFvQztFQUM1Q21DLElBQUksRUFBRTtJQUFFRCxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7RUFBRTtBQUNoRSxDQUFDLENBQUMsQ0FBQztBQUVIO0FBQ0E5QyxJQUFJLENBQUNnQixHQUFHLENBQUMsb0NBQW9DLEVBQUUsTUFBTWYsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0VBQ3JFbUIsT0FBTyxFQUFFLElBQUk7RUFDYjFDLE1BQU0sRUFBRSx1Q0FBdUM7RUFDL0NtQyxJQUFJLEVBQUU7SUFBRVgsUUFBUSxFQUFFO0VBQUc7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSDtBQUNBcEMsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLG9CQUFvQixFQUFFLENBQUM7RUFBRUM7QUFBUSxDQUFDLEtBQUs7RUFDOUMsTUFBTVMsR0FBRyxHQUFHLElBQUltQyxHQUFHLENBQUM1QyxPQUFPLENBQUNTLEdBQUcsQ0FBQztFQUNoQyxNQUFNVyxPQUFPLEdBQUdYLEdBQUcsQ0FBQ29DLFlBQVksQ0FBQzlDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLO0VBQ3hELE1BQU1rSyxTQUFTLEdBQUd4SixHQUFHLENBQUNvQyxZQUFZLENBQUM5QyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksWUFBWTtFQUNuRSxNQUFNbUssT0FBTyxHQUFHekosR0FBRyxDQUFDb0MsWUFBWSxDQUFDOUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLFlBQVk7RUFDL0QsT0FBT2YsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0lBQ3ZCRSxPQUFPO0lBQ1B1SCxRQUFRLEVBQUUsQ0FBQztNQUFFQyxLQUFLLEVBQUUsY0FBYztNQUFFbkksR0FBRyxFQUFFLHFCQUFxQjtNQUFFdUYsSUFBSSxFQUFFaUUsU0FBUztNQUFFcEIsSUFBSSxFQUFFO0lBQUksQ0FBQztFQUM5RixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjtBQUNBOUosSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLGdDQUFnQyxFQUFFLE1BQU07RUFDL0MsT0FBTyxJQUFJZixZQUFZLENBQUMsa0VBQWtFLEVBQUU7SUFDMUZ1RixNQUFNLEVBQUUsR0FBRztJQUNYSCxPQUFPLEVBQUU7TUFDUCxjQUFjLEVBQUUsbUJBQW1CO01BQ25DLGVBQWUsRUFBRSxVQUFVO01BQzNCLFlBQVksRUFBRTtJQUNoQjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGO0FBQ0FyRixJQUFJLENBQUM2RSxJQUFJLENBQUMsK0JBQStCLEVBQUUsTUFBTTVFLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztFQUFFdUQsS0FBSyxFQUFFO0FBQWlCLENBQUMsQ0FBQyxDQUFDO0FBRWhHO0FBQ0ExRixJQUFJLENBQUNnQixHQUFHLENBQUMscUJBQXFCLEVBQUUsTUFBTWYsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0VBQ3REc0ssUUFBUSxFQUFFLEtBQUs7RUFDZkMsUUFBUSxFQUFFO0lBQ1JDLE9BQU8sRUFBRTtNQUNQQyxLQUFLLEVBQUUsQ0FBQztRQUFFeEwsRUFBRSxFQUFFLElBQUk7UUFBRStELElBQUksRUFBRSxPQUFPO1FBQUU4RyxLQUFLLEVBQUU7TUFBRyxDQUFDO0lBQ2hEO0VBQ0Y7QUFDRixDQUFDLENBQUMsQ0FBQztBQUVIO0FBQ0FqTSxJQUFJLENBQUNnQixHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU1mLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztFQUNoRHNLLFFBQVEsRUFBRSxLQUFLO0VBQ2ZDLFFBQVEsRUFBRTtJQUNSQyxPQUFPLEVBQUU7TUFBRXhILElBQUksRUFBRTtJQUFVO0VBQzdCO0FBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSDtBQUNBbkYsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLG1GQUFtRixFQUFFLE1BQU1mLFlBQVksQ0FBQ2tDLElBQUksQ0FBQztFQUNwSHdKLElBQUksRUFBRSxtQkFBbUI7RUFDekIxQixRQUFRLEVBQUUsQ0FBQztJQUFFQyxVQUFVLEVBQUU7TUFBRUMsR0FBRyxFQUFFLEdBQUc7TUFBRTdJLEtBQUssRUFBRTtJQUFnQixDQUFDO0lBQUUrSSxRQUFRLEVBQUU7TUFBRTVJLFdBQVcsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUk7SUFBRTtFQUFFLENBQUM7QUFDbEgsQ0FBQyxDQUFDOztBQUVGO0FBQUEsRUFDRXpCLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztFQUFFQztBQUFRLENBQUMsS0FBSztFQUMvQixJQUFJO0lBQ0YsTUFBTTRMLENBQUMsR0FBRyxJQUFJaEosR0FBRyxDQUFDNUMsT0FBTyxDQUFDUyxHQUFHLENBQUM7SUFDOUIsTUFBTW9MLElBQUksR0FBR0QsQ0FBQyxDQUFDRSxRQUFRO0lBQ3ZCLElBQUlELElBQUksS0FBSyxXQUFXLElBQUlBLElBQUksS0FBSyxXQUFXLElBQUlBLElBQUksS0FBSyxLQUFLLEVBQUU7TUFDbEU7TUFDQSxPQUFPRSxTQUFTO0lBQ2xCO0VBQ0YsQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRTtJQUNWO0VBQUE7RUFFRkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsc0NBQXNDbE0sT0FBTyxDQUFDUyxHQUFHLEVBQUUsQ0FBQztFQUNoRSxPQUFPekIsWUFBWSxDQUFDa0MsSUFBSSxDQUFDO0lBQUV0QixLQUFLLEVBQUUsc0JBQXNCO0lBQUVhLEdBQUcsRUFBRVQsT0FBTyxDQUFDUztFQUFJLENBQUMsQ0FBQztBQUMvRSxDQUFDLENBQUMsQ0FDSDtBQUVEMEwsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFBRXRNO0FBQVMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==