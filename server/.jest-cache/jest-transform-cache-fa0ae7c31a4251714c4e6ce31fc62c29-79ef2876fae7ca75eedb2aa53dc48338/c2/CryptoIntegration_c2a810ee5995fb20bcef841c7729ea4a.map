{"version":3,"names":["_safeFetch","_interopRequireDefault","require","_forceMocks","e","__esModule","default","cov_1uc3s7e4dj","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","CryptoIntegration","constructor","baseUrl","getCryptoData","cryptoIds","vsCurrency","ids","join","url","data","safeFetch","timeout","retries","error","forceMocksEnabled","console","isMock","source","Error","message","String","getHistoricalData","cryptoId","days","_default","exports"],"sources":["CryptoIntegration.js"],"sourcesContent":["import safeFetch from '../lib/safeFetch.js';\nimport { forceMocksEnabled } from '../lib/force-mocks.js';\n\nclass CryptoIntegration {\n  constructor() {\n    this.baseUrl = 'https://api.coingecko.com/api/v3';\n  }\n\n  async getCryptoData(cryptoIds = ['bitcoin', 'ethereum'], vsCurrency = 'usd') {\n    try {\n      const ids = cryptoIds.join(',');\n      const url = `${this.baseUrl}/coins/markets?ids=${ids}&vs_currency=${vsCurrency}&order=market_cap_desc&per_page=100&page=1&sparkline=true&price_change_percentage=1h%2C24h%2C7d%2C30d`;\n      const data = await safeFetch(url, {}, { timeout: 10000, retries: 2 });\n      return data;\n    } catch (error) {\n      if (forceMocksEnabled()) {\n        console.error('CryptoIntegration: returning FORCE_MOCKS mock for crypto data due to error:', error);\n        return { error: null, cryptoIds, vsCurrency, isMock: true, source: 'FORCE_MOCKS:Crypto' };\n      }\n      console.error('Error fetching crypto data:', error);\n      throw new Error(`CryptoIntegration failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n  async getHistoricalData(cryptoId, days = 30, vsCurrency = 'usd') {\n    try {\n      const url = `${this.baseUrl}/coins/${cryptoId}/market_chart?vs_currency=${vsCurrency}&days=${days}&interval=daily`;\n      const data = await safeFetch(url, {}, { timeout: 10000, retries: 2 });\n      return data;\n    } catch (error) {\n      if (forceMocksEnabled()) {\n        console.error('CryptoIntegration: returning FORCE_MOCKS mock for historical data due to error:', error);\n        return { error: null, cryptoId, days, vsCurrency, isMock: true, source: 'FORCE_MOCKS:Crypto' };\n      }\n      console.error('Error fetching historical crypto data:', error);\n      throw new Error(`CryptoIntegration historical failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n}\n\nexport default CryptoIntegration;"],"mappings":"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","ignoreList":[]}