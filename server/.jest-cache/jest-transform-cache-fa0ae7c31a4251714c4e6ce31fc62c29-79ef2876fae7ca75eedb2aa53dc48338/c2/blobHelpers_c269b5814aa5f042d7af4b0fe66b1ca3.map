{"version":3,"names":["Object","defineProperty","exports","value","sliceBlob","consumeBlobParts","isFunction_1","require","CHUNK_SIZE","clonePart","part","end","byteOffset","byteLength","position","size","Math","min","chunk","buffer","slice","Uint8Array","consumeNodeBlob","blob","arrayBuffer","parts","clone","ArrayBuffer","isView","isFunction","stream","blobParts","blobSize","start","relativeStart","max","relativeEnd","span","added","partSize","subarray"],"sources":["blobHelpers.js"],"sourcesContent":["\"use strict\";\n/*! Based on fetch-blob. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource> & David Frank */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sliceBlob = exports.consumeBlobParts = void 0;\nconst isFunction_1 = require(\"./isFunction\");\nconst CHUNK_SIZE = 65536;\nasync function* clonePart(part) {\n    const end = part.byteOffset + part.byteLength;\n    let position = part.byteOffset;\n    while (position !== end) {\n        const size = Math.min(end - position, CHUNK_SIZE);\n        const chunk = part.buffer.slice(position, position + size);\n        position += chunk.byteLength;\n        yield new Uint8Array(chunk);\n    }\n}\nasync function* consumeNodeBlob(blob) {\n    let position = 0;\n    while (position !== blob.size) {\n        const chunk = blob.slice(position, Math.min(blob.size, position + CHUNK_SIZE));\n        const buffer = await chunk.arrayBuffer();\n        position += buffer.byteLength;\n        yield new Uint8Array(buffer);\n    }\n}\nasync function* consumeBlobParts(parts, clone = false) {\n    for (const part of parts) {\n        if (ArrayBuffer.isView(part)) {\n            if (clone) {\n                yield* clonePart(part);\n            }\n            else {\n                yield part;\n            }\n        }\n        else if ((0, isFunction_1.isFunction)(part.stream)) {\n            yield* part.stream();\n        }\n        else {\n            yield* consumeNodeBlob(part);\n        }\n    }\n}\nexports.consumeBlobParts = consumeBlobParts;\nfunction* sliceBlob(blobParts, blobSize, start = 0, end) {\n    end !== null && end !== void 0 ? end : (end = blobSize);\n    let relativeStart = start < 0\n        ? Math.max(blobSize + start, 0)\n        : Math.min(start, blobSize);\n    let relativeEnd = end < 0\n        ? Math.max(blobSize + end, 0)\n        : Math.min(end, blobSize);\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    let added = 0;\n    for (const part of blobParts) {\n        if (added >= span) {\n            break;\n        }\n        const partSize = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n        if (relativeStart && partSize <= relativeStart) {\n            relativeStart -= partSize;\n            relativeEnd -= partSize;\n        }\n        else {\n            let chunk;\n            if (ArrayBuffer.isView(part)) {\n                chunk = part.subarray(relativeStart, Math.min(partSize, relativeEnd));\n                added += chunk.byteLength;\n            }\n            else {\n                chunk = part.slice(relativeStart, Math.min(partSize, relativeEnd));\n                added += chunk.size;\n            }\n            relativeEnd -= partSize;\n            relativeStart = 0;\n            yield chunk;\n        }\n    }\n}\nexports.sliceBlob = sliceBlob;\n"],"mappings":"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","ignoreList":[]}