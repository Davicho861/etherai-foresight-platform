7bbf9a6d986f30993664726d5d94ade1
"use strict";

const request = require('supertest');
const express = require('express');
describe('/api/consciousness route', () => {
  afterEach(() => {
    jest.resetModules();
    jest.restoreAllMocks();
  });
  test('returns local fallback when chroma client unavailable', async () => {
    await jest.isolateModulesAsync(async () => {
      jest.doMock('../../src/database.js', () => ({
        getChromaClient: jest.fn(() => null)
      }));
      jest.doMock('fs/promises', () => ({
        access: jest.fn().mockResolvedValue(true),
        readFile: jest.fn().mockResolvedValue(JSON.stringify({
          id: 'a'
        }) + '\n')
      }));
      const routerMod = require('../../src/routes/consciousness.js');
      let router = routerMod;
      if (router && router.default) router = router.default;
      const app = express();
      app.use('/api/consciousness', router);
      const res = await request(app).get('/api/consciousness').set('Host', 'localhost');
      expect(res.statusCode).toBe(200);
      expect(res.body.source).toBe('local');
      expect(Array.isArray(res.body.items)).toBe(true);
    });
  });
  test('returns chroma source when client provides collection', async () => {
    await jest.isolateModulesAsync(async () => {
      const fakeCollection = {
        get: jest.fn().mockResolvedValue({
          ids: ['id1'],
          documents: ['err'],
          metadatas: [{
            timestamp: Date.now()
          }]
        })
      };
      jest.doMock('../../src/database.js', () => ({
        getChromaClient: jest.fn(() => ({
          getOrCreateCollection: jest.fn().mockResolvedValue(fakeCollection)
        }))
      }));
      const routerMod = require('../../src/routes/consciousness.js');
      let router = routerMod;
      if (router && router.default) router = router.default;
      const app = express();
      app.use('/api/consciousness', router);
      const res = await request(app).get('/api/consciousness').set('Host', 'localhost');
      expect(res.statusCode).toBe(200);
      expect(res.body.source).toBe('chroma');
      expect(Array.isArray(res.body.items)).toBe(true);
      expect(res.body.items[0].id).toBe('id1');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImV4cHJlc3MiLCJkZXNjcmliZSIsImFmdGVyRWFjaCIsImplc3QiLCJyZXNldE1vZHVsZXMiLCJyZXN0b3JlQWxsTW9ja3MiLCJ0ZXN0IiwiaXNvbGF0ZU1vZHVsZXNBc3luYyIsImRvTW9jayIsImdldENocm9tYUNsaWVudCIsImZuIiwiYWNjZXNzIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJyZWFkRmlsZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpZCIsInJvdXRlck1vZCIsInJvdXRlciIsImRlZmF1bHQiLCJhcHAiLCJ1c2UiLCJyZXMiLCJnZXQiLCJzZXQiLCJleHBlY3QiLCJzdGF0dXNDb2RlIiwidG9CZSIsImJvZHkiLCJzb3VyY2UiLCJBcnJheSIsImlzQXJyYXkiLCJpdGVtcyIsImZha2VDb2xsZWN0aW9uIiwiaWRzIiwiZG9jdW1lbnRzIiwibWV0YWRhdGFzIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImdldE9yQ3JlYXRlQ29sbGVjdGlvbiJdLCJzb3VyY2VzIjpbImNvbnNjaW91c25lc3Mucm91dGUudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuXG5kZXNjcmliZSgnL2FwaS9jb25zY2lvdXNuZXNzIHJvdXRlJywgKCkgPT4ge1xuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRNb2R1bGVzKCk7XG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgdGVzdCgncmV0dXJucyBsb2NhbCBmYWxsYmFjayB3aGVuIGNocm9tYSBjbGllbnQgdW5hdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgamVzdC5pc29sYXRlTW9kdWxlc0FzeW5jKGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9zcmMvZGF0YWJhc2UuanMnLCAoKSA9PiAoeyBnZXRDaHJvbWFDbGllbnQ6IGplc3QuZm4oKCkgPT4gbnVsbCkgfSkpO1xuICAgICAgamVzdC5kb01vY2soJ2ZzL3Byb21pc2VzJywgKCkgPT4gKHtcbiAgICAgICAgYWNjZXNzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgICAgIHJlYWRGaWxlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoSlNPTi5zdHJpbmdpZnkoeyBpZDogJ2EnIH0pICsgJ1xcbicpXG4gICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IHJvdXRlck1vZCA9IHJlcXVpcmUoJy4uLy4uL3NyYy9yb3V0ZXMvY29uc2Npb3VzbmVzcy5qcycpO1xuICAgICAgbGV0IHJvdXRlciA9IHJvdXRlck1vZDtcbiAgICAgIGlmIChyb3V0ZXIgJiYgcm91dGVyLmRlZmF1bHQpIHJvdXRlciA9IHJvdXRlci5kZWZhdWx0O1xuXG4gICAgICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gICAgICBhcHAudXNlKCcvYXBpL2NvbnNjaW91c25lc3MnLCByb3V0ZXIpO1xuXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvYXBpL2NvbnNjaW91c25lc3MnKS5zZXQoJ0hvc3QnLCAnbG9jYWxob3N0Jyk7XG4gICAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXMuYm9keS5zb3VyY2UpLnRvQmUoJ2xvY2FsJyk7XG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXMuYm9keS5pdGVtcykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JldHVybnMgY2hyb21hIHNvdXJjZSB3aGVuIGNsaWVudCBwcm92aWRlcyBjb2xsZWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGplc3QuaXNvbGF0ZU1vZHVsZXNBc3luYyhhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmYWtlQ29sbGVjdGlvbiA9IHsgZ2V0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBpZHM6IFsnaWQxJ10sIGRvY3VtZW50czogWydlcnInXSwgbWV0YWRhdGFzOiBbeyB0aW1lc3RhbXA6IERhdGUubm93KCkgfV0gfSkgfTtcbiAgICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9zcmMvZGF0YWJhc2UuanMnLCAoKSA9PiAoeyBnZXRDaHJvbWFDbGllbnQ6IGplc3QuZm4oKCkgPT4gKHsgZ2V0T3JDcmVhdGVDb2xsZWN0aW9uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoZmFrZUNvbGxlY3Rpb24pIH0pKSB9KSk7XG5cbiAgICAgIGNvbnN0IHJvdXRlck1vZCA9IHJlcXVpcmUoJy4uLy4uL3NyYy9yb3V0ZXMvY29uc2Npb3VzbmVzcy5qcycpO1xuICAgICAgbGV0IHJvdXRlciA9IHJvdXRlck1vZDtcbiAgICAgIGlmIChyb3V0ZXIgJiYgcm91dGVyLmRlZmF1bHQpIHJvdXRlciA9IHJvdXRlci5kZWZhdWx0O1xuXG4gICAgICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gICAgICBhcHAudXNlKCcvYXBpL2NvbnNjaW91c25lc3MnLCByb3V0ZXIpO1xuXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvYXBpL2NvbnNjaW91c25lc3MnKS5zZXQoJ0hvc3QnLCAnbG9jYWxob3N0Jyk7XG4gICAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXMuYm9keS5zb3VyY2UpLnRvQmUoJ2Nocm9tYScpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzLmJvZHkuaXRlbXMpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlcy5ib2R5Lml0ZW1zWzBdLmlkKS50b0JlKCdpZDEnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7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