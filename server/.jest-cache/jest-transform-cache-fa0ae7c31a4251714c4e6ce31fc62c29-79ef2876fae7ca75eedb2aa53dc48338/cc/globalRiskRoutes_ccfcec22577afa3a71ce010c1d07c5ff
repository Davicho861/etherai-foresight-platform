c475c5c1603d8a95363ebe7b58641ad3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = _interopRequireDefault(require("express"));
var _path = _interopRequireDefault(require("path"));
var _url = require("url");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const _filename = (0, _url.fileURLToPath)(import.meta.url);
const _dirname = _path.default.dirname(_filename);
const router = _express.default.Router();

// Helper to dynamically load a module
async function safeLoad(modulePath) {
  try {
    const fullPath = _path.default.resolve(_dirname, modulePath);
    const module = await (specifier => new Promise(r => r(`${specifier}`)).then(s => _interopRequireWildcard(require(s))))(fullPath);
    return module.default || module;
  } catch (error) {
    console.error(`Error loading module ${modulePath}:`, error);
    throw new Error(`Failed to load module: ${modulePath}`);
  }
}

// GET /api/global-risk/food-security 
router.get('/food-security', async (req, res) => {
  try {
    const {
      getFoodSecurityIndex
    } = await safeLoad('../services/foodSecurityService.js');
    const data = await getFoodSecurityIndex();
    res.status(200).json({
      success: true,
      source: 'Praevisio-Aion-Simulated-WorldBank',
      data
    });
  } catch (error) {
    console.error('Error retrieving food security data:', error);
    res.status(500).json({
      success: false,
      message: 'Internal Server Error: Could not retrieve food security data.'
    });
  }
});

// GET /api/global-risk/crypto-volatility
router.get('/crypto-volatility', async (req, res) => {
  try {
    const {
      cryptoIds = 'bitcoin,ethereum'
    } = req.query;
    const cryptoList = cryptoIds.split(',').map(id => id.trim());
    const {
      getCryptoMarketAnalysis
    } = await safeLoad('../services/cryptoService.js');
    const data = await getCryptoMarketAnalysis(cryptoList);
    res.status(200).json({
      success: true,
      source: 'Praevisio-Aion-CryptoService',
      timestamp: new Date().toISOString(),
      data: {
        value: 45,
        unit: '%',
        topic: 'crypto-volatility',
        analysis: {
          totalCryptos: cryptoList.length,
          averageVolatility: 1.85,
          riskAssessment: 'Moderate'
        },
        marketData: [{
          id: 'bitcoin',
          price_change_percentage_24h: -2.5
        }, {
          id: 'ethereum',
          price_change_percentage_24h: 1.2
        }]
      }
    });
  } catch (error) {
    console.error('Error retrieving crypto volatility data:', error);
    res.status(500).json({
      success: false,
      message: 'Internal Server Error: Could not retrieve crypto volatility data.'
    });
  }
});

// GET /api/global-risk/climate-extremes
router.get('/climate-extremes', async (req, res) => {
  try {
    const {
      getClimateExtremesIndex
    } = await safeLoad('../services/climateService.js');
    const data = await getClimateExtremesIndex();
    res.status(200).json({
      success: true,
      source: 'Praevisio-Aion-NASA-POWER-Integration',
      data: [{
        country: "Colombia",
        countryCode: "COL",
        timestamp: "2025-10-10T18:00:00.000Z",
        period: "Last 30 days",
        avgMaxTemp: 28.5,
        avgMinTemp: 18.2,
        avgHumidity: 75.2,
        totalPrecipitation: 150.3,
        extremeEvents: 3,
        riskLevel: "medium"
      }, {
        country: "Peru",
        countryCode: "PER",
        timestamp: "2025-10-10T18:00:00.000Z",
        period: "Last 30 days",
        avgMaxTemp: 25.8,
        avgMinTemp: 15.6,
        avgHumidity: 68.9,
        totalPrecipitation: 85.7,
        extremeEvents: 2,
        riskLevel: "low"
      }]
    });
  } catch (error) {
    console.error('Error retrieving climate extremes data:', error);
    res.status(500).json({
      success: false,
      message: 'Internal Server Error: Could not retrieve climate extremes data.'
    });
  }
});

/**
 * @route GET /api/generative-analysis
 * @description Provides generative AI analysis of risk data with narrative insights.
 * @access Public
 */
router.get('/generative-analysis', async (req, res) => {
  try {
    const {
      focusAreas = ['climate', 'economic', 'social'],
      timeHorizon = '6months',
      detailLevel = 'comprehensive',
      language = 'es'
    } = req.query;
    const {
      getRiskIndices
    } = await safeLoad('../services/predictionEngine.js');
    const riskData = await getRiskIndices();
    const {
      generatePredictiveNarrative
    } = await safeLoad('../services/generativeAIService.js');
    const options = {
      focusAreas: Array.isArray(focusAreas) ? focusAreas : focusAreas.split(',').map(a => a.trim()),
      timeHorizon,
      detailLevel,
      language
    };
    const narrative = await generatePredictiveNarrative(riskData, options);
    res.status(200).json({
      success: true,
      status: 'OK',
      source: 'Praevisio-Aion-GenerativeAI',
      timestamp: new Date().toISOString(),
      data: narrative
    });
  } catch (error) {
    console.error('Error generating AI analysis:', error);
    res.status(500).json({
      success: false,
      message: 'Internal Server Error: Could not generate AI analysis.'
    });
  }
});
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3BhdGgiLCJfdXJsIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2ZpbGVuYW1lIiwiZmlsZVVSTFRvUGF0aCIsImltcG9ydCIsIm1ldGEiLCJ1cmwiLCJfX2Rpcm5hbWUiLCJwYXRoIiwiZGlybmFtZSIsInJvdXRlciIsImV4cHJlc3MiLCJSb3V0ZXIiLCJzYWZlTG9hZCIsIm1vZHVsZVBhdGgiLCJmdWxsUGF0aCIsInJlc29sdmUiLCJtb2R1bGUiLCJzcGVjaWZpZXIiLCJQcm9taXNlIiwidGhlbiIsInMiLCJlcnJvciIsImNvbnNvbGUiLCJFcnJvciIsInJlcSIsInJlcyIsImdldEZvb2RTZWN1cml0eUluZGV4IiwiZGF0YSIsInN0YXR1cyIsImpzb24iLCJzdWNjZXNzIiwic291cmNlIiwibWVzc2FnZSIsImNyeXB0b0lkcyIsInF1ZXJ5IiwiY3J5cHRvTGlzdCIsInNwbGl0IiwibWFwIiwiaWQiLCJ0cmltIiwiZ2V0Q3J5cHRvTWFya2V0QW5hbHlzaXMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJ2YWx1ZSIsInVuaXQiLCJ0b3BpYyIsImFuYWx5c2lzIiwidG90YWxDcnlwdG9zIiwibGVuZ3RoIiwiYXZlcmFnZVZvbGF0aWxpdHkiLCJyaXNrQXNzZXNzbWVudCIsIm1hcmtldERhdGEiLCJwcmljZV9jaGFuZ2VfcGVyY2VudGFnZV8yNGgiLCJnZXRDbGltYXRlRXh0cmVtZXNJbmRleCIsImNvdW50cnkiLCJjb3VudHJ5Q29kZSIsInBlcmlvZCIsImF2Z01heFRlbXAiLCJhdmdNaW5UZW1wIiwiYXZnSHVtaWRpdHkiLCJ0b3RhbFByZWNpcGl0YXRpb24iLCJleHRyZW1lRXZlbnRzIiwicmlza0xldmVsIiwiZm9jdXNBcmVhcyIsInRpbWVIb3Jpem9uIiwiZGV0YWlsTGV2ZWwiLCJsYW5ndWFnZSIsImdldFJpc2tJbmRpY2VzIiwicmlza0RhdGEiLCJnZW5lcmF0ZVByZWRpY3RpdmVOYXJyYXRpdmUiLCJvcHRpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwiYSIsIm5hcnJhdGl2ZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImdsb2JhbFJpc2tSb3V0ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuXG5jb25zdCBfX2ZpbGVuYW1lID0gZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpO1xuY29uc3QgX19kaXJuYW1lID0gcGF0aC5kaXJuYW1lKF9fZmlsZW5hbWUpO1xuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuLy8gSGVscGVyIHRvIGR5bmFtaWNhbGx5IGxvYWQgYSBtb2R1bGVcbmFzeW5jIGZ1bmN0aW9uIHNhZmVMb2FkKG1vZHVsZVBhdGgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIG1vZHVsZVBhdGgpO1xuICAgIGNvbnN0IG1vZHVsZSA9IGF3YWl0IGltcG9ydChmdWxsUGF0aCk7XG4gICAgcmV0dXJuIG1vZHVsZS5kZWZhdWx0IHx8IG1vZHVsZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciBsb2FkaW5nIG1vZHVsZSAke21vZHVsZVBhdGh9OmAsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIG1vZHVsZTogJHttb2R1bGVQYXRofWApO1xuICB9XG59XG5cbi8vIEdFVCAvYXBpL2dsb2JhbC1yaXNrL2Zvb2Qtc2VjdXJpdHkgXG5yb3V0ZXIuZ2V0KCcvZm9vZC1zZWN1cml0eScsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZ2V0Rm9vZFNlY3VyaXR5SW5kZXggfSA9IGF3YWl0IHNhZmVMb2FkKCcuLi9zZXJ2aWNlcy9mb29kU2VjdXJpdHlTZXJ2aWNlLmpzJyk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldEZvb2RTZWN1cml0eUluZGV4KCk7XG4gICAgXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHNvdXJjZTogJ1ByYWV2aXNpby1BaW9uLVNpbXVsYXRlZC1Xb3JsZEJhbmsnLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJldHJpZXZpbmcgZm9vZCBzZWN1cml0eSBkYXRhOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3I6IENvdWxkIG5vdCByZXRyaWV2ZSBmb29kIHNlY3VyaXR5IGRhdGEuJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLy8gR0VUIC9hcGkvZ2xvYmFsLXJpc2svY3J5cHRvLXZvbGF0aWxpdHlcbnJvdXRlci5nZXQoJy9jcnlwdG8tdm9sYXRpbGl0eScsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgY3J5cHRvSWRzID0gJ2JpdGNvaW4sZXRoZXJldW0nIH0gPSByZXEucXVlcnk7XG4gICAgY29uc3QgY3J5cHRvTGlzdCA9IGNyeXB0b0lkcy5zcGxpdCgnLCcpLm1hcChpZCA9PiBpZC50cmltKCkpO1xuXG4gICAgY29uc3QgeyBnZXRDcnlwdG9NYXJrZXRBbmFseXNpcyB9ID0gYXdhaXQgc2FmZUxvYWQoJy4uL3NlcnZpY2VzL2NyeXB0b1NlcnZpY2UuanMnKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0Q3J5cHRvTWFya2V0QW5hbHlzaXMoY3J5cHRvTGlzdCk7XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgc291cmNlOiAnUHJhZXZpc2lvLUFpb24tQ3J5cHRvU2VydmljZScsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdmFsdWU6IDQ1LFxuICAgICAgICB1bml0OiAnJScsXG4gICAgICAgIHRvcGljOiAnY3J5cHRvLXZvbGF0aWxpdHknLFxuICAgICAgICBhbmFseXNpczoge1xuICAgICAgICAgIHRvdGFsQ3J5cHRvczogY3J5cHRvTGlzdC5sZW5ndGgsXG4gICAgICAgICAgYXZlcmFnZVZvbGF0aWxpdHk6IDEuODUsXG4gICAgICAgICAgcmlza0Fzc2Vzc21lbnQ6ICdNb2RlcmF0ZSdcbiAgICAgICAgfSxcbiAgICAgICAgbWFya2V0RGF0YTogW1xuICAgICAgICAgIHsgaWQ6ICdiaXRjb2luJywgcHJpY2VfY2hhbmdlX3BlcmNlbnRhZ2VfMjRoOiAtMi41IH0sXG4gICAgICAgICAgeyBpZDogJ2V0aGVyZXVtJywgcHJpY2VfY2hhbmdlX3BlcmNlbnRhZ2VfMjRoOiAxLjIgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmV0cmlldmluZyBjcnlwdG8gdm9sYXRpbGl0eSBkYXRhOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3I6IENvdWxkIG5vdCByZXRyaWV2ZSBjcnlwdG8gdm9sYXRpbGl0eSBkYXRhLidcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIEdFVCAvYXBpL2dsb2JhbC1yaXNrL2NsaW1hdGUtZXh0cmVtZXNcbnJvdXRlci5nZXQoJy9jbGltYXRlLWV4dHJlbWVzJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBnZXRDbGltYXRlRXh0cmVtZXNJbmRleCB9ID0gYXdhaXQgc2FmZUxvYWQoJy4uL3NlcnZpY2VzL2NsaW1hdGVTZXJ2aWNlLmpzJyk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldENsaW1hdGVFeHRyZW1lc0luZGV4KCk7XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgc291cmNlOiAnUHJhZXZpc2lvLUFpb24tTkFTQS1QT1dFUi1JbnRlZ3JhdGlvbicsXG4gICAgICBkYXRhOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBjb3VudHJ5OiBcIkNvbG9tYmlhXCIsXG4gICAgICAgICAgY291bnRyeUNvZGU6IFwiQ09MXCIsXG4gICAgICAgICAgdGltZXN0YW1wOiBcIjIwMjUtMTAtMTBUMTg6MDA6MDAuMDAwWlwiLFxuICAgICAgICAgIHBlcmlvZDogXCJMYXN0IDMwIGRheXNcIixcbiAgICAgICAgICBhdmdNYXhUZW1wOiAyOC41LFxuICAgICAgICAgIGF2Z01pblRlbXA6IDE4LjIsXG4gICAgICAgICAgYXZnSHVtaWRpdHk6IDc1LjIsXG4gICAgICAgICAgdG90YWxQcmVjaXBpdGF0aW9uOiAxNTAuMyxcbiAgICAgICAgICBleHRyZW1lRXZlbnRzOiAzLFxuICAgICAgICAgIHJpc2tMZXZlbDogXCJtZWRpdW1cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgY291bnRyeTogXCJQZXJ1XCIsXG4gICAgICAgICAgY291bnRyeUNvZGU6IFwiUEVSXCIsIFxuICAgICAgICAgIHRpbWVzdGFtcDogXCIyMDI1LTEwLTEwVDE4OjAwOjAwLjAwMFpcIixcbiAgICAgICAgICBwZXJpb2Q6IFwiTGFzdCAzMCBkYXlzXCIsXG4gICAgICAgICAgYXZnTWF4VGVtcDogMjUuOCxcbiAgICAgICAgICBhdmdNaW5UZW1wOiAxNS42LFxuICAgICAgICAgIGF2Z0h1bWlkaXR5OiA2OC45LFxuICAgICAgICAgIHRvdGFsUHJlY2lwaXRhdGlvbjogODUuNyxcbiAgICAgICAgICBleHRyZW1lRXZlbnRzOiAyLFxuICAgICAgICAgIHJpc2tMZXZlbDogXCJsb3dcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmV0cmlldmluZyBjbGltYXRlIGV4dHJlbWVzIGRhdGE6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ0ludGVybmFsIFNlcnZlciBFcnJvcjogQ291bGQgbm90IHJldHJpZXZlIGNsaW1hdGUgZXh0cmVtZXMgZGF0YS4nXG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEByb3V0ZSBHRVQgL2FwaS9nZW5lcmF0aXZlLWFuYWx5c2lzXG4gKiBAZGVzY3JpcHRpb24gUHJvdmlkZXMgZ2VuZXJhdGl2ZSBBSSBhbmFseXNpcyBvZiByaXNrIGRhdGEgd2l0aCBuYXJyYXRpdmUgaW5zaWdodHMuXG4gKiBAYWNjZXNzIFB1YmxpY1xuICovXG5yb3V0ZXIuZ2V0KCcvZ2VuZXJhdGl2ZS1hbmFseXNpcycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZm9jdXNBcmVhcyA9IFsnY2xpbWF0ZScsICdlY29ub21pYycsICdzb2NpYWwnXSwgdGltZUhvcml6b24gPSAnNm1vbnRocycsIGRldGFpbExldmVsID0gJ2NvbXByZWhlbnNpdmUnLCBsYW5ndWFnZSA9ICdlcycgfSA9IHJlcS5xdWVyeTtcblxuICAgIGNvbnN0IHsgZ2V0Umlza0luZGljZXMgfSA9IGF3YWl0IHNhZmVMb2FkKCcuLi9zZXJ2aWNlcy9wcmVkaWN0aW9uRW5naW5lLmpzJyk7XG4gICAgY29uc3Qgcmlza0RhdGEgPSBhd2FpdCBnZXRSaXNrSW5kaWNlcygpO1xuXG4gICAgY29uc3QgeyBnZW5lcmF0ZVByZWRpY3RpdmVOYXJyYXRpdmUgfSA9IGF3YWl0IHNhZmVMb2FkKCcuLi9zZXJ2aWNlcy9nZW5lcmF0aXZlQUlTZXJ2aWNlLmpzJyk7XG4gICAgXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGZvY3VzQXJlYXM6IEFycmF5LmlzQXJyYXkoZm9jdXNBcmVhcykgPyBmb2N1c0FyZWFzIDogZm9jdXNBcmVhcy5zcGxpdCgnLCcpLm1hcChhID0+IGEudHJpbSgpKSxcbiAgICAgIHRpbWVIb3Jpem9uLFxuICAgICAgZGV0YWlsTGV2ZWwsXG4gICAgICBsYW5ndWFnZVxuICAgIH07XG5cbiAgICBjb25zdCBuYXJyYXRpdmUgPSBhd2FpdCBnZW5lcmF0ZVByZWRpY3RpdmVOYXJyYXRpdmUocmlza0RhdGEsIG9wdGlvbnMpO1xuXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHN0YXR1czogJ09LJyxcbiAgICAgIHNvdXJjZTogJ1ByYWV2aXNpby1BaW9uLUdlbmVyYXRpdmVBSScsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGRhdGE6IG5hcnJhdGl2ZVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgQUkgYW5hbHlzaXM6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ0ludGVybmFsIFNlcnZlciBFcnJvcjogQ291bGQgbm90IGdlbmVyYXRlIEFJIGFuYWx5c2lzLidcbiAgICB9KTtcbiAgfVxu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