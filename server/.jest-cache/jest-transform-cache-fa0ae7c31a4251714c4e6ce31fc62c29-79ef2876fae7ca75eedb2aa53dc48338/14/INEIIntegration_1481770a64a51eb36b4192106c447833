f9ec6cdd001525a4342c244c9325382e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _safeFetch = _interopRequireDefault(require("../lib/safeFetch.js"));
var _forceMocks = require("../lib/force-mocks.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class INEIIntegration {
  constructor() {
    // INEI API base URL
    this.baseUrl = process.env.TEST_MODE === 'true' ? 'http://mock-api-server:3001/inei' // internal mock server
    : 'https://iinei.inei.gob.pe/iinei/Servicio.svc';
  }
  async getDemographicData(department, year) {
    try {
      // Attempt to fetch real INEI demographic data
      // Using INEI service for population data
      const url = `${this.baseUrl}/ObtenerIndicadores?codigo=1&anio=${year}&ubigeo=${department}`;
      const data = await (0, _safeFetch.default)(url, {}, {
        timeout: 10000,
        retries: 2
      });

      // Process demographic data
      const demographicData = {
        department: department || 'Lima',
        year: year || 2024,
        population: data.poblacion || 0,
        growthRate: data.tasa_crecimiento || 0,
        urbanPopulation: data.poblacion_urbana || 0,
        ruralPopulation: data.poblacion_rural || 0
      };
      return {
        department,
        year,
        demographicData,
        isMock: false
      };
    } catch (error) {
      if ((0, _forceMocks.forceMocksEnabled)()) {
        console.log(`INEIIntegration: returning FORCE_MOCKS mock for ${department} (${year})`);
        const mockDepartments = {
          'Lima': {
            population: 10750000,
            growthRate: 1.2,
            urbanPopulation: 9500000,
            ruralPopulation: 1250000
          },
          'Arequipa': {
            population: 1600000,
            growthRate: 1.1,
            urbanPopulation: 1200000,
            ruralPopulation: 400000
          },
          'Cusco': {
            population: 1400000,
            growthRate: 0.9,
            urbanPopulation: 500000,
            ruralPopulation: 900000
          },
          'Trujillo': {
            population: 1100000,
            growthRate: 1.0,
            urbanPopulation: 850000,
            ruralPopulation: 250000
          }
        };
        const deptData = mockDepartments[department] || {
          population: 1000000,
          growthRate: 1.0,
          urbanPopulation: 700000,
          ruralPopulation: 300000
        };
        return {
          department,
          year,
          demographicData: {
            department,
            year,
            population: deptData.population,
            growthRate: deptData.growthRate,
            urbanPopulation: deptData.urbanPopulation,
            ruralPopulation: deptData.ruralPopulation
          },
          isMock: true,
          source: 'FORCE_MOCKS:INEI'
        };
      }
      throw new Error(`INEIIntegration failed: ${error && error.message ? error.message : String(error)}`);
    }
  }
  async getEconomicIndicators(department, year) {
    try {
      // Attempt to fetch real INEI economic indicators
      const url = `${this.baseUrl}/ObtenerIndicadores?codigo=2&anio=${year}&ubigeo=${department}`;
      const data = await (0, _safeFetch.default)(url, {}, {
        timeout: 10000,
        retries: 2
      });
      const economicData = {
        department: department || 'Lima',
        year: year || 2024,
        gdp: data.pib || 0,
        unemploymentRate: data.tasa_desempleo || 0,
        povertyRate: data.tasa_pobreza || 0,
        incomePerCapita: data.ingreso_per_capita || 0
      };
      return {
        department,
        year,
        economicData,
        isMock: false
      };
    } catch (error) {
      if ((0, _forceMocks.forceMocksEnabled)()) {
        console.log(`INEIIntegration: returning FORCE_MOCKS mock economic for ${department} (${year})`);
        const mockEconomics = {
          'Lima': {
            gdp: 45000000,
            unemploymentRate: 6.5,
            povertyRate: 15.2,
            incomePerCapita: 18000
          },
          'Arequipa': {
            gdp: 8500000,
            unemploymentRate: 7.2,
            povertyRate: 18.5,
            incomePerCapita: 12000
          },
          'Cusco': {
            gdp: 6500000,
            unemploymentRate: 8.1,
            povertyRate: 22.3,
            incomePerCapita: 9500
          },
          'Trujillo': {
            gdp: 7200000,
            unemploymentRate: 7.8,
            povertyRate: 20.1,
            incomePerCapita: 11000
          }
        };
        const econData = mockEconomics[department] || {
          gdp: 10000000,
          unemploymentRate: 7.0,
          povertyRate: 18.0,
          incomePerCapita: 13000
        };
        return {
          department,
          year,
          economicData: {
            department,
            year,
            gdp: econData.gdp,
            unemploymentRate: econData.unemploymentRate,
            povertyRate: econData.povertyRate,
            incomePerCapita: econData.incomePerCapita
          },
          isMock: true,
          source: 'FORCE_MOCKS:INEI'
        };
      }
      throw new Error(`INEIIntegration failed: ${error && error.message ? error.message : String(error)}`);
    }
  }
}
var _default = exports.default = INEIIntegration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2FmZUZldGNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZm9yY2VNb2NrcyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIklORUlJbnRlZ3JhdGlvbiIsImNvbnN0cnVjdG9yIiwiYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJURVNUX01PREUiLCJnZXREZW1vZ3JhcGhpY0RhdGEiLCJkZXBhcnRtZW50IiwieWVhciIsInVybCIsImRhdGEiLCJzYWZlRmV0Y2giLCJ0aW1lb3V0IiwicmV0cmllcyIsImRlbW9ncmFwaGljRGF0YSIsInBvcHVsYXRpb24iLCJwb2JsYWNpb24iLCJncm93dGhSYXRlIiwidGFzYV9jcmVjaW1pZW50byIsInVyYmFuUG9wdWxhdGlvbiIsInBvYmxhY2lvbl91cmJhbmEiLCJydXJhbFBvcHVsYXRpb24iLCJwb2JsYWNpb25fcnVyYWwiLCJpc01vY2siLCJlcnJvciIsImZvcmNlTW9ja3NFbmFibGVkIiwiY29uc29sZSIsImxvZyIsIm1vY2tEZXBhcnRtZW50cyIsImRlcHREYXRhIiwic291cmNlIiwiRXJyb3IiLCJtZXNzYWdlIiwiU3RyaW5nIiwiZ2V0RWNvbm9taWNJbmRpY2F0b3JzIiwiZWNvbm9taWNEYXRhIiwiZ2RwIiwicGliIiwidW5lbXBsb3ltZW50UmF0ZSIsInRhc2FfZGVzZW1wbGVvIiwicG92ZXJ0eVJhdGUiLCJ0YXNhX3BvYnJlemEiLCJpbmNvbWVQZXJDYXBpdGEiLCJpbmdyZXNvX3Blcl9jYXBpdGEiLCJtb2NrRWNvbm9taWNzIiwiZWNvbkRhdGEiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJJTkVJSW50ZWdyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNhZmVGZXRjaCBmcm9tICcuLi9saWIvc2FmZUZldGNoLmpzJztcbmltcG9ydCB7IGZvcmNlTW9ja3NFbmFibGVkIH0gZnJvbSAnLi4vbGliL2ZvcmNlLW1vY2tzLmpzJztcblxuY2xhc3MgSU5FSUludGVncmF0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gSU5FSSBBUEkgYmFzZSBVUkxcbiAgICB0aGlzLmJhc2VVcmwgPSBwcm9jZXNzLmVudi5URVNUX01PREUgPT09ICd0cnVlJ1xuICAgICAgPyAnaHR0cDovL21vY2stYXBpLXNlcnZlcjozMDAxL2luZWknIC8vIGludGVybmFsIG1vY2sgc2VydmVyXG4gICAgICA6ICdodHRwczovL2lpbmVpLmluZWkuZ29iLnBlL2lpbmVpL1NlcnZpY2lvLnN2Yyc7XG4gIH1cblxuICBhc3luYyBnZXREZW1vZ3JhcGhpY0RhdGEoZGVwYXJ0bWVudCwgeWVhcikge1xuICAgIHRyeSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIGZldGNoIHJlYWwgSU5FSSBkZW1vZ3JhcGhpYyBkYXRhXG4gICAgICAvLyBVc2luZyBJTkVJIHNlcnZpY2UgZm9yIHBvcHVsYXRpb24gZGF0YVxuICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5iYXNlVXJsfS9PYnRlbmVySW5kaWNhZG9yZXM/Y29kaWdvPTEmYW5pbz0ke3llYXJ9JnViaWdlbz0ke2RlcGFydG1lbnR9YDtcblxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHNhZmVGZXRjaCh1cmwsIHt9LCB7IHRpbWVvdXQ6IDEwMDAwLCByZXRyaWVzOiAyIH0pO1xuXG4gICAgICAvLyBQcm9jZXNzIGRlbW9ncmFwaGljIGRhdGFcbiAgICAgIGNvbnN0IGRlbW9ncmFwaGljRGF0YSA9IHtcbiAgICAgICAgZGVwYXJ0bWVudDogZGVwYXJ0bWVudCB8fCAnTGltYScsXG4gICAgICAgIHllYXI6IHllYXIgfHwgMjAyNCxcbiAgICAgICAgcG9wdWxhdGlvbjogZGF0YS5wb2JsYWNpb24gfHwgMCxcbiAgICAgICAgZ3Jvd3RoUmF0ZTogZGF0YS50YXNhX2NyZWNpbWllbnRvIHx8IDAsXG4gICAgICAgIHVyYmFuUG9wdWxhdGlvbjogZGF0YS5wb2JsYWNpb25fdXJiYW5hIHx8IDAsXG4gICAgICAgIHJ1cmFsUG9wdWxhdGlvbjogZGF0YS5wb2JsYWNpb25fcnVyYWwgfHwgMFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVwYXJ0bWVudCxcbiAgICAgICAgeWVhcixcbiAgICAgICAgZGVtb2dyYXBoaWNEYXRhLFxuICAgICAgICBpc01vY2s6IGZhbHNlXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZm9yY2VNb2Nrc0VuYWJsZWQoKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgSU5FSUludGVncmF0aW9uOiByZXR1cm5pbmcgRk9SQ0VfTU9DS1MgbW9jayBmb3IgJHtkZXBhcnRtZW50fSAoJHt5ZWFyfSlgKTtcbiAgICAgICAgY29uc3QgbW9ja0RlcGFydG1lbnRzID0ge1xuICAgICAgICAgICdMaW1hJzogeyBwb3B1bGF0aW9uOiAxMDc1MDAwMCwgZ3Jvd3RoUmF0ZTogMS4yLCB1cmJhblBvcHVsYXRpb246IDk1MDAwMDAsIHJ1cmFsUG9wdWxhdGlvbjogMTI1MDAwMCB9LFxuICAgICAgICAgICdBcmVxdWlwYSc6IHsgcG9wdWxhdGlvbjogMTYwMDAwMCwgZ3Jvd3RoUmF0ZTogMS4xLCB1cmJhblBvcHVsYXRpb246IDEyMDAwMDAsIHJ1cmFsUG9wdWxhdGlvbjogNDAwMDAwIH0sXG4gICAgICAgICAgJ0N1c2NvJzogeyBwb3B1bGF0aW9uOiAxNDAwMDAwLCBncm93dGhSYXRlOiAwLjksIHVyYmFuUG9wdWxhdGlvbjogNTAwMDAwLCBydXJhbFBvcHVsYXRpb246IDkwMDAwMCB9LFxuICAgICAgICAgICdUcnVqaWxsbyc6IHsgcG9wdWxhdGlvbjogMTEwMDAwMCwgZ3Jvd3RoUmF0ZTogMS4wLCB1cmJhblBvcHVsYXRpb246IDg1MDAwMCwgcnVyYWxQb3B1bGF0aW9uOiAyNTAwMDAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGRlcHREYXRhID0gbW9ja0RlcGFydG1lbnRzW2RlcGFydG1lbnRdIHx8IHtcbiAgICAgICAgICBwb3B1bGF0aW9uOiAxMDAwMDAwLFxuICAgICAgICAgIGdyb3d0aFJhdGU6IDEuMCxcbiAgICAgICAgICB1cmJhblBvcHVsYXRpb246IDcwMDAwMCxcbiAgICAgICAgICBydXJhbFBvcHVsYXRpb246IDMwMDAwMFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGVwYXJ0bWVudCxcbiAgICAgICAgICB5ZWFyLFxuICAgICAgICAgIGRlbW9ncmFwaGljRGF0YToge1xuICAgICAgICAgICAgZGVwYXJ0bWVudCxcbiAgICAgICAgICAgIHllYXIsXG4gICAgICAgICAgICBwb3B1bGF0aW9uOiBkZXB0RGF0YS5wb3B1bGF0aW9uLFxuICAgICAgICAgICAgZ3Jvd3RoUmF0ZTogZGVwdERhdGEuZ3Jvd3RoUmF0ZSxcbiAgICAgICAgICAgIHVyYmFuUG9wdWxhdGlvbjogZGVwdERhdGEudXJiYW5Qb3B1bGF0aW9uLFxuICAgICAgICAgICAgcnVyYWxQb3B1bGF0aW9uOiBkZXB0RGF0YS5ydXJhbFBvcHVsYXRpb25cbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzTW9jazogdHJ1ZSxcbiAgICAgICAgICBzb3VyY2U6ICdGT1JDRV9NT0NLUzpJTkVJJ1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYElORUlJbnRlZ3JhdGlvbiBmYWlsZWQ6ICR7ZXJyb3IgJiYgZXJyb3IubWVzc2FnZSA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEVjb25vbWljSW5kaWNhdG9ycyhkZXBhcnRtZW50LCB5ZWFyKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gZmV0Y2ggcmVhbCBJTkVJIGVjb25vbWljIGluZGljYXRvcnNcbiAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYmFzZVVybH0vT2J0ZW5lckluZGljYWRvcmVzP2NvZGlnbz0yJmFuaW89JHt5ZWFyfSZ1YmlnZW89JHtkZXBhcnRtZW50fWA7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzYWZlRmV0Y2godXJsLCB7fSwgeyB0aW1lb3V0OiAxMDAwMCwgcmV0cmllczogMiB9KTtcblxuICAgICAgY29uc3QgZWNvbm9taWNEYXRhID0ge1xuICAgICAgICBkZXBhcnRtZW50OiBkZXBhcnRtZW50IHx8ICdMaW1hJyxcbiAgICAgICAgeWVhcjogeWVhciB8fCAyMDI0LFxuICAgICAgICBnZHA6IGRhdGEucGliIHx8IDAsXG4gICAgICAgIHVuZW1wbG95bWVudFJhdGU6IGRhdGEudGFzYV9kZXNlbXBsZW8gfHwgMCxcbiAgICAgICAgcG92ZXJ0eVJhdGU6IGRhdGEudGFzYV9wb2JyZXphIHx8IDAsXG4gICAgICAgIGluY29tZVBlckNhcGl0YTogZGF0YS5pbmdyZXNvX3Blcl9jYXBpdGEgfHwgMFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVwYXJ0bWVudCxcbiAgICAgICAgeWVhcixcbiAgICAgICAgZWNvbm9taWNEYXRhLFxuICAgICAgICBpc01vY2s6IGZhbHNlXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZm9yY2VNb2Nrc0VuYWJsZWQoKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgSU5FSUludGVncmF0aW9uOiByZXR1cm5pbmcgRk9SQ0VfTU9DS1MgbW9jayBlY29ub21pYyBmb3IgJHtkZXBhcnRtZW50fSAoJHt5ZWFyfSlgKTtcbiAgICAgICAgY29uc3QgbW9ja0Vjb25vbWljcyA9IHtcbiAgICAgICAgICAnTGltYSc6IHsgZ2RwOiA0NTAwMDAwMCwgdW5lbXBsb3ltZW50UmF0ZTogNi41LCBwb3ZlcnR5UmF0ZTogMTUuMiwgaW5jb21lUGVyQ2FwaXRhOiAxODAwMCB9LFxuICAgICAgICAgICdBcmVxdWlwYSc6IHsgZ2RwOiA4NTAwMDAwLCB1bmVtcGxveW1lbnRSYXRlOiA3LjIsIHBvdmVydHlSYXRlOiAxOC41LCBpbmNvbWVQZXJDYXBpdGE6IDEyMDAwIH0sXG4gICAgICAgICAgJ0N1c2NvJzogeyBnZHA6IDY1MDAwMDAsIHVuZW1wbG95bWVudFJhdGU6IDguMSwgcG92ZXJ0eVJhdGU6IDIyLjMsIGluY29tZVBlckNhcGl0YTogOTUwMCB9LFxuICAgICAgICAgICdUcnVqaWxsbyc6IHsgZ2RwOiA3MjAwMDAwLCB1bmVtcGxveW1lbnRSYXRlOiA3LjgsIHBvdmVydHlSYXRlOiAyMC4xLCBpbmNvbWVQZXJDYXBpdGE6IDExMDAwIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBlY29uRGF0YSA9IG1vY2tFY29ub21pY3NbZGVwYXJ0bWVudF0gfHwge1xuICAgICAgICAgIGdkcDogMTAwMDAwMDAsXG4gICAgICAgICAgdW5lbXBsb3ltZW50UmF0ZTogNy4wLFxuICAgICAgICAgIHBvdmVydHlSYXRlOiAxOC4wLFxuICAgICAgICAgIGluY29tZVBlckNhcGl0YTogMTMwMDBcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRlcGFydG1lbnQsXG4gICAgICAgICAgeWVhcixcbiAgICAgICAgICBlY29ub21pY0RhdGE6IHtcbiAgICAgICAgICAgIGRlcGFydG1lbnQsXG4gICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgZ2RwOiBlY29uRGF0YS5nZHAsXG4gICAgICAgICAgICB1bmVtcGxveW1lbnRSYXRlOiBlY29uRGF0YS51bmVtcGxveW1lbnRSYXRlLFxuICAgICAgICAgICAgcG92ZXJ0eVJhdGU6IGVjb25EYXRhLnBvdmVydHlSYXRlLFxuICAgICAgICAgICAgaW5jb21lUGVyQ2FwaXRhOiBlY29uRGF0YS5pbmNvbWVQZXJDYXBpdGFcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzTW9jazogdHJ1ZSxcbiAgICAgICAgICBzb3VyY2U6ICdGT1JDRV9NT0NLUzpJTkVJJ1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYElORUlJbnRlZ3JhdGlvbiBmYWlsZWQ6ICR7ZXJyb3IgJiYgZXJyb3IubWVzc2FnZSA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJTkVJSW50ZWdyYXRpb247Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFBMEQsU0FBQUQsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFMUQsTUFBTUcsZUFBZSxDQUFDO0VBQ3BCQyxXQUFXQSxDQUFBLEVBQUc7SUFDWjtJQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsU0FBUyxLQUFLLE1BQU0sR0FDM0Msa0NBQWtDLENBQUM7SUFBQSxFQUNuQyw4Q0FBOEM7RUFDcEQ7RUFFQSxNQUFNQyxrQkFBa0JBLENBQUNDLFVBQVUsRUFBRUMsSUFBSSxFQUFFO0lBQ3pDLElBQUk7TUFDRjtNQUNBO01BQ0EsTUFBTUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDUCxPQUFPLHFDQUFxQ00sSUFBSSxXQUFXRCxVQUFVLEVBQUU7TUFFM0YsTUFBTUcsSUFBSSxHQUFHLE1BQU0sSUFBQUMsa0JBQVMsRUFBQ0YsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQUVHLE9BQU8sRUFBRSxLQUFLO1FBQUVDLE9BQU8sRUFBRTtNQUFFLENBQUMsQ0FBQzs7TUFFckU7TUFDQSxNQUFNQyxlQUFlLEdBQUc7UUFDdEJQLFVBQVUsRUFBRUEsVUFBVSxJQUFJLE1BQU07UUFDaENDLElBQUksRUFBRUEsSUFBSSxJQUFJLElBQUk7UUFDbEJPLFVBQVUsRUFBRUwsSUFBSSxDQUFDTSxTQUFTLElBQUksQ0FBQztRQUMvQkMsVUFBVSxFQUFFUCxJQUFJLENBQUNRLGdCQUFnQixJQUFJLENBQUM7UUFDdENDLGVBQWUsRUFBRVQsSUFBSSxDQUFDVSxnQkFBZ0Is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