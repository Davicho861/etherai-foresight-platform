{"version":3,"names":["GraphQLHandler_exports","__export","GraphQLHandler","isDocumentNode","module","exports","__toCommonJS","import_RequestHandler","require","import_getTimestamp","import_getStatusCodeColor","import_serializeRequest","import_serializeResponse","import_matchRequestUrl","import_parseGraphQLRequest","import_toPublicUrl","import_devUtils","import_getRequestCookies","value","RequestHandler","endpoint","parsedRequestCache","WeakMap","constructor","operationType","predicate","resolver","options","resolvedOperationName","parsedNode","parseDocumentNode","Error","operationName","displayOperationName","header","toString","info","parseGraphQLRequestOrGetFromCache","request","has","set","parseGraphQLRequest","catch","error","console","get","parse","args","match","matchRequestUrl","URL","url","cookies","getAllRequestCookies","matches","parsedResult","query","variables","publicUrl","toPublicUrl","devUtils","warn","method","hasMatchingOperationType","hasMatchingOperationName","matchOperationName","customPredicateResult","extendResolverArgs","RegExp","test","log","loggedRequest","serializeRequest","loggedResponse","serializeResponse","response","statusColor","getStatusCodeColor","status","requestInfo","groupCollapsed","formatMessage","getTimestamp","statusText","groupEnd"],"sources":["../../../src/core/handlers/GraphQLHandler.ts"],"sourcesContent":["import type { DocumentNode, GraphQLError, OperationTypeNode } from 'graphql'\nimport {\n  DefaultBodyType,\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './RequestHandler'\nimport { getTimestamp } from '../utils/logging/getTimestamp'\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'\nimport { serializeRequest } from '../utils/logging/serializeRequest'\nimport { serializeResponse } from '../utils/logging/serializeResponse'\nimport { Match, matchRequestUrl, Path } from '../utils/matching/matchRequestUrl'\nimport {\n  ParsedGraphQLRequest,\n  GraphQLMultipartRequestBody,\n  parseGraphQLRequest,\n  parseDocumentNode,\n} from '../utils/internal/parseGraphQLRequest'\nimport { toPublicUrl } from '../utils/request/toPublicUrl'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies'\n\nexport type GraphQLOperationType = OperationTypeNode | 'all'\nexport type GraphQLHandlerNameSelector = DocumentNode | RegExp | string\n\nexport type GraphQLQuery = Record<string, any> | null\nexport type GraphQLVariables = Record<string, any>\n\nexport interface GraphQLHandlerInfo extends RequestHandlerDefaultInfo {\n  operationType: GraphQLOperationType\n  operationName: GraphQLHandlerNameSelector | GraphQLCustomPredicate\n}\n\nexport type GraphQLRequestParsedResult = {\n  match: Match\n  cookies: Record<string, string>\n} & (\n  | ParsedGraphQLRequest<GraphQLVariables>\n  /**\n   * An empty version of the ParsedGraphQLRequest\n   * which simplifies the return type of the resolver\n   * when the request is to a non-matching endpoint\n   */\n  | {\n      operationType?: undefined\n      operationName?: undefined\n      query?: undefined\n      variables?: undefined\n    }\n)\n\nexport type GraphQLResolverExtras<Variables extends GraphQLVariables> = {\n  query: string\n  operationName: string\n  variables: Variables\n  cookies: Record<string, string>\n}\n\nexport type GraphQLRequestBody<VariablesType extends GraphQLVariables> =\n  | GraphQLJsonRequestBody<VariablesType>\n  | GraphQLMultipartRequestBody\n  | Record<string, any>\n  | undefined\n\nexport interface GraphQLJsonRequestBody<Variables extends GraphQLVariables> {\n  query: string\n  variables?: Variables\n}\n\nexport type GraphQLResponseBody<BodyType extends DefaultBodyType> =\n  | {\n      data?: BodyType | null\n      errors?: readonly Partial<GraphQLError>[] | null\n      extensions?: Record<string, any>\n    }\n  | null\n  | undefined\n\nexport type GraphQLCustomPredicate = (args: {\n  request: Request\n  query: string\n  operationType: GraphQLOperationType\n  operationName: string\n  variables: GraphQLVariables\n  cookies: Record<string, string>\n}) => GraphQLCustomPredicateResult | Promise<GraphQLCustomPredicateResult>\n\nexport type GraphQLCustomPredicateResult = boolean | { matches: boolean }\n\nexport type GraphQLPredicate =\n  | GraphQLHandlerNameSelector\n  | GraphQLCustomPredicate\n\nexport function isDocumentNode(\n  value: DocumentNode | any,\n): value is DocumentNode {\n  if (value == null) {\n    return false\n  }\n\n  return typeof value === 'object' && 'kind' in value && 'definitions' in value\n}\n\nexport class GraphQLHandler extends RequestHandler<\n  GraphQLHandlerInfo,\n  GraphQLRequestParsedResult,\n  GraphQLResolverExtras<any>\n> {\n  private endpoint: Path\n\n  static parsedRequestCache = new WeakMap<\n    Request,\n    ParsedGraphQLRequest<GraphQLVariables>\n  >()\n\n  constructor(\n    operationType: GraphQLOperationType,\n    predicate: GraphQLPredicate,\n    endpoint: Path,\n    resolver: ResponseResolver<GraphQLResolverExtras<any>, any, any>,\n    options?: RequestHandlerOptions,\n  ) {\n    let resolvedOperationName = predicate\n\n    if (isDocumentNode(resolvedOperationName)) {\n      const parsedNode = parseDocumentNode(resolvedOperationName)\n\n      if (parsedNode.operationType !== operationType) {\n        throw new Error(\n          `Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected \"${operationType}\", but got \"${parsedNode.operationType}\").`,\n        )\n      }\n\n      if (!parsedNode.operationName) {\n        throw new Error(\n          `Failed to create a GraphQL handler: provided a DocumentNode with no operation name.`,\n        )\n      }\n\n      resolvedOperationName = parsedNode.operationName\n    }\n\n    const displayOperationName =\n      typeof resolvedOperationName === 'function'\n        ? '[custom predicate]'\n        : resolvedOperationName\n\n    const header =\n      operationType === 'all'\n        ? `${operationType} (origin: ${endpoint.toString()})`\n        : `${operationType}${displayOperationName ? ` ${displayOperationName}` : ''} (origin: ${endpoint.toString()})`\n\n    super({\n      info: {\n        header,\n        operationType,\n        operationName: resolvedOperationName,\n      },\n      resolver,\n      options,\n    })\n\n    this.endpoint = endpoint\n  }\n\n  /**\n   * Parses the request body, once per request, cached across all\n   * GraphQL handlers. This is done to avoid multiple parsing of the\n   * request body, which each requires a clone of the request.\n   */\n  async parseGraphQLRequestOrGetFromCache(\n    request: Request,\n  ): Promise<ParsedGraphQLRequest<GraphQLVariables>> {\n    if (!GraphQLHandler.parsedRequestCache.has(request)) {\n      GraphQLHandler.parsedRequestCache.set(\n        request,\n        await parseGraphQLRequest(request).catch((error) => {\n          console.error(error)\n          return undefined\n        }),\n      )\n    }\n\n    return GraphQLHandler.parsedRequestCache.get(request)\n  }\n\n  async parse(args: { request: Request }): Promise<GraphQLRequestParsedResult> {\n    /**\n     * If the request doesn't match a specified endpoint, there's no\n     * need to parse it since there's no case where we would handle this\n     */\n    const match = matchRequestUrl(new URL(args.request.url), this.endpoint)\n    const cookies = getAllRequestCookies(args.request)\n\n    if (!match.matches) {\n      return {\n        match,\n        cookies,\n      }\n    }\n\n    const parsedResult = await this.parseGraphQLRequestOrGetFromCache(\n      args.request,\n    )\n\n    if (typeof parsedResult === 'undefined') {\n      return {\n        match,\n        cookies,\n      }\n    }\n\n    return {\n      match,\n      cookies,\n      query: parsedResult.query,\n      operationType: parsedResult.operationType,\n      operationName: parsedResult.operationName,\n      variables: parsedResult.variables,\n    }\n  }\n\n  async predicate(args: {\n    request: Request\n    parsedResult: GraphQLRequestParsedResult\n  }): Promise<boolean> {\n    if (args.parsedResult.operationType === undefined) {\n      return false\n    }\n\n    if (!args.parsedResult.operationName && this.info.operationType !== 'all') {\n      const publicUrl = toPublicUrl(args.request.url)\n\n      devUtils.warn(`\\\nFailed to intercept a GraphQL request at \"${args.request.method} ${publicUrl}\": anonymous GraphQL operations are not supported.\n\nConsider naming this operation or using \"graphql.operation()\" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/#graphqloperationresolver`)\n      return false\n    }\n\n    const hasMatchingOperationType =\n      this.info.operationType === 'all' ||\n      args.parsedResult.operationType === this.info.operationType\n\n    /**\n     * Check if the operation name matches the outgoing GraphQL request.\n     * @note Unlike the HTTP handler, the custom predicate functions are invoked\n     * during predicate, not parsing, because GraphQL request parsing happens first,\n     * and non-GraphQL requests are filtered out automatically.\n     */\n    const hasMatchingOperationName = await this.matchOperationName({\n      request: args.request,\n      parsedResult: args.parsedResult,\n    })\n\n    return (\n      args.parsedResult.match.matches &&\n      hasMatchingOperationType &&\n      hasMatchingOperationName\n    )\n  }\n\n  private async matchOperationName(args: {\n    request: Request\n    parsedResult: GraphQLRequestParsedResult\n  }): Promise<boolean> {\n    if (typeof this.info.operationName === 'function') {\n      const customPredicateResult = await this.info.operationName({\n        request: args.request,\n        ...this.extendResolverArgs({\n          request: args.request,\n          parsedResult: args.parsedResult,\n        }),\n      })\n\n      /**\n       * @note Keep the { matches } signature in case we decide to support path parameters\n       * in GraphQL handlers. If that happens, the custom predicate would have to be moved\n       * to the parsing phase, the same as we have for the HttpHandler, and the user will\n       * have a possibility to return parsed path parameters from the custom predicate.\n       */\n      return typeof customPredicateResult === 'boolean'\n        ? customPredicateResult\n        : customPredicateResult.matches\n    }\n\n    if (this.info.operationName instanceof RegExp) {\n      return this.info.operationName.test(args.parsedResult.operationName || '')\n    }\n\n    return args.parsedResult.operationName === this.info.operationName\n  }\n\n  protected extendResolverArgs(args: {\n    request: Request\n    parsedResult: GraphQLRequestParsedResult\n  }) {\n    return {\n      query: args.parsedResult.query || '',\n      operationType: args.parsedResult.operationType!,\n      operationName: args.parsedResult.operationName || '',\n      variables: args.parsedResult.variables || {},\n      cookies: args.parsedResult.cookies,\n    }\n  }\n\n  async log(args: {\n    request: Request\n    response: Response\n    parsedResult: GraphQLRequestParsedResult\n  }) {\n    const loggedRequest = await serializeRequest(args.request)\n    const loggedResponse = await serializeResponse(args.response)\n    const statusColor = getStatusCodeColor(loggedResponse.status)\n    const requestInfo = args.parsedResult.operationName\n      ? `${args.parsedResult.operationType} ${args.parsedResult.operationName}`\n      : `anonymous ${args.parsedResult.operationType}`\n\n    console.groupCollapsed(\n      devUtils.formatMessage(\n        `${getTimestamp()} ${requestInfo} (%c${loggedResponse.status} ${\n          loggedResponse.statusText\n        }%c)`,\n      ),\n      `color:${statusColor}`,\n      'color:inherit',\n    )\n    // eslint-disable-next-line no-console\n    console.log('Request:', loggedRequest)\n    // eslint-disable-next-line no-console\n    console.log('Handler:', this)\n    // eslint-disable-next-line no-console\n    console.log('Response:', loggedResponse)\n    console.groupEnd()\n  }\n}\n"],"mappings":"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","ignoreList":[]}