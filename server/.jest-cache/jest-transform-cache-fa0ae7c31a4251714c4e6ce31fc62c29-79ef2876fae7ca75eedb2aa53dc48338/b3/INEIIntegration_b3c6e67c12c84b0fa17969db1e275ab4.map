{"version":3,"names":["_safeFetch","_interopRequireDefault","require","_forceMocks","e","__esModule","default","INEIIntegration","constructor","baseUrl","process","env","TEST_MODE","getDemographicData","department","year","url","data","safeFetch","timeout","retries","demographicData","population","poblacion","growthRate","tasa_crecimiento","urbanPopulation","poblacion_urbana","ruralPopulation","poblacion_rural","isMock","error","forceMocksEnabled","console","log","mockDepartments","deptData","source","Error","message","String","getEconomicIndicators","economicData","gdp","pib","unemploymentRate","tasa_desempleo","povertyRate","tasa_pobreza","incomePerCapita","ingreso_per_capita","mockEconomics","econData","_default","exports"],"sources":["INEIIntegration.js"],"sourcesContent":["import safeFetch from '../lib/safeFetch.js';\nimport { forceMocksEnabled } from '../lib/force-mocks.js';\n\nclass INEIIntegration {\n  constructor() {\n    // INEI API base URL\n    this.baseUrl = process.env.TEST_MODE === 'true'\n      ? 'http://mock-api-server:3001/inei' // internal mock server\n      : 'https://iinei.inei.gob.pe/iinei/Servicio.svc';\n  }\n\n  async getDemographicData(department, year) {\n    try {\n      // Attempt to fetch real INEI demographic data\n      // Using INEI service for population data\n      const url = `${this.baseUrl}/ObtenerIndicadores?codigo=1&anio=${year}&ubigeo=${department}`;\n\n      const data = await safeFetch(url, {}, { timeout: 10000, retries: 2 });\n\n      // Process demographic data\n      const demographicData = {\n        department: department || 'Lima',\n        year: year || 2024,\n        population: data.poblacion || 0,\n        growthRate: data.tasa_crecimiento || 0,\n        urbanPopulation: data.poblacion_urbana || 0,\n        ruralPopulation: data.poblacion_rural || 0\n      };\n\n      return {\n        department,\n        year,\n        demographicData,\n        isMock: false\n      };\n    } catch (error) {\n      if (forceMocksEnabled()) {\n        console.log(`INEIIntegration: returning FORCE_MOCKS mock for ${department} (${year})`);\n        const mockDepartments = {\n          'Lima': { population: 10750000, growthRate: 1.2, urbanPopulation: 9500000, ruralPopulation: 1250000 },\n          'Arequipa': { population: 1600000, growthRate: 1.1, urbanPopulation: 1200000, ruralPopulation: 400000 },\n          'Cusco': { population: 1400000, growthRate: 0.9, urbanPopulation: 500000, ruralPopulation: 900000 },\n          'Trujillo': { population: 1100000, growthRate: 1.0, urbanPopulation: 850000, ruralPopulation: 250000 }\n        };\n\n        const deptData = mockDepartments[department] || {\n          population: 1000000,\n          growthRate: 1.0,\n          urbanPopulation: 700000,\n          ruralPopulation: 300000\n        };\n\n        return {\n          department,\n          year,\n          demographicData: {\n            department,\n            year,\n            population: deptData.population,\n            growthRate: deptData.growthRate,\n            urbanPopulation: deptData.urbanPopulation,\n            ruralPopulation: deptData.ruralPopulation\n          },\n          isMock: true,\n          source: 'FORCE_MOCKS:INEI'\n        };\n      }\n\n      throw new Error(`INEIIntegration failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n\n  async getEconomicIndicators(department, year) {\n    try {\n      // Attempt to fetch real INEI economic indicators\n      const url = `${this.baseUrl}/ObtenerIndicadores?codigo=2&anio=${year}&ubigeo=${department}`;\n\n      const data = await safeFetch(url, {}, { timeout: 10000, retries: 2 });\n\n      const economicData = {\n        department: department || 'Lima',\n        year: year || 2024,\n        gdp: data.pib || 0,\n        unemploymentRate: data.tasa_desempleo || 0,\n        povertyRate: data.tasa_pobreza || 0,\n        incomePerCapita: data.ingreso_per_capita || 0\n      };\n\n      return {\n        department,\n        year,\n        economicData,\n        isMock: false\n      };\n    } catch (error) {\n      if (forceMocksEnabled()) {\n        console.log(`INEIIntegration: returning FORCE_MOCKS mock economic for ${department} (${year})`);\n        const mockEconomics = {\n          'Lima': { gdp: 45000000, unemploymentRate: 6.5, povertyRate: 15.2, incomePerCapita: 18000 },\n          'Arequipa': { gdp: 8500000, unemploymentRate: 7.2, povertyRate: 18.5, incomePerCapita: 12000 },\n          'Cusco': { gdp: 6500000, unemploymentRate: 8.1, povertyRate: 22.3, incomePerCapita: 9500 },\n          'Trujillo': { gdp: 7200000, unemploymentRate: 7.8, povertyRate: 20.1, incomePerCapita: 11000 }\n        };\n\n        const econData = mockEconomics[department] || {\n          gdp: 10000000,\n          unemploymentRate: 7.0,\n          povertyRate: 18.0,\n          incomePerCapita: 13000\n        };\n\n        return {\n          department,\n          year,\n          economicData: {\n            department,\n            year,\n            gdp: econData.gdp,\n            unemploymentRate: econData.unemploymentRate,\n            povertyRate: econData.povertyRate,\n            incomePerCapita: econData.incomePerCapita\n          },\n          isMock: true,\n          source: 'FORCE_MOCKS:INEI'\n        };\n      }\n\n      throw new Error(`INEIIntegration failed: ${error && error.message ? error.message : String(error)}`);\n    }\n  }\n}\n\nexport default INEIIntegration;"],"mappings":"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","ignoreList":[]}