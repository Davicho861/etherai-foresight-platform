ffd6fdae9686a49be3c8f9f797cb53b9
"use strict";

// Mock the services
_getJestObj().mock('../../src/services/cryptoService.js');
_getJestObj().mock('../../src/services/worldBankService.js');
_getJestObj().mock('../../src/services/usgsService.js');
_getJestObj().mock('../../src/services/climateService.js');
_getJestObj().mock('../../src/services/communityResilienceService.js');
var _supertest = _interopRequireDefault(require("supertest"));
var _express = _interopRequireDefault(require("express"));
var _globalRiskRoutes = _interopRequireDefault(require("../../src/routes/globalRiskRoutes.js"));
var _cryptoService = _interopRequireDefault(require("../../src/services/cryptoService.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('Global Risk Routes', () => {
  let app;
  let mockCryptoService;
  beforeEach(() => {
    jest.clearAllMocks();

    // Create mock crypto service
    mockCryptoService = {
      getCryptoMarketAnalysis: jest.fn()
    };
    _cryptoService.default.mockImplementation(() => mockCryptoService);

    // Create express app with routes
    app = (0, _express.default)();
    app.use(_express.default.json());
    app.use('/api/global-risk', _globalRiskRoutes.default);
  });
  describe('GET /api/global-risk/crypto-volatility', () => {
    test('should return crypto volatility data successfully', async () => {
      const mockCryptoData = {
        timestamp: '2025-10-12T17:00:00.000Z',
        volatilityIndex: 35,
        marketData: [{
          id: 'bitcoin',
          price_change_percentage_24h: -2.5
        }, {
          id: 'ethereum',
          price_change_percentage_24h: 1.2
        }],
        analysis: {
          totalCryptos: 2,
          averageVolatility: 1.85,
          riskAssessment: 'Moderate'
        },
        source: 'CryptoService'
      };
      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);
      const response = await (0, _supertest.default)(app).get('/api/global-risk/crypto-volatility').expect(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('source', 'Praevisio-Aion-CryptoService');
      expect(response.body).toHaveProperty('timestamp');
      expect(response.body).toHaveProperty('data', mockCryptoData);
      expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['bitcoin', 'ethereum']);
    });
    test('should handle custom crypto IDs parameter', async () => {
      const mockCryptoData = {
        timestamp: '2025-10-12T17:00:00.000Z',
        volatilityIndex: 25,
        marketData: [{
          id: 'solana',
          price_change_percentage_24h: 0.5
        }],
        analysis: {
          totalCryptos: 1,
          averageVolatility: 0.5,
          riskAssessment: 'Low'
        },
        source: 'CryptoService'
      };
      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);
      const response = await (0, _supertest.default)(app).get('/api/global-risk/crypto-volatility?cryptoIds=solana,cardano').expect(200);
      expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['solana', 'cardano']);
    });
    test('should handle service errors gracefully', async () => {
      mockCryptoService.getCryptoMarketAnalysis.mockRejectedValue(new Error('Service unavailable'));
      const response = await (0, _supertest.default)(app).get('/api/global-risk/crypto-volatility').expect(500);
      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('message', 'Internal Server Error: Could not retrieve crypto volatility data.');
    });
    test('should use default crypto IDs when none provided', async () => {
      const mockCryptoData = {
        timestamp: '2025-10-12T17:00:00.000Z',
        volatilityIndex: 40,
        marketData: [],
        analysis: {
          totalCryptos: 0,
          averageVolatility: 0,
          riskAssessment: 'Low'
        },
        source: 'CryptoService'
      };
      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);
      await (0, _supertest.default)(app).get('/api/global-risk/crypto-volatility').expect(200);
      expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['bitcoin', 'ethereum']);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,