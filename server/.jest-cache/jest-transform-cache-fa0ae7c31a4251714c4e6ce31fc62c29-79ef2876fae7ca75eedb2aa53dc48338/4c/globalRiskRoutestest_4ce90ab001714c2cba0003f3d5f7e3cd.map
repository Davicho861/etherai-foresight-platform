{"version":3,"names":["_getJestObj","mock","_supertest","_interopRequireDefault","require","_express","_globalRiskRoutes","_cryptoService","e","__esModule","default","jest","describe","app","mockCryptoService","beforeEach","clearAllMocks","getCryptoMarketAnalysis","fn","CryptoService","mockImplementation","express","use","json","globalRiskRoutes","test","mockCryptoData","timestamp","volatilityIndex","marketData","id","price_change_percentage_24h","analysis","totalCryptos","averageVolatility","riskAssessment","source","mockResolvedValue","response","request","get","expect","body","toHaveProperty","toHaveBeenCalledWith","mockRejectedValue","Error"],"sources":["globalRiskRoutes.test.js"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport globalRiskRoutes from '../../src/routes/globalRiskRoutes.js';\n\n// Mock the services\njest.mock('../../src/services/cryptoService.js');\njest.mock('../../src/services/worldBankService.js');\njest.mock('../../src/services/usgsService.js');\njest.mock('../../src/services/climateService.js');\njest.mock('../../src/services/communityResilienceService.js');\n\nimport CryptoService from '../../src/services/cryptoService.js';\n\ndescribe('Global Risk Routes', () => {\n  let app;\n  let mockCryptoService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Create mock crypto service\n    mockCryptoService = {\n      getCryptoMarketAnalysis: jest.fn(),\n    };\n    CryptoService.mockImplementation(() => mockCryptoService);\n\n    // Create express app with routes\n    app = express();\n    app.use(express.json());\n    app.use('/api/global-risk', globalRiskRoutes);\n  });\n\n  describe('GET /api/global-risk/crypto-volatility', () => {\n    test('should return crypto volatility data successfully', async () => {\n      const mockCryptoData = {\n        timestamp: '2025-10-12T17:00:00.000Z',\n        volatilityIndex: 35,\n        marketData: [\n          { id: 'bitcoin', price_change_percentage_24h: -2.5 },\n          { id: 'ethereum', price_change_percentage_24h: 1.2 }\n        ],\n        analysis: {\n          totalCryptos: 2,\n          averageVolatility: 1.85,\n          riskAssessment: 'Moderate'\n        },\n        source: 'CryptoService'\n      };\n\n      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);\n\n      const response = await request(app)\n        .get('/api/global-risk/crypto-volatility')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('source', 'Praevisio-Aion-CryptoService');\n      expect(response.body).toHaveProperty('timestamp');\n      expect(response.body).toHaveProperty('data', mockCryptoData);\n      expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['bitcoin', 'ethereum']);\n    });\n\n    test('should handle custom crypto IDs parameter', async () => {\n      const mockCryptoData = {\n        timestamp: '2025-10-12T17:00:00.000Z',\n        volatilityIndex: 25,\n        marketData: [{ id: 'solana', price_change_percentage_24h: 0.5 }],\n        analysis: {\n          totalCryptos: 1,\n          averageVolatility: 0.5,\n          riskAssessment: 'Low'\n        },\n        source: 'CryptoService'\n      };\n\n      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);\n\n      const response = await request(app)\n        .get('/api/global-risk/crypto-volatility?cryptoIds=solana,cardano')\n        .expect(200);\n\n      expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['solana', 'cardano']);\n    });\n\n    test('should handle service errors gracefully', async () => {\n      mockCryptoService.getCryptoMarketAnalysis.mockRejectedValue(new Error('Service unavailable'));\n\n      const response = await request(app)\n        .get('/api/global-risk/crypto-volatility')\n        .expect(500);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body).toHaveProperty('message', 'Internal Server Error: Could not retrieve crypto volatility data.');\n    });\n\n    test('should use default crypto IDs when none provided', async () => {\n      const mockCryptoData = {\n        timestamp: '2025-10-12T17:00:00.000Z',\n        volatilityIndex: 40,\n        marketData: [],\n        analysis: {\n          totalCryptos: 0,\n          averageVolatility: 0,\n          riskAssessment: 'Low'\n        },\n        source: 'CryptoService'\n      };\n\n      mockCryptoService.getCryptoMarketAnalysis.mockResolvedValue(mockCryptoData);\n\n      await request(app)\n        .get('/api/global-risk/crypto-volatility')\n        .expect(200);\n\n      expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['bitcoin', 'ethereum']);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}