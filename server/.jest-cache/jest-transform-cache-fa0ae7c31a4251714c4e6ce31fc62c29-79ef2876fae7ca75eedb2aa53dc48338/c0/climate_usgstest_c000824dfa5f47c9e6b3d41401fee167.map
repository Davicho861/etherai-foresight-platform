{"version":3,"names":["describe","beforeEach","jest","resetModules","process","env","NODE_ENV","afterEach","FORCE_MOCKS","NATIVE_DEV_MODE","clearAllMocks","test","mockData","countryCode","avgMaxTemp","doMock","fn","mockImplementation","getClimateExtremes","mockResolvedValue","getClimateExtremesIndex","require","res","expect","toBe","mockRejectedValue","Error","Array","isArray","length","toBeGreaterThanOrEqual","toHaveProperty","getSeismicActivity","events","toBeDefined","summary","raw","metadata","generated","features","id","properties","mag","place","time","tsunami","sig","url","geometry","coordinates","getSeismicData","totalEvents","maxMagnitude","toBeCloseTo"],"sources":["climate_usgs.test.js"],"sourcesContent":["describe('services: climateService and usgsService', () => {\n  beforeEach(() => {\n    jest.resetModules()\n    process.env.NODE_ENV = 'test'\n  })\n\n  afterEach(() => {\n    delete process.env.FORCE_MOCKS\n    delete process.env.NATIVE_DEV_MODE\n    jest.clearAllMocks()\n  })\n\n  test('getClimateExtremesIndex returns data from ClimateIntegration when available', async () => {\n    const mockData = [{ countryCode: 'COL', avgMaxTemp: 29 }]\n\n    jest.doMock('../../src/integrations/ClimateIntegration.js', () => {\n      return jest.fn().mockImplementation(() => ({\n        getClimateExtremes: jest.fn().mockResolvedValue(mockData)\n      }))\n    })\n\n    const { getClimateExtremesIndex } = require('../../src/services/climateService.js')\n    const res = await getClimateExtremesIndex()\n    expect(res).toBe(mockData)\n  })\n\n  test('getClimateExtremesIndex returns fallback mock on integration failure', async () => {\n    jest.doMock('../../src/integrations/ClimateIntegration.js', () => {\n      return jest.fn().mockImplementation(() => ({\n        getClimateExtremes: jest.fn().mockRejectedValue(new Error('service down'))\n      }))\n    })\n\n    const { getClimateExtremesIndex } = require('../../src/services/climateService.js')\n    const res = await getClimateExtremesIndex()\n    expect(Array.isArray(res)).toBe(true)\n    expect(res.length).toBeGreaterThanOrEqual(1)\n    expect(res[0]).toHaveProperty('countryCode')\n  })\n\n  test('getSeismicActivity returns builtin mock when FORCE_MOCKS=true', async () => {\n    process.env.FORCE_MOCKS = 'true'\n    const { getSeismicActivity } = require('../../src/services/usgsService.js')\n    const res = await getSeismicActivity()\n    expect(res).toHaveProperty('isMock', true)\n    expect(res.events).toBeDefined()\n    expect(Array.isArray(res.events)).toBe(true)\n    expect(res.summary).toHaveProperty('totalEvents')\n  })\n\n  test('getSeismicActivity transforms data from SeismicIntegration.getSeismicData', async () => {\n    const raw = {\n      metadata: { generated: 12345 },\n      features: [\n        { id: 'a', properties: { mag: 3.2, place: 'P', time: 111, tsunami: 0, sig: 10, url: 'u' }, geometry: { coordinates: [1, 2, 3] } },\n        { id: 'b', properties: { mag: 4.1, place: 'Q', time: 222, tsunami: 1, sig: 20, url: 'u2' }, geometry: { coordinates: [4, 5, 6] } }\n      ]\n    }\n\n    jest.doMock('../../src/services/SeismicIntegration.js', () => ({\n      getSeismicData: jest.fn().mockResolvedValue(raw)\n    }))\n\n    const { getSeismicActivity } = require('../../src/services/usgsService.js')\n    const res = await getSeismicActivity()\n    expect(res.events.length).toBe(2)\n    expect(res.summary.totalEvents).toBe(2)\n    expect(res.summary.maxMagnitude).toBeCloseTo(4.1)\n  })\n\n  test('getSeismicActivity returns error-shaped object when live fetch fails and no FORCE_MOCKS', async () => {\n    jest.doMock('../../src/services/SeismicIntegration.js', () => ({\n      getSeismicData: jest.fn().mockRejectedValue(new Error('network'))\n    }))\n\n    delete process.env.FORCE_MOCKS\n    const { getSeismicActivity } = require('../../src/services/usgsService.js')\n    const res = await getSeismicActivity()\n    expect(res).toHaveProperty('events')\n    expect(Array.isArray(res.events)).toBe(true)\n    expect(res).toHaveProperty('summary')\n    expect(res).toHaveProperty('error')\n  })\n})\n"],"mappings":"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","ignoreList":[]}