3726242c3ce988e083f8f45f45c6d7f1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClimateExtremesIndex = getClimateExtremesIndex;
var _ClimateIntegration = _interopRequireDefault(require("../integrations/ClimateIntegration.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const climateIntegration = new _ClimateIntegration.default();

/**
 * Fetches the global climate extremes index for LATAM countries.
 * Uses the ClimateIntegration to get data from NASA POWER API.
 * @returns {Promise<object>} A promise that resolves to the climate extremes data.
 */
async function getClimateExtremesIndex() {
  try {
    const data = await climateIntegration.getClimateExtremes(['COL', 'PER', 'ARG', 'BRA', 'MEX']);
    return data;
  } catch (error) {
    console.error('Error in getClimateExtremesIndex:', error && error.stack ? error.stack : error && error.message || String(error));
    // Surface the error to the caller so failures are visible and not silently replaced with mocks
    throw error;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ2xpbWF0ZUludGVncmF0aW9uIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjbGltYXRlSW50ZWdyYXRpb24iLCJDbGltYXRlSW50ZWdyYXRpb24iLCJnZXRDbGltYXRlRXh0cmVtZXNJbmRleCIsImRhdGEiLCJnZXRDbGltYXRlRXh0cmVtZXMiLCJlcnJvciIsImNvbnNvbGUiLCJzdGFjayIsIm1lc3NhZ2UiLCJTdHJpbmciXSwic291cmNlcyI6WyJjbGltYXRlU2VydmljZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2xpbWF0ZUludGVncmF0aW9uIGZyb20gJy4uL2ludGVncmF0aW9ucy9DbGltYXRlSW50ZWdyYXRpb24uanMnO1xuXG5jb25zdCBjbGltYXRlSW50ZWdyYXRpb24gPSBuZXcgQ2xpbWF0ZUludGVncmF0aW9uKCk7XG5cbi8qKlxuICogRmV0Y2hlcyB0aGUgZ2xvYmFsIGNsaW1hdGUgZXh0cmVtZXMgaW5kZXggZm9yIExBVEFNIGNvdW50cmllcy5cbiAqIFVzZXMgdGhlIENsaW1hdGVJbnRlZ3JhdGlvbiB0byBnZXQgZGF0YSBmcm9tIE5BU0EgUE9XRVIgQVBJLlxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGNsaW1hdGUgZXh0cmVtZXMgZGF0YS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENsaW1hdGVFeHRyZW1lc0luZGV4KCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBjbGltYXRlSW50ZWdyYXRpb24uZ2V0Q2xpbWF0ZUV4dHJlbWVzKFsnQ09MJywgJ1BFUicsICdBUkcnLCAnQlJBJywgJ01FWCddKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBnZXRDbGltYXRlRXh0cmVtZXNJbmRleDonLCBlcnJvciAmJiBlcnJvci5zdGFjayA/IGVycm9yLnN0YWNrIDogKGVycm9yICYmIGVycm9yLm1lc3NhZ2UpIHx8IFN0cmluZyhlcnJvcikpO1xuICAgIC8vIFN1cmZhY2UgdGhlIGVycm9yIHRvIHRoZSBjYWxsZXIgc28gZmFpbHVyZXMgYXJlIHZpc2libGUgYW5kIG5vdCBzaWxlbnRseSByZXBsYWNlZCB3aXRoIG1vY2tzXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLG1CQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBdUUsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFdkUsTUFBTUcsa0JBQWtCLEdBQUcsSUFBSUMsMkJBQWtCLENBQUMsQ0FBQzs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLGVBQWVDLHVCQUF1QkEsQ0FBQSxFQUFHO0VBQzlDLElBQUk7SUFDRixNQUFNQyxJQUFJLEdBQUcsTUFBTUgsa0JBQWtCLENBQUNJLGtCQUFrQixDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdGLE9BQU9ELElBQUk7RUFDYixDQUFDLENBQUMsT0FBT0UsS0FBSyxFQUFFO0lBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLG1DQUFtQyxFQUFFQSxLQUFLLElBQUlBLEtBQUssQ0FBQ0UsS0FBSyxHQUFHRixLQUFLLENBQUNFLEtBQUssR0FBSUYsS0FBSyxJQUFJQSxLQUFLLENBQUNHLE9BQU8sSUFBS0MsTUFBTSxDQUFDSixLQUFLLENBQUMsQ0FBQztJQUNsSTtJQUNBLE1BQU1BLEtBQUs7RUFDYjtBQUNGIiwiaWdub3JlTGlzdCI6W119