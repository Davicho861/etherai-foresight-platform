generator client {
  provider = "prisma-client-js"
}

// Use DATABASE_URL from environment for CI/Prod (Postgres). Fallbacks can be
// configured locally if needed.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id        String   @id @default(cuid())
  name      String
  email     String
  sector    String?
  message   String?
  createdAt DateTime @default(now())
}

model ModuleData {
  id        String   @id @default(cuid())
  country   String
  category  String
  value     Float
  label     String
  timestamp DateTime @default(now())
}

// Metatr√≥n Omega - Entidad Precognitiva Schemas

model MissionContract {
  id          String   @id @default(cuid())
  title       String
  description String
  status      ContractStatus @default(PENDING)
  priority    Priority @default(MEDIUM)
  crewId      String?
  crew        Crew?    @relation(fields: [crewId], references: [id])
  oracleReportId String? @unique
  oracleReport OracleReport?
  ethicalReviewId String? @unique
  ethicalReview EthicalReview?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  logs        MissionLog[]
}

model OracleReport {
  id            String   @id @default(cuid())
  contractId    String   @unique
  contract      MissionContract @relation(fields: [contractId], references: [id])
  riskLevel     RiskLevel
  recommendations Json
  simulationResults Json
  patternsAnalyzed Json
  createdAt     DateTime @default(now())
}

model EthicalReview {
  id         String   @id @default(cuid())
  contractId String   @unique
  contract   MissionContract @relation(fields: [contractId], references: [id])
  approved   Boolean
  reasoning  String
  reviewedBy String
  createdAt  DateTime @default(now())
}

model Crew {
  id          String   @id @default(cuid())
  name        String   @unique
  type        CrewType
  description String
  agents      Agent[]
  contracts   MissionContract[]
  createdAt   DateTime @default(now())
}

model Agent {
  id          String   @id @default(cuid())
  name        String
  role        String
  crewId      String
  crew        Crew     @relation(fields: [crewId], references: [id])
  capabilities Json
  status      AgentStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MissionLog {
  id         String   @id @default(cuid())
  contractId String
  contract   MissionContract @relation(fields: [contractId], references: [id])
  taskId     String
  description String
  status     LogStatus
  timestamp  DateTime @default(now())
}

model CollectiveConsciousness {
  id          String   @id @default(cuid())
  type        KnowledgeType
  content     String
  metadata    Json
  vectorId    String? // Reference to ChromaDB vector ID
  graphNodeId String? // Reference to Neo4j node ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Enums
enum ContractStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CrewType {
  DEVELOPMENT
  SECURITY
  QUALITY
  DEPLOYMENT
  META_EVOLUTIVE
  ETHICS
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum LogStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERROR
}

enum KnowledgeType {
  PATTERN
  LESSON_LEARNED
  SIMULATION_RESULT
  ARCHITECTURE_PROPOSAL
}
