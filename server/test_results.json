
> praevisio-server@0.0.1 test
> jest --json

[mock-server] Mock server listening on http://localhost:45111
[mock-server] Mock server listening on http://localhost:45222
{"numFailedTestSuites":41,"numFailedTests":87,"numPassedTestSuites":58,"numPassedTests":410,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":2,"numTodoTests":0,"numTotalTestSuites":99,"numTotalTests":497,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1760404968469,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["RiskAssessmentAgent"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"RiskAssessmentAgent should calculate risk scores from correlations","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should calculate risk scores from correlations"},{"ancestorTitles":["RiskAssessmentAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RiskAssessmentAgent should handle zero correlations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle zero correlations"},{"ancestorTitles":["RiskAssessmentAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RiskAssessmentAgent should handle maximum correlations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle maximum correlations"},{"ancestorTitles":["RiskAssessmentAgent"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeCloseTo(expected)\n\nExpected: 53.33\nReceived: 53\n\nExpected precision:    2\nExpected difference: < 0.005\nReceived difference:   0.3299999999999983","pass":false}}],"failureMessages":["Error: expect(received).toBeCloseTo(expected)\n\nExpected: 53.33\nReceived: 53\n\nExpected precision:    2\nExpected difference: < 0.005\nReceived difference:   0.3299999999999983\n    at toBeCloseTo (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:88:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"RiskAssessmentAgent should handle partial correlations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle partial correlations"}],"endTime":1760404969876,"message":"  ● RiskAssessmentAgent › should handle partial correlations\n\n    expect(received).toBeCloseTo(expected)\n\n    Expected: 53.33\n    Received: 53\n\n    Expected precision:    2\n    Expected difference: < 0.005\n    Received difference:   0.3299999999999983\n\n      86 |     const result = await agent.run(input);\n      87 |\n    > 88 |     expect(result.COL).toBeCloseTo(53.33); // (0.5 + 0.3 + 0.8) / 3 * 100 ≈ 53.33\n         |                        ^\n      89 |   });\n      90 | });\n\n      at toBeCloseTo (__tests__/agents/riskAssessmentAgent.test.js:88:24)\n      at Generator.call (__tests__/agents/riskAssessmentAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/riskAssessmentAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/riskAssessmentAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/riskAssessmentAgent.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/riskAssessmentAgent.test.js","startTime":1760404968782,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GdeltIntegration"],"duration":8,"failureDetails":[{"matcherResult":{"actual":2,"expected":12,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 12\nReceived: 2","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 12\nReceived: 2\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:40:28)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration returns mock when FORCE_MOCKS=true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"returns mock when FORCE_MOCKS=true"},{"ancestorTitles":["GdeltIntegration"],"duration":3,"failureDetails":[{"matcherResult":{"actual":true,"expected":false,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:58:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration parses real response with articles and themes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"parses real response with articles and themes"},{"ancestorTitles":["GdeltIntegration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration returns fallback mock if API errors and FORCE_MOCKS set at runtime","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns fallback mock if API errors and FORCE_MOCKS set at runtime"}],"endTime":1760404969971,"message":"  ● GdeltIntegration › returns mock when FORCE_MOCKS=true\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 12\n    Received: 2\n\n      38 |     expect(res).toBeDefined();\n      39 |     expect(res.isMock).toBe(true);\n    > 40 |     expect(res.eventCount).toBe(12);\n         |                            ^\n      41 |   });\n      42 |\n      43 |   test('parses real response with articles and themes', async () => {\n\n      at toBe (__tests__/integrations/gdeltIntegration.unit.test.js:40:28)\n      at Generator.call (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n\n  ● GdeltIntegration › parses real response with articles and themes\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      56 |     const res = await g.getSocialEvents('COL', '2025-01-01', '2025-01-02');\n      57 |     expect(res).toBeDefined();\n    > 58 |     expect(res.isMock).toBe(false);\n         |                        ^\n      59 |     expect(Array.isArray(res.articles)).toBe(true);\n      60 |     // intensity should be numeric even if no articles were returned\n      61 |     expect(typeof res.socialIntensity).toBe('number');\n\n      at toBe (__tests__/integrations/gdeltIntegration.unit.test.js:58:24)\n      at Generator.call (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdeltIntegration.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.unit.test.js","startTime":1760404968774,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["PandemicsService","getPandemicsAnalysis"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsAnalysis should return pandemics analysis with valid data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return pandemics analysis with valid data"},{"ancestorTitles":["PandemicsService","getPandemicsAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsAnalysis should handle multiple regions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple regions"},{"ancestorTitles":["PandemicsService","getPandemicsAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsAnalysis should assess risk level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess risk level correctly"},{"ancestorTitles":["PandemicsService","getPandemicsAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsAnalysis should provide appropriate recommendations","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should provide appropriate recommendations"},{"ancestorTitles":["PandemicsService","getPandemicsRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsRiskIndex should return a valid risk index","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a valid risk index"},{"ancestorTitles":["PandemicsService","getPandemicsRiskIndex"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"PandemicsService getPandemicsRiskIndex should handle different region arrays","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle different region arrays"},{"ancestorTitles":["PandemicsService","Error handling"],"duration":3,"failureDetails":[{"matcherResult":{"actual":"PandemicsService","expected":"PandemicsService - Error Fallback","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"PandemicsService - Error Fallback\"\nReceived: \"PandemicsService\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"PandemicsService - Error Fallback\"\nReceived: \"PandemicsService\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:85:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"PandemicsService Error handling should handle agent failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle agent failure gracefully"}],"endTime":1760404969988,"message":"  ● PandemicsService › Error handling › should handle agent failure gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"PandemicsService - Error Fallback\"\n    Received: \"PandemicsService\"\n\n      83 |       // Should still return valid structure even if agent fails\n      84 |       expect(result).toHaveProperty('source');\n    > 85 |       expect(result.source).toBe('PandemicsService - Error Fallback');\n         |                             ^\n      86 |       expect(result).toHaveProperty('error');\n      87 |     });\n      88 |   });\n\n      at toBe (__tests__/services/pandemicsService.test.js:85:29)\n      at Generator.call (__tests__/services/pandemicsService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/pandemicsService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/pandemicsService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/pandemicsService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/pandemicsService.test.js","startTime":1760404968787,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["usgsService.getSeismicActivity"],"duration":149,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"events\": [{\"coordinates\": [-75, -10, 10], \"id\": undefined, \"magnitude\": 5.2, \"place\": \"Test Location\", \"significance\": undefined, \"time\": undefined, \"tsunami\": undefined, \"url\": undefined}], \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:49.994Z\", \"maxMagnitude\": 5.2, \"source\": \"USGS Earthquake Hazards Program\", \"totalEvents\": 1}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"events\": [{\"coordinates\": [-75, -10, 10], \"id\": undefined, \"magnitude\": 5.2, \"place\": \"Test Location\", \"significance\": undefined, \"time\": undefined, \"tsunami\": undefined, \"url\": undefined}], \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:49.994Z\", \"maxMagnitude\": 5.2, \"source\": \"USGS Earthquake Hazards Program\", \"totalEvents\": 1}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:14:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"usgsService.getSeismicActivity returns built-in mock when FORCE_MOCKS=true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns built-in mock when FORCE_MOCKS=true"},{"ancestorTitles":["usgsService.getSeismicActivity"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"usgsService.getSeismicActivity uses local mock server when NATIVE_DEV_MODE=true and mock responds","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"uses local mock server when NATIVE_DEV_MODE=true and mock responds"},{"ancestorTitles":["usgsService.getSeismicActivity"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"usgsService.getSeismicActivity falls back when live integration throws and FORCE_MOCKS not set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"falls back when live integration throws and FORCE_MOCKS not set"}],"endTime":1760404970055,"message":"  ● usgsService.getSeismicActivity › returns built-in mock when FORCE_MOCKS=true\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"events\": [{\"coordinates\": [-75, -10, 10], \"id\": undefined, \"magnitude\": 5.2, \"place\": \"Test Location\", \"significance\": undefined, \"time\": undefined, \"tsunami\": undefined, \"url\": undefined}], \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:49.994Z\", \"maxMagnitude\": 5.2, \"source\": \"USGS Earthquake Hazards Program\", \"totalEvents\": 1}}\n\n      12 |   const svc = require('../../src/services/usgsService.js')\n      13 |     const out = await svc.getSeismicActivity()\n    > 14 |     expect(out).toHaveProperty('isMock', true)\n         |                 ^\n      15 |     expect(out.events.length).toBeGreaterThan(0)\n      16 |   })\n      17 |\n\n      at toHaveProperty (__tests__/services/usgsService.unit.test.js:14:17)\n      at Generator.call (__tests__/services/usgsService.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/usgsService.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/usgsService.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/usgsService.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.unit.test.js","startTime":1760404968832,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["USGS Service","getSeismicActivity"],"duration":49,"failureDetails":[],"failureMessages":[],"fullName":"USGS Service getSeismicActivity should return transformed seismic data successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return transformed seismic data successfully"},{"ancestorTitles":["USGS Service","getSeismicActivity"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"USGS Service getSeismicActivity should handle empty seismic data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty seismic data"},{"ancestorTitles":["USGS Service","getSeismicActivity"],"duration":4,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"error\"\nReceived path: []\n\nReceived value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760404970043, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760401370043, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.043Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"error\"\nReceived path: []\n\nReceived value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760404970043, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760401370043, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.043Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:85:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"USGS Service getSeismicActivity should handle integration errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle integration errors gracefully"},{"ancestorTitles":["USGS Service","getSeismicActivity"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"USGS Service getSeismicActivity should handle invalid data structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid data structure"}],"endTime":1760404970087,"message":"  ● USGS Service › getSeismicActivity › should handle integration errors gracefully\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"error\"\n    Received path: []\n\n    Received value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760404970043, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760401370043, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.043Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}\n\n      83 |       const result = await getSeismicActivity();\n      84 |\n    > 85 |       expect(result).toHaveProperty('error');\n         |                      ^\n      86 |       expect(result.error).toBe('Network error');\n      87 |       expect(result.events).toEqual([]);\n      88 |     });\n\n      at toHaveProperty (__tests__/services/usgsService.test.js:85:22)\n      at Generator.call (__tests__/services/usgsService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/usgsService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/usgsService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/usgsService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/usgsService.test.js","startTime":1760404968799,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":83,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"price_change_percentage_24h\"\nReceived path: []\n\nReceived value: {\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"price_change_percentage_24h\"\nReceived path: []\n\nReceived value: {\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:30:25)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration - Expansion Tests getCryptoData handles multiple cryptocurrencies for volatility analysis","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"getCryptoData handles multiple cryptocurrencies for volatility analysis"},{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":71,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: [{\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}]","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: [{\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}]\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:38:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration - Expansion Tests getCryptoData returns fallback mock when FORCE_MOCKS is enabled","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getCryptoData returns fallback mock when FORCE_MOCKS is enabled"},{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"CryptoIntegration - Expansion Tests getHistoricalData supports different timeframes for trend analysis","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"getHistoricalData supports different timeframes for trend analysis"},{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"CryptoIntegration - Expansion Tests getCryptoData handles empty cryptoIds array gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getCryptoData handles empty cryptoIds array gracefully"},{"ancestorTitles":["CryptoIntegration - Expansion Tests"],"duration":59,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"prices\": [[1609459200000, 50000], [1609545600000, 51000]]}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"prices\": [[1609459200000, 50000], [1609545600000, 51000]]}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:67:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration - Expansion Tests getHistoricalData returns mock data when API fails and FORCE_MOCKS enabled","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getHistoricalData returns mock data when API fails and FORCE_MOCKS enabled"}],"endTime":1760404970091,"message":"  ● CryptoIntegration - Expansion Tests › getCryptoData handles multiple cryptocurrencies for volatility analysis\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"price_change_percentage_24h\"\n    Received path: []\n\n    Received value: {\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}\n\n      28 |     const firstCrypto = res[0];\n      29 |     expect(firstCrypto).toHaveProperty('id');\n    > 30 |     expect(firstCrypto).toHaveProperty('price_change_percentage_24h');\n         |                         ^\n      31 |   });\n      32 |\n      33 |   test('getCryptoData returns fallback mock when FORCE_MOCKS is enabled', async () => {\n\n      at toHaveProperty (__tests__/integrations/cryptoIntegration.expansion.test.js:30:25)\n      at Generator.call (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n\n  ● CryptoIntegration - Expansion Tests › getCryptoData returns fallback mock when FORCE_MOCKS is enabled\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: [{\"current_price\": 50000, \"id\": \"bitcoin\", \"symbol\": \"bit\"}]\n\n      36 |     const inst = new CryptoIntegration();\n      37 |     const res = await inst.getCryptoData(['bitcoin'], 'usd');\n    > 38 |     expect(res).toHaveProperty('isMock', true);\n         |                 ^\n      39 |     expect(res).toHaveProperty('source', 'FORCE_MOCKS:Crypto');\n      40 |     delete process.env.FORCE_MOCKS;\n      41 |   });\n\n      at toHaveProperty (__tests__/integrations/cryptoIntegration.expansion.test.js:38:17)\n      at Generator.call (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n\n  ● CryptoIntegration - Expansion Tests › getHistoricalData returns mock data when API fails and FORCE_MOCKS enabled\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"prices\": [[1609459200000, 50000], [1609545600000, 51000]]}\n\n      65 |     const inst = new CryptoIntegration();\n      66 |     const res = await inst.getHistoricalData('bitcoin', 30, 'usd');\n    > 67 |     expect(res).toHaveProperty('isMock', true);\n         |                 ^\n      68 |     expect(res).toHaveProperty('cryptoId', 'bitcoin');\n      69 |     delete process.env.FORCE_MOCKS;\n      70 |   });\n\n      at toHaveProperty (__tests__/integrations/cryptoIntegration.expansion.test.js:67:17)\n      at Generator.call (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.expansion.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.expansion.test.js","startTime":1760404968736,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":81,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getNDVIData should fetch real NDVI data and convert from temperature","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should fetch real NDVI data and convert from temperature"},{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":15,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:37:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SatelliteIntegration getNDVIData should handle API errors and return mock data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle API errors and return mock data"},{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":28,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeLessThan(expected)\n\nExpected: < 0.6\nReceived:   0.6280405777479604","pass":false}}],"failureMessages":["Error: expect(received).toBeLessThan(expected)\n\nExpected: < 0.6\nReceived:   0.6280405777479604\n    at toBeLessThan (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:49:42)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SatelliteIntegration getNDVIData should generate seasonal NDVI patterns in mock data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should generate seasonal NDVI patterns in mock data"},{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getNDVIData should calculate NDVI correctly from temperature data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate NDVI correctly from temperature data"},{"ancestorTitles":["SatelliteIntegration","getNDVIData"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getNDVIData should handle extreme temperatures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle extreme temperatures"},{"ancestorTitles":["SatelliteIntegration","getCropHealthPrediction"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getCropHealthPrediction should return crop health prediction","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should return crop health prediction"},{"ancestorTitles":["SatelliteIntegration","getCropHealthPrediction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SatelliteIntegration getCropHealthPrediction should handle different crop types","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle different crop types"}],"endTime":1760404970116,"message":"  ● SatelliteIntegration › getNDVIData › should handle API errors and return mock data\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      35 |       const result = await integration.getNDVIData(4.7110, -74.0721, '2024-01-01', '2024-01-03');\n      36 |\n    > 37 |       expect(result.isMock).toBe(true);\n         |                             ^\n      38 |       expect(result.ndviData).toHaveLength(3); // 3 days\n      39 |       expect(result.ndviData.every(d => d.ndvi >= 0 && d.ndvi <= 1)).toBe(true);\n      40 |     });\n\n      at toBe (__tests__/integrations/satelliteIntegration.test.js:37:29)\n      at Generator.call (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/satelliteIntegration.test.js:2:1)\n\n  ● SatelliteIntegration › getNDVIData › should generate seasonal NDVI patterns in mock data\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0.6\n    Received:   0.6280405777479604\n\n      47 |       // Test December (dry season)\n      48 |       const resultDec = await integration.getNDVIData(4.7110, -74.0721, '2024-12-01', '2024-12-01');\n    > 49 |       expect(resultDec.ndviData[0].ndvi).toBeLessThan(0.6); // Lower in dry season\n         |                                          ^\n      50 |     });\n      51 |\n      52 |     it('should calculate NDVI correctly from temperature data', async () => {\n\n      at toBeLessThan (__tests__/integrations/satelliteIntegration.test.js:49:42)\n      at Generator.call (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/satelliteIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/satelliteIntegration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/satelliteIntegration.test.js","startTime":1760404968815,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CryptoIntegration"],"duration":109,"failureDetails":[{"matcherResult":{"actual":[{"id":"bitcoin","symbol":"bit","current_price":50000}],"expected":[{"id":"bitcoin","symbol":"btc","current_price":2500}],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    Object {\n-     \"current_price\": 2500,\n+     \"current_price\": 50000,\n      \"id\": \"bitcoin\",\n-     \"symbol\": \"btc\",\n+     \"symbol\": \"bit\",\n    },\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    Object {\n-     \"current_price\": 2500,\n+     \"current_price\": 50000,\n      \"id\": \"bitcoin\",\n-     \"symbol\": \"btc\",\n+     \"symbol\": \"bit\",\n    },\n  ]\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:24:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration getCryptoData returns parsed JSON on success","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getCryptoData returns parsed JSON on success"},{"ancestorTitles":["CryptoIntegration"],"duration":24,"failureDetails":[{"matcherResult":{"actual":[{"id":"bitcoin","symbol":"bit","current_price":50000}],"expected":[{"id":"bitcoin","symbol":"btc","current_price":2500}],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    Object {\n-     \"current_price\": 2500,\n+     \"current_price\": 50000,\n      \"id\": \"bitcoin\",\n-     \"symbol\": \"btc\",\n+     \"symbol\": \"bit\",\n    },\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    Object {\n-     \"current_price\": 2500,\n+     \"current_price\": 50000,\n      \"id\": \"bitcoin\",\n-     \"symbol\": \"btc\",\n+     \"symbol\": \"bit\",\n    },\n  ]\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:31:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoIntegration getCryptoData returns error object on fetch failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getCryptoData returns error object on fetch failure"},{"ancestorTitles":["CryptoIntegration"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"CryptoIntegration getHistoricalData returns parsed JSON on success","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getHistoricalData returns parsed JSON on success"},{"ancestorTitles":["CryptoIntegration"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"CryptoIntegration getHistoricalData returns error object when non-ok response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getHistoricalData returns error object when non-ok response"}],"endTime":1760404970149,"message":"  ● CryptoIntegration › getCryptoData returns parsed JSON on success\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n        Object {\n    -     \"current_price\": 2500,\n    +     \"current_price\": 50000,\n          \"id\": \"bitcoin\",\n    -     \"symbol\": \"btc\",\n    +     \"symbol\": \"bit\",\n        },\n      ]\n\n      22 |     const inst = new CryptoIntegration()\n      23 |     const res = await inst.getCryptoData(['bitcoin'], 'usd')\n    > 24 |     expect(res).toEqual([{ id: 'bitcoin', symbol: 'btc', current_price: 2500 }])\n         |                 ^\n      25 |   })\n      26 |\n      27 |   test('getCryptoData returns error object on fetch failure', async () => {\n\n      at toEqual (__tests__/integrations/cryptoIntegration.unit.test.js:24:17)\n      at Generator.call (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n\n  ● CryptoIntegration › getCryptoData returns error object on fetch failure\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Array [\n        Object {\n    -     \"current_price\": 2500,\n    +     \"current_price\": 50000,\n          \"id\": \"bitcoin\",\n    -     \"symbol\": \"btc\",\n    +     \"symbol\": \"bit\",\n        },\n      ]\n\n      29 |     const inst = new CryptoIntegration()\n      30 |     const res = await inst.getCryptoData(['bitcoin'], 'usd')\n    > 31 |     expect(res).toEqual([{ id: 'bitcoin', symbol: 'btc', current_price: 2500 }])\n         |                 ^\n      32 |   })\n      33 |\n      34 |   test('getHistoricalData returns parsed JSON on success', async () => {\n\n      at toEqual (__tests__/integrations/cryptoIntegration.unit.test.js:31:17)\n      at Generator.call (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/cryptoIntegration.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/cryptoIntegration.unit.test.js","startTime":1760404968841,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityAnalysis"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityAnalysis should return geopolitical instability analysis with valid data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return geopolitical instability analysis with valid data"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityAnalysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityAnalysis should handle multiple regions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple regions"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityAnalysis should assess risk level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess risk level correctly"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityAnalysis should provide appropriate recommendations","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should provide appropriate recommendations"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityRiskIndex"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex is not a function\n    at getGeopoliticalInstabilityRiskIndex (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:55:62)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityRiskIndex should return a valid risk index","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return a valid risk index"},{"ancestorTitles":["GeopoliticalInstabilityService","getGeopoliticalInstabilityRiskIndex"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex is not a function\n    at getGeopoliticalInstabilityRiskIndex (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:66:58)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"GeopoliticalInstabilityService getGeopoliticalInstabilityRiskIndex should handle different region arrays","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle different region arrays"},{"ancestorTitles":["GeopoliticalInstabilityService","Error handling"],"duration":4,"failureDetails":[{"matcherResult":{"actual":"GeopoliticalInstabilityService","expected":"GeopoliticalInstabilityService - Error Fallback","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"GeopoliticalInstabilityService - Error Fallback\"\nReceived: \"GeopoliticalInstabilityService\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"GeopoliticalInstabilityService - Error Fallback\"\nReceived: \"GeopoliticalInstabilityService\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:85:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GeopoliticalInstabilityService Error handling should handle agent failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle agent failure gracefully"}],"endTime":1760404970168,"message":"  ● GeopoliticalInstabilityService › getGeopoliticalInstabilityRiskIndex › should return a valid risk index\n\n    TypeError: geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex is not a function\n\n      53 |     test('should return a valid risk index', async () => {\n      54 |       const regions = ['global'];\n    > 55 |       const riskIndex = await geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex(regions);\n         |                                                              ^\n      56 |\n      57 |       expect(typeof riskIndex).toBe('number');\n      58 |       expect(riskIndex).toBeGreaterThanOrEqual(0);\n\n      at getGeopoliticalInstabilityRiskIndex (__tests__/services/geopoliticalInstabilityService.test.js:55:62)\n      at Generator.call (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at _next (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Object.<anonymous> (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n\n  ● GeopoliticalInstabilityService › getGeopoliticalInstabilityRiskIndex › should handle different region arrays\n\n    TypeError: geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex is not a function\n\n      64 |       const regions2 = ['europe', 'asia', 'africa'];\n      65 |\n    > 66 |       const risk1 = await geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex(regions1);\n         |                                                          ^\n      67 |       const risk2 = await geopoliticalInstabilityService.getGeopoliticalInstabilityRiskIndex(regions2);\n      68 |\n      69 |       expect(typeof risk1).toBe('number');\n\n      at getGeopoliticalInstabilityRiskIndex (__tests__/services/geopoliticalInstabilityService.test.js:66:58)\n      at Generator.call (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at _next (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Object.<anonymous> (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n\n  ● GeopoliticalInstabilityService › Error handling › should handle agent failure gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"GeopoliticalInstabilityService - Error Fallback\"\n    Received: \"GeopoliticalInstabilityService\"\n\n      83 |       // Should still return valid structure even if agent fails\n      84 |       expect(result).toHaveProperty('source');\n    > 85 |       expect(result.source).toBe('GeopoliticalInstabilityService - Error Fallback');\n         |                             ^\n      86 |       expect(result).toHaveProperty('error');\n      87 |     });\n      88 |   });\n\n      at toBe (__tests__/services/geopoliticalInstabilityService.test.js:85:29)\n      at Generator.call (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/geopoliticalInstabilityService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/geopoliticalInstabilityService.test.js","startTime":1760404968841,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex transforms WorldBankIntegration response correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"transforms WorldBankIntegration response correctly"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":54,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex uses serverless endpoint when integration throws and transforms response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses serverless endpoint when integration throws and transforms response"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex falls back to mock when everything fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"falls back to mock when everything fails"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex transforms WorldBankIntegration response correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"transforms WorldBankIntegration response correctly"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex uses serverless endpoint when integration throws and transforms response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses serverless endpoint when integration throws and transforms response"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex falls back to mock when everything fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"falls back to mock when everything fails"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService.getFoodSecurityIndex uses NATIVE_DEV_MODE local mock when set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses NATIVE_DEV_MODE local mock when set"},{"ancestorTitles":["worldBankService.getFoodSecurityIndex"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'countries')\n    at countries (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:178:16)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"worldBankService.getFoodSecurityIndex prefers a pre-instantiated WorldBankIntegration mock instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"prefers a pre-instantiated WorldBankIntegration mock instance"}],"coverage":{},"endTime":1760404977874,"message":"  ● worldBankService.getFoodSecurityIndex › prefers a pre-instantiated WorldBankIntegration mock instance\n\n    TypeError: Cannot read properties of undefined (reading 'countries')\n\n      176 |     const out = await svc.getFoodSecurityIndex()\n      177 |\n    > 178 |     expect(out.countries).toContain('ARG')\n          |                ^\n      179 |     // ensure the pre-instantiated instance's method was used\n      180 |     expect(instance.getFoodSecurityData).toBeDefined()\n      181 |   })\n\n      at countries (__tests__/services/worldBankService.test.js:178:16)\n      at Generator.call (__tests__/services/worldBankService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/worldBankService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/worldBankService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/worldBankService.test.js:2:1)\n\n\n  ● Test suite failed to run\n\n    TypeError: Object.defineProperty called on non-object\n        at Function.defineProperty (<anonymous>)\n\n       7 |\n       8 |   afterAll(() => {\n    >  9 |     server.close();\n         |            ^\n      10 |   });\n      11 |\n      12 |   afterEach(() => {\n\n      at defineProperty (../node_modules/@mswjs/interceptors/src/interceptors/fetch/index.ts:191:14)\n      at _FetchInterceptor.dispose (../node_modules/@mswjs/interceptors/src/Interceptor.ts:220:9)\n      at dispose (../node_modules/@mswjs/interceptors/src/BatchInterceptor.ts:47:49)\n      at BatchInterceptor.dispose (../node_modules/@mswjs/interceptors/src/Interceptor.ts:220:9)\n      at dispose (../node_modules/msw/src/node/SetupServerCommonApi.ts:146:52)\n      at _SetupServerApi.subscription [as dispose] (../node_modules/msw/src/core/utils/internal/Disposable.ts:9:7)\n      at _SetupServerApi.dispose (../node_modules/msw/src/node/SetupServerCommonApi.ts:167:10)\n      at ../node_modules/msw/lib/node/index.js:3:165\n      at _SetupServerApi.close (../node_modules/msw/src/node/SetupServerApi.ts:84:5)\n      at Object.close (__tests__/services/worldBankService.test.js:9:12)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.test.js","startTime":1760404977874,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CybersecurityService","getCybersecurityAnalysis"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityAnalysis should return cybersecurity analysis with valid data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return cybersecurity analysis with valid data"},{"ancestorTitles":["CybersecurityService","getCybersecurityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityAnalysis should handle multiple sectors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple sectors"},{"ancestorTitles":["CybersecurityService","getCybersecurityAnalysis"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityAnalysis should assess risk level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess risk level correctly"},{"ancestorTitles":["CybersecurityService","getCybersecurityAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityAnalysis should provide appropriate recommendations","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should provide appropriate recommendations"},{"ancestorTitles":["CybersecurityService","getCybersecurityRiskIndex"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityRiskIndex should return a valid risk index","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a valid risk index"},{"ancestorTitles":["CybersecurityService","getCybersecurityRiskIndex"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CybersecurityService getCybersecurityRiskIndex should handle different sector arrays","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle different sector arrays"},{"ancestorTitles":["CybersecurityService","Error handling"],"duration":3,"failureDetails":[{"matcherResult":{"actual":"CybersecurityService","expected":"CybersecurityService - Error Fallback","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"CybersecurityService - Error Fallback\"\nReceived: \"CybersecurityService\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"CybersecurityService - Error Fallback\"\nReceived: \"CybersecurityService\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:85:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CybersecurityService Error handling should handle agent failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle agent failure gracefully"}],"endTime":1760404970208,"message":"  ● CybersecurityService › Error handling › should handle agent failure gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"CybersecurityService - Error Fallback\"\n    Received: \"CybersecurityService\"\n\n      83 |       // Should still return valid structure even if agent fails\n      84 |       expect(result).toHaveProperty('source');\n    > 85 |       expect(result.source).toBe('CybersecurityService - Error Fallback');\n         |                             ^\n      86 |       expect(result).toHaveProperty('error');\n      87 |     });\n      88 |   });\n\n      at toBe (__tests__/services/cybersecurityService.test.js:85:29)\n      at Generator.call (__tests__/services/cybersecurityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/cybersecurityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/cybersecurityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/cybersecurityService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cybersecurityService.test.js","startTime":1760404969984,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Prediction Engine (with FORCE_MOCKS)"],"duration":231,"failureDetails":[{"matcherResult":{"actual":"object","expected":"string","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"string\"\nReceived: \"object\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"string\"\nReceived: \"object\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:21:38)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Prediction Engine (with FORCE_MOCKS) runs a prophecy cycle and updates indices","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"runs a prophecy cycle and updates indices"}],"endTime":1760404970223,"message":"  ● Prediction Engine (with FORCE_MOCKS) › runs a prophecy cycle and updates indices\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"string\"\n    Received: \"object\"\n\n      19 |     // FORCE_MOCKS should populate these\n      20 |     expect(famineRisk.value).toBe(null);\n    > 21 |     expect(typeof famineRisk.source).toBe('string');\n         |                                      ^\n      22 |\n      23 |     expect(Array.isArray(geophysicalRisk.significantEvents)).toBe(true);\n      24 |     expect(geophysicalRisk.value).toBeGreaterThanOrEqual(0);\n\n      at toBe (__tests__/predictionEngine.test.js:21:38)\n      at Generator.call (__tests__/predictionEngine.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/predictionEngine.test.js:2:1)\n      at asyncGeneratorStep (__tests__/predictionEngine.test.js:2:1)\n      at asyncGeneratorStep (__tests__/predictionEngine.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.test.js","startTime":1760404968685,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SIMIntegration","getFoodPrices"],"duration":106,"failureDetails":[{"matcherResult":{"actual":{"product":"rice","region":"Lima","priceData":{"product":"rice","region":"Lima","currentPrice":0,"minPrice":0,"maxPrice":0,"averagePrice":0,"unit":"PEN/kg","date":"2025-10-14T01:22:50.059Z","source":"SIM MINAGRI"},"isMock":false},"expected":{"product":"rice","region":"Lima","priceData":{"product":"rice","region":"Lima","currentPrice":4.5,"minPrice":4.2,"maxPrice":4.8,"averagePrice":4.45,"unit":"PEN/kg","date":{"inverse":false},"source":"SIM MINAGRI"},"isMock":false},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 4\n+ Received  + 4\n\n@@ -1,13 +1,13 @@\n  Object {\n    \"isMock\": false,\n    \"priceData\": Object {\n-     \"averagePrice\": 4.45,\n-     \"currentPrice\": 4.5,\n+     \"averagePrice\": 0,\n+     \"currentPrice\": 0,\n      \"date\": Any<String>,\n-     \"maxPrice\": 4.8,\n-     \"minPrice\": 4.2,\n+     \"maxPrice\": 0,\n+     \"minPrice\": 0,\n      \"product\": \"rice\",\n      \"region\": \"Lima\",\n      \"source\": \"SIM MINAGRI\",\n      \"unit\": \"PEN/kg\",\n    },","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 4\n+ Received  + 4\n\n@@ -1,13 +1,13 @@\n  Object {\n    \"isMock\": false,\n    \"priceData\": Object {\n-     \"averagePrice\": 4.45,\n-     \"currentPrice\": 4.5,\n+     \"averagePrice\": 0,\n+     \"currentPrice\": 0,\n      \"date\": Any<String>,\n-     \"maxPrice\": 4.8,\n-     \"minPrice\": 4.2,\n+     \"maxPrice\": 0,\n+     \"minPrice\": 0,\n      \"product\": \"rice\",\n      \"region\": \"Lima\",\n      \"source\": \"SIM MINAGRI\",\n      \"unit\": \"PEN/kg\",\n    },\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:16:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SIMIntegration getFoodPrices should return data from SIM API","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return data from SIM API"},{"ancestorTitles":["SIMIntegration","getFoodPrices"],"duration":26,"failureDetails":[{"matcherResult":{"actual":0,"expected":4.5,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 4.5\nReceived: 0","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 4.5\nReceived: 0\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:46:45)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SIMIntegration getFoodPrices should return fallback data when API call fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return fallback data when API call fails"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return volatility data from SIM API","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return volatility data from SIM API"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return volatility data for different products","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return volatility data for different products"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return low volatility for beans","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return low volatility for beans"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return medium volatility for corn","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return medium volatility for corn"},{"ancestorTitles":["SIMIntegration","getVolatilityIndex"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex should return default volatility for unknown product","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return default volatility for unknown product"},{"ancestorTitles":["SIMIntegration","getPriceHistory"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getPriceHistory should return historical price data","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return historical price data"}],"endTime":1760404970230,"message":"  ● SIMIntegration › getFoodPrices › should return data from SIM API\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 4\n    + Received  + 4\n\n    @@ -1,13 +1,13 @@\n      Object {\n        \"isMock\": false,\n        \"priceData\": Object {\n    -     \"averagePrice\": 4.45,\n    -     \"currentPrice\": 4.5,\n    +     \"averagePrice\": 0,\n    +     \"currentPrice\": 0,\n          \"date\": Any<String>,\n    -     \"maxPrice\": 4.8,\n    -     \"minPrice\": 4.2,\n    +     \"maxPrice\": 0,\n    +     \"minPrice\": 0,\n          \"product\": \"rice\",\n          \"region\": \"Lima\",\n          \"source\": \"SIM MINAGRI\",\n          \"unit\": \"PEN/kg\",\n        },\n\n      14 |       const result = await simIntegration.getFoodPrices('rice', 'Lima');\n      15 |\n    > 16 |       expect(result).toEqual({\n         |                      ^\n      17 |         product: 'rice',\n      18 |         region: 'Lima',\n      19 |         priceData: {\n\n      at toEqual (__tests__/integrations/SIMIntegration.test.js:16:22)\n      at Generator.call (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/SIMIntegration.test.js:2:1)\n\n  ● SIMIntegration › getFoodPrices › should return fallback data when API call fails\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4.5\n    Received: 0\n\n      44 |\n      45 |       expect(result.isMock).toBe(false); // MSW intercepta y responde\n    > 46 |       expect(result.priceData.currentPrice).toBe(4.50);\n         |                                             ^\n      47 |       expect(result.priceData.source).toBe('SIM MINAGRI');\n      48 |       expect(result.product).toBe('rice');\n      49 |       expect(result.region).toBe('Lima');\n\n      at toBe (__tests__/integrations/SIMIntegration.test.js:46:45)\n      at Generator.call (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/SIMIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/SIMIntegration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/SIMIntegration.test.js","startTime":1760404968718,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["services: climateService and usgsService"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"services: climateService and usgsService getClimateExtremesIndex returns data from ClimateIntegration when available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getClimateExtremesIndex returns data from ClimateIntegration when available"},{"ancestorTitles":["services: climateService and usgsService"],"duration":27,"failureDetails":[{}],"failureMessages":["Error: service down\n    at mockConstructor.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:30:57)\n    at /home/davicho/etherai-foresight-platform-main/node_modules/jest-mock/build/index.js:387:43\n    at mockConstructor.<anonymous> (/home/davicho/etherai-foresight-platform-main/node_modules/jest-mock/build/index.js:404:13)\n    at new mockConstructor (/home/davicho/etherai-foresight-platform-main/node_modules/jest-mock/build/index.js:148:19)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/src/services/climateService.js:3:28)\n    at Runtime._execModule (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runtime/build/index.js:882:12)\n    at Runtime.requireModuleOrMock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runtime/build/index.js:1048:21)\n    at require (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:34:41)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"services: climateService and usgsService getClimateExtremesIndex returns fallback mock on integration failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getClimateExtremesIndex returns fallback mock on integration failure"},{"ancestorTitles":["services: climateService and usgsService"],"duration":187,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"events\": [{\"coordinates\": [-75, -10, 10], \"id\": undefined, \"magnitude\": 5.2, \"place\": \"Test Location\", \"significance\": undefined, \"time\": undefined, \"tsunami\": undefined, \"url\": undefined}], \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.207Z\", \"maxMagnitude\": 5.2, \"source\": \"USGS Earthquake Hazards Program\", \"totalEvents\": 1}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"events\": [{\"coordinates\": [-75, -10, 10], \"id\": undefined, \"magnitude\": 5.2, \"place\": \"Test Location\", \"significance\": undefined, \"time\": undefined, \"tsunami\": undefined, \"url\": undefined}], \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.207Z\", \"maxMagnitude\": 5.2, \"source\": \"USGS Earthquake Hazards Program\", \"totalEvents\": 1}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:45:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"services: climateService and usgsService getSeismicActivity returns builtin mock when FORCE_MOCKS=true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"getSeismicActivity returns builtin mock when FORCE_MOCKS=true"},{"ancestorTitles":["services: climateService and usgsService"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"services: climateService and usgsService getSeismicActivity transforms data from SeismicIntegration.getSeismicData","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"getSeismicActivity transforms data from SeismicIntegration.getSeismicData"},{"ancestorTitles":["services: climateService and usgsService"],"duration":4,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"error\"\nReceived path: []\n\nReceived value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760404970216, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760401370216, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.216Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"error\"\nReceived path: []\n\nReceived value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760404970216, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760401370216, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.216Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:82:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"services: climateService and usgsService getSeismicActivity returns error-shaped object when live fetch fails and no FORCE_MOCKS","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"getSeismicActivity returns error-shaped object when live fetch fails and no FORCE_MOCKS"}],"endTime":1760404970250,"message":"  ● services: climateService and usgsService › getClimateExtremesIndex returns fallback mock on integration failure\n\n    service down\n\n      28 |     jest.doMock('../../src/integrations/ClimateIntegration.js', () => {\n      29 |       return jest.fn().mockImplementation(() => ({\n    > 30 |         getClimateExtremes: jest.fn().mockRejectedValue(new Error('service down'))\n         |                                                         ^\n      31 |       }))\n      32 |     })\n      33 |\n\n      at mockConstructor.<anonymous> (__tests__/services/climate_usgs.test.js:30:57)\n      at Object.<anonymous> (src/services/climateService.js:3:28)\n      at require (__tests__/services/climate_usgs.test.js:34:41)\n      at Generator.call (__tests__/services/climate_usgs.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n      at _next (__tests__/services/climate_usgs.test.js:2:1)\n      at Object.<anonymous> (__tests__/services/climate_usgs.test.js:2:1)\n\n  ● services: climateService and usgsService › getSeismicActivity returns builtin mock when FORCE_MOCKS=true\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"events\": [{\"coordinates\": [-75, -10, 10], \"id\": undefined, \"magnitude\": 5.2, \"place\": \"Test Location\", \"significance\": undefined, \"time\": undefined, \"tsunami\": undefined, \"url\": undefined}], \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.207Z\", \"maxMagnitude\": 5.2, \"source\": \"USGS Earthquake Hazards Program\", \"totalEvents\": 1}}\n\n      43 |     const { getSeismicActivity } = require('../../src/services/usgsService.js')\n      44 |     const res = await getSeismicActivity()\n    > 45 |     expect(res).toHaveProperty('isMock', true)\n         |                 ^\n      46 |     expect(res.events).toBeDefined()\n      47 |     expect(Array.isArray(res.events)).toBe(true)\n      48 |     expect(res.summary).toHaveProperty('totalEvents')\n\n      at toHaveProperty (__tests__/services/climate_usgs.test.js:45:17)\n      at Generator.call (__tests__/services/climate_usgs.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n\n  ● services: climateService and usgsService › getSeismicActivity returns error-shaped object when live fetch fails and no FORCE_MOCKS\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"error\"\n    Received path: []\n\n    Received value: {\"events\": [{\"coordinates\": [-74.2973, 4.5709, 10], \"id\": \"mock-1\", \"magnitude\": 4.5, \"place\": \"Mock Seismic Region - Test Location\", \"significance\": 50, \"time\": 1760404970216, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-1\"}, {\"coordinates\": [-75, -10, 15], \"id\": \"mock-2\", \"magnitude\": 3.2, \"place\": \"Another Mock Location\", \"significance\": 25, \"time\": 1760401370216, \"tsunami\": 0, \"url\": \"https://example.com/mock-earthquake-2\"}], \"isMock\": true, \"note\": \"Real-time seismic data simulation - API unavailable\", \"summary\": {\"lastUpdated\": \"2025-10-14T01:22:50.216Z\", \"maxMagnitude\": 4.5, \"source\": \"High-Fidelity Mock Data - USGS API Unavailable\", \"totalEvents\": 2}}\n\n      80 |     expect(Array.isArray(res.events)).toBe(true)\n      81 |     expect(res).toHaveProperty('summary')\n    > 82 |     expect(res).toHaveProperty('error')\n         |                 ^\n      83 |   })\n      84 | })\n      85 |\n\n      at toHaveProperty (__tests__/services/climate_usgs.test.js:82:17)\n      at Generator.call (__tests__/services/climate_usgs.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/climate_usgs.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/climate_usgs.test.js","startTime":1760404968869,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CausalCorrelationAgent"],"duration":32,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}, \"PER\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}, \"PER\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:54:20)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CausalCorrelationAgent should calculate correlations and persist to Neo4j","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should calculate correlations and persist to Neo4j"},{"ancestorTitles":["CausalCorrelationAgent"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:100:20)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CausalCorrelationAgent should handle Neo4j errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle Neo4j errors gracefully"},{"ancestorTitles":["CausalCorrelationAgent"],"duration":5,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:122:20)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CausalCorrelationAgent should skip Neo4j operations in native dev mode","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should skip Neo4j operations in native dev mode"}],"endTime":1760404970253,"message":"  ● CausalCorrelationAgent › should calculate correlations and persist to Neo4j\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"COL\"\n    Received path: []\n\n    Received value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}, \"PER\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}\n\n      52 |     const result = await agent.run(input);\n      53 |\n    > 54 |     expect(result).toHaveProperty('COL');\n         |                    ^\n      55 |     expect(result).toHaveProperty('PER');\n      56 |\n      57 |     // Check correlations for COL\n\n      at toHaveProperty (__tests__/agents/causalCorrelationAgent.test.js:54:20)\n      at Generator.call (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n\n  ● CausalCorrelationAgent › should handle Neo4j errors gracefully\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"COL\"\n    Received path: []\n\n    Received value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.2, \"debtToSocial\": 0.1, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.1, \"weatherToSocial\": 0.2}}}\n\n       98 |     const result = await agent.run(input);\n       99 |\n    > 100 |     expect(result).toHaveProperty('COL');\n          |                    ^\n      101 |     expect(mockSession.close).toHaveBeenCalled();\n      102 |   });\n      103 |\n\n      at toHaveProperty (__tests__/agents/causalCorrelationAgent.test.js:100:20)\n      at Generator.call (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n\n  ● CausalCorrelationAgent › should skip Neo4j operations in native dev mode\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"COL\"\n    Received path: []\n\n    Received value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.7, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}\n\n      120 |     const result = await agent.run(input);\n      121 |\n    > 122 |     expect(result).toHaveProperty('COL');\n          |                    ^\n      123 |     expect(mockDriver.session).not.toHaveBeenCalled();\n      124 |\n      125 |     // Restore\n\n      at toHaveProperty (__tests__/agents/causalCorrelationAgent.test.js:122:20)\n      at Generator.call (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/causalCorrelationAgent.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/causalCorrelationAgent.test.js","startTime":1760404968870,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Reinforcement Learning - Q-Learning"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Reinforcement Learning - Q-Learning debe actualizar Q-table correctamente","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"debe actualizar Q-table correctamente"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Reinforcement Learning - Q-Learning"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Reinforcement Learning - Q-Learning debe elegir acción con epsilon-greedy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"debe elegir acción con epsilon-greedy"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Meta-Learning"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Meta-Learning debe adaptar parámetros meta basado en feedback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"debe adaptar parámetros meta basado en feedback"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Meta-Learning"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Meta-Learning debe reducir learning rate con bajo rendimiento","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"debe reducir learning rate con bajo rendimiento"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Integración con Agentes"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Integración con Agentes debe ejecutar misión geofísica con evolución","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"debe ejecutar misión geofísica con evolución"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Integración con Agentes"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"adjustedRiskScore\"\nReceived path: []\n\nReceived value: {\"depth\": 10, \"id\": \"test1\", \"magnitude\": 6, \"place\": \"Test Place\", \"riskScore\": 80, \"time\": 1760404970253, \"tsunami\": {\"warning\": 1}, \"url\": \"test.url\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"adjustedRiskScore\"\nReceived path: []\n\nReceived value: {\"depth\": 10, \"id\": \"test1\", \"magnitude\": 6, \"place\": \"Test Place\", \"riskScore\": 80, \"time\": 1760404970253, \"tsunami\": {\"warning\": 1}, \"url\": \"test.url\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:109:25)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Integración con Agentes GeophysicalRiskAgent debe integrar auto-evolución","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"GeophysicalRiskAgent debe integrar auto-evolución"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Retroalimentación en Tiempo Real"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Retroalimentación en Tiempo Real debe procesar feedback de misiones","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"debe procesar feedback de misiones"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Retroalimentación en Tiempo Real"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Retroalimentación en Tiempo Real debe registrar feedback interno","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"debe registrar feedback interno"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Cobertura de Funcionalidades"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Cobertura de Funcionalidades debe manejar datos históricos simulados","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"debe manejar datos históricos simulados"},{"ancestorTitles":["Sistema de Auto-Evolución Predictiva (SAP)","Cobertura de Funcionalidades"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Sistema de Auto-Evolución Predictiva (SAP) Cobertura de Funcionalidades debe crear agentes correctamente","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"debe crear agentes correctamente"}],"endTime":1760404970307,"message":"  ● Sistema de Auto-Evolución Predictiva (SAP) › Integración con Agentes › GeophysicalRiskAgent debe integrar auto-evolución\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"adjustedRiskScore\"\n    Received path: []\n\n    Received value: {\"depth\": 10, \"id\": \"test1\", \"magnitude\": 6, \"place\": \"Test Place\", \"riskScore\": 80, \"time\": 1760404970253, \"tsunami\": {\"warning\": 1}, \"url\": \"test.url\"}\n\n      107 |       expect(result).toBeDefined();\n      108 |       expect(result.length).toBe(1);\n    > 109 |       expect(result[0]).toHaveProperty('adjustedRiskScore');\n          |                         ^\n      110 |     });\n      111 |   });\n      112 |\n\n      at toHaveProperty (tests/autoEvolution.test.js:109:25)\n      at Generator.call (tests/autoEvolution.test.js:2:1)\n      at Generator._invoke [as next] (tests/autoEvolution.test.js:2:1)\n      at asyncGeneratorStep (tests/autoEvolution.test.js:2:1)\n      at asyncGeneratorStep (tests/autoEvolution.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/tests/autoEvolution.test.js","startTime":1760404970146,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["MetatronAgent helpers and CryptoVolatilityAgent"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helpers and CryptoVolatilityAgent calculateVolatility and analyzeTrend basic checks","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"calculateVolatility and analyzeTrend basic checks"},{"ancestorTitles":["MetatronAgent helpers and CryptoVolatilityAgent"],"duration":3,"failureDetails":[{"matcherResult":{"actual":"medium","expected":"high","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"high\"\nReceived: \"medium\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"high\"\nReceived: \"medium\"\n    at Object.toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.helpers.test.js:48:18)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"MetatronAgent helpers and CryptoVolatilityAgent assessRiskLevel thresholds produce expected labels","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"assessRiskLevel thresholds produce expected labels"},{"ancestorTitles":["MetatronAgent helpers and CryptoVolatilityAgent"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helpers and CryptoVolatilityAgent parseAlternativeRealities handles JSON and text","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"parseAlternativeRealities handles JSON and text"},{"ancestorTitles":["MetatronAgent helpers and CryptoVolatilityAgent"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helpers and CryptoVolatilityAgent CryptoVolatilityAgent computes volatilityAnalysis and global assessment","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"CryptoVolatilityAgent computes volatilityAnalysis and global assessment"}],"endTime":1760404970269,"message":"  ● MetatronAgent helpers and CryptoVolatilityAgent › assessRiskLevel thresholds produce expected labels\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"high\"\n    Received: \"medium\"\n\n      46 |     // Make totalScore > 20 => high\n      47 |     const high = agent.assessRiskLevel(0.2, 60) // volScore = min(20,10)=10, changeScore=12 => 22\n    > 48 |     expect(high).toBe('high')\n         |                  ^\n      49 |\n      50 |     // Medium\n      51 |     const med = agent.assessRiskLevel(0.1, 20) // volScore=10, changeScore=2 => 12\n\n      at Object.toBe (__tests__/agents.helpers.test.js:48:18)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.helpers.test.js","startTime":1760404970098,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoVolatilityIndex - Expansion Scenarios"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoVolatilityIndex - Expansion Scenarios should handle extreme volatility scenarios (>20% change)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle extreme volatility scenarios (>20% change)"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoVolatilityIndex - Expansion Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoVolatilityIndex - Expansion Scenarios should calculate volatility for diverse crypto portfolio","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate volatility for diverse crypto portfolio"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoVolatilityIndex - Expansion Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoVolatilityIndex - Expansion Scenarios should handle mixed positive and negative changes","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle mixed positive and negative changes"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoVolatilityIndex - Expansion Scenarios"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeLessThan(expected)\n\nExpected: < 50\nReceived:   60","pass":false}}],"failureMessages":["Error: expect(received).toBeLessThan(expected)\n\nExpected: < 50\nReceived:   60\n    at toBeLessThan (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:86:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"CryptoService - Expansion Tests getCryptoVolatilityIndex - Expansion Scenarios should handle single cryptocurrency analysis","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle single cryptocurrency analysis"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoMarketAnalysis - Expansion Features"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoMarketAnalysis - Expansion Features should include market cap and trading volume in analysis","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should include market cap and trading volume in analysis"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoMarketAnalysis - Expansion Features"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoMarketAnalysis - Expansion Features should handle large market cap cryptocurrencies","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle large market cap cryptocurrencies"},{"ancestorTitles":["CryptoService - Expansion Tests","getCryptoMarketAnalysis - Expansion Features"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests getCryptoMarketAnalysis - Expansion Features should analyze altcoin volatility patterns","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should analyze altcoin volatility patterns"},{"ancestorTitles":["CryptoService - Expansion Tests","Error Handling - Expansion"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests Error Handling - Expansion should handle partial data failures gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle partial data failures gracefully"},{"ancestorTitles":["CryptoService - Expansion Tests","Error Handling - Expansion"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests Error Handling - Expansion should handle network timeouts during market analysis","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle network timeouts during market analysis"},{"ancestorTitles":["CryptoService - Expansion Tests","Error Handling - Expansion"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService - Expansion Tests Error Handling - Expansion should maintain service availability during API outages","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should maintain service availability during API outages"}],"endTime":1760404970261,"message":"  ● CryptoService - Expansion Tests › getCryptoVolatilityIndex - Expansion Scenarios › should handle single cryptocurrency analysis\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 50\n    Received:   60\n\n      84 |\n      85 |       expect(result).toBeGreaterThan(30); // Moderate volatility\n    > 86 |       expect(result).toBeLessThan(50);\n         |                      ^\n      87 |     });\n      88 |   });\n      89 |\n\n      at toBeLessThan (__tests__/services/cryptoService.expansion.test.js:86:22)\n      at Generator.call (__tests__/services/cryptoService.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/cryptoService.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/cryptoService.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/cryptoService.expansion.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.expansion.test.js","startTime":1760404969996,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SignalAnalysisAgent"],"duration":4,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:42:35)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"SignalAnalysisAgent should analyze signals from data","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"failed","title":"should analyze signals from data"},{"ancestorTitles":["SignalAnalysisAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SignalAnalysisAgent should handle missing or empty debt data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing or empty debt data"},{"ancestorTitles":["SignalAnalysisAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SignalAnalysisAgent should handle edge cases in signal thresholds","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle edge cases in signal thresholds"}],"endTime":1760404970288,"message":"  ● SignalAnalysisAgent › should analyze signals from data\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      40 |\n      41 |     // Check debt stress\n    > 42 |     expect(result.COL.debtStress).toBe(true); // debt >50\n         |                                   ^\n      43 |     expect(result.PER.debtStress).toBe(false);\n      44 |\n      45 |     // Check social unrest\n\n      at toBe (__tests__/agents/signalAnalysisAgent.test.js:42:35)\n      at Generator.call (__tests__/agents/signalAnalysisAgent.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents/signalAnalysisAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/signalAnalysisAgent.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents/signalAnalysisAgent.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/signalAnalysisAgent.test.js","startTime":1760404970124,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["routes/gdelt.js - router"],"duration":166,"failureDetails":[{"matcherResult":{"actual":200,"expected":400,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 400\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 400\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:23:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"routes/gdelt.js - router GET /api/gdelt/events returns 400 when missing params","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"GET /api/gdelt/events returns 400 when missing params"},{"ancestorTitles":["routes/gdelt.js - router"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"routes/gdelt.js - router GET /api/gdelt/events returns data from GdeltIntegration","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"GET /api/gdelt/events returns data from GdeltIntegration"}],"endTime":1760404970393,"message":"  ● routes/gdelt.js - router › GET /api/gdelt/events returns 400 when missing params\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 400\n    Received: 200\n\n      21 |\n      22 |     const res = await request(app).get('/api/gdelt/events')\n    > 23 |     expect(res.status).toBe(400)\n         |                        ^\n      24 |     expect(res.body).toHaveProperty('error')\n      25 |   })\n      26 |\n\n      at toBe (__tests__/routes/gdelt.unit.test.js:23:24)\n      at Generator.call (__tests__/routes/gdelt.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/gdelt.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/gdelt.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/gdelt.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/gdelt.unit.test.js","startTime":1760404968725,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GdeltIntegration"],"duration":8,"failureDetails":[{"matcherResult":{"actual":true,"expected":false,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:22:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration parses events and intensity on success","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"parses events and intensity on success"},{"ancestorTitles":["GdeltIntegration"],"duration":2,"failureDetails":[{"matcherResult":{"actual":true,"expected":false,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:38:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration handles non-JSON response gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"handles non-JSON response gracefully"},{"ancestorTitles":["GdeltIntegration"],"duration":2,"failureDetails":[{"matcherResult":{"actual":true,"expected":false,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:51:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration handles HTTP 429 rate limit errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"handles HTTP 429 rate limit errors"},{"ancestorTitles":["GdeltIntegration"],"duration":2,"failureDetails":[{}],"failureMessages":["Error: expect(received).toMatch(expected)\n\nMatcher error: received value must be a string\n\nReceived has value: undefined\n    at toMatch (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:71:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GdeltIntegration returns immediate force-mock when FORCE_MOCKS env is set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"returns immediate force-mock when FORCE_MOCKS env is set"}],"endTime":1760404970332,"message":"  ● GdeltIntegration › parses events and intensity on success\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      20 |\n      21 |     expect(res).toBeDefined();\n    > 22 |     expect(res.isMock).toBe(false);\n         |                        ^\n      23 |     expect(res.eventCount).toBe(2);\n      24 |     // PROTEST (2) + RIOT (3) + STRIKE (1.5) = 6.5\n      25 |     expect(res.socialIntensity).toBeCloseTo(6.5);\n\n      at toBe (__tests__/integrations/gdelt.integration.test.js:22:24)\n      at Generator.call (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n\n  ● GdeltIntegration › handles non-JSON response gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      36 |\n      37 |     expect(res).toBeDefined();\n    > 38 |     expect(res.isMock).toBe(false);\n         |                        ^\n      39 |     expect(res.eventCount).toBe(0);\n      40 |     expect(res.error).toMatch(/non-JSON|non-json|content-type/i);\n      41 |   });\n\n      at toBe (__tests__/integrations/gdelt.integration.test.js:38:24)\n      at Generator.call (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n\n  ● GdeltIntegration › handles HTTP 429 rate limit errors\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      49 |\n      50 |     expect(res).toBeDefined();\n    > 51 |     expect(res.isMock).toBe(false);\n         |                        ^\n      52 |     expect(res.error).toMatch(/rate limit|429/);\n      53 |   });\n      54 |\n\n      at toBe (__tests__/integrations/gdelt.integration.test.js:51:24)\n      at Generator.call (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n\n  ● GdeltIntegration › returns immediate force-mock when FORCE_MOCKS env is set\n\n    expect(received).toMatch(expected)\n\n    Matcher error: received value must be a string\n\n    Received has value: undefined\n\n      69 |     expect(res).toBeDefined();\n      70 |     expect(res.isMock).toBe(true);\n    > 71 |     expect(res.source).toMatch(/GDELT/);\n         |                        ^\n      72 |   });\n      73 | });\n      74 |\n\n      at toMatch (__tests__/integrations/gdelt.integration.test.js:71:24)\n      at Generator.call (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/gdelt.integration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdelt.integration.test.js","startTime":1760404970176,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["predictionEngine - runProphecyCycle with FORCE_MOCKS"],"duration":277,"failureDetails":[{"matcherResult":{"message":"expect(received).not.toBeNull()\n\nReceived: null","pass":true}}],"failureMessages":["Error: expect(received).not.toBeNull()\n\nReceived: null\n    at toBeNull (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:24:52)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"predictionEngine - runProphecyCycle with FORCE_MOCKS updates famine, geophysical, supply chain, climate indices and ethical assessment","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"updates famine, geophysical, supply chain, climate indices and ethical assessment"}],"endTime":1760404970444,"message":"  ● predictionEngine - runProphecyCycle with FORCE_MOCKS › updates famine, geophysical, supply chain, climate indices and ethical assessment\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      22 |     const after = getRiskIndices();\n      23 |     expect(after.multiDomainRiskIndex.value).not.toBeNull();\n    > 24 |     expect(after.riskIndices.famineRisk.value).not.toBeNull();\n         |                                                    ^\n      25 |     expect(after.riskIndices.geophysicalRisk.value).not.toBeNull();\n      26 |     expect(after.riskIndices.supplyChainRisk.value).not.toBeNull();\n      27 |     expect(after.riskIndices.climateExtremesRisk.value).not.toBeNull();\n\n      at toBeNull (__tests__/services/predictionEngine.unit.test.js:24:52)\n      at Generator.call (__tests__/services/predictionEngine.unit.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/predictionEngine.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/predictionEngine.unit.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/predictionEngine.unit.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/predictionEngine.unit.test.js","startTime":1760404968731,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["MetatronAgent case coverage (unit)"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent case coverage (unit) Oracle case selects optimal protocol","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"Oracle case selects optimal protocol"},{"ancestorTitles":["MetatronAgent case coverage (unit)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent case coverage (unit) ReportGenerationAgent writes report file","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"ReportGenerationAgent writes report file"},{"ancestorTitles":["MetatronAgent case coverage (unit)"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"COL\"\nReceived path: []\n\nReceived value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:65:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"MetatronAgent case coverage (unit) CausalCorrelationAgent persists to Neo4j when driver present","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"CausalCorrelationAgent persists to Neo4j when driver present"},{"ancestorTitles":["MetatronAgent case coverage (unit)"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent case coverage (unit) Tyche returns flaky=false when no Chroma client (native dev mode)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Tyche returns flaky=false when no Chroma client (native dev mode)"}],"endTime":1760404970460,"message":"  ● MetatronAgent case coverage (unit) › CausalCorrelationAgent persists to Neo4j when driver present\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"COL\"\n    Received path: []\n\n    Received value: {\"correlations\": {\"COL\": {\"debtToEconomic\": 0.4, \"debtToSocial\": 0.6, \"economicToSocial\": 0.3, \"weatherToEconomic\": 0.5, \"weatherToSocial\": 0.8}}}\n\n      63 |     const signals = { COL: { extremeWeather: true, economicStress: false, debtStress: true, socialUnrest: true } }\n      64 |     const res = await agent.run({ signals })\n    > 65 |     expect(res).toHaveProperty('COL')\n         |                 ^\n      66 |     expect(typeof res.COL.weatherToSocial).toBe('number')\n      67 |     expect(mockSession.run).toHaveBeenCalled()\n      68 |   })\n\n      at toHaveProperty (__tests__/agents.cases.test.js:65:17)\n      at Generator.call (__tests__/agents.cases.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/agents.cases.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents.cases.test.js:2:1)\n      at asyncGeneratorStep (__tests__/agents.cases.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.cases.test.js","startTime":1760404970112,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Seismic Routes","GET /api/seismic/activity"],"duration":114,"failureDetails":[{"matcherResult":{"message":"expect(received).toMatchObject(expected)\n\n- Expected  - 2\n+ Received  + 1\n\n  Object {\n    \"id\": \"test1\",\n-   \"magnitude\": 5.5,\n-   \"place\": \"100km S of Lima, Peru\",\n+   \"magnitude\": 5.2,\n    \"riskScore\": Any<Number>,\n  }","pass":false}}],"failureMessages":["Error: expect(received).toMatchObject(expected)\n\n- Expected  - 2\n+ Received  + 1\n\n  Object {\n    \"id\": \"test1\",\n-   \"magnitude\": 5.5,\n-   \"place\": \"100km S of Lima, Peru\",\n+   \"magnitude\": 5.2,\n    \"riskScore\": Any<Number>,\n  }\n    at toMatchObject (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:31:32)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Seismic Routes GET /api/seismic/activity should return processed seismic activity with risk scores","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"should return processed seismic activity with risk scores"},{"ancestorTitles":["Seismic Routes","GET /api/seismic/risk"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Seismic Routes GET /api/seismic/risk should return geophysical risk prediction","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return geophysical risk prediction"},{"ancestorTitles":["Seismic Routes","GET /api/seismic/risk"],"duration":19,"failureDetails":[{"matcherResult":{"actual":0.5,"expected":0,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: 0.5","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: 0.5\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:57:41)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Seismic Routes GET /api/seismic/risk should handle no seismic events","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle no seismic events"}],"endTime":1760404970533,"message":"  ● Seismic Routes › GET /api/seismic/activity › should return processed seismic activity with risk scores\n\n    expect(received).toMatchObject(expected)\n\n    - Expected  - 2\n    + Received  + 1\n\n      Object {\n        \"id\": \"test1\",\n    -   \"magnitude\": 5.5,\n    -   \"place\": \"100km S of Lima, Peru\",\n    +   \"magnitude\": 5.2,\n        \"riskScore\": Any<Number>,\n      }\n\n      29 |       expect(Array.isArray(response.body)).toBe(true);\n      30 |       expect(response.body).toHaveLength(1);\n    > 31 |       expect(response.body[0]).toMatchObject({\n         |                                ^\n      32 |         id: 'test1',\n      33 |         place: '100km S of Lima, Peru',\n      34 |         magnitude: 5.5,\n\n      at toMatchObject (__tests__/routes/seismic.test.js:31:32)\n      at Generator.call (__tests__/routes/seismic.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n\n  ● Seismic Routes › GET /api/seismic/risk › should handle no seismic events\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 0\n    Received: 0.5\n\n      55 |\n      56 |       expect(response.status).toBe(200);\n    > 57 |       expect(response.body.overallRisk).toBe(0);\n         |                                         ^\n      58 |       expect(response.body.eventCount).toBe(0);\n      59 |     });\n      60 |   });\n\n      at toBe (__tests__/routes/seismic.test.js:57:41)\n      at Generator.call (__tests__/routes/seismic.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/seismic.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/seismic.test.js","startTime":1760404968702,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["API Integration Tests","SIM Integration - Mock Validation"],"duration":79,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:30:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests SIM Integration - Mock Validation should use fallback mock data when the API call fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock data when the API call fails"},{"ancestorTitles":["API Integration Tests","SIM Integration - Mock Validation"],"duration":12,"failureDetails":[{"matcherResult":{"actual":0,"expected":5.55,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 5.55\nReceived: 0","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 5.55\nReceived: 0\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:48:45)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests SIM Integration - Mock Validation should handle successful API response correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle successful API response correctly"},{"ancestorTitles":["API Integration Tests","MINAGRI Integration - Mock Validation"],"duration":18,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:58:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests MINAGRI Integration - Mock Validation should use fallback mock for agricultural production on failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock for agricultural production on failure"},{"ancestorTitles":["API Integration Tests","MINAGRI Integration - Mock Validation"],"duration":19,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:68:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests MINAGRI Integration - Mock Validation should use fallback mock for supply chain on failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock for supply chain on failure"},{"ancestorTitles":["API Integration Tests","INEI Integration - Mock Validation"],"duration":24,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:80:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests INEI Integration - Mock Validation should use fallback mock for demographic data on failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock for demographic data on failure"},{"ancestorTitles":["API Integration Tests","INEI Integration - Mock Validation"],"duration":12,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:90:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests INEI Integration - Mock Validation should use fallback mock for economic indicators on failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fallback mock for economic indicators on failure"},{"ancestorTitles":["API Integration Tests","Cross-API Integration Validation"],"duration":57,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:108:34)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests Cross-API Integration Validation should validate data consistency using fallbacks when all APIs fail","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should validate data consistency using fallbacks when all APIs fail"},{"ancestorTitles":["API Integration Tests","Cross-API Integration Validation"],"duration":29,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:136:34)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Integration Tests Cross-API Integration Validation should handle mixed success and failure scenarios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle mixed success and failure scenarios"}],"endTime":1760404970558,"message":"  ● API Integration Tests › SIM Integration - Mock Validation › should use fallback mock data when the API call fails\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      28 |\n      29 |       // The integration should gracefully fall back to its internal mock data.\n    > 30 |       expect(result.isMock).toBe(true);\n         |                             ^\n      31 |       expect(result.priceData.currentPrice).toBeDefined();\n      32 |       expect(result.product).toBe('rice');\n      33 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:30:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › SIM Integration - Mock Validation › should handle successful API response correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 5.55\n    Received: 0\n\n      46 |       // The integration should report that it's NOT using internal mock data.\n      47 |       expect(result.isMock).toBe(false);\n    > 48 |       expect(result.priceData.currentPrice).toBe(5.55);\n         |                                             ^\n      49 |     });\n      50 |   });\n      51 |\n\n      at toBe (__tests__/integrations/api-integration.test.js:48:45)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › MINAGRI Integration - Mock Validation › should use fallback mock for agricultural production on failure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      56 |       const result = await minagriIntegration.getAgriculturalProduction('rice', 2024);\n      57 |\n    > 58 |       expect(result.isMock).toBe(true);\n         |                             ^\n      59 |       expect(result.product).toBe('rice');\n      60 |       expect(result.productionData).toBeDefined();\n      61 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:58:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › MINAGRI Integration - Mock Validation › should use fallback mock for supply chain on failure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      66 |       const result = await minagriIntegration.getSupplyChainCapacity('Lima');\n      67 |\n    > 68 |       expect(result.isMock).toBe(true);\n         |                             ^\n      69 |       expect(result.region).toBe('Lima');\n      70 |       expect(result.capacityData[0].capacity).toBeGreaterThan(0);\n      71 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:68:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › INEI Integration - Mock Validation › should use fallback mock for demographic data on failure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      78 |       const result = await ineiIntegration.getDemographicData('Lima', 2024);\n      79 |\n    > 80 |       expect(result.isMock).toBe(true);\n         |                             ^\n      81 |       expect(result.department).toBe('Lima');\n      82 |       expect(result.demographicData.population).toBeGreaterThan(0);\n      83 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:80:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › INEI Integration - Mock Validation › should use fallback mock for economic indicators on failure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      88 |       const result = await ineiIntegration.getEconomicIndicators('Lima', 2024);\n      89 |\n    > 90 |       expect(result.isMock).toBe(true);\n         |                             ^\n      91 |       expect(result.department).toBe('Lima');\n      92 |       expect(result.economicData.gdp).toBeGreaterThan(0);\n      93 |     });\n\n      at toBe (__tests__/integrations/api-integration.test.js:90:29)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › Cross-API Integration Validation › should validate data consistency using fallbacks when all APIs fail\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      106 |\n      107 |       // All integrations must report using their fallback mocks.\n    > 108 |       expect(priceResult.isMock).toBe(true);\n          |                                  ^\n      109 |       expect(productionResult.isMock).toBe(true);\n      110 |       expect(demographicResult.isMock).toBe(true);\n      111 |\n\n      at toBe (__tests__/integrations/api-integration.test.js:108:34)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n\n  ● API Integration Tests › Cross-API Integration Validation › should handle mixed success and failure scenarios\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      134 |\n      135 |       // Validate the outcome for each integration.\n    > 136 |       expect(priceResult.isMock).toBe(true); // Fell back to mock.\n          |                                  ^\n      137 |       expect(productionResult.isMock).toBe(true); // Fell back to mock.\n      138 |       expect(demographicResult.isMock).toBe(false); // Used the successful response.\n      139 |       expect(demographicResult.demographicData.population).toBe(10500000);\n\n      at toBe (__tests__/integrations/api-integration.test.js:136:34)\n      at Generator.call (__tests__/integrations/api-integration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/api-integration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/api-integration.test.js","startTime":1760404968872,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityAnalysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityAnalysis should return economic instability analysis with valid data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return economic instability analysis with valid data"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityAnalysis should handle multiple regions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple regions"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityAnalysis should assess risk level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess risk level correctly"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityAnalysis should provide appropriate recommendations","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should provide appropriate recommendations"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityRiskIndex"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityRiskIndex should return a valid risk index","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a valid risk index"},{"ancestorTitles":["EconomicInstabilityService","getEconomicInstabilityRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EconomicInstabilityService getEconomicInstabilityRiskIndex should handle different region arrays","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle different region arrays"},{"ancestorTitles":["EconomicInstabilityService","Error handling"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"EconomicInstabilityService","expected":"EconomicInstabilityService - Error Fallback","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"EconomicInstabilityService - Error Fallback\"\nReceived: \"EconomicInstabilityService\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"EconomicInstabilityService - Error Fallback\"\nReceived: \"EconomicInstabilityService\"\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:85:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"EconomicInstabilityService Error handling should handle agent failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle agent failure gracefully"}],"endTime":1760404970568,"message":"  ● EconomicInstabilityService › Error handling › should handle agent failure gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"EconomicInstabilityService - Error Fallback\"\n    Received: \"EconomicInstabilityService\"\n\n      83 |       // Should still return valid structure even if agent fails\n      84 |       expect(result).toHaveProperty('source');\n    > 85 |       expect(result.source).toBe('EconomicInstabilityService - Error Fallback');\n         |                             ^\n      86 |       expect(result).toHaveProperty('error');\n      87 |     });\n      88 |   });\n\n      at toBe (__tests__/services/economicInstabilityService.test.js:85:29)\n      at Generator.call (__tests__/services/economicInstabilityService.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/services/economicInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/economicInstabilityService.test.js:2:1)\n      at asyncGeneratorStep (__tests__/services/economicInstabilityService.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/economicInstabilityService.test.js","startTime":1760404970172,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["API Performance Tests - MIS-020","Alerts API Performance"],"duration":128,"failureDetails":[],"failureMessages":[],"fullName":"API Performance Tests - MIS-020 Alerts API Performance should cache alerts responses and serve from cache on subsequent calls","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should cache alerts responses and serve from cache on subsequent calls"},{"ancestorTitles":["API Performance Tests - MIS-020","Alerts API Performance"],"duration":43,"failureDetails":[{"matcherResult":{"actual":null,"expected":{"alerts":[{"id":1,"title":"Riesgo Climático Extremo en Colombia","description":"Aumento significativo en precipitaciones en la región andina, potencial para deslizamientos de tierra.","severity":"HIGH","region":"Colombia","type":"CLIMATE","timestamp":"2025-10-05T02:00:00Z","status":"ACTIVE"}],"total":1,"filters":{"region":"Colombia"}},"message":"expect(received).toEqual(expected) // deep equality\n\nExpected: {\"alerts\": [{\"description\": \"Aumento significativo en precipitaciones en la región andina, potencial para deslizamientos de tierra.\", \"id\": 1, \"region\": \"Colombia\", \"severity\": \"HIGH\", \"status\": \"ACTIVE\", \"timestamp\": \"2025-10-05T02:00:00Z\", \"title\": \"Riesgo Climático Extremo en Colombia\", \"type\": \"CLIMATE\"}], \"filters\": {\"region\": \"Colombia\"}, \"total\": 1}\nReceived: null","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"alerts\": [{\"description\": \"Aumento significativo en precipitaciones en la región andina, potencial para deslizamientos de tierra.\", \"id\": 1, \"region\": \"Colombia\", \"severity\": \"HIGH\", \"status\": \"ACTIVE\", \"timestamp\": \"2025-10-05T02:00:00Z\", \"title\": \"Riesgo Climático Extremo en Colombia\", \"type\": \"CLIMATE\"}], \"filters\": {\"region\": \"Colombia\"}, \"total\": 1}\nReceived: null\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/performance/APIPerformance.test.js:96:26)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/performance/APIPerformance.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/performance/APIPerformance.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/performance/APIPerformance.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/performance/APIPerformance.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"API Performance Tests - MIS-020 Alerts API Performance should cache filtered alerts responses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should cache filtered alerts responses"},{"ancestorTitles":["API Performance Tests - MIS-020","Alerts API Performance"],"duration":120,"failureDetails":[],"failureMessages":[],"fullName":"API Performance Tests - MIS-020 Alerts API Performance should handle concurrent requests efficiently","invocations":1,"location":null,"numPassingAsserts":21,"retryReasons":[],"status":"passed","title":"should handle concurrent requests efficiently"},{"ancestorTitles":["API Performance Tests - MIS-020","Agent API Performance"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"API Performance Tests - MIS-020 Agent API Performance should cache vigilance status responses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cache vigilance status responses"},{"ancestorTitles":["API Performance Tests - MIS-020","Prediction API Performance"],"duration":47,"failureDetails":[],"failureMessages":[],"fullName":"API Performance Tests - MIS-020 Prediction API Performance should cache prediction responses based on parameters","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should cache prediction responses based on parameters"},{"ancestorTitles":["API Performance Tests - MIS-020","Prediction API Performance"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"API Performance Tests - MIS-020 Prediction API Performance should not cache different prediction parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not cache different prediction parameters"},{"ancestorTitles":["API Performance Tests - MIS-020","Cache Performance Metrics"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"API Performance Tests - MIS-020 Cache Performance Metrics should demonstrate significant performance improvement with caching","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should demonstrate significant performance improvement with caching"},{"ancestorTitles":["API Performance Tests - MIS-020","Cache Performance Metrics"],"duration":126,"failureDetails":[],"failureMessages":[],"fullName":"API Performance Tests - MIS-020 Cache Performance Metrics should maintain cache TTL and expiration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should maintain cache TTL and expiration"}],"endTime":1760404970624,"message":"  ● API Performance Tests - MIS-020 › Alerts API Performance › should cache filtered alerts responses\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: {\"alerts\": [{\"description\": \"Aumento significativo en precipitaciones en la región andina, potencial para deslizamientos de tierra.\", \"id\": 1, \"region\": \"Colombia\", \"severity\": \"HIGH\", \"status\": \"ACTIVE\", \"timestamp\": \"2025-10-05T02:00:00Z\", \"title\": \"Riesgo Climático Extremo en Colombia\", \"type\": \"CLIMATE\"}], \"filters\": {\"region\": \"Colombia\"}, \"total\": 1}\n    Received: null\n\n      94 |       const cacheKey = 'alerts:colombia:all:all';\n      95 |       const cachedData = cache.get(cacheKey);\n    > 96 |       expect(cachedData).toEqual(response1.body);\n         |                          ^\n      97 |     });\n      98 |\n      99 |     test('should handle concurrent requests efficiently', async () => {\n\n      at toEqual (__tests__/performance/APIPerformance.test.js:96:26)\n      at Generator.call (__tests__/performance/APIPerformance.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/performance/APIPerformance.test.js:2:1)\n      at asyncGeneratorStep (__tests__/performance/APIPerformance.test.js:2:1)\n      at asyncGeneratorStep (__tests__/performance/APIPerformance.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/performance/APIPerformance.test.js","startTime":1760404968685,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience"],"duration":196,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"resilienceAnalysis\"\nReceived path: []\n\nReceived value: {\"resilience\": 80}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"resilienceAnalysis\"\nReceived path: []\n\nReceived value: {\"resilience\": 80}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:30:34)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience should return community resilience analysis for default countries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"should return community resilience analysis for default countries"},{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience"],"duration":22,"failureDetails":[{}],"failureMessages":["TypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at keys (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:46:21)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience should accept custom countries and days parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"should accept custom countries and days parameters"},{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience"],"duration":25,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'COL')\n    at COL (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:57:52)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience should handle API failures gracefully with fallback data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"should handle API failures gracefully with fallback data"},{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience/report"],"duration":23,"failureDetails":[{"matcherResult":{"actual":500,"expected":200,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 500","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 500\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:71:31)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience/report should return formatted resilience report","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return formatted resilience report"},{"ancestorTitles":["Community Resilience Routes","GET /api/community-resilience/report"],"duration":29,"failureDetails":[{"matcherResult":{"actual":500,"expected":200,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 500","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 500\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:86:31)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Community Resilience Routes GET /api/community-resilience/report should include recommendations in the report","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include recommendations in the report"}],"endTime":1760404970722,"message":"  ● Community Resilience Routes › GET /api/community-resilience › should return community resilience analysis for default countries\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"resilienceAnalysis\"\n    Received path: []\n\n    Received value: {\"resilience\": 80}\n\n      28 |       expect(response.status).toBe(200);\n      29 |       expect(response.body.success).toBe(true);\n    > 30 |       expect(response.body.data).toHaveProperty('resilienceAnalysis');\n         |                                  ^\n      31 |       expect(response.body.data).toHaveProperty('globalResilienceAssessment');\n      32 |       expect(response.body.data).toHaveProperty('timestamp');\n      33 |     });\n\n      at toHaveProperty (__tests__/routes/community-resilience.test.js:30:34)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n\n  ● Community Resilience Routes › GET /api/community-resilience › should accept custom countries and days parameters\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      44 |       expect(response.status).toBe(200);\n      45 |       expect(response.body.success).toBe(true);\n    > 46 |       expect(Object.keys(response.body.data.resilienceAnalysis)).toEqual(['COL', 'PER']);\n         |                     ^\n      47 |     });\n      48 |\n      49 |     it('should handle API failures gracefully with fallback data', async () => {\n\n      at keys (__tests__/routes/community-resilience.test.js:46:21)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n\n  ● Community Resilience Routes › GET /api/community-resilience › should handle API failures gracefully with fallback data\n\n    TypeError: Cannot read properties of undefined (reading 'COL')\n\n      55 |       expect(response.status).toBe(200);\n      56 |       expect(response.body.success).toBe(true);\n    > 57 |       expect(response.body.data.resilienceAnalysis.COL).toBeDefined();\n         |                                                    ^\n      58 |       expect(typeof response.body.data.resilienceAnalysis.COL.resilienceScore).toBe('number');\n      59 |     });\n      60 |   });\n\n      at COL (__tests__/routes/community-resilience.test.js:57:52)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n\n  ● Community Resilience Routes › GET /api/community-resilience/report › should return formatted resilience report\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 500\n\n      69 |       const response = await request(app).get('/api/community-resilience/report');\n      70 |\n    > 71 |       expect(response.status).toBe(200);\n         |                               ^\n      72 |       expect(response.body.success).toBe(true);\n      73 |       expect(response.body.report).toContain('# COMMUNITY_RESILIENCE_REPORT.md');\n      74 |       expect(response.body.report).toContain('Análisis por País');\n\n      at toBe (__tests__/routes/community-resilience.test.js:71:31)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n\n  ● Community Resilience Routes › GET /api/community-resilience/report › should include recommendations in the report\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 500\n\n      84 |       const response = await request(app).get('/api/community-resilience/report');\n      85 |\n    > 86 |       expect(response.status).toBe(200);\n         |                               ^\n      87 |       expect(response.body.report).toContain('Recomendaciones:');\n      88 |     });\n      89 |   });\n\n      at toBe (__tests__/routes/community-resilience.test.js:86:31)\n      at Generator.call (__tests__/routes/community-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/community-resilience.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/community-resilience.test.js","startTime":1760404968773,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SDLC Routes","GET /api/sdlc/planning"],"duration":123,"failureDetails":[],"failureMessages":[],"fullName":"SDLC Routes GET /api/sdlc/planning should return planning metrics","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return planning metrics"},{"ancestorTitles":["SDLC Routes","GET /api/sdlc/design"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"SDLC Routes GET /api/sdlc/design should return design metrics","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return design metrics"},{"ancestorTitles":["SDLC Routes","GET /api/sdlc/implementation"],"duration":40,"failureDetails":[],"failureMessages":[],"fullName":"SDLC Routes GET /api/sdlc/implementation should return implementation metrics","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should return implementation metrics"},{"ancestorTitles":["SDLC Routes","GET /api/sdlc/testing"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"SDLC Routes GET /api/sdlc/testing should return testing metrics","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should return testing metrics"},{"ancestorTitles":["SDLC Routes","GET /api/sdlc/deployment"],"duration":130,"failureDetails":[{}],"failureMessages":["Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at expect (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:92:10)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)\n----\n    at Test._assertStatus (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:252:14)\n    at /home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:308:13\n    at Test._assertFunction (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:285:13)\n    at Test.assert (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:164:23)\n    at Server.localAssert (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:120:14)\n    at Object.onceWrapper (node:events:638:28)\n    at Server.emit (node:events:524:28)\n    at emitCloseNT (node:net:2344:8)\n    at processTicksAndRejections (node:internal/process/task_queues:81:21)"],"fullName":"SDLC Routes GET /api/sdlc/deployment should return deployment metrics","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return deployment metrics"}],"endTime":1760404970892,"message":"  ● SDLC Routes › GET /api/sdlc/deployment › should return deployment metrics\n\n    expected 200 \"OK\", got 500 \"Internal Server Error\"\n\n      90 |       const response = await request(app)\n      91 |         .get('/api/sdlc/deployment')\n    > 92 |         .expect(200);\n         |          ^\n      93 |\n      94 |       expect(response.body).toHaveProperty('success', true);\n      95 |       expect(response.body).toHaveProperty('data');\n\n      at expect (__tests__/routes/sdlc.test.js:92:10)\n      at Generator.call (__tests__/routes/sdlc.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/sdlc.test.js:2:1)\n      at _next (__tests__/routes/sdlc.test.js:2:1)\n      at Object.<anonymous> (__tests__/routes/sdlc.test.js:2:1)\n      ----\n      at Test._assertStatus (../node_modules/supertest/lib/test.js:252:14)\n      at ../node_modules/supertest/lib/test.js:308:13\n      at Test._assertFunction (../node_modules/supertest/lib/test.js:285:13)\n      at Test.assert (../node_modules/supertest/lib/test.js:164:23)\n      at Server.localAssert (../node_modules/supertest/lib/test.js:120:14)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/sdlc.test.js","startTime":1760404968716,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/crypto-volatility"],"duration":176,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"data\": {\"timestamp\": \"2025-10-14T01:22:50.577Z\", \"topic\": \"crypto-volatility\", \"unit\": \"%\", \"value\": 50}, \"status\": \"OK\"}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"success\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"data\": {\"timestamp\": \"2025-10-14T01:22:50.577Z\", \"topic\": \"crypto-volatility\", \"unit\": \"%\", \"value\": 50}, \"status\": \"OK\"}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:56:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/crypto-volatility should return crypto volatility data successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return crypto volatility data successfully"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/crypto-volatility"],"duration":76,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: [\"solana\", \"cardano\"]\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: [\"solana\", \"cardano\"]\n\nNumber of calls: 0\n    at toHaveBeenCalledWith (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:82:57)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/crypto-volatility should handle custom crypto IDs parameter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle custom crypto IDs parameter"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/crypto-volatility"],"duration":45,"failureDetails":[{}],"failureMessages":["Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at expect (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:90:10)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at _next (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at new Promise (<anonymous>)\n    at Object.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Promise.then.completed (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/davicho/etherai-foresight-platform-main/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/davicho/etherai-foresight-platform-main/node_modules/jest-runner/build/testWorker.js:106:12)\n----\n    at Test._assertStatus (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:252:14)\n    at /home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:308:13\n    at Test._assertFunction (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:285:13)\n    at Test.assert (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:164:23)\n    at Server.localAssert (/home/davicho/etherai-foresight-platform-main/node_modules/supertest/lib/test.js:120:14)\n    at Object.onceWrapper (node:events:638:28)\n    at Server.emit (node:events:524:28)\n    at emitCloseNT (node:net:2344:8)\n    at processTicksAndRejections (node:internal/process/task_queues:81:21)"],"fullName":"Global Risk Routes GET /api/global-risk/crypto-volatility should handle service errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle service errors gracefully"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/crypto-volatility"],"duration":40,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: [\"bitcoin\", \"ethereum\"]\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: [\"bitcoin\", \"ethereum\"]\n\nNumber of calls: 0\n    at toHaveBeenCalledWith (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:115:57)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/crypto-volatility should use default crypto IDs when none provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use default crypto IDs when none provided"}],"endTime":1760404970971,"message":"  ● Global Risk Routes › GET /api/global-risk/crypto-volatility › should return crypto volatility data successfully\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"success\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"data\": {\"timestamp\": \"2025-10-14T01:22:50.577Z\", \"topic\": \"crypto-volatility\", \"unit\": \"%\", \"value\": 50}, \"status\": \"OK\"}\n\n      54 |         .expect(200);\n      55 |\n    > 56 |       expect(response.body).toHaveProperty('success', true);\n         |                             ^\n      57 |       expect(response.body).toHaveProperty('source', 'Praevisio-Aion-CryptoService');\n      58 |       expect(response.body).toHaveProperty('timestamp');\n      59 |       expect(response.body).toHaveProperty('data', mockCryptoData);\n\n      at toHaveProperty (__tests__/routes/globalRiskRoutes.test.js:56:29)\n      at Generator.call (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/crypto-volatility › should handle custom crypto IDs parameter\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: [\"solana\", \"cardano\"]\n\n    Number of calls: 0\n\n      80 |         .expect(200);\n      81 |\n    > 82 |       expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['solana', 'cardano']);\n         |                                                         ^\n      83 |     });\n      84 |\n      85 |     test('should handle service errors gracefully', async () => {\n\n      at toHaveBeenCalledWith (__tests__/routes/globalRiskRoutes.test.js:82:57)\n      at Generator.call (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/crypto-volatility › should handle service errors gracefully\n\n    expected 500 \"Internal Server Error\", got 200 \"OK\"\n\n      88 |       const response = await request(app)\n      89 |         .get('/api/global-risk/crypto-volatility')\n    > 90 |         .expect(500);\n         |          ^\n      91 |\n      92 |       expect(response.body).toHaveProperty('success', false);\n      93 |       expect(response.body).toHaveProperty('message', 'Internal Server Error: Could not retrieve crypto volatility data.');\n\n      at expect (__tests__/routes/globalRiskRoutes.test.js:90:10)\n      at Generator.call (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at _next (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Object.<anonymous> (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      ----\n      at Test._assertStatus (../node_modules/supertest/lib/test.js:252:14)\n      at ../node_modules/supertest/lib/test.js:308:13\n      at Test._assertFunction (../node_modules/supertest/lib/test.js:285:13)\n      at Test.assert (../node_modules/supertest/lib/test.js:164:23)\n      at Server.localAssert (../node_modules/supertest/lib/test.js:120:14)\n\n  ● Global Risk Routes › GET /api/global-risk/crypto-volatility › should use default crypto IDs when none provided\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: [\"bitcoin\", \"ethereum\"]\n\n    Number of calls: 0\n\n      113 |         .expect(200);\n      114 |\n    > 115 |       expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['bitcoin', 'ethereum']);\n          |                                                         ^\n      116 |     });\n      117 |   });\n      118 | });\n\n      at toHaveBeenCalledWith (__tests__/routes/globalRiskRoutes.test.js:115:57)\n      at Generator.call (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.test.js","startTime":1760404968679,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/crypto-volatility - Advanced Scenarios"],"duration":152,"failureDetails":[{"matcherResult":{"actual":50,"expected":65,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 65\nReceived: 50","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 65\nReceived: 50\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:54:40)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/crypto-volatility - Advanced Scenarios should handle large cryptocurrency portfolios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle large cryptocurrency portfolios"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/crypto-volatility - Advanced Scenarios"],"duration":46,"failureDetails":[{"matcherResult":{"actual":50,"expected":95,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 95\nReceived: 50","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 95\nReceived: 50\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:81:40)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/crypto-volatility - Advanced Scenarios should handle extreme volatility scenarios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle extreme volatility scenarios"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/crypto-volatility - Advanced Scenarios"],"duration":45,"failureDetails":[{"matcherResult":{"actual":50,"expected":15,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 15\nReceived: 50","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 15\nReceived: 50\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:107:40)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/crypto-volatility - Advanced Scenarios should provide stable low-volatility responses","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide stable low-volatility responses"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/crypto-volatility - Advanced Scenarios"],"duration":16,"failureDetails":[{"matcherResult":{"actual":50,"expected":42,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 42\nReceived: 50","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 42\nReceived: 50\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:130:40)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/crypto-volatility - Advanced Scenarios should handle single cryptocurrency analysis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle single cryptocurrency analysis"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/community-resilience - Advanced Scenarios"],"duration":26,"failureDetails":[{"matcherResult":{"actual":50,"expected":32,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 32\nReceived: 50","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 32\nReceived: 50\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:164:40)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/community-resilience - Advanced Scenarios should handle multi-country LATAM analysis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle multi-country LATAM analysis"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/community-resilience - Advanced Scenarios"],"duration":11,"failureDetails":[{"matcherResult":{"actual":50,"expected":37,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 37\nReceived: 50","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 37\nReceived: 50\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:193:40)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/community-resilience - Advanced Scenarios should handle extended analysis periods","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle extended analysis periods"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","GET /api/global-risk/community-resilience - Advanced Scenarios"],"duration":17,"failureDetails":[{"matcherResult":{"actual":50,"expected":15,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 15\nReceived: 50","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 15\nReceived: 50\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:221:40)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests GET /api/global-risk/community-resilience - Advanced Scenarios should handle high resilience scenarios","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle high resilience scenarios"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Error Handling and Resilience - Expansion"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Global Risk Routes - Expansion Tests Error Handling and Resilience - Expansion should provide fallback data during crypto service outages","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should provide fallback data during crypto service outages"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Error Handling and Resilience - Expansion"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Global Risk Routes - Expansion Tests Error Handling and Resilience - Expansion should maintain service availability during community resilience failures","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should maintain service availability during community resilience failures"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Error Handling and Resilience - Expansion"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Global Risk Routes - Expansion Tests Error Handling and Resilience - Expansion should handle malformed query parameters gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle malformed query parameters gracefully"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Error Handling and Resilience - Expansion"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Global Risk Routes - Expansion Tests Error Handling and Resilience - Expansion should handle invalid country codes in community resilience","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid country codes in community resilience"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Performance and Scalability - Expansion"],"duration":45,"failureDetails":[{"matcherResult":{"actual":50,"expected":35,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 35\nReceived: 50","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 35\nReceived: 50\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:308:42)\n    at Array.forEach (<anonymous>)\n    at forEach (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:306:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes - Expansion Tests Performance and Scalability - Expansion should handle rapid consecutive requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle rapid consecutive requests"},{"ancestorTitles":["Global Risk Routes - Expansion Tests","Performance and Scalability - Expansion"],"duration":49,"failureDetails":[],"failureMessages":[],"fullName":"Global Risk Routes - Expansion Tests Performance and Scalability - Expansion should maintain response format consistency across different scenarios","invocations":1,"location":null,"numPassingAsserts":18,"retryReasons":[],"status":"passed","title":"should maintain response format consistency across different scenarios"}],"endTime":1760404970993,"message":"  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/crypto-volatility - Advanced Scenarios › should handle large cryptocurrency portfolios\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 65\n    Received: 50\n\n      52 |         .expect(200);\n      53 |\n    > 54 |       expect(response.body.data.value).toBe(65);\n         |                                        ^\n      55 |       expect(response.body.data.unit).toBe('%');\n      56 |       expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(cryptoIds);\n      57 |     });\n\n      at toBe (__tests__/routes/globalRiskRoutes.expansion.test.js:54:40)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/crypto-volatility - Advanced Scenarios › should handle extreme volatility scenarios\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 95\n    Received: 50\n\n      79 |         .expect(200);\n      80 |\n    > 81 |       expect(response.body.data.value).toBe(95);\n         |                                        ^\n      82 |       expect(response.body.data.topic).toBe('crypto-volatility');\n      83 |     });\n      84 |\n\n      at toBe (__tests__/routes/globalRiskRoutes.expansion.test.js:81:40)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/crypto-volatility - Advanced Scenarios › should provide stable low-volatility responses\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 15\n    Received: 50\n\n      105 |         .expect(200);\n      106 |\n    > 107 |       expect(response.body.data.value).toBe(15);\n          |                                        ^\n      108 |       expect(response.body.data.unit).toBe('%');\n      109 |     });\n      110 |\n\n      at toBe (__tests__/routes/globalRiskRoutes.expansion.test.js:107:40)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/crypto-volatility - Advanced Scenarios › should handle single cryptocurrency analysis\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 42\n    Received: 50\n\n      128 |         .expect(200);\n      129 |\n    > 130 |       expect(response.body.data.value).toBe(42);\n          |                                        ^\n      131 |       expect(mockCryptoService.getCryptoMarketAnalysis).toHaveBeenCalledWith(['solana']);\n      132 |     });\n      133 |   });\n\n      at toBe (__tests__/routes/globalRiskRoutes.expansion.test.js:130:40)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/community-resilience - Advanced Scenarios › should handle multi-country LATAM analysis\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 32\n    Received: 50\n\n      162 |         .expect(200);\n      163 |\n    > 164 |       expect(response.body.data.value).toBe(32); // 100 - 68.25 = 31.75, rounded to 32\n          |                                        ^\n      165 |       expect(response.body.data.topic).toBe('community-resilience');\n      166 |       expect(mockGetCommunityResilienceIndex).toHaveBeenCalledWith(['COL', 'PER', 'ARG', 'BRA'], 30);\n      167 |     });\n\n      at toBe (__tests__/routes/globalRiskRoutes.expansion.test.js:164:40)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/community-resilience - Advanced Scenarios › should handle extended analysis periods\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 37\n    Received: 50\n\n      191 |         .expect(200);\n      192 |\n    > 193 |       expect(response.body.data.value).toBe(37); // 100 - 63 = 37\n          |                                        ^\n      194 |       expect(mockGetCommunityResilienceIndex).toHaveBeenCalledWith(['MEX'], 90);\n      195 |     });\n      196 |\n\n      at toBe (__tests__/routes/globalRiskRoutes.expansion.test.js:193:40)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › GET /api/global-risk/community-resilience - Advanced Scenarios › should handle high resilience scenarios\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 15\n    Received: 50\n\n      219 |         .expect(200);\n      220 |\n    > 221 |       expect(response.body.data.value).toBe(15); // 100 - 85 = 15 (low risk)\n          |                                        ^\n      222 |     });\n      223 |   });\n      224 |\n\n      at toBe (__tests__/routes/globalRiskRoutes.expansion.test.js:221:40)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n\n  ● Global Risk Routes - Expansion Tests › Performance and Scalability - Expansion › should handle rapid consecutive requests\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 35\n    Received: 50\n\n      306 |       responses.forEach(response => {\n      307 |         expect(response.status).toBe(200);\n    > 308 |         expect(response.body.data.value).toBe(35);\n          |                                          ^\n      309 |       });\n      310 |     });\n      311 |\n\n      at toBe (__tests__/routes/globalRiskRoutes.expansion.test.js:308:42)\n          at Array.forEach (<anonymous>)\n      at forEach (__tests__/routes/globalRiskRoutes.expansion.test.js:306:17)\n      at Generator.call (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRiskRoutes.expansion.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRiskRoutes.expansion.test.js","startTime":1760404968743,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/food-security"],"duration":81,"failureDetails":[{"matcherResult":{"actual":{"countries":["COL","PER","ARG","BRA","CHL","ECU"]},"expected":{"countries":["COL","PER","ARG"],"year":2024,"source":"World Bank API - SN.ITK.DEFC.ZS","data":{"COL":{"value":5.2,"year":"2024","country":"Colombia"},"PER":{"value":7.1,"year":"2024","country":"Peru"},"ARG":{"value":4.8,"year":"2024","country":"Argentina"}},"globalAverage":5.7},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 20\n+ Received  +  3\n\n  Object {\n    \"countries\": Array [\n      \"COL\",\n      \"PER\",\n      \"ARG\",\n+     \"BRA\",\n+     \"CHL\",\n+     \"ECU\",\n    ],\n-   \"data\": Object {\n-     \"ARG\": Object {\n-       \"country\": \"Argentina\",\n-       \"value\": 4.8,\n-       \"year\": \"2024\",\n-     },\n-     \"COL\": Object {\n-       \"country\": \"Colombia\",\n-       \"value\": 5.2,\n-       \"year\": \"2024\",\n-     },\n-     \"PER\": Object {\n-       \"country\": \"Peru\",\n-       \"value\": 7.1,\n-       \"year\": \"2024\",\n-     },\n-   },\n-   \"globalAverage\": 5.7,\n-   \"source\": \"World Bank API - SN.ITK.DEFC.ZS\",\n-   \"year\": 2024,\n  }","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 20\n+ Received  +  3\n\n  Object {\n    \"countries\": Array [\n      \"COL\",\n      \"PER\",\n      \"ARG\",\n+     \"BRA\",\n+     \"CHL\",\n+     \"ECU\",\n    ],\n-   \"data\": Object {\n-     \"ARG\": Object {\n-       \"country\": \"Argentina\",\n-       \"value\": 4.8,\n-       \"year\": \"2024\",\n-     },\n-     \"COL\": Object {\n-       \"country\": \"Colombia\",\n-       \"value\": 5.2,\n-       \"year\": \"2024\",\n-     },\n-     \"PER\": Object {\n-       \"country\": \"Peru\",\n-       \"value\": 7.1,\n-       \"year\": \"2024\",\n-     },\n-   },\n-   \"globalAverage\": 5.7,\n-   \"source\": \"World Bank API - SN.ITK.DEFC.ZS\",\n-   \"year\": 2024,\n  }\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:48:32)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/food-security should return a 200 OK status and the food security data for LATAM countries","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"should return a 200 OK status and the food security data for LATAM countries"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/food-security"],"duration":61,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:58:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/food-security should handle errors and return a 500 status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors and return a 500 status"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/climate-extremes"],"duration":21,"failureDetails":[{"matcherResult":{"actual":{"extremes":[]},"expected":[{"country":"Colombia","countryCode":"COL","avgMaxTemp":28.5,"avgMinTemp":18.2,"totalPrecipitation":150.3,"avgHumidity":75.2,"extremeEvents":3,"riskLevel":"medium","period":"Last 30 days","timestamp":"2025-10-10T18:00:00.000Z"},{"country":"Peru","countryCode":"PER","avgMaxTemp":25.8,"avgMinTemp":15.6,"totalPrecipitation":85.7,"avgHumidity":68.9,"extremeEvents":2,"riskLevel":"low","period":"Last 30 days","timestamp":"2025-10-10T18:00:00.000Z"}],"message":"expect(received).toEqual(expected) // deep equality\n\nExpected: [{\"avgHumidity\": 75.2, \"avgMaxTemp\": 28.5, \"avgMinTemp\": 18.2, \"country\": \"Colombia\", \"countryCode\": \"COL\", \"extremeEvents\": 3, \"period\": \"Last 30 days\", \"riskLevel\": \"medium\", \"timestamp\": \"2025-10-10T18:00:00.000Z\", \"totalPrecipitation\": 150.3}, {\"avgHumidity\": 68.9, \"avgMaxTemp\": 25.8, \"avgMinTemp\": 15.6, \"country\": \"Peru\", \"countryCode\": \"PER\", \"extremeEvents\": 2, \"period\": \"Last 30 days\", \"riskLevel\": \"low\", \"timestamp\": \"2025-10-10T18:00:00.000Z\", \"totalPrecipitation\": 85.7}]\nReceived: {\"extremes\": []}","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [{\"avgHumidity\": 75.2, \"avgMaxTemp\": 28.5, \"avgMinTemp\": 18.2, \"country\": \"Colombia\", \"countryCode\": \"COL\", \"extremeEvents\": 3, \"period\": \"Last 30 days\", \"riskLevel\": \"medium\", \"timestamp\": \"2025-10-10T18:00:00.000Z\", \"totalPrecipitation\": 150.3}, {\"avgHumidity\": 68.9, \"avgMaxTemp\": 25.8, \"avgMinTemp\": 15.6, \"country\": \"Peru\", \"countryCode\": \"PER\", \"extremeEvents\": 2, \"period\": \"Last 30 days\", \"riskLevel\": \"low\", \"timestamp\": \"2025-10-10T18:00:00.000Z\", \"totalPrecipitation\": 85.7}]\nReceived: {\"extremes\": []}\n    at toEqual (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:100:32)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/climate-extremes should return a 200 OK status and the climate extremes data for LATAM countries","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"should return a 200 OK status and the climate extremes data for LATAM countries"},{"ancestorTitles":["Global Risk Routes","GET /api/global-risk/climate-extremes"],"duration":33,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:110:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Global Risk Routes GET /api/global-risk/climate-extremes should handle errors and return a 500 status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors and return a 500 status"},{"ancestorTitles":["GET /api/global-risk/community-resilience"],"duration":192,"failureDetails":[{"matcherResult":{"expected":true,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:140:35)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /api/global-risk/community-resilience should return a 200 OK status and the community resilience data for LATAM countries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return a 200 OK status and the community resilience data for LATAM countries"},{"ancestorTitles":["GET /api/global-risk/community-resilience"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"GET /api/global-risk/community-resilience should accept custom countries and days parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should accept custom countries and days parameters"},{"ancestorTitles":["GET /api/global-risk/community-resilience"],"duration":12,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:175:29)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /api/global-risk/community-resilience should handle errors and return a 500 status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors and return a 500 status"}],"endTime":1760404970995,"message":"  ● Global Risk Routes › GET /api/global-risk/food-security › should return a 200 OK status and the food security data for LATAM countries\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 20\n    + Received  +  3\n\n      Object {\n        \"countries\": Array [\n          \"COL\",\n          \"PER\",\n          \"ARG\",\n    +     \"BRA\",\n    +     \"CHL\",\n    +     \"ECU\",\n        ],\n    -   \"data\": Object {\n    -     \"ARG\": Object {\n    -       \"country\": \"Argentina\",\n    -       \"value\": 4.8,\n    -       \"year\": \"2024\",\n    -     },\n    -     \"COL\": Object {\n    -       \"country\": \"Colombia\",\n    -       \"value\": 5.2,\n    -       \"year\": \"2024\",\n    -     },\n    -     \"PER\": Object {\n    -       \"country\": \"Peru\",\n    -       \"value\": 7.1,\n    -       \"year\": \"2024\",\n    -     },\n    -   },\n    -   \"globalAverage\": 5.7,\n    -   \"source\": \"World Bank API - SN.ITK.DEFC.ZS\",\n    -   \"year\": 2024,\n      }\n\n      46 |     expect(response.body.success).toBe(true);\n      47 |     expect(response.body.source).toBe('Praevisio-Aion-Simulated-WorldBank');\n    > 48 |     expect(response.body.data).toEqual(mockData);\n         |                                ^\n      49 |     expect(getFoodSecurityIndex).toHaveBeenCalledTimes(1);\n      50 |   });\n      51 |\n\n      at toEqual (__tests__/routes/globalRisk.test.js:48:32)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/food-security › should handle errors and return a 500 status\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 200\n\n      56 |     const response = await request(app).get('/api/global-risk/food-security');\n      57 |\n    > 58 |     expect(response.status).toBe(500);\n         |                             ^\n      59 |     expect(response.body.success).toBe(false);\n      60 |     expect(response.body.message).toContain('Could not retrieve food security data.');\n      61 |   });\n\n      at toBe (__tests__/routes/globalRisk.test.js:58:29)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/climate-extremes › should return a 200 OK status and the climate extremes data for LATAM countries\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: [{\"avgHumidity\": 75.2, \"avgMaxTemp\": 28.5, \"avgMinTemp\": 18.2, \"country\": \"Colombia\", \"countryCode\": \"COL\", \"extremeEvents\": 3, \"period\": \"Last 30 days\", \"riskLevel\": \"medium\", \"timestamp\": \"2025-10-10T18:00:00.000Z\", \"totalPrecipitation\": 150.3}, {\"avgHumidity\": 68.9, \"avgMaxTemp\": 25.8, \"avgMinTemp\": 15.6, \"country\": \"Peru\", \"countryCode\": \"PER\", \"extremeEvents\": 2, \"period\": \"Last 30 days\", \"riskLevel\": \"low\", \"timestamp\": \"2025-10-10T18:00:00.000Z\", \"totalPrecipitation\": 85.7}]\n    Received: {\"extremes\": []}\n\n       98 |     expect(response.body.success).toBe(true);\n       99 |     expect(response.body.source).toBe('Praevisio-Aion-NASA-POWER-Integration');\n    > 100 |     expect(response.body.data).toEqual(mockData);\n          |                                ^\n      101 |     expect(getClimateExtremesIndex).toHaveBeenCalledTimes(1);\n      102 |   });\n      103 |\n\n      at toEqual (__tests__/routes/globalRisk.test.js:100:32)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● Global Risk Routes › GET /api/global-risk/climate-extremes › should handle errors and return a 500 status\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 200\n\n      108 |     const response = await request(app).get('/api/global-risk/climate-extremes');\n      109 |\n    > 110 |     expect(response.status).toBe(500);\n          |                             ^\n      111 |     expect(response.body.success).toBe(false);\n      112 |     expect(response.body.message).toContain('Could not retrieve climate extremes data.');\n      113 |   });\n\n      at toBe (__tests__/routes/globalRisk.test.js:110:29)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● GET /api/global-risk/community-resilience › should return a 200 OK status and the community resilience data for LATAM countries\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      138 |\n      139 |     expect(response.status).toBe(200);\n    > 140 |     expect(response.body.success).toBe(true);\n          |                                   ^\n      141 |     expect(response.body.source).toBe('Praevisio-Aion-CommunityResilienceAgent');\n      142 |     expect(response.body.data).toEqual(mockData);\n      143 |     expect(getCommunityResilienceIndex).toHaveBeenCalledWith(['COL', 'PER', 'ARG'], 30);\n\n      at toBe (__tests__/routes/globalRisk.test.js:140:35)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n\n  ● GET /api/global-risk/community-resilience › should handle errors and return a 500 status\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 200\n\n      173 |     const response = await request(app).get('/api/global-risk/community-resilience');\n      174 |\n    > 175 |     expect(response.status).toBe(500);\n          |                             ^\n      176 |     expect(response.body.success).toBe(false);\n      177 |     expect(response.body.message).toContain('Could not retrieve community resilience data.');\n      178 |   });\n\n      at toBe (__tests__/routes/globalRisk.test.js:175:29)\n      at Generator.call (__tests__/routes/globalRisk.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/globalRisk.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/globalRisk.test.js","startTime":1760404968851,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/demo routes"],"duration":810,"failureDetails":[{"matcherResult":{"actual":500,"expected":200,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 500","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 500\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:41:30)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/demo routes GET /full-state returns aggregated structure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"GET /full-state returns aggregated structure"},{"ancestorTitles":["/api/demo routes"],"duration":120,"failureDetails":[],"failureMessages":[],"fullName":"/api/demo routes GET /mission-replays returns items from fallback when no chroma client","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"GET /mission-replays returns items from fallback when no chroma client"}],"endTime":1760404971186,"message":"  ● /api/demo routes › GET /full-state returns aggregated structure\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 500\n\n      39 |\n      40 |       const res = await request(app).get('/api/demo/full-state').set('Host', 'localhost');\n    > 41 |       expect(res.statusCode).toBe(200);\n         |                              ^\n      42 |       expect(res.body.kpis).toBeDefined();\n      43 |       expect(Array.isArray(res.body.countries)).toBe(true);\n      44 |       expect(res.body.countries.length).toBeGreaterThan(0);\n\n      at toBe (__tests__/routes/demo.route.test.js:41:30)\n      at Generator.call (__tests__/routes/demo.route.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/demo.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/demo.route.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/demo.route.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/demo.route.test.js","startTime":1760404968686,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GET /api/demo/live-state resilience"],"duration":292,"failureDetails":[{"matcherResult":{"actual":503,"expected":200,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 503","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 503\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:18:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"GET /api/demo/live-state resilience returns a full response with data from integrations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns a full response with data from integrations"}],"endTime":1760404971289,"message":"  ● GET /api/demo/live-state resilience › returns a full response with data from integrations\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 503\n\n      16 |\n      17 |     const res = await request(app).get('/api/demo/live-state');\n    > 18 |     expect(res.status).toBe(200);\n         |                        ^\n      19 |     expect(res.body).toHaveProperty('kpis');\n      20 |     expect(res.body).toHaveProperty('countries');\n      21 |     expect(res.body).toHaveProperty('communityResilience');\n\n      at toBe (__tests__/live-state-resilience.test.js:18:24)\n      at Generator.call (__tests__/live-state-resilience.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/live-state-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/live-state-resilience.test.js:2:1)\n      at asyncGeneratorStep (__tests__/live-state-resilience.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/live-state-resilience.test.js","startTime":1760404968683,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Alerts API","GET /api/alerts"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API GET /api/alerts returns list of alerts","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns list of alerts"},{"ancestorTitles":["Alerts API","GET /api/alerts"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API GET /api/alerts filters by region","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"filters by region"},{"ancestorTitles":["Alerts API","GET /api/alerts"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API GET /api/alerts filters by severity","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"filters by severity"},{"ancestorTitles":["Alerts API","GET /api/alerts/:id"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API GET /api/alerts/:id returns specific alert","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns specific alert"},{"ancestorTitles":["Alerts API","GET /api/alerts/:id"],"duration":72,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API GET /api/alerts/:id returns 404 for non-existent alert","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 404 for non-existent alert"},{"ancestorTitles":["Alerts API","POST /api/alerts"],"duration":50,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API POST /api/alerts creates new alert with valid data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"creates new alert with valid data"},{"ancestorTitles":["Alerts API","POST /api/alerts"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"Alerts API POST /api/alerts returns 400 for missing required fields","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 400 for missing required fields"}],"endTime":1760404971306,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/tests/alerts.test.js","startTime":1760404970730,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["routes module and sacrifice"],"duration":99,"failureDetails":[],"failureMessages":[],"fullName":"routes module and sacrifice GET /colombia/overview returns mock data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"GET /colombia/overview returns mock data"},{"ancestorTitles":["routes module and sacrifice"],"duration":102,"failureDetails":[],"failureMessages":[],"fullName":"routes module and sacrifice GET /run returns blocked true when oracle predicts high probability","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"GET /run returns blocked true when oracle predicts high probability"},{"ancestorTitles":["routes module and sacrifice"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"routes module and sacrifice GET /run returns blocked false when oracle predicts low probability","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"GET /run returns blocked false when oracle predicts low probability"}],"endTime":1760404971505,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/module_sacrifice.test.js","startTime":1760404970985,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel basics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basics should allocate and release resources","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should allocate and release resources"},{"ancestorTitles":["LogosKernel basics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basics should schedule and execute a task","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should schedule and execute a task"},{"ancestorTitles":["LogosKernel basics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basics getVigilanceStatus returns structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"getVigilanceStatus returns structure"},{"ancestorTitles":["LogosKernel basics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basics generateSovereigntyManifest writes a file","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generateSovereigntyManifest writes a file"}],"endTime":1760404971674,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.test.js","startTime":1760404971003,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["database module - getChromaClient native fallback"],"duration":431,"failureDetails":[],"failureMessages":[],"fullName":"database module - getChromaClient native fallback returns in-memory client when NATIVE_DEV_MODE=true and upsert/query work","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"returns in-memory client when NATIVE_DEV_MODE=true and upsert/query work"},{"ancestorTitles":["database module - getChromaClient non-native with fetch"],"duration":168,"failureDetails":[],"failureMessages":[],"fullName":"database module - getChromaClient non-native with fetch uses remote Chroma when reachable and returns query results","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"uses remote Chroma when reachable and returns query results"},{"ancestorTitles":["database module - getNeo4jDriver"],"duration":164,"failureDetails":[],"failureMessages":[],"fullName":"database module - getNeo4jDriver returns null in test env","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns null in test env"},{"ancestorTitles":["database module - getNeo4jDriver"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"database module - getNeo4jDriver returns driver when neo4j-driver connects successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns driver when neo4j-driver connects successfully"}],"endTime":1760404971676,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/database.unit.test.js","startTime":1760404970643,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LLM Module","getLLM"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module getLLM should return ChatOpenAI when OPENAI_API_KEY is set","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return ChatOpenAI when OPENAI_API_KEY is set"},{"ancestorTitles":["LLM Module","getLLM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module getLLM should return OllamaLLM when no OPENAI_API_KEY","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return OllamaLLM when no OPENAI_API_KEY"},{"ancestorTitles":["LLM Module","getLLM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module getLLM should use custom OpenAI model when specified","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use custom OpenAI model when specified"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should call Ollama API and return response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call Ollama API and return response"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should handle API errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API errors"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should parse different response formats","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should parse different response formats"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should handle generate method with different message formats","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle generate method with different message formats"},{"ancestorTitles":["LLM Module","OllamaLLM"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LLM Module OllamaLLM should use environment variables for configuration","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should use environment variables for configuration"}],"endTime":1760404971780,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/utils/llm.test.js","startTime":1760404971200,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":799,"failureDetails":[{"matcherResult":{"actual":200,"expected":401,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 401\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:37:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"eternalVigilance routes - stream and token GET /stream returns 401 when no token provided or invalid","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"GET /stream returns 401 when no token provided or invalid"},{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":187,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n    at toHaveBeenCalled (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:76:27)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"eternalVigilance routes - stream and token GET /stream allows static token via cookie and writes initial SSE state","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"GET /stream allows static token via cookie and writes initial SSE state"},{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":165,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n    at toHaveBeenCalled (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:105:27)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"eternalVigilance routes - stream and token GET /stream allows temporary tokens validated by sseTokenService","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"GET /stream allows temporary tokens validated by sseTokenService"},{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":203,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"token\"\n\nExpected value: \"GEN-TOKEN\"\nReceived value: \"temp-token-123\"","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"token\"\n\nExpected value: \"GEN-TOKEN\"\nReceived value: \"temp-token-123\"\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:128:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"eternalVigilance routes - stream and token POST /token returns token, sets cookie on success","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"POST /token returns token, sets cookie on success"},{"ancestorTitles":["eternalVigilance routes - stream and token"],"duration":63,"failureDetails":[{"matcherResult":{"actual":200,"expected":500,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:150:24)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"eternalVigilance routes - stream and token POST /token returns 500 when generateToken throws","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"POST /token returns 500 when generateToken throws"}],"endTime":1760404971780,"message":"  ● eternalVigilance routes - stream and token › GET /stream returns 401 when no token provided or invalid\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 401\n    Received: 200\n\n      35 |\n      36 |     const res = await request(app).get('/api/eternal-vigilance/stream')\n    > 37 |     expect(res.status).toBe(401)\n         |                        ^\n      38 |     expect(res.body).toHaveProperty('error')\n      39 |   })\n      40 |\n\n      at toBe (__tests__/routes/eternalVigilance.routes.test.js:37:24)\n      at Generator.call (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n\n  ● eternalVigilance routes - stream and token › GET /stream allows static token via cookie and writes initial SSE state\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      74 |     // initial SSE data includes event:init and the JSON state\n      75 |     expect(res.text).toMatch(/\"event\":\"init\"/)\n    > 76 |     expect(mockSubscribe).toHaveBeenCalled()\n         |                           ^\n      77 |   })\n      78 |\n      79 |   test('GET /stream allows temporary tokens validated by sseTokenService', async () => {\n\n      at toHaveBeenCalled (__tests__/routes/eternalVigilance.routes.test.js:76:27)\n      at Generator.call (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n\n  ● eternalVigilance routes - stream and token › GET /stream allows temporary tokens validated by sseTokenService\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      103 |     expect(res.headers['content-type']).toMatch(/text\\/event-stream/)\n      104 |     expect(res.text).toMatch(/\"event\":\"init\"/)\n    > 105 |     expect(mockSubscribe).toHaveBeenCalled()\n          |                           ^\n      106 |   })\n      107 |\n      108 |   test('POST /token returns token, sets cookie on success', async () => {\n\n      at toHaveBeenCalled (__tests__/routes/eternalVigilance.routes.test.js:105:27)\n      at Generator.call (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n\n  ● eternalVigilance routes - stream and token › POST /token returns token, sets cookie on success\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"token\"\n\n    Expected value: \"GEN-TOKEN\"\n    Received value: \"temp-token-123\"\n\n      126 |\n      127 |     expect(res.status).toBe(200)\n    > 128 |     expect(res.body).toHaveProperty('token', 'GEN-TOKEN')\n          |                      ^\n      129 |     expect(res.body).toHaveProperty('expiresAt')\n      130 |     // cookie header should be set\n      131 |     expect(res.headers['set-cookie']).toBeDefined()\n\n      at toHaveProperty (__tests__/routes/eternalVigilance.routes.test.js:128:22)\n      at Generator.call (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n\n  ● eternalVigilance routes - stream and token › POST /token returns 500 when generateToken throws\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 200\n\n      148 |       .send({ ttl: 30 })\n      149 |\n    > 150 |     expect(res.status).toBe(500)\n          |                        ^\n      151 |     expect(res.body).toHaveProperty('error')\n      152 |   })\n      153 | })\n\n      at toBe (__tests__/routes/eternalVigilance.routes.test.js:150:24)\n      at Generator.call (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes/eternalVigilance.routes.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/eternalVigilance.routes.test.js","startTime":1760404968742,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel mission branches (genesis-tyche & prophecy)"],"duration":634,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel mission branches (genesis-tyche & prophecy) genesis-tyche branch creates Tyche and writes PR file","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"genesis-tyche branch creates Tyche and writes PR file"},{"ancestorTitles":["LogosKernel mission branches (genesis-tyche & prophecy)"],"duration":421,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel mission branches (genesis-tyche & prophecy) prophecy mission exercises data acquisition and report generation flows","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"prophecy mission exercises data acquisition and report generation flows"}],"endTime":1760404971849,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.missions.test.js","startTime":1760404970633,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/demo routes","GET /api/demo/live-state"],"duration":75,"failureDetails":[{"matcherResult":{"actual":503,"expected":200,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 503","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 503\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:69:31)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"/api/demo routes GET /api/demo/live-state should return aggregated live data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return aggregated live data"},{"ancestorTitles":["/api/demo routes","POST /api/demo/predict-scenario"],"duration":285,"failureDetails":[],"failureMessages":[],"fullName":"/api/demo routes POST /api/demo/predict-scenario should calculate risk index for scenario","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should calculate risk index for scenario"},{"ancestorTitles":["/api/demo routes","POST /api/demo/predict-scenario"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"/api/demo routes POST /api/demo/predict-scenario should return error for invalid country","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return error for invalid country"}],"endTime":1760404971857,"message":"  ● /api/demo routes › GET /api/demo/live-state › should return aggregated live data\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 503\n\n      67 |       const response = await request(app).get('/api/demo/live-state');\n      68 |\n    > 69 |       expect(response.status).toBe(200);\n         |                               ^\n      70 |       expect(response.body).toHaveProperty('kpis');\n      71 |       expect(response.body).toHaveProperty('countries');\n      72 |       expect(response.body).toHaveProperty('global');\n\n      at toBe (__tests__/demo.test.js:69:31)\n      at Generator.call (__tests__/demo.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/demo.test.js:2:1)\n      at asyncGeneratorStep (__tests__/demo.test.js:2:1)\n      at asyncGeneratorStep (__tests__/demo.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/demo.test.js","startTime":1760404968737,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers returns text when API responds with results array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns text when API responds with results array"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers throws when API responds non-ok","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws when API responds non-ok"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers generate returns generations array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generate returns generations array"}],"endTime":1760404971900,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/llm.unit.test.js","startTime":1760404971333,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CausalWeaver (native mode)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CausalWeaver (native mode) creates and updates nodes, and notifies dependents","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"creates and updates nodes, and notifies dependents"},{"ancestorTitles":["CausalWeaver (native mode)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"CausalWeaver (native mode) creates relationships and can get dependents/subgraph/chain","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"creates relationships and can get dependents/subgraph/chain"},{"ancestorTitles":["CausalWeaver (native mode)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CausalWeaver (native mode) notifies subscribers via subscribeToNode","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"notifies subscribers via subscribeToNode"}],"endTime":1760404971956,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/causalWeaver.native.test.js","startTime":1760404971684,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["/api/consciousness route"],"duration":189,"failureDetails":[],"failureMessages":[],"fullName":"/api/consciousness route returns local fallback when chroma client unavailable","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns local fallback when chroma client unavailable"},{"ancestorTitles":["/api/consciousness route"],"duration":200,"failureDetails":[],"failureMessages":[],"fullName":"/api/consciousness route returns chroma source when client provides collection","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns chroma source when client provides collection"}],"endTime":1760404971997,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/consciousness.route.test.js","startTime":1760404970908,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":350,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests allocateResources enforces token limits and allows allocation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"allocateResources enforces token limits and allows allocation"},{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":178,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests scheduleTask orders by priority and executeNextTask runs and releases tokens","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"scheduleTask orders by priority and executeNextTask runs and releases tokens"},{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":208,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests getMissionLogs returns not_found when no mission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"getMissionLogs returns not_found when no mission"},{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":96,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests generateSovereigntyManifest writes file via fs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generateSovereigntyManifest writes file via fs"},{"ancestorTitles":["LogosKernel (orchestrator) unit tests"],"duration":93,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) unit tests startMission handles ethics rejection and marks mission failed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission handles ethics rejection and marks mission failed"},{"ancestorTitles":["LogosKernel basic flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows allocate and release resources within limits","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"allocate and release resources within limits"},{"ancestorTitles":["LogosKernel basic flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows schedules and executes tasks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"schedules and executes tasks"},{"ancestorTitles":["LogosKernel basic flows"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows startMission handles happy path and marks mission completed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission handles happy path and marks mission completed"},{"ancestorTitles":["LogosKernel basic flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows initializeDrivers skips Neo4j in test mode","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"initializeDrivers skips Neo4j in test mode"},{"ancestorTitles":["LogosKernel basic flows"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows publishToVigilance does nothing if service not available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"publishToVigilance does nothing if service not available"},{"ancestorTitles":["LogosKernel basic flows"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows getVigilanceStatus returns perpetual flows status","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"getVigilanceStatus returns perpetual flows status"},{"ancestorTitles":["LogosKernel basic flows"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel basic flows startResourceMonitoring sets interval","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"startResourceMonitoring sets interval"}],"endTime":1760404972039,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.unit.test.js","startTime":1760404970469,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Food Resilience Routes","GET /api/food-resilience/prices"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"Food Resilience Routes GET /api/food-resilience/prices should return food prices for all products","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return food prices for all products"},{"ancestorTitles":["Food Resilience Routes","GET /api/food-resilience/supply-chain"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"Food Resilience Routes GET /api/food-resilience/supply-chain should return optimized supply chain routes","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return optimized supply chain routes"},{"ancestorTitles":["Food Resilience Routes","POST /api/food-resilience/predict"],"duration":149,"failureDetails":[],"failureMessages":[],"fullName":"Food Resilience Routes POST /api/food-resilience/predict should generate price prediction for valid product","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate price prediction for valid product"},{"ancestorTitles":["Food Resilience Routes","POST /api/food-resilience/predict"],"duration":52,"failureDetails":[],"failureMessages":[],"fullName":"Food Resilience Routes POST /api/food-resilience/predict should return 400 for invalid product","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid product"}],"endTime":1760404972045,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes/food-resilience.test.js","startTime":1760404971517,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["POST /api/predict"],"duration":66,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/predict returns 400 on missing body","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns 400 on missing body"},{"ancestorTitles":["POST /api/predict"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"POST /api/predict returns prediction for valid body","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns prediction for valid body"}],"endTime":1760404972058,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/tests/predict.test.js","startTime":1760404971788,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel core flows"],"duration":147,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows allocateResources throws when token limit exceeded","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"allocateResources throws when token limit exceeded"},{"ancestorTitles":["LogosKernel core flows"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows scheduleTask orders by priority","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"scheduleTask orders by priority"},{"ancestorTitles":["LogosKernel core flows"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows executeNextTask runs task and releases resources","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"executeNextTask runs task and releases resources"},{"ancestorTitles":["LogosKernel core flows"],"duration":181,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows startMission records failed mission when ethics council rejects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission records failed mission when ethics council rejects"},{"ancestorTitles":["LogosKernel core flows"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core flows startMission completes when crews and agents succeed (NATIVE_DEV_MODE)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission completes when crews and agents succeed (NATIVE_DEV_MODE)"}],"endTime":1760404972096,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.extra.test.js","startTime":1760404971007,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should execute function successfully in CLOSED state","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should execute function successfully in CLOSED state"},{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should transition to OPEN state after failure threshold","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should transition to OPEN state after failure threshold"},{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should throw error when OPEN and not recovered","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should throw error when OPEN and not recovered"},{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should transition to HALF_OPEN after recovery timeout","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should transition to HALF_OPEN after recovery timeout"},{"ancestorTitles":["Resilience Utilities","CircuitBreaker"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities CircuitBreaker should reset failure count on success","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reset failure count on success"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should return result on first attempt","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return result on first attempt"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should retry on failure and succeed","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retry on failure and succeed"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should throw error after max retries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error after max retries"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should implement exponential backoff with jitter","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should implement exponential backoff with jitter"},{"ancestorTitles":["Resilience Utilities","retryWithBackoff"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities retryWithBackoff should respect max delay","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect max delay"},{"ancestorTitles":["Resilience Utilities","fetchWithTimeout"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities fetchWithTimeout should resolve successful fetch","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should resolve successful fetch"},{"ancestorTitles":["Resilience Utilities","fetchWithTimeout"],"duration":52,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities fetchWithTimeout should timeout after specified time","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should timeout after specified time"},{"ancestorTitles":["Resilience Utilities","fetchWithTimeout"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities fetchWithTimeout should clear timeout on successful response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clear timeout on successful response"},{"ancestorTitles":["Resilience Utilities","fetchWithTimeout"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities fetchWithTimeout should propagate other errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should propagate other errors"},{"ancestorTitles":["Resilience Utilities","isJsonResponse"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities isJsonResponse should return true for JSON content type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for JSON content type"},{"ancestorTitles":["Resilience Utilities","isJsonResponse"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities isJsonResponse should return true for JSON with charset","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for JSON with charset"},{"ancestorTitles":["Resilience Utilities","isJsonResponse"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities isJsonResponse should return false for non-JSON content type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for non-JSON content type"},{"ancestorTitles":["Resilience Utilities","isJsonResponse"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Resilience Utilities isJsonResponse should return false when no content-type header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when no content-type header"}],"endTime":1760404972108,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/utils/resilience.test.js","startTime":1760404971791,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PeruAgent"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PeruAgent should analyze Peru mission data and generate report","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should analyze Peru mission data and generate report"},{"ancestorTitles":["PeruAgent"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PeruAgent should calculate risk based on mission analysis","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should calculate risk based on mission analysis"},{"ancestorTitles":["PeruAgent"],"duration":49,"failureDetails":[],"failureMessages":[],"fullName":"PeruAgent should handle file read errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle file read errors"},{"ancestorTitles":["PeruAgent"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"PeruAgent should include analysis details in result","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should include analysis details in result"}],"endTime":1760404972150,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/peruAgent.test.js","startTime":1760404971964,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CommunityResilienceService - Expansion Tests","getCommunityResilienceIndex - Multi-Country Analysis"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests getCommunityResilienceIndex - Multi-Country Analysis should handle LATAM country analysis with diverse resilience levels","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle LATAM country analysis with diverse resilience levels"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","getCommunityResilienceIndex - Multi-Country Analysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests getCommunityResilienceIndex - Multi-Country Analysis should analyze single country resilience in detail","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should analyze single country resilience in detail"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","getCommunityResilienceIndex - Multi-Country Analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests getCommunityResilienceIndex - Multi-Country Analysis should handle extended time periods for trend analysis","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle extended time periods for trend analysis"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Error Handling and Fallbacks - Expansion"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Error Handling and Fallbacks - Expansion should provide detailed mock data when agent fails","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should provide detailed mock data when agent fails"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Error Handling and Fallbacks - Expansion"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Error Handling and Fallbacks - Expansion should handle empty country list gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty country list gracefully"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Error Handling and Fallbacks - Expansion"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Error Handling and Fallbacks - Expansion should maintain service availability during agent failures","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should maintain service availability during agent failures"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Data Validation and Processing - Expansion"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Data Validation and Processing - Expansion should validate and process resilience scores within bounds","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should validate and process resilience scores within bounds"},{"ancestorTitles":["CommunityResilienceService - Expansion Tests","Data Validation and Processing - Expansion"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"CommunityResilienceService - Expansion Tests Data Validation and Processing - Expansion should handle large country sets efficiently","invocations":1,"location":null,"numPassingAsserts":31,"retryReasons":[],"status":"passed","title":"should handle large country sets efficiently"}],"endTime":1760404972195,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/communityResilienceService.expansion.test.js","startTime":1760404972004,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["XAI explain endpoint"],"duration":81,"failureDetails":[],"failureMessages":[],"fullName":"XAI explain endpoint returns structured explanation for CEO metric","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns structured explanation for CEO metric"},{"ancestorTitles":["XAI explain endpoint"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"XAI explain endpoint returns 400 on missing parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns 400 on missing parameters"}],"endTime":1760404972197,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/sdlc.xai.test.js","startTime":1760404971681,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PredictionEngine edge cases (axios mocked)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PredictionEngine edge cases (axios mocked) handles empty seismic events (sets geophysical risk to 0)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles empty seismic events (sets geophysical risk to 0)"},{"ancestorTitles":["PredictionEngine edge cases (axios mocked)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PredictionEngine edge cases (axios mocked) handles axios error gracefully and does not throw (lastUpdated not set)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles axios error gracefully and does not throw (lastUpdated not set)"}],"endTime":1760404972203,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/predictionEngine.edge.test.js","startTime":1760404972064,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SimpleCache","set and get"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache set and get should store and retrieve a value","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should store and retrieve a value"},{"ancestorTitles":["SimpleCache","set and get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache set and get should return null for non-existent key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent key"},{"ancestorTitles":["SimpleCache","set and get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache set and get should overwrite existing value","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should overwrite existing value"},{"ancestorTitles":["SimpleCache","TTL expiration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache TTL expiration should return null for expired entry","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for expired entry"},{"ancestorTitles":["SimpleCache","TTL expiration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache TTL expiration should return value before expiration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return value before expiration"},{"ancestorTitles":["SimpleCache","cleanup"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache cleanup should remove expired entries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove expired entries"},{"ancestorTitles":["SimpleCache","clear"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache clear should remove all entries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove all entries"},{"ancestorTitles":["SimpleCache","lifecycle management"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache lifecycle management should not start cleanup in test environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not start cleanup in test environment"},{"ancestorTitles":["SimpleCache","lifecycle management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SimpleCache lifecycle management should allow shutdown without error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow shutdown without error"}],"endTime":1760404972205,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/cache.test.js","startTime":1760404972007,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BiodiversityService","getBiodiversityRiskIndex"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityRiskIndex should calculate risk index correctly with valid data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should calculate risk index correctly with valid data"},{"ancestorTitles":["BiodiversityService","getBiodiversityRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityRiskIndex should return default risk when data is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default risk when data is invalid"},{"ancestorTitles":["BiodiversityService","getBiodiversityRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityRiskIndex should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle errors gracefully"},{"ancestorTitles":["BiodiversityService","getBiodiversityRiskIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityRiskIndex should accept custom regions parameter","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should accept custom regions parameter"},{"ancestorTitles":["BiodiversityService","getBiodiversityAnalysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityAnalysis should return complete analysis with valid data","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should return complete analysis with valid data"},{"ancestorTitles":["BiodiversityService","getBiodiversityAnalysis"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityAnalysis should return fallback analysis when data is invalid","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return fallback analysis when data is invalid"},{"ancestorTitles":["BiodiversityService","getBiodiversityAnalysis"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService getBiodiversityAnalysis should handle errors gracefully in analysis","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle errors gracefully in analysis"},{"ancestorTitles":["BiodiversityService","_assessRiskLevel"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"BiodiversityService _assessRiskLevel should assess risk levels correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should assess risk levels correctly"}],"endTime":1760404972235,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/biodiversityService.test.js","startTime":1760404972049,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["sseTokenService","generateToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService generateToken should generate a token with default TTL","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate a token with default TTL"},{"ancestorTitles":["sseTokenService","generateToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService generateToken should generate a token with custom TTL","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate a token with custom TTL"},{"ancestorTitles":["sseTokenService","validateToken"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService validateToken should return false for invalid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for invalid token"},{"ancestorTitles":["sseTokenService","validateToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService validateToken should return false for null token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for null token"},{"ancestorTitles":["sseTokenService","validateToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService validateToken should validate a valid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate a valid token"},{"ancestorTitles":["sseTokenService","validateToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService validateToken should return false for expired token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for expired token"},{"ancestorTitles":["sseTokenService","lifecycle management"],"duration":108,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService lifecycle management should not start cleanup in test environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not start cleanup in test environment"},{"ancestorTitles":["sseTokenService","lifecycle management"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService lifecycle management should allow shutdown without error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow shutdown without error"},{"ancestorTitles":["sseTokenService","cleanupExpired"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService cleanupExpired should remove expired tokens when validating","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove expired tokens when validating"},{"ancestorTitles":["sseTokenService","initialize and shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService initialize and shutdown should not start cleanup when DISABLE_BACKGROUND_TASKS is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not start cleanup when DISABLE_BACKGROUND_TASKS is true"},{"ancestorTitles":["sseTokenService","initialize and shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService initialize and shutdown should start cleanup interval in non-test env","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should start cleanup interval in non-test env"},{"ancestorTitles":["sseTokenService","initialize and shutdown"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService initialize and shutdown should allow shutdown without error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow shutdown without error"}],"endTime":1760404972256,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/sseTokenService.test.js","startTime":1760404971893,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should return moderate risk index for normal market conditions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return moderate risk index for normal market conditions"},{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should return high risk index for volatile market conditions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return high risk index for volatile market conditions"},{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should return low risk index for stable market conditions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return low risk index for stable market conditions"},{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should return default risk when no data available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default risk when no data available"},{"ancestorTitles":["CryptoService","getCryptoVolatilityIndex"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoVolatilityIndex should handle integration errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle integration errors gracefully"},{"ancestorTitles":["CryptoService","getCryptoMarketAnalysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoMarketAnalysis should return complete market analysis with volatility index","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return complete market analysis with volatility index"},{"ancestorTitles":["CryptoService","getCryptoMarketAnalysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService getCryptoMarketAnalysis should handle errors and return fallback data","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle errors and return fallback data"},{"ancestorTitles":["CryptoService","_assessRiskLevel"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService _assessRiskLevel should assess high risk correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess high risk correctly"},{"ancestorTitles":["CryptoService","_assessRiskLevel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService _assessRiskLevel should assess moderate risk correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess moderate risk correctly"},{"ancestorTitles":["CryptoService","_assessRiskLevel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CryptoService _assessRiskLevel should assess low risk correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should assess low risk correctly"}],"endTime":1760404972256,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/cryptoService.test.js","startTime":1760404972113,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should fetch real debt data successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should fetch real debt data successfully"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should handle API errors and return mock data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle API errors and return mock data"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should handle non-JSON responses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle non-JSON responses"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should handle invalid JSON","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid JSON"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should handle invalid data structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid data structure"},{"ancestorTitles":["FMIIntegration","getDebtData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration getDebtData should use default debt level for unknown countries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default debt level for unknown countries"}],"endTime":1760404972306,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/fmiIntegration.test.js","startTime":1760404972171,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Simple agents tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Simple agents tests SignalAnalysisAgent processes signals","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"SignalAnalysisAgent processes signals"},{"ancestorTitles":["Simple agents tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Simple agents tests RiskAssessmentAgent computes risk percentages","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"RiskAssessmentAgent computes risk percentages"}],"endTime":1760404972331,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.simple.test.js","startTime":1760404972209,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["worldBankService"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService returns transformed data from serverless endpoint","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns transformed data from serverless endpoint"},{"ancestorTitles":["worldBankService"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"worldBankService falls back to mock data on fetch error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"falls back to mock data on fetch error"}],"endTime":1760404972352,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/worldBankService.unit.test.js","startTime":1760404972106,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Ethical Vector Module","calculateHumanImpact"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateHumanImpact should return 0 when no risks are present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no risks are present"},{"ancestorTitles":["Ethical Vector Module","calculateHumanImpact"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateHumanImpact should calculate human impact based on famine and supply chain risks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate human impact based on famine and supply chain risks"},{"ancestorTitles":["Ethical Vector Module","calculateHumanImpact"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateHumanImpact should cap human impact at 1.0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cap human impact at 1.0"},{"ancestorTitles":["Ethical Vector Module","calculateEnvironmentalSustainability"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEnvironmentalSustainability should return 0 when no geophysical risk","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no geophysical risk"},{"ancestorTitles":["Ethical Vector Module","calculateEnvironmentalSustainability"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEnvironmentalSustainability should calculate environmental sustainability based on geophysical risk","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate environmental sustainability based on geophysical risk"},{"ancestorTitles":["Ethical Vector Module","calculateSocialEquity"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateSocialEquity should return 0 when no affected regions or countries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no affected regions or countries"},{"ancestorTitles":["Ethical Vector Module","calculateSocialEquity"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateSocialEquity should calculate social equity based on famine countries and affected regions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate social equity based on famine countries and affected regions"},{"ancestorTitles":["Ethical Vector Module","calculatePrivacyRisk"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculatePrivacyRisk should return 0 when no community or climate risks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no community or climate risks"},{"ancestorTitles":["Ethical Vector Module","calculatePrivacyRisk"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculatePrivacyRisk should calculate privacy risk based on community and climate data exposure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate privacy risk based on community and climate data exposure"},{"ancestorTitles":["Ethical Vector Module","calculateAlgorithmicJustice"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateAlgorithmicJustice should return 0 when no famine or geophysical risks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 when no famine or geophysical risks"},{"ancestorTitles":["Ethical Vector Module","calculateAlgorithmicJustice"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateAlgorithmicJustice should calculate algorithmic justice based on risk concentration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate algorithmic justice based on risk concentration"},{"ancestorTitles":["Ethical Vector Module","calculateEthicalVector"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEthicalVector should return complete ethical vector with all components","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should return complete ethical vector with all components"},{"ancestorTitles":["Ethical Vector Module","calculateEthicalVector"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEthicalVector should classify as High Ethical Concern when score > 0.7","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should classify as High Ethical Concern when score > 0.7"},{"ancestorTitles":["Ethical Vector Module","calculateEthicalVector"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEthicalVector should classify as Medium Ethical Concern when score 0.4-0.7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify as Medium Ethical Concern when score 0.4-0.7"},{"ancestorTitles":["Ethical Vector Module","calculateEthicalVector"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"Ethical Vector Module calculateEthicalVector should classify as Low Ethical Concern when score < 0.4","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify as Low Ethical Concern when score < 0.4"}],"endTime":1760404972389,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/ethicalVectorModule.test.js","startTime":1760404972207,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eternalVigilanceService","getState"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService getState should return default state when kernel is not available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return default state when kernel is not available"},{"ancestorTitles":["eternalVigilanceService","getState"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService getState should return state from kernel when available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return state from kernel when available"},{"ancestorTitles":["eternalVigilanceService","subscribe and unsubscribe"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService subscribe and unsubscribe should add subscriber","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should add subscriber"},{"ancestorTitles":["eternalVigilanceService","subscribe and unsubscribe"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService subscribe and unsubscribe should remove subscriber","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should remove subscriber"},{"ancestorTitles":["eternalVigilanceService","generateReport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService generateReport should generate a report string","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate a report string"},{"ancestorTitles":["eternalVigilanceService","emitEvent"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eternalVigilanceService emitEvent should call publish internally","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call publish internally"}],"endTime":1760404972390,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/eternalVigilanceService.test.js","startTime":1760404972271,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SIMIntegration"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration returns mock when fetch fails for getFoodPrices","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"returns mock when fetch fails for getFoodPrices"},{"ancestorTitles":["SIMIntegration"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration parses real response for getFoodPrices","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"parses real response for getFoodPrices"},{"ancestorTitles":["SIMIntegration"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getPriceHistory returns mock when API fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"getPriceHistory returns mock when API fails"},{"ancestorTitles":["SIMIntegration"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"SIMIntegration getVolatilityIndex parses real response","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"getVolatilityIndex parses real response"}],"endTime":1760404972354,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/simIntegration.unit.test.js","startTime":1760404972064,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel (small)"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (small) allocateResources and releaseResources manage token usage","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"allocateResources and releaseResources manage token usage"},{"ancestorTitles":["LogosKernel (small)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (small) scheduleTask orders by priority and executeNextTask runs the highest priority","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"scheduleTask orders by priority and executeNextTask runs the highest priority"},{"ancestorTitles":["LogosKernel (small)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (small) startMission happy path completes and stores mission result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"startMission happy path completes and stores mission result"}],"endTime":1760404972370,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.small.test.js","startTime":1760404972207,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel additional flows"],"duration":213,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel additional flows generateSovereigntyManifest writes manifest using fs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generateSovereigntyManifest writes manifest using fs"}],"endTime":1760404972410,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.extra2.test.js","startTime":1760404971872,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DataAcquisitionAgent"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"DataAcquisitionAgent should acquire data for multiple countries","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should acquire data for multiple countries"},{"ancestorTitles":["DataAcquisitionAgent"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DataAcquisitionAgent should handle integration errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle integration errors gracefully"},{"ancestorTitles":["DataAcquisitionAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DataAcquisitionAgent should use default gdeltCode when not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default gdeltCode when not provided"}],"endTime":1760404972428,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/dataAcquisitionAgent.test.js","startTime":1760404972259,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ClimateIntegration"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"ClimateIntegration getCountryClimateData parses expected API response shape","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"getCountryClimateData parses expected API response shape"}],"endTime":1760404972436,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/climateIntegration.unit.test.js","startTime":1760404972215,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["communityResilienceService.getCommunityResilienceIndex"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"communityResilienceService.getCommunityResilienceIndex returns data from MetatronAgent successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns data from MetatronAgent successfully"},{"ancestorTitles":["communityResilienceService.getCommunityResilienceIndex"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"communityResilienceService.getCommunityResilienceIndex falls back to mock data when agent fails","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"falls back to mock data when agent fails"},{"ancestorTitles":["communityResilienceService.getCommunityResilienceIndex"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"communityResilienceService.getCommunityResilienceIndex uses default countries and days when not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"uses default countries and days when not provided"}],"endTime":1760404972472,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/communityResilienceService.test.js","startTime":1760404972341,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FMIIntegration"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration parses debt data on success","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"parses debt data on success"},{"ancestorTitles":["FMIIntegration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration handles non-JSON response by falling back to mock","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"handles non-JSON response by falling back to mock"},{"ancestorTitles":["FMIIntegration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration handles invalid JSON parse by returning mock data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles invalid JSON parse by returning mock data"}],"endTime":1760404972493,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/fmi.integration.test.js","startTime":1760404972315,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FMIIntegration"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration returns mock when API fails (fallback)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns mock when API fails (fallback)"},{"ancestorTitles":["FMIIntegration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FMIIntegration parses real JSON array response","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"parses real JSON array response"}],"endTime":1760404972529,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/fmiIntegration.unit.test.js","startTime":1760404972416,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GeophysicalRiskAgent"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GeophysicalRiskAgent should process raw seismic data into a simplified format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should process raw seismic data into a simplified format"},{"ancestorTitles":["GeophysicalRiskAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GeophysicalRiskAgent should handle empty or invalid data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle empty or invalid data"}],"endTime":1760404972547,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/GeophysicalRiskAgent.test.js","startTime":1760404972434,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eventHub","subscribe and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribe and publish should call subscriber for specific mission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call subscriber for specific mission"},{"ancestorTitles":["eventHub","subscribe and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribe and publish should not call subscriber for different mission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not call subscriber for different mission"},{"ancestorTitles":["eventHub","subscribe and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribe and publish should allow multiple subscribers for same mission","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow multiple subscribers for same mission"},{"ancestorTitles":["eventHub","subscribe and publish"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribe and publish should remove subscriber when unsubscribed","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove subscriber when unsubscribed"},{"ancestorTitles":["eventHub","subscribeAll and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribeAll and publish should call global subscriber for any mission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call global subscriber for any mission"},{"ancestorTitles":["eventHub","subscribeAll and publish"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribeAll and publish should call global subscriber with missionId prefixed","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call global subscriber with missionId prefixed"},{"ancestorTitles":["eventHub","subscribeAll and publish"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub subscribeAll and publish should allow multiple global subscribers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow multiple global subscribers"},{"ancestorTitles":["eventHub","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eventHub error handling should continue calling other subscribers if one throws","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should continue calling other subscribers if one throws"},{"ancestorTitles":["eventHub","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"eventHub error handling should continue calling global subscribers if one throws","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should continue calling global subscribers if one throws"},{"ancestorTitles":["eventHub","cleanup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"eventHub cleanup should clean up mission subscribers when all unsubscribe","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clean up mission subscribers when all unsubscribe"}],"endTime":1760404972571,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/eventHub.test.js","startTime":1760404972437,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReportGenerationAgent"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"ReportGenerationAgent should generate intelligence report","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should generate intelligence report"},{"ancestorTitles":["ReportGenerationAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ReportGenerationAgent should handle empty risks and correlations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty risks and correlations"},{"ancestorTitles":["ReportGenerationAgent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ReportGenerationAgent should include causal analysis in report","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should include causal analysis in report"}],"endTime":1760404972598,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents/reportGenerationAgent.test.js","startTime":1760404972415,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":1069,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers returns content from results[0].content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns content from results[0].content"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":274,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers returns output field when present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns output field when present"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":362,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers throws on non-ok response with text","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws on non-ok response with text"},{"ancestorTitles":["OllamaLLM _callOllama and wrappers"],"duration":201,"failureDetails":[],"failureMessages":[],"fullName":"OllamaLLM _callOllama and wrappers generate returns generations wrapper","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"generate returns generations wrapper"}],"endTime":1760404972610,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/llm.ollama.test.js","startTime":1760404970596,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SeismicIntegration Service"],"duration":82,"failureDetails":[],"failureMessages":[],"fullName":"SeismicIntegration Service should fetch seismic data successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fetch seismic data successfully"},{"ancestorTitles":["SeismicIntegration Service"],"duration":1625,"failureDetails":[],"failureMessages":[],"fullName":"SeismicIntegration Service should throw an error if the API call fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if the API call fails"}],"endTime":1760404972623,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/services/SeismicIntegration.test.js","startTime":1760404970567,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["callWithFallback"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"callWithFallback returns value when externalCall succeeds","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns value when externalCall succeeds"},{"ancestorTitles":["callWithFallback"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"callWithFallback returns fallback when externalCall throws","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns fallback when externalCall throws"}],"endTime":1760404972634,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/externalWithFallback.test.js","startTime":1760404972451,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760404977874,"message":"  ● Test suite failed to run\n\n    Cannot find module '../mocks/server.js' from '__tests__/routes.climate.test.js'\n\n      1 | import request from 'supertest';\n      2 | import { createApp } from '../src/index.js';\n    > 3 | import { server } from '../mocks/server.js';\n        | ^\n      4 |\n      5 | process.env.PRAEVISIO_BEARER_TOKEN = 'demo-token';\n      6 |\n\n      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)\n      at Object.require (__tests__/routes.climate.test.js:3:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.climate.test.js","startTime":1760404977874,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should return mock data when FORCE_MOCKS is true","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return mock data when FORCE_MOCKS is true"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should fetch real data and process articles","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should fetch real data and process articles"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should calculate intensity correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate intensity correctly"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should handle API errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle API errors gracefully"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should handle non-JSON responses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle non-JSON responses"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should handle rate limiting","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle rate limiting"},{"ancestorTitles":["GdeltIntegration","getSocialEvents"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GdeltIntegration getSocialEvents should return fallback mock when FORCE_MOCKS is set at runtime","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return fallback mock when FORCE_MOCKS is set at runtime"}],"endTime":1760404972679,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/gdeltIntegration.test.js","startTime":1760404972263,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MetatronAgent helper functions"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions calculateVolatility returns 0 for short price arrays","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"calculateVolatility returns 0 for short price arrays"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions calculateVolatility computes a positive number for sample prices","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"calculateVolatility computes a positive number for sample prices"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions analyzeTrend returns neutral for flat data and bullish/bearish for change","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"analyzeTrend returns neutral for flat data and bullish/bearish for change"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions extractPendingTasks parses simple kanban text","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"extractPendingTasks parses simple kanban text"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions calculateResilienceScore maps event counts to scores","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"calculateResilienceScore maps event counts to scores"},{"ancestorTitles":["MetatronAgent helper functions"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent helper functions generateResilienceRecommendations returns array and includes expected items for low score","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"generateResilienceRecommendations returns array and includes expected items for low score"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) extractPendingTasks extracts tasks from kanban content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"extractPendingTasks extracts tasks from kanban content"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) analyzeSystemCapabilities returns expected keys","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"analyzeSystemCapabilities returns expected keys"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) generateStrategicMissions returns array with IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"generateStrategicMissions returns array with IDs"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) run handles EthicsCouncil agent","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"run handles EthicsCouncil agent"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) run handles ConsensusAgent with empty changes -> consensus true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"run handles ConsensusAgent with empty changes -> consensus true"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) calculateVolatility returns 0 for short arrays and positive for series","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"calculateVolatility returns 0 for short arrays and positive for series"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) analyzeTrend detects bullish, bearish and neutral","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"analyzeTrend detects bullish, bearish and neutral"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) assessRiskLevel returns high/medium/low appropriately","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"assessRiskLevel returns high/medium/low appropriately"},{"ancestorTitles":["MetatronAgent (unit)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MetatronAgent (unit) calculateResilienceScore and recommendations and global assessment","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"calculateResilienceScore and recommendations and global assessment"}],"endTime":1760404972729,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.unit.test.js","startTime":1760404972397,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getSeismicData retries"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"getSeismicData retries retries on failure up to USGS_RETRY_ATTEMPTS","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"retries on failure up to USGS_RETRY_ATTEMPTS"}],"endTime":1760404972752,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/SeismicIntegration.retry.test.js","startTime":1760404972407,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LogosKernel (orchestrator)"],"duration":103,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) allocateResources and releaseResources adjust token usage and enforce limits","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"allocateResources and releaseResources adjust token usage and enforce limits"},{"ancestorTitles":["LogosKernel (orchestrator)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) scheduleTask orders by priority and executeNextTask runs task","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"scheduleTask orders by priority and executeNextTask runs task"},{"ancestorTitles":["LogosKernel (orchestrator)"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) startMission completes successfully and generates manifest","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"startMission completes successfully and generates manifest"},{"ancestorTitles":["LogosKernel (orchestrator)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel (orchestrator) startMission records failure when ethics council rejects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"startMission records failure when ethics council rejects"},{"ancestorTitles":["LogosKernel core methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods allocates and releases resources correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"allocates and releases resources correctly"},{"ancestorTitles":["LogosKernel core methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods throws when token limit exceeded","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws when token limit exceeded"},{"ancestorTitles":["LogosKernel core methods"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods throws when CPU or memory overloaded","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"throws when CPU or memory overloaded"},{"ancestorTitles":["LogosKernel core methods"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods schedules tasks by priority and executes next task (success)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"schedules tasks by priority and executes next task (success)"},{"ancestorTitles":["LogosKernel core methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods releases resources if task execution throws","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"releases resources if task execution throws"},{"ancestorTitles":["LogosKernel core methods"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"LogosKernel core methods generates sovereignty manifest file","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"generates sovereignty manifest file"}],"endTime":1760404972776,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/orchestrator.kernel.test.js","startTime":1760404971317,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Consciousness route"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"Consciousness route returns local fallback when Chroma client absent and no file","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns local fallback when Chroma client absent and no file"},{"ancestorTitles":["Consciousness route"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"Consciousness route returns chroma source when client provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns chroma source when client provided"}],"endTime":1760404973266,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.consciousness.test.js","startTime":1760404970312,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Demo routes"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"Demo routes GET /api/demo/full-state returns aggregated payload","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"GET /api/demo/full-state returns aggregated payload"},{"ancestorTitles":["Demo routes"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"Demo routes GET /api/demo/live-state returns live aggregated state","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"GET /api/demo/live-state returns live aggregated state"}],"endTime":1760404973330,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.demo.test.js","startTime":1760404970349,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LLM routes"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"LLM routes POST /api/llm/predict-tests returns fallback suggested test when no Neo4j","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"POST /api/llm/predict-tests returns fallback suggested test when no Neo4j"},{"ancestorTitles":["LLM routes"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"LLM routes POST /api/llm/propose-plan uses LLM call and returns result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"POST /api/llm/propose-plan uses LLM call and returns result"},{"ancestorTitles":["LLM routes"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"LLM routes POST /api/llm/generate-component returns component string","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"POST /api/llm/generate-component returns component string"},{"ancestorTitles":["LLM routes"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"LLM routes POST /api/llm/generate-test returns test string","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"POST /api/llm/generate-test returns test string"}],"endTime":1760404973338,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.llm.test.js","startTime":1760404970455,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createApp initializeServices and bearerAuth"],"duration":2288,"failureDetails":[],"failureMessages":[],"fullName":"createApp initializeServices and bearerAuth initializeServices calls initialize on sseTokenService and cache","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"initializeServices calls initialize on sseTokenService and cache"},{"ancestorTitles":["createApp initializeServices and bearerAuth"],"duration":214,"failureDetails":[],"failureMessages":[],"fullName":"createApp initializeServices and bearerAuth bearerAuth falls back to sseTokenService.validateToken for temp tokens","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"bearerAuth falls back to sseTokenService.validateToken for temp tokens"}],"endTime":1760404973366,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/index.initialize.test.js","startTime":1760404970375,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":2209,"failureDetails":[],"failureMessages":[],"fullName":"createApp bearerAuth and initialization returns 401 when no token provided for protected route","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 when no token provided for protected route"},{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":163,"failureDetails":[],"failureMessages":[],"fullName":"createApp bearerAuth and initialization allows request with static bearer token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"allows request with static bearer token"},{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":143,"failureDetails":[],"failureMessages":[],"fullName":"createApp bearerAuth and initialization returns 403 when token not matching and sseTokenService rejects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 403 when token not matching and sseTokenService rejects"},{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":106,"failureDetails":[],"failureMessages":[],"fullName":"createApp bearerAuth and initialization initializeServices calls initialize on services","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"initializeServices calls initialize on services"},{"ancestorTitles":["createApp bearerAuth and initialization"],"duration":93,"failureDetails":[],"failureMessages":[],"fullName":"createApp bearerAuth and initialization schedules background tasks when disableBackgroundTasks is false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"schedules background tasks when disableBackgroundTasks is false"}],"endTime":1760404973399,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.auth.test.js","startTime":1760404970259,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["E2E backend with mock-server (spawn)"],"duration":40,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"place\"\nReceived path: []\n\nReceived value: {\"id\": \"test1\", \"location\": \"Test Location\", \"magnitude\": 5.2, \"riskScore\": 0.8}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"place\"\nReceived path: []\n\nReceived value: {\"id\": \"test1\", \"location\": \"Test Location\", \"magnitude\": 5.2, \"riskScore\": 0.8}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:65:17)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"E2E backend with mock-server (spawn) backend /api/seismic/activity returns processed data using mock-server","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"failed","title":"backend /api/seismic/activity returns processed data using mock-server"}],"endTime":1760404973496,"message":"  ● E2E backend with mock-server (spawn) › backend /api/seismic/activity returns processed data using mock-server\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"place\"\n    Received path: []\n\n    Received value: {\"id\": \"test1\", \"location\": \"Test Location\", \"magnitude\": 5.2, \"riskScore\": 0.8}\n\n      63 |     expect(evt).toHaveProperty('id');\n      64 |     expect(evt).toHaveProperty('magnitude');\n    > 65 |     expect(evt).toHaveProperty('place');\n         |                 ^\n      66 |   }, 20000);\n      67 | });\n      68 |\n\n      at toHaveProperty (__tests__/e2e.backend.mock.test.js:65:17)\n      at Generator.call (__tests__/e2e.backend.mock.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/e2e.backend.mock.test.js:2:1)\n      at asyncGeneratorStep (__tests__/e2e.backend.mock.test.js:2:1)\n      at asyncGeneratorStep (__tests__/e2e.backend.mock.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/e2e.backend.mock.test.js","startTime":1760404968838,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Eternal Vigilance routes"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes GET /api/eternal-vigilance/state returns state","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"GET /api/eternal-vigilance/state returns state"},{"ancestorTitles":["Eternal Vigilance routes"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes POST /api/eternal-vigilance/start triggers start","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"POST /api/eternal-vigilance/start triggers start"},{"ancestorTitles":["Eternal Vigilance routes"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes POST /api/eternal-vigilance/report returns markdown","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"POST /api/eternal-vigilance/report returns markdown"},{"ancestorTitles":["Eternal Vigilance routes"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes POST /api/eternal-vigilance/emit requires message","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"POST /api/eternal-vigilance/emit requires message"},{"ancestorTitles":["Eternal Vigilance routes"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Eternal Vigilance routes POST /api/eternal-vigilance/emit with message succeeds","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"POST /api/eternal-vigilance/emit with message succeeds"}],"endTime":1760404973507,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.eternalVigilance.test.js","startTime":1760404970447,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createApp bootstrap (unit)"],"duration":1064,"failureDetails":[],"failureMessages":[],"fullName":"createApp bootstrap (unit) mounts basic routes and enforces bearerAuth","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"mounts basic routes and enforces bearerAuth"}],"endTime":1760404973520,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/index.unit.test.js","startTime":1760404970311,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["App integration routes (createApp)"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"App integration routes (createApp) responds to /api/health","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"responds to /api/health"},{"ancestorTitles":["App integration routes (createApp)"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"App integration routes (createApp) responds to /api/platform-status","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"responds to /api/platform-status"},{"ancestorTitles":["App integration routes (createApp)"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"App integration routes (createApp) requires auth for /api/ethical-assessment and returns 401 without token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"requires auth for /api/ethical-assessment and returns 401 without token"},{"ancestorTitles":["App integration routes (createApp)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"App integration routes (createApp) allows authorized access to /api/ethical-assessment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"allows authorized access to /api/ethical-assessment"},{"ancestorTitles":["App integration routes (createApp)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"App integration routes (createApp) handles missing routes gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"handles missing routes gracefully"}],"endTime":1760404973559,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.integration.test.js","startTime":1760404970339,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Pricing routes","pricing-plans"],"duration":30,"failureDetails":[{"matcherResult":{"actual":200,"expected":404,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 200","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 200\n    at toBe (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:21:26)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Pricing routes pricing-plans returns 404 when file not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"returns 404 when file not found"},{"ancestorTitles":["Pricing routes","pricing-plans"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Pricing routes pricing-plans returns mapped plans when file contains plans array","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns mapped plans when file contains plans array"},{"ancestorTitles":["Pricing routes","pricing"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Pricing routes pricing returns 500 when protocol not available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns 500 when protocol not available"},{"ancestorTitles":["Pricing routes","pricing"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Pricing routes pricing returns structured segments when protocol present","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns structured segments when protocol present"}],"endTime":1760404973563,"message":"  ● Pricing routes › pricing-plans › returns 404 when file not found\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 200\n\n      19 |       jest.spyOn(realFs, 'existsSync').mockReturnValue(false);\n      20 |       const res = await request(app).get('/api/pricing-plans');\n    > 21 |       expect(res.status).toBe(404);\n         |                          ^\n      22 |     });\n      23 |\n      24 |     it('returns mapped plans when file contains plans array', async () => {\n\n      at toBe (__tests__/routes.pricing.test.js:21:26)\n      at Generator.call (__tests__/routes.pricing.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n      at asyncGeneratorStep (__tests__/routes.pricing.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.pricing.test.js","startTime":1760404968753,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Dashboard routes"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard routes returns fallback payload when DB is empty","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns fallback payload when DB is empty"},{"ancestorTitles":["Dashboard routes"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard routes builds payload from DB records when present","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"builds payload from DB records when present"}],"endTime":1760404973575,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/routes.dashboard.test.js","startTime":1760404970405,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["WorldBankIntegration","getKeyEconomicData"],"duration":811,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"country\": \"COL\", \"indicators\": {\"DT.DOD.DECT.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FI.RES.TOTL.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FP.CPI.TOTL.ZG\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"NY.GDP.PCAP.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"PA.NUS.FCRF\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"SL.UEM.TOTL.ZS\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}}, \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"country\": \"COL\", \"indicators\": {\"DT.DOD.DECT.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FI.RES.TOTL.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FP.CPI.TOTL.ZG\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"NY.GDP.PCAP.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"PA.NUS.FCRF\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"SL.UEM.TOTL.ZS\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}}, \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:29:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)"],"fullName":"WorldBankIntegration getKeyEconomicData should return mock data when FORCE_MOCKS is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return mock data when FORCE_MOCKS is true"},{"ancestorTitles":["WorldBankIntegration","getKeyEconomicData"],"duration":755,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getKeyEconomicData should fetch real data when not mocked","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fetch real data when not mocked"},{"ancestorTitles":["WorldBankIntegration","getKeyEconomicData"],"duration":723,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getKeyEconomicData should handle API errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API errors gracefully"},{"ancestorTitles":["WorldBankIntegration","getKeyEconomicData"],"duration":679,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getKeyEconomicData should handle network errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network errors"},{"ancestorTitles":["WorldBankIntegration","getFoodSecurityData"],"duration":105,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"countries\": [\"COL\"], \"data\": {\"COL\": {\"country\": \"MockCountry\", \"indicator\": \"Prevalence of undernourishment (% of population)\", \"value\": 7.5, \"year\": \"2023\"}}, \"indicator\": \"SN.ITK.DEFC.ZS\", \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path, value)\n\nExpected path: \"isMock\"\nReceived path: []\n\nExpected value: true\nReceived value: {\"countries\": [\"COL\"], \"data\": {\"COL\": {\"country\": \"MockCountry\", \"indicator\": \"Prevalence of undernourishment (% of population)\", \"value\": 7.5, \"year\": \"2023\"}}, \"indicator\": \"SN.ITK.DEFC.ZS\", \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}\n    at toHaveProperty (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:67:22)\n    at Generator.call (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at Generator._invoke [as next] (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)\n    at asyncGeneratorStep (/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js:2:1)"],"fullName":"WorldBankIntegration getFoodSecurityData should return mock data when FORCE_MOCKS is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return mock data when FORCE_MOCKS is true"},{"ancestorTitles":["WorldBankIntegration","getFoodSecurityData"],"duration":107,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getFoodSecurityData should fetch real food security data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fetch real food security data"},{"ancestorTitles":["WorldBankIntegration","getFoodSecurityData"],"duration":207,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getFoodSecurityData should handle multiple countries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle multiple countries"},{"ancestorTitles":["WorldBankIntegration","getEconomicIndicators"],"duration":105,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getEconomicIndicators should sort data by date descending","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should sort data by date descending"},{"ancestorTitles":["WorldBankIntegration","getEconomicIndicators"],"duration":103,"failureDetails":[],"failureMessages":[],"fullName":"WorldBankIntegration getEconomicIndicators should handle no data available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle no data available"}],"endTime":1760404973794,"message":"  ● WorldBankIntegration › getKeyEconomicData › should return mock data when FORCE_MOCKS is true\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"country\": \"COL\", \"indicators\": {\"DT.DOD.DECT.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FI.RES.TOTL.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"FP.CPI.TOTL.ZG\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"NY.GDP.PCAP.CD\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"PA.NUS.FCRF\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}, \"SL.UEM.TOTL.ZS\": {\"country\": \"MockCountry\", \"value\": 7.5, \"year\": \"2023\"}}, \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}\n\n      27 |\n      28 |       expect(result).toHaveProperty('country', 'COL');\n    > 29 |       expect(result).toHaveProperty('isMock', true);\n         |                      ^\n      30 |       expect(result.indicators['NY.GDP.PCAP.CD']).toBeDefined();\n      31 |       expect(result.indicators['NY.GDP.PCAP.CD']).toEqual({\n      32 |         value: 6500.23,\n\n      at toHaveProperty (__tests__/integrations/worldBankIntegration.test.js:29:22)\n      at Generator.call (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/worldBankIntegration.test.js:2:1)\n\n  ● WorldBankIntegration › getFoodSecurityData › should return mock data when FORCE_MOCKS is true\n\n    expect(received).toHaveProperty(path, value)\n\n    Expected path: \"isMock\"\n    Received path: []\n\n    Expected value: true\n    Received value: {\"countries\": [\"COL\"], \"data\": {\"COL\": {\"country\": \"MockCountry\", \"indicator\": \"Prevalence of undernourishment (% of population)\", \"value\": 7.5, \"year\": \"2023\"}}, \"indicator\": \"SN.ITK.DEFC.ZS\", \"period\": {\"endYear\": \"2024\", \"startYear\": \"2020\"}}\n\n      65 |       const result = await newIntegration.getFoodSecurityData(['COL'], '2020', '2024');\n      66 |\n    > 67 |       expect(result).toHaveProperty('isMock', true);\n         |                      ^\n      68 |       expect(result.data).toHaveProperty('COL');\n      69 |       expect(result.data.COL).toHaveProperty('value');\n      70 |       expect(result.data.COL).toHaveProperty('indicator');\n\n      at toHaveProperty (__tests__/integrations/worldBankIntegration.test.js:67:22)\n      at Generator.call (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at Generator._invoke [as next] (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/worldBankIntegration.test.js:2:1)\n      at asyncGeneratorStep (__tests__/integrations/worldBankIntegration.test.js:2:1)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/integrations/worldBankIntegration.test.js","startTime":1760404968788,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["createApp and bearerAuth"],"duration":3014,"failureDetails":[],"failureMessages":[],"fullName":"createApp and bearerAuth createApp returns an express app and does not schedule background tasks when disabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"createApp returns an express app and does not schedule background tasks when disabled"},{"ancestorTitles":["createApp and bearerAuth"],"duration":184,"failureDetails":[],"failureMessages":[],"fullName":"createApp and bearerAuth bearerAuth rejects when no token and accepts when env token matches","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"bearerAuth rejects when no token and accepts when env token matches"},{"ancestorTitles":["createApp and bearerAuth"],"duration":73,"failureDetails":[],"failureMessages":[],"fullName":"createApp and bearerAuth safeImport handles import failures gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"safeImport handles import failures gracefully"},{"ancestorTitles":["createApp and bearerAuth"],"duration":82,"failureDetails":[],"failureMessages":[],"fullName":"createApp and bearerAuth ethical assessment endpoint returns data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"ethical assessment endpoint returns data"},{"ancestorTitles":["createApp and bearerAuth"],"duration":83,"failureDetails":[],"failureMessages":[],"fullName":"createApp and bearerAuth background tasks are scheduled when not disabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"background tasks are scheduled when not disabled"}],"endTime":1760404973860,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/index.createApp.test.js","startTime":1760404970240,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["sseTokenService (in-memory fallback)"],"duration":216,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService (in-memory fallback) generateToken and validateToken work in-memory","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"generateToken and validateToken work in-memory"},{"ancestorTitles":["sseTokenService (in-memory fallback)"],"duration":216,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService (in-memory fallback) token expires when generated with negative ttl","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"token expires when generated with negative ttl"},{"ancestorTitles":["sseTokenService (in-memory fallback)"],"duration":180,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService (in-memory fallback) initialize and shutdown are safe to call in test env","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"initialize and shutdown are safe to call in test env"},{"ancestorTitles":["sseTokenService in-memory fallback"],"duration":1104,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService in-memory fallback generateToken and validateToken work in memory","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"generateToken and validateToken work in memory"},{"ancestorTitles":["sseTokenService in-memory fallback"],"duration":1270,"failureDetails":[],"failureMessages":[],"fullName":"sseTokenService in-memory fallback cleanupExpired removes expired entries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"cleanupExpired removes expired entries"}],"endTime":1760404973925,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/sseTokenService.unit.test.js","startTime":1760404970239,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["mock-server integration"],"duration":1,"failureDetails":[{}],"failureMessages":["Error: timeout\n    at Socket.<anonymous> (/home/davicho/etherai-foresight-platform-main/server/__tests__/mockServer.integration.test.js:18:57)\n    at Socket.emit (node:events:524:28)\n    at emitErrorNT (node:internal/streams/destroy:169:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)"],"fullName":"mock-server integration usgs mock returns FeatureCollection with features array","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"usgs mock returns FeatureCollection with features array"}],"endTime":1760404975316,"message":"  ● mock-server integration › usgs mock returns FeatureCollection with features array\n\n    timeout\n\n      16 |       }).on('error', () => {\n      17 |         sock.destroy();\n    > 18 |         if (Date.now() - start > timeout) return reject(new Error('timeout'));\n         |                                                         ^\n      19 |         setTimeout(tryConnect, 100);\n      20 |       }).on('timeout', () => {\n      21 |         sock.destroy();\n\n      at Socket.<anonymous> (__tests__/mockServer.integration.test.js:18:57)\n","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/mockServer.integration.test.js","startTime":1760404968831,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent EthicsCouncil without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent EthicsCouncil without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Oracle without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Oracle without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent PlanningCrew without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent PlanningCrew without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent DevelopmentCrew without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent DevelopmentCrew without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Ares without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Ares without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Hephaestus without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Hephaestus without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Tyche without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Tyche without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent ConsensusAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent ConsensusAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Socrates without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Socrates without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent Telos without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent Telos without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":6440,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent DataAcquisitionAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent DataAcquisitionAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent SignalAnalysisAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent SignalAnalysisAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent CausalCorrelationAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent CausalCorrelationAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent RiskAssessmentAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent RiskAssessmentAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent ReportGenerationAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent ReportGenerationAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent PeruAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent PeruAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent DeploymentCrew without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent DeploymentCrew without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent CryptoVolatilityAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent CryptoVolatilityAgent without throwing"},{"ancestorTitles":["Bulk exercise of MetatronAgent cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Bulk exercise of MetatronAgent cases runs agent CommunityResilienceAgent without throwing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs agent CommunityResilienceAgent without throwing"}],"endTime":1760404976824,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/agents.bulk.test.js","startTime":1760404970221,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Import all source modules (smoke)"],"duration":6834,"failureDetails":[],"failureMessages":[],"fullName":"Import all source modules (smoke) imports modules in isolated node processes (no side-effect crash)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"imports modules in isolated node processes (no side-effect crash)"}],"endTime":1760404977250,"message":"","name":"/home/davicho/etherai-foresight-platform-main/server/__tests__/import_all_smoke.test.js","startTime":1760404970180,"status":"passed","summary":""}],"wasInterrupted":false}
